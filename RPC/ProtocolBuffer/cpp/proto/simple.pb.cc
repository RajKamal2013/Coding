// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/simple.proto

#include "proto/simple.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace main {
template <typename>
PROTOBUF_CONSTEXPR Simple::Simple(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_lists_)*/ {}
  ,/* _impl_._sample_lists_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.is_simple_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleDefaultTypeInternal() {}
  union {
    Simple _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleDefaultTypeInternal _Simple_default_instance_;
}  // namespace main
static ::_pb::Metadata file_level_metadata_proto_2fsimple_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fsimple_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fsimple_2eproto = nullptr;
const ::uint32_t TableStruct_proto_2fsimple_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::main::Simple, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::main::Simple, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::main::Simple, _impl_.is_simple_),
    PROTOBUF_FIELD_OFFSET(::main::Simple, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::main::Simple, _impl_.sample_lists_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::main::Simple)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::main::_Simple_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fsimple_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022proto/simple.proto\022\004main\"K\n\006Simple\022\n\n\002"
    "id\030\001 \001(\r\022\021\n\tis_simple\030\002 \001(\010\022\014\n\004name\030\003 \001("
    "\t\022\024\n\014sample_lists\030\004 \003(\005B\004Z\002./b\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2fsimple_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fsimple_2eproto = {
    false,
    false,
    117,
    descriptor_table_protodef_proto_2fsimple_2eproto,
    "proto/simple.proto",
    &descriptor_table_proto_2fsimple_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_proto_2fsimple_2eproto::offsets,
    file_level_metadata_proto_2fsimple_2eproto,
    file_level_enum_descriptors_proto_2fsimple_2eproto,
    file_level_service_descriptors_proto_2fsimple_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fsimple_2eproto_getter() {
  return &descriptor_table_proto_2fsimple_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fsimple_2eproto(&descriptor_table_proto_2fsimple_2eproto);
namespace main {
// ===================================================================

class Simple::_Internal {
 public:
};

Simple::Simple(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.Simple)
}
Simple::Simple(const Simple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Simple* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_lists_) { from._impl_.sample_lists_ }
    ,/* _impl_._sample_lists_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.is_simple_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_simple_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_simple_));
  // @@protoc_insertion_point(copy_constructor:main.Simple)
}

inline void Simple::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_lists_) { arena }
    ,/* _impl_._sample_lists_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.is_simple_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Simple::~Simple() {
  // @@protoc_insertion_point(destructor:main.Simple)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Simple::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sample_lists_.~RepeatedField();
  _impl_.name_.Destroy();
}

void Simple::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Simple::Clear() {
// @@protoc_insertion_point(message_clear_start:main.Simple)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sample_lists()->Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_simple_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_simple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Simple::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_simple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.is_simple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "main.Simple.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 sample_lists = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sample_lists(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_sample_lists(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Simple::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.Simple)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // bool is_simple = 2;
  if (this->_internal_is_simple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_simple(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "main.Simple.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated int32 sample_lists = 4;
  {
    int byte_size = _impl_._sample_lists_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(4, _internal_sample_lists(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.Simple)
  return target;
}

::size_t Simple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.Simple)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 sample_lists = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sample_lists())
    ;
    _impl_._sample_lists_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // bool is_simple = 2;
  if (this->_internal_is_simple() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Simple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Simple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Simple::GetClassData() const { return &_class_data_; }


void Simple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Simple*>(&to_msg);
  auto& from = static_cast<const Simple&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:main.Simple)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sample_lists_.MergeFrom(from._impl_.sample_lists_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_is_simple() != 0) {
    _this->_internal_set_is_simple(from._internal_is_simple());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Simple::CopyFrom(const Simple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.Simple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simple::IsInitialized() const {
  return true;
}

void Simple::InternalSwap(Simple* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sample_lists_.InternalSwap(&other->_impl_.sample_lists_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Simple, _impl_.is_simple_)
      + sizeof(Simple::_impl_.is_simple_)
      - PROTOBUF_FIELD_OFFSET(Simple, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Simple::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fsimple_2eproto_getter, &descriptor_table_proto_2fsimple_2eproto_once,
      file_level_metadata_proto_2fsimple_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace main
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::main::Simple*
Arena::CreateMaybeMessage< ::main::Simple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::Simple >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
