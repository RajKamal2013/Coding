// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/simple.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fsimple_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fsimple_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fsimple_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fsimple_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_proto_2fsimple_2eproto;
namespace main {
class Simple;
struct SimpleDefaultTypeInternal;
extern SimpleDefaultTypeInternal _Simple_default_instance_;
}  // namespace main
PROTOBUF_NAMESPACE_OPEN
template <>
::main::Simple* Arena::CreateMaybeMessage<::main::Simple>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace main {

// ===================================================================


// -------------------------------------------------------------------

class Simple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.Simple) */ {
 public:
  inline Simple() : Simple(nullptr) {}
  ~Simple() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Simple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Simple(const Simple& from);
  Simple(Simple&& from) noexcept
    : Simple() {
    *this = ::std::move(from);
  }

  inline Simple& operator=(const Simple& from) {
    CopyFrom(from);
    return *this;
  }
  inline Simple& operator=(Simple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Simple& default_instance() {
    return *internal_default_instance();
  }
  static inline const Simple* internal_default_instance() {
    return reinterpret_cast<const Simple*>(
               &_Simple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Simple& a, Simple& b) {
    a.Swap(&b);
  }
  inline void Swap(Simple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Simple* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Simple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Simple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Simple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Simple& from) {
    Simple::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Simple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "main.Simple";
  }
  protected:
  explicit Simple(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleListsFieldNumber = 4,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kIsSimpleFieldNumber = 2,
  };
  // repeated int32 sample_lists = 4;
  int sample_lists_size() const;
  private:
  int _internal_sample_lists_size() const;

  public:
  void clear_sample_lists() ;
  ::int32_t sample_lists(int index) const;
  void set_sample_lists(int index, ::int32_t value);
  void add_sample_lists(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& sample_lists() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_sample_lists();

  private:
  ::int32_t _internal_sample_lists(int index) const;
  void _internal_add_sample_lists(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_sample_lists() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_sample_lists();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // bool is_simple = 2;
  void clear_is_simple() ;
  bool is_simple() const;
  void set_is_simple(bool value);

  private:
  bool _internal_is_simple() const;
  void _internal_set_is_simple(bool value);

  public:
  // @@protoc_insertion_point(class_scope:main.Simple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> sample_lists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _sample_lists_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t id_;
    bool is_simple_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fsimple_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Simple

// uint32 id = 1;
inline void Simple::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t Simple::id() const {
  // @@protoc_insertion_point(field_get:main.Simple.id)
  return _internal_id();
}
inline void Simple::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.Simple.id)
}
inline ::uint32_t Simple::_internal_id() const {
  return _impl_.id_;
}
inline void Simple::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// bool is_simple = 2;
inline void Simple::clear_is_simple() {
  _impl_.is_simple_ = false;
}
inline bool Simple::is_simple() const {
  // @@protoc_insertion_point(field_get:main.Simple.is_simple)
  return _internal_is_simple();
}
inline void Simple::set_is_simple(bool value) {
  _internal_set_is_simple(value);
  // @@protoc_insertion_point(field_set:main.Simple.is_simple)
}
inline bool Simple::_internal_is_simple() const {
  return _impl_.is_simple_;
}
inline void Simple::_internal_set_is_simple(bool value) {
  ;
  _impl_.is_simple_ = value;
}

// string name = 3;
inline void Simple::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Simple::name() const {
  // @@protoc_insertion_point(field_get:main.Simple.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Simple::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:main.Simple.name)
}
inline std::string* Simple::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:main.Simple.name)
  return _s;
}
inline const std::string& Simple::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Simple::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Simple::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Simple::release_name() {
  // @@protoc_insertion_point(field_release:main.Simple.name)
  return _impl_.name_.Release();
}
inline void Simple::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:main.Simple.name)
}

// repeated int32 sample_lists = 4;
inline int Simple::_internal_sample_lists_size() const {
  return _impl_.sample_lists_.size();
}
inline int Simple::sample_lists_size() const {
  return _internal_sample_lists_size();
}
inline void Simple::clear_sample_lists() {
  _internal_mutable_sample_lists()->Clear();
}
inline ::int32_t Simple::sample_lists(int index) const {
  // @@protoc_insertion_point(field_get:main.Simple.sample_lists)
  return _internal_sample_lists(index);
}
inline void Simple::set_sample_lists(int index, ::int32_t value) {
  _internal_mutable_sample_lists()->Set(index, value);
  // @@protoc_insertion_point(field_set:main.Simple.sample_lists)
}
inline void Simple::add_sample_lists(::int32_t value) {
  _internal_add_sample_lists(value);
  // @@protoc_insertion_point(field_add:main.Simple.sample_lists)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& Simple::sample_lists() const {
  // @@protoc_insertion_point(field_list:main.Simple.sample_lists)
  return _internal_sample_lists();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* Simple::mutable_sample_lists() {
  // @@protoc_insertion_point(field_mutable_list:main.Simple.sample_lists)
  return _internal_mutable_sample_lists();
}

inline ::int32_t Simple::_internal_sample_lists(int index) const {
  return _internal_sample_lists().Get(index);
}
inline void Simple::_internal_add_sample_lists(::int32_t value) {
  _internal_mutable_sample_lists()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& Simple::_internal_sample_lists() const {
  return _impl_.sample_lists_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* Simple::_internal_mutable_sample_lists() {
  return &_impl_.sample_lists_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace main


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fsimple_2eproto_2epb_2eh
