STL

----------------------------------- map -------------------------------


unorder map ->

std::unordered_map<std::string, int> wordMap({{ "First", 1 },{ "Second", 2 },{ "Third", 3 }});

std::unordered_map<std::string, int>::iterator it = wordMap.begin();

// Iterate over the map using iterator
while(it != wordMap.end())
{
    std::cout<<it->first << " :: "<<it->second<<std::endl;
    it++;
}

for (std::pair<std::string, int> element : wordMap)
{
    std::cout << element.first << " :: " << element.second << std::endl;
}



----------------------------------- vector ----------------------------------
for(vector<int>::iterator   it = vec_of_num.begin();
                                it != vec_of_num.end();
                                it++ )
    {
        cout<<*it<<", ";
    }


-----------------------------------------queue ---------------------------------
#include <queue>
queue < int > ourQueue;
ourQueue.emplace( 3 ); or push()
ourQueue.emplace( 6 );
ourQueue.emplace( 7 );
ourQueue.pop();
int iTemp = ourQueue.front();
int lTemp = ourQueue.back();

while( ! ourQueue.empty() )
{
     int iTemp = ourQueue.front();
     cout<<iTemp<<endl;
     ourQueue.pop();
}
ourQueue.size()

   queue<int> gquiz;
    gquiz.push(10);
    gquiz.push(20);
    gquiz.push(30);

    cout << "The queue gquiz is : ";
    showq(gquiz);

    cout << "\ngquiz.size() : " << gquiz.size();
    cout << "\ngquiz.front() : " << gquiz.front();
    cout << "\ngquiz.back() : " << gquiz.back();

    cout << "\ngquiz.pop() : "
    gquiz.pop();

-------------------------------- stack --------------------------------
#include <stack>
empty()
push() -> top to stack
pop()
size()
top()
 stack<int> stack;
    stack.push(21);
    stack.push(22);
    stack.push(24);
    stack.push(25);

         stack.pop();
    stack.pop();

    while (!stack.empty()) {
        cout << ' ' << stack.top();
        stack.pop();
    }



-----------------------Array -> dynamoc -----------------------------------
int *v = new int[size];


 set<int, greater<int> > s1;
 #include< bits/stdc++.h
 set < int > s;
 unordered_set < int > us;
 multiset < int > ms;

 insert()
 find()
 empty()
 size()
 begin()
 end()
 set<int >::iterator it
 erase()
 clear()


    // empty set container
    set<int, greater<int> > s1;

    // insert elements in random order
    s1.insert(40);
    s1.insert(30);
    s1.insert(60);
    s1.insert(20);
    s1.insert(50);
    set<int, greater<int> >::iterator itr;
    cout << "\nThe set s1 is : \n";
    for (itr = s1.begin(); itr != s1.end(); itr++)
    {
        cout << *itr<<" ";
    }
    cout << endl;
    s2.erase(s2.begin(), s2.find(30))




------------------priority Queue ------------------------------


priority_queue<int> g = gq;
 priority_queue<int> gquiz;
    gquiz.push(10);
    gquiz.push(30);
    gquiz.push(20);
    gquiz.push(5);
    gquiz.push(1);
    gquiz.pop();

       priority_queue<int, vector<int>, greater<int> > g = gq;
gquiz.push(10);
    gquiz.push(30);
    gquiz.push(20);
    gquiz.push(5);
    gquiz.push(1);

 priority_queue<int> variable_name;
 push
 pop
 emplace
 size
 empty

priority_queue<int, vector<int>, greater<int> > g
 min heap =>
 priority_queue <int, vector<int>, greater<int>> q;


 http://neutrofoton.github.io/blog/2016/12/29/c-plus-plus-priority-queue-with-comparator/




---------------------------------------STL----------------------------------------

1. Pair

#include <utility>

pair<int, char> Pair;
Pair.first = 100;
Pair.second = 'G'

pair  g2(1, 'a');
pair <string, double> PAIR3 ;
pair Pair3 = make_pair ("GeeksForGeeks is Best",4.56);

g2=g1
=, ==,



------------------------------------

2. list

list<int> l1;
l1.push_back(2);
l1.push_front(1);
l1.pop_front()
l2.pop_front
int val = l1.front();
int val = l1.back();
empty()
insert()
remove()
begin()
end()


iterator :-
list<int> :: iterator it;
for (it:l1.begin(); it != l1.end(); it++) {
    cout << *it;
}
cout << '\n';


list<int>::iterator it = list1.begin();
advance(it, 2);
list1.insert(it, 5); -> insert before at position 3

demoList.remove(20); -> delte all element with 20
demoList.reverse();
mylist.sort();

Result.poly.sort(SortDescending());
struct SortDescending
{
    bool operator()(const term& t1, const term& t2) const
    {
        return t2.pow < t1.pow;
    }
};


listofPlayers.sort([](const Player & player1, const Player & player2)
        {
            if(player1.name == player2.name)
                return player1 < player2;
            return player1.name < player2.name;
        });


https://thispointer.com/c-how-to-sort-a-list-of-objects-with-custom-comparator-or-lambda-function/

------------------------------------------------------

2. vector






---------------------------------------------------------
3. dequeue
Double ended queues are sequence containers with the feature of expansion and contraction on both the ends.
They are similar to vectors, but are more efficient in case of insertion and deletion of elements. Unlike vectors, contiguous storage allocation may not be guaranteed.
Double Ended Queues are basically an implementation of the data structure double ended queue. A queue data structure allows insertion only at the end and deletion from the front.
This is like a queue in real life, wherein people are removed from the front and added at the back. Double ended queues are a special case of queues where insertion and deletion
 operations are possible at both the ends.

 deque <int> gquiz;
 gquiz.push_back(10);
    gquiz.push_front(20);
    gquiz.push_back(30);
    gquiz.push_front(15);
    gquiz.size()
    gquiz.at(2)
    gquiz.front()
    gquiz.back()
    gquiz.pop_front()
    gquiz.pop_back()
    for (it = g.begin(); it != g.end(); ++it)
        cout << '\t' << *it;
    cout << '\n';

------------------------------------------------------------------------
4. queue

Queues are a type of container adaptors which operate in a first in first out (FIFO) type of arrangement. Elements are inserted at the back (end) and are
deleted from the front. Queues use an encapsulated object of deque or list
(sequential container class) as its underlying container, providing a specific set of member functions to access its elements.


empty()
size()
emplace()
front()
back()
push()
pop()

   queue<int> gquiz;
    gquiz.push(10);
    gquiz.push(20);
    gquiz.push(30);

    gquiz.size()
    gquiz.front()
    gquiz.back()
    while (!g.empty()) {
        cout << '\t' << g.front();
        g.pop();
    }

-----------------------------------------------------------------------------
5. priority_queue
priority_queue<int> gquiz; -> maxheap
priority_queue<int, vector<int>, greater<int> --> minHeap

push()
pop()
size()
top()


priority_queue<int> gquiz;
    gquiz.push(10);
    gquiz.push(30);
    gquiz.push(20);
    gquiz.push(5);
    gquiz.push(1);

priority_queue<int, vector<int>,
                       greater<int> > gquiz;
    gquiz.push(10);
    gquiz.push(30);
    gquiz.push(20);
    gquiz.push(5);
    gquiz.push(1);

-------------------------------------------------------------------------
6. stack
stack<int> S
push()
pop()
top()
size()
empty()




--------------------------------------------------------------------------
7. array
The introduction of array class from C++11 has offered a better alternative for C-style arrays. The advantages of array class over C-style array are :-


Array classes knows its own size, whereas C-style arrays lack this property. So when passing to functions, we don’t need to pass size of Array as a separate parameter.
With C-style array there is more risk of array being decayed into a pointer. Array classes don’t decay into pointers
Array classes are generally more efficient, light-weight and reliable than C-style arrays.

Operations on array :-
1. at() :- This function is used to access the elements of array.
2. get() :- This function is also used to access the elements of array. This function is not the member of array class but overloaded function from class tuple.
3. operator[] :- This is similar to C-style arrays. This method is also used to access array elements.

array<int,6> ar = {1, 2, 3, 4, 5, 6};
for ( int i=0; i<6; i++)
    cout << ar.at(i) << " ";
    cout << endl;

 for ( int i=0; i<6; i++)
    cout << ar[i] << " ";
    cout << endl;

front()
back()
size()
swap()




------------------------------------------------------------------------
8. forward_list






--------------------------------------------------------------------------
9. map

Maps are associative containers that store elements in a mapped fashion. Each element has a key value and a mapped value.
No two mapped values can have same key values.

begin()
end()
size()
empty()
insert()
erase()
clear()

 map<int, int> gquiz1;
 gquiz1.insert(pair<int, int>(1, 40));
 map<int, int>::iterator itr;
 for (itr = gquiz1.begin(); itr != gquiz1.end(); ++itr) {
        cout << '\t' << itr->first
             << '\t' << itr->second << '\n';
    }
    cout << endl;

map<int, int> gquiz2(gquiz1.begin(), gquiz1.end());

----------------------------------------------------------------------

10. set

set<int, greater<int> > s1;

 s1.insert(40);
    s1.insert(30);
    s1.insert(60);
    s1.insert(20);
    s1.insert(50);

  set<int, greater<int> >::iterator itr;
    cout << "\nThe set s1 is : \n";
    for (itr = s1.begin(); itr != s1.end(); itr++)
    {
        cout << *itr<<" ";
    }
    cout << endl;

begin()
end()
size()
empty()
insert()
erase()


------------------------------------------------------

11. unordered_set

An unordered_set is implemented using a hash table where keys are hashed into indices of a hash table so that the insertion is always randomized.
 All operations on the unordered_set takes constant time O(1) on an average which can go up to linear time O(n) in worst case which depends on the internally used hash function,
but practically they perform very well and generally provide a constant time lookup operation.

unordered_set <string> stringSet ;

    // inserting various string, same string will be stored
    // once in set

    stringSet.insert("code") ;
    stringSet.insert("in") ;
    stringSet.insert("c++") ;
    stringSet.insert("is") ;
    stringSet.insert("fast") ;

if (stringSet.find(key) == stringSet.end())
        cout << key << " not found" << endl << endl ;
    else
        cout << "Found " << key << endl << endl ;


---------------------------------------------------------------------------
12. unordered_map
unordered_map is an associated container that stores elements formed by the combination of key-value and a mapped value. The key value is used to uniquely
identify the element and the mapped value is the content associated with the key.
Both key and value can be of any type predefined or user-defined.

unordered_map<string, int> umap;
 umap["GeeksforGeeks"] = 10;
    umap["Practice"] = 20;
    umap["Contribute"] = 30;

     for (auto x : umap)
      cout << x.first << " " << x.second << endl;

// inserting value by insert function
    umap.insert(make_pair("e", 2.718));

 if (umap.find(key) == umap.end())
        cout << key << " not found\n";
    else
        cout << "Found " << key << endl;

unordered_map<string, double>:: iterator itr;
    cout << "\nAll Elements : \n";
for (itr = umap.begin(); itr != umap.end(); itr++)
    {
        // itr works as a pointer to pair<string, double>
        // type itr->first stores the key part  and
        // itr->second stores the value part
        cout << itr->first << "  " << itr->second << endl;
     }



-------------------------------------------------------------------------
13. functors

Functors are objects that can be treated as though they are a function or function pointer. Functors are most commonly used along with STLs in a scenario like following


class increment
{
private:
    int num;
public:
    increment(int n) : num(n) {  }

    // This operator overloading enables calling
    // operator function () on objects of increment
    int operator () (int arr_num) const {
        return num + arr_num;
    }
};
transform(arr, arr+n, arr, increment(to_add))

--------------------------------------------------------------------------------
14. iterators

1. begin() :- This function is used to return the beginning position of the container.

2. end() :- This function is used to return the after end position of the containe

vector<int> ar = { 1, 2, 3, 4, 5 };

      vector<int>::iterator ptr;

    // Displaying vector elements using begin() and end()
    cout << "The vector elements are : ";
    for (ptr = ar.begin(); ptr < ar.end(); ptr++)
        cout << *ptr << " ";


begin()
end()
advance()
next()
prev()



---------------------------------------------------------------------
15 Lambda




-----------------------------------------------------------------------
16 matrix






----------------------------------------------------------------------
17 maths

power ->

#include <bits/stdc++.h>
#include <iostream>
#include <cmath>

 setprecision(2)
 pow(x, y)  => x^y

    double result = pow(x, y);
    printf("%.2lf", result);

    a = (int)(pow(5, 2) + 0.5);
    printf("%d", a);



---------------------------------------------------------------
18. Strings

  std::size_t found = str.find(str2);
  if (found!=std::string::npos)
    std::cout << "first 'needle' found at: " << found << '\n';


https://www.geeksforgeeks.org/the-c-standard-template-library-stl/
1. array  -> static contiguous array
2. vector -> dynamic contiguous array
3. dequeue  --> double ended queue
4. list -> dll
5. forward_list  - >sll


1. set
2. map


1. unordered_set
2. unordered_map


1. stack
2. queue
3. priority_queue

