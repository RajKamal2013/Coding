/*
 * Copyright (c) 2011,2012 Oracle and/or its affiliates.  All rights reserved.
 * Use is subject to license terms.
 *
 * THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT
 *
 * Oracle Confidential & Highly restricted 
 * Do not distribute - PSIF Development Use Only !
 */

#ifndef	_PSIF_FW_ADDR_H
#define	_PSIF_FW_ADDR_H

#ifdef __cplusplus
extern "C" {
#endif

#include <psif_api.h>


	/*
	 * TSU VL mapping table for requests. Inputs/addressing to this table are
	 * {UF(35 UFs), tsu_qosl (High/Low BAR), tsu_sl, port}.
	 */
#define TSU_HOST_TVL_TABLE_ADDR   0x00100000L
#define TSU_HOST_TVL_TABLE_STRIDE 1
#define TSU_HOST_TVL_TABLE_DEPTH  2240

	/* Per TVL register.Maximum global credits a particular TVL can get. */
#define TSU_HOST_MAX_GLOBAL_TVL_CRDTS_ADDR   0x00101000L
#define TSU_HOST_MAX_GLOBAL_TVL_CRDTS_STRIDE 1
#define TSU_HOST_MAX_GLOBAL_TVL_CRDTS_DEPTH  128

	/*
	 * Per TVL register.Maximum private credits a particular TVL can get. The
	 * amount of credits dedicated to this TVL.
	 */
#define TSU_HOST_PRIVATE_TVL_CRDTS_ADDR   0x00101080L
#define TSU_HOST_PRIVATE_TVL_CRDTS_STRIDE 1
#define TSU_HOST_PRIVATE_TVL_CRDTS_DEPTH  128

	/* Total number of global credits assign to TVLs. */
#define TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS_ADDR   0x00101100L
#define TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS_STRIDE 1
#define TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS_DEPTH  1

	/* weight given for round robin arbitration for xiu commands. */
#define TSU_HOST_XIU_ARBITER_ADDR   0x00101101L
#define TSU_HOST_XIU_ARBITER_STRIDE 1
#define TSU_HOST_XIU_ARBITER_DEPTH  1

	/* weight given for round robin arbitration for eps commands. */
#define TSU_HOST_EPS_ARBITER_ADDR   0x00101102L
#define TSU_HOST_EPS_ARBITER_STRIDE 1
#define TSU_HOST_EPS_ARBITER_DEPTH  1

	/* Number of error credits reserved in the tsu_host llq. */
#define TSU_HOST_ERROR_CRDTS_ADDR   0x00101103L
#define TSU_HOST_ERROR_CRDTS_STRIDE 1
#define TSU_HOST_ERROR_CRDTS_DEPTH  1

	/* Data Latency skew from all clients to tsu_host. */
#define TSU_HOST_DATA_LATENCY_ADDR   0x00101104L
#define TSU_HOST_DATA_LATENCY_STRIDE 1
#define TSU_HOST_DATA_LATENCY_DEPTH  1

	/*
	 * Per TVL register. The amount of private and global credits used to this
	 * TVL.
	 */
#define TSU_HOST_TVL_CRDTS_USED_ADDR   0x00101108L
#define TSU_HOST_TVL_CRDTS_USED_STRIDE 1
#define TSU_HOST_TVL_CRDTS_USED_DEPTH  128

	/* Amount of global credits used shared among all TVLs. */
#define TSU_HOST_GLOBAL_CRDTS_USED_ADDR   0x00101188L
#define TSU_HOST_GLOBAL_CRDTS_USED_STRIDE 1
#define TSU_HOST_GLOBAL_CRDTS_USED_DEPTH  1

	/* when set puts the tsu_host in hca mode for Atomics. */
#define TSU_HOST_HCA_MODE_ADDR   0x0010118aL
#define TSU_HOST_HCA_MODE_STRIDE 1
#define TSU_HOST_HCA_MODE_DEPTH  1

	/*
	 * when set flips the compare and swap field in xiu meta_data bus in PCIe
	 * mode.
	 */
#define TSU_HOST_ENABLE_PCIE_SWAP_ADDR   0x0010118bL
#define TSU_HOST_ENABLE_PCIE_SWAP_STRIDE 1
#define TSU_HOST_ENABLE_PCIE_SWAP_DEPTH  1

	/* Handling Endianess of host Processor. */
#define TSU_HOST_LITTLE_ENDIAN_MODE_ADDR   0x0010118cL
#define TSU_HOST_LITTLE_ENDIAN_MODE_STRIDE 1
#define TSU_HOST_LITTLE_ENDIAN_MODE_DEPTH  1

	/* allocating global credits to llq in XIU */
#define TSU_HOST_XIU_LLQ_GLOBAL_CREDITS_ADDR   0x0010118dL
#define TSU_HOST_XIU_LLQ_GLOBAL_CREDITS_STRIDE 1
#define TSU_HOST_XIU_LLQ_GLOBAL_CREDITS_DEPTH  1

#define TSU_HOST_QP_BASE_ADDR_0_ADDR   0x00101194L
#define TSU_HOST_QP_BASE_ADDR_0_STRIDE 1
#define TSU_HOST_QP_BASE_ADDR_0_DEPTH  35

#define TSU_HOST_QP_BASE_ADDR_1_ADDR   0x001011d4L
#define TSU_HOST_QP_BASE_ADDR_1_STRIDE 1
#define TSU_HOST_QP_BASE_ADDR_1_DEPTH  35

#define TSU_HOST_QP_BASE_ADDR_2_ADDR   0x00101214L
#define TSU_HOST_QP_BASE_ADDR_2_STRIDE 1
#define TSU_HOST_QP_BASE_ADDR_2_DEPTH  35

	/* MRS credit debug counter. */
#define TSU_HOST_MRS_CREDIT_CNT_ADDR   0x00101256L
#define TSU_HOST_MRS_CREDIT_CNT_STRIDE 1
#define TSU_HOST_MRS_CREDIT_CNT_DEPTH  1

	/* ERR credit debug counter. */
#define TSU_HOST_ERR_CREDIT_CNT_ADDR   0x00101257L
#define TSU_HOST_ERR_CREDIT_CNT_STRIDE 1
#define TSU_HOST_ERR_CREDIT_CNT_DEPTH  1

	/* LLQ debug counter. */
#define TSU_HOST_LLQ_CNT_ADDR   0x00101258L
#define TSU_HOST_LLQ_CNT_STRIDE 1
#define TSU_HOST_LLQ_CNT_DEPTH  1

	/*
	 * EPS Address Error Interrupt status register. 1b per source (1=int
	 * triggered).
	 */
#define TSU_HOST_INT_STATUS_ADDR   0x00101259L
#define TSU_HOST_INT_STATUS_STRIDE 1
#define TSU_HOST_INT_STATUS_DEPTH  1

	/* EPS Address Error Interrupt mask register. 1b per source (1 = masked). */
#define TSU_HOST_INT_MASK_ADDR   0x0010125aL
#define TSU_HOST_INT_MASK_STRIDE 1
#define TSU_HOST_INT_MASK_DEPTH  1

	/*
	 * EPS Address Error Interrupt priority register. 1b per source (1=high,
	 * 0=low).
	 */
#define TSU_HOST_INT_PRI_ADDR   0x0010125bL
#define TSU_HOST_INT_PRI_STRIDE 1
#define TSU_HOST_INT_PRI_DEPTH  1

	/*
	 * EPS Address Error Interrupt status clear register. 1b per source (1=source
	 * will be cleared from int_status register when kick is called).
	 */
#define TSU_HOST_INT_STATUS_CLEAR_ADDR   0x0010125cL
#define TSU_HOST_INT_STATUS_CLEAR_STRIDE 1
#define TSU_HOST_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the EPS Address Error int_status clear operation. */
#define TSU_HOST_INT_STATUS_CLEAR_KICK_ADDR   0x0010125dL
#define TSU_HOST_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_HOST_INT_STATUS_CLEAR_KICK_DEPTH  1

	/*
	 * EPS address which caused the int_status.eps_address_invalid to get set.
	 */
#define TSU_HOST_EPS_ADDRESS_ADDR   0x00101400L
#define TSU_HOST_EPS_ADDRESS_STRIDE 1
#define TSU_HOST_EPS_ADDRESS_DEPTH  2

	/* ECC and Parity Errors status register. */
#define TSU_HOST_ECC_PARITY_ERRS_ADDR   0x00101440L
#define TSU_HOST_ECC_PARITY_ERRS_STRIDE 1
#define TSU_HOST_ECC_PARITY_ERRS_DEPTH  2

	/*
	 * Fatal Interrupt and Stop Mask register. 1b per source (interrupt masks:
	 * 1=masked, stop-masks: 1=error does not cause host to stop processing) ECC,
	 * or CAM Parity error if enabled, will cause a fatal interrupt. Decide
	 * whether or not to stop all host processing when this error occurs.
	 */
#define TSU_HOST_FATAL_INT_MASK_ADDR   0x00101480L
#define TSU_HOST_FATAL_INT_MASK_STRIDE 1
#define TSU_HOST_FATAL_INT_MASK_DEPTH  1

	/* Interrupt Total Moderation */
#define TSU_HOST_INT_CTRL_ADDR   0x00102000L
#define TSU_HOST_INT_CTRL_STRIDE 1
#define TSU_HOST_INT_CTRL_DEPTH  1

	/* Interrupt Channel Control 0 */
#define TSU_HOST_INT_CHAN_CTRL_0_ADDR   0x00102100L
#define TSU_HOST_INT_CHAN_CTRL_0_STRIDE 1
#define TSU_HOST_INT_CHAN_CTRL_0_DEPTH  66

	/* Interrupt Channel Control 1 */
#define TSU_HOST_INT_CHAN_CTRL_1_ADDR   0x00102180L
#define TSU_HOST_INT_CHAN_CTRL_1_STRIDE 1
#define TSU_HOST_INT_CHAN_CTRL_1_DEPTH  66

	/* Interrupt Channel Control 2 */
#define TSU_HOST_INT_CHAN_CTRL_2_ADDR   0x00102200L
#define TSU_HOST_INT_CHAN_CTRL_2_STRIDE 1
#define TSU_HOST_INT_CHAN_CTRL_2_DEPTH  66

	/* MMU Static-Configuration and Status */
#define TSU_MMU_MMU_CONFIG_ADDR   0x00200000L
#define TSU_MMU_MMU_CONFIG_STRIDE 1
#define TSU_MMU_MMU_CONFIG_DEPTH  1

	/* MMU Credit Configuration */
#define TSU_MMU_CREDIT_CONFIG_ADDR   0x00200001L
#define TSU_MMU_CREDIT_CONFIG_STRIDE 1
#define TSU_MMU_CREDIT_CONFIG_DEPTH  1

	/* PA Address Size Configuration */
#define TSU_MMU_PA_MASK_ADDR   0x00200002L
#define TSU_MMU_PA_MASK_STRIDE 1
#define TSU_MMU_PA_MASK_DEPTH  1

	/* Flush MMU and-or PTW Caches. */
#define TSU_MMU_FLUSH_CACHES_ADDR   0x00200003L
#define TSU_MMU_FLUSH_CACHES_STRIDE 1
#define TSU_MMU_FLUSH_CACHES_DEPTH  1

	/* Statistic Counters. */
#define TSU_MMU_STAT_COUNTERS_ADDR   0x00200004L
#define TSU_MMU_STAT_COUNTERS_STRIDE 1
#define TSU_MMU_STAT_COUNTERS_DEPTH  1

	/* ECC and Parity Errors. */
#define TSU_MMU_ECC_PARITY_ERRS_ADDR   0x00200008L
#define TSU_MMU_ECC_PARITY_ERRS_STRIDE 1
#define TSU_MMU_ECC_PARITY_ERRS_DEPTH  2

	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
#define TSU_MMU_UF_CONTROL_ADDR   0x00200040L
#define TSU_MMU_UF_CONTROL_STRIDE 1
#define TSU_MMU_UF_CONTROL_DEPTH  1

	/* Starts operation defined in uf_control. */
#define TSU_MMU_UF_CONTROL_KICK_ADDR   0x00200041L
#define TSU_MMU_UF_CONTROL_KICK_STRIDE 1
#define TSU_MMU_UF_CONTROL_KICK_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_MMU_INT_STATUS_ADDR   0x00200042L
#define TSU_MMU_INT_STATUS_STRIDE 1
#define TSU_MMU_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_MMU_INT_MASK_ADDR   0x00200043L
#define TSU_MMU_INT_MASK_STRIDE 1
#define TSU_MMU_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_MMU_INT_PRI_ADDR   0x00200044L
#define TSU_MMU_INT_PRI_STRIDE 1
#define TSU_MMU_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_MMU_INT_STATUS_CLEAR_ADDR   0x00200045L
#define TSU_MMU_INT_STATUS_CLEAR_STRIDE 1
#define TSU_MMU_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_MMU_INT_STATUS_CLEAR_KICK_ADDR   0x00200046L
#define TSU_MMU_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_MMU_INT_STATUS_CLEAR_KICK_DEPTH  1

	/* Uncorrectable-Fatal Error Mask */
#define TSU_MMU_UNCOR_ERR_MASK_ADDR   0x00200047L
#define TSU_MMU_UNCOR_ERR_MASK_STRIDE 1
#define TSU_MMU_UNCOR_ERR_MASK_DEPTH  1

	/*
	 * TSU VL mapping table for requests. Inputs/addressing to this table are
	 * {UF, tsu_qosl (High/Low BAR), tsu_sl}.
	 */
#define TSU_CBU_TVL_TABLE_ADDR   0x00300000L
#define TSU_CBU_TVL_TABLE_STRIDE 1
#define TSU_CBU_TVL_TABLE_DEPTH  1120

	/*
	 * Below dcb_bar address is a write to the VCB, else write to the DCB.
	 * dcb_bar = 0 applies no VCB. Below this qosl_bar address is low BAR, else
	 * is high BAR. Inputs/addressing to this table is UF.
	 */
#define TSU_CBU_SUB_BAR_ADDR_ADDR   0x00300800L
#define TSU_CBU_SUB_BAR_ADDR_STRIDE 1
#define TSU_CBU_SUB_BAR_ADDR_DEPTH  33

	/*
	 * Virtual collect buffer start offset. VCB#=vcb_start_offset + pio
	 * address[25:12]. Inputs/addressing to this table is UF.
	 */
#define TSU_CBU_VCB_START_OFFSET_ADDR   0x00300840L
#define TSU_CBU_VCB_START_OFFSET_STRIDE 1
#define TSU_CBU_VCB_START_OFFSET_DEPTH  33

	/*
	 * How many physical collect buffers are allocated to the high BAR.
	 * Inputs/addressing to this table is UF.
	 */
#define TSU_CBU_PCB_ALLOC_HIGH_ADDR   0x00300880L
#define TSU_CBU_PCB_ALLOC_HIGH_STRIDE 1
#define TSU_CBU_PCB_ALLOC_HIGH_DEPTH  33

	/*
	 * How many physical collect buffers are allocated to the low BAR.
	 * Inputs/addressing to this table is UF.
	 */
#define TSU_CBU_PCB_ALLOC_LOW_ADDR   0x003008c0L
#define TSU_CBU_PCB_ALLOC_LOW_STRIDE 1
#define TSU_CBU_PCB_ALLOC_LOW_DEPTH  33

	/*
	 * How many physical collect buffers are available. Inputs/addressing to this
	 * table is UF.
	 */
#define TSU_CBU_PCB_AVAILABLE_ADDR   0x00300900L
#define TSU_CBU_PCB_AVAILABLE_STRIDE 1
#define TSU_CBU_PCB_AVAILABLE_DEPTH  33

	/*
	 * How many physical collect buffers are used in high BAR. Inputs/addressing
	 * to this table is UF.
	 */
#define TSU_CBU_PCB_HIGH_USED_ADDR   0x00300940L
#define TSU_CBU_PCB_HIGH_USED_STRIDE 1
#define TSU_CBU_PCB_HIGH_USED_DEPTH  33

	/*
	 * How many physical collect buffers are used in low BAR. Inputs/addressing
	 * to this table is UF.
	 */
#define TSU_CBU_PCB_LOW_USED_ADDR   0x00300980L
#define TSU_CBU_PCB_LOW_USED_STRIDE 1
#define TSU_CBU_PCB_LOW_USED_DEPTH  33

	/* scoreboard init. */
#define TSU_CBU_SCBD_INIT_ADDR   0x003009c0L
#define TSU_CBU_SCBD_INIT_STRIDE 1
#define TSU_CBU_SCBD_INIT_DEPTH  1

	/* scoreboard init done status. */
#define TSU_CBU_SCBD_INIT_DONE_ADDR   0x003009c1L
#define TSU_CBU_SCBD_INIT_DONE_STRIDE 1
#define TSU_CBU_SCBD_INIT_DONE_DEPTH  1

	/* Start offset of dedicated collect buffers number for the host driver. */
#define TSU_CBU_DCB_START_OFFSET_HOST_ADDR   0x003009c2L
#define TSU_CBU_DCB_START_OFFSET_HOST_STRIDE 1
#define TSU_CBU_DCB_START_OFFSET_HOST_DEPTH  1

	/* Start offset of dedicated collect buffers number for the eps. */
#define TSU_CBU_DCB_START_OFFSET_EPS_ADDR   0x003009c3L
#define TSU_CBU_DCB_START_OFFSET_EPS_STRIDE 1
#define TSU_CBU_DCB_START_OFFSET_EPS_DEPTH  1

	/*
	 * Start offset of dedicated collect buffers number for the send queue
	 * scheduler.
	 */
#define TSU_CBU_DCB_START_OFFSET_SQS_ADDR   0x003009c4L
#define TSU_CBU_DCB_START_OFFSET_SQS_STRIDE 1
#define TSU_CBU_DCB_START_OFFSET_SQS_DEPTH  1

	/* Collect length round up to 64B for scoreboard. */
#define TSU_CBU_COLLECT_LEN_ROUNDUP_ADDR   0x003009c5L
#define TSU_CBU_COLLECT_LEN_ROUNDUP_STRIDE 1
#define TSU_CBU_COLLECT_LEN_ROUNDUP_DEPTH  1

	/* ECC error control */
#define TSU_CBU_ECC_ERR_CTRL_ADDR   0x003009c6L
#define TSU_CBU_ECC_ERR_CTRL_STRIDE 1
#define TSU_CBU_ECC_ERR_CTRL_DEPTH  1

	/* ECC status */
#define TSU_CBU_ECC_ERR_STATUS_ADDR   0x003009c7L
#define TSU_CBU_ECC_ERR_STATUS_STRIDE 1
#define TSU_CBU_ECC_ERR_STATUS_DEPTH  1

	/* ECC status */
#define TSU_CBU_ECC_ERR_STATUS_CLEAR_ADDR   0x003009c8L
#define TSU_CBU_ECC_ERR_STATUS_CLEAR_STRIDE 1
#define TSU_CBU_ECC_ERR_STATUS_CLEAR_DEPTH  1

	/* Per UF to drop PIO. Inputs/addressing to this table is UF. */
#define TSU_CBU_CHOKE_ADDR   0x00300a00L
#define TSU_CBU_CHOKE_STRIDE 1
#define TSU_CBU_CHOKE_DEPTH  33

	/* UF choke status. Inputs/addressing to this table is UF. */
#define TSU_CBU_UF_STATUS_ADDR   0x00300a40L
#define TSU_CBU_UF_STATUS_STRIDE 1
#define TSU_CBU_UF_STATUS_DEPTH  33

	/* vcb clear CB number. Inputs/addressing to this table is scoreboard table. */
#define TSU_CBU_VCB_CLEAR_NUM_ADDR   0x00300a80L
#define TSU_CBU_VCB_CLEAR_NUM_STRIDE 1
#define TSU_CBU_VCB_CLEAR_NUM_DEPTH  33

	/*
	 * vcb clear. Inputs/addressing to this table is scoreboard table. Write to
	 * clear VCB, Read to get the scoreboard status
	 */
#define TSU_CBU_VCB_CLEAR_ADDR   0x00300ac0L
#define TSU_CBU_VCB_CLEAR_STRIDE 1
#define TSU_CBU_VCB_CLEAR_DEPTH  33

	/* PIO DCB start_offset. Inputs/addressing to this table is UF. */
#define TSU_CBU_DCB_START_OFFSET_ADDR   0x00300b00L
#define TSU_CBU_DCB_START_OFFSET_STRIDE 1
#define TSU_CBU_DCB_START_OFFSET_DEPTH  33

	/*
	 * Table to contain UF number for each DCB. EPS/Host drive has to write UF #
	 * to this table before it writes to the DCB. Inputs/addressing to this table
	 * is DCB#
	 */
#define TSU_CBU_DCB_UF_TABLE_ADDR   0x00301000L
#define TSU_CBU_DCB_UF_TABLE_STRIDE 1
#define TSU_CBU_DCB_UF_TABLE_DEPTH  256

	/*
	 * Status state of each DCB. The EPS/Host drive has to read this table to
	 * claim a DCB. Inputs/addressing to this table is DCB#
	 */
#define TSU_CBU_DCB_STATUS_HW_LOCK_ADDR   0x00301100L
#define TSU_CBU_DCB_STATUS_HW_LOCK_STRIDE 1
#define TSU_CBU_DCB_STATUS_HW_LOCK_DEPTH  256

	/* Status state of each DCB. Inputs/addressing to this table is DCB# */
#define TSU_CBU_DCB_STATUS_ADDR   0x00301200L
#define TSU_CBU_DCB_STATUS_STRIDE 1
#define TSU_CBU_DCB_STATUS_DEPTH  256

	/* dcb clear. Inputs/addressing to this table is scoreboard table. */
#define TSU_CBU_DCB_CLEAR_ADDR   0x00301300L
#define TSU_CBU_DCB_CLEAR_STRIDE 1
#define TSU_CBU_DCB_CLEAR_DEPTH  256

	/*
	 * DCB doorbell header/payload memory from EPS-C. Address[13:6] = DCB number
	 * and Address[5:0] = 8 bytes offset into the DCB.
	 */
#define TSU_CBU_DCB_DOORBELL_ADDR   0x00304000L
#define TSU_CBU_DCB_DOORBELL_STRIDE 1
#define TSU_CBU_DCB_DOORBELL_DEPTH  16384

	/*
	 * Initial completion credit per TVL. This is private credit for the
	 * particular TVL and can only be used by this TVL. The private completion
	 * credit indicates how many entries in tsu_cmpl are reserved for requests on
	 * this TVL.
	 */
#define TSU_RQS_PRIVATE_CMPL_CREDIT_ADDR   0x00400000L
#define TSU_RQS_PRIVATE_CMPL_CREDIT_STRIDE 1
#define TSU_RQS_PRIVATE_CMPL_CREDIT_DEPTH  128

	/*
	 * Current completion credits used per TVL. This is credit currently used by
	 * a particular TVL. This register is updated by hardware and can be read by
	 * software.
	 */
#define TSU_RQS_TVL_CMPL_CREDIT_CONSUMED_ADDR   0x00400080L
#define TSU_RQS_TVL_CMPL_CREDIT_CONSUMED_STRIDE 1
#define TSU_RQS_TVL_CMPL_CREDIT_CONSUMED_DEPTH  128

	/*
	 * Initial completion credit for the free pool. The free pool can be used by
	 * anyone being set up to use common credits. This is additional credits
	 * which can be used in addition to the private TVL completion credit. The
	 * common completion credit indicates how many entries in tsu_cmpl can be
	 * used by any TVL. It is a restriction that the TVL is set up to use common
	 * credit.
	 */
#define TSU_RQS_COMMON_CMPL_CREDIT_ADDR   0x00400100L
#define TSU_RQS_COMMON_CMPL_CREDIT_STRIDE 1
#define TSU_RQS_COMMON_CMPL_CREDIT_DEPTH  1

	/*
	 * This is register contain the number of currently consumed common
	 * completion credits. This register is updated by hardware and can be read
	 * from software.
	 */
#define TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED_ADDR   0x00400101L
#define TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED_STRIDE 1
#define TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED_DEPTH  1

#define TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0_ADDR   0x00400102L
#define TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0_STRIDE 2
#define TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0_DEPTH  1

#define TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1_ADDR   0x00400103L
#define TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1_STRIDE 2
#define TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1_DEPTH  1

	/*
	 * Initial execution credit per TVL. This is private credit for the
	 * particular TVL and can only be used by this TVL. The credit indicates how
	 * many DMA contexts are reserved for this particular TVL
	 */
#define TSU_RQS_PRIVATE_EXEC_CREDIT_ADDR   0x00400200L
#define TSU_RQS_PRIVATE_EXEC_CREDIT_STRIDE 1
#define TSU_RQS_PRIVATE_EXEC_CREDIT_DEPTH  128

	/*
	 * Current execution credit used per TVL. This is credit used by a particular
	 * TVL. This register is updated by hardware and can be read by software.
	 */
#define TSU_RQS_TVL_EXEC_CREDIT_CONSUMED_ADDR   0x00400280L
#define TSU_RQS_TVL_EXEC_CREDIT_CONSUMED_STRIDE 1
#define TSU_RQS_TVL_EXEC_CREDIT_CONSUMED_DEPTH  128

	/*
	 * Initial execution credit for the free pool. The free pool can be used by
	 * anyone being set up to use common credits. This is additional credits
	 * which can be used in addition to the private TVL execution credit. The
	 * common execution credit indicates how many DMA contexts can be used by any
	 * TVL. It is a restriction that the TVL is set up to use common credit.
	 */
#define TSU_RQS_COMMON_EXEC_CREDIT_ADDR   0x00400300L
#define TSU_RQS_COMMON_EXEC_CREDIT_STRIDE 1
#define TSU_RQS_COMMON_EXEC_CREDIT_DEPTH  1

	/*
	 * This register contain the number of currently consumed common execution
	 * credits. The register is updated by hardware and can be read from
	 * software.
	 */
#define TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED_ADDR   0x00400301L
#define TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED_STRIDE 1
#define TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED_DEPTH  1

#define TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0_ADDR   0x00400302L
#define TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0_STRIDE 2
#define TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0_DEPTH  1

#define TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1_ADDR   0x00400303L
#define TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1_STRIDE 2
#define TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1_DEPTH  1

	/*
	 * Port1 SL to VL mapping tables. One entry in this table is the SL to VL
	 * mapping table for one UF.
	 */
#define TSU_RQS_P1_SL2VL_ADDR   0x00400400L
#define TSU_RQS_P1_SL2VL_STRIDE 1
#define TSU_RQS_P1_SL2VL_DEPTH  35

	/*
	 * Port2 SL to VL mapping tables. There is one table per UF. The table is
	 * implemented as one register.
	 */
#define TSU_RQS_P2_SL2VL_ADDR   0x00400440L
#define TSU_RQS_P2_SL2VL_STRIDE 1
#define TSU_RQS_P2_SL2VL_DEPTH  35

	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
#define TSU_RQS_P1_OWN_LID_BASE_ADDR   0x00400800L
#define TSU_RQS_P1_OWN_LID_BASE_STRIDE 1
#define TSU_RQS_P1_OWN_LID_BASE_DEPTH  35

	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
#define TSU_RQS_P2_OWN_LID_BASE_ADDR   0x00400840L
#define TSU_RQS_P2_OWN_LID_BASE_STRIDE 1
#define TSU_RQS_P2_OWN_LID_BASE_DEPTH  35

	/*
	 * Port1 enable bits per UF. If bit is set, the corresponding GID and LID
	 * table entries are valid.
	 */
#define TSU_RQS_P1_PORT_ENABLE_ADDR   0x00400880L
#define TSU_RQS_P1_PORT_ENABLE_STRIDE 1
#define TSU_RQS_P1_PORT_ENABLE_DEPTH  1

	/*
	 * Port2 enable bits per UF. If bit is set, the corresponding GID and LID
	 * table entries are valid.
	 */
#define TSU_RQS_P2_PORT_ENABLE_ADDR   0x00400881L
#define TSU_RQS_P2_PORT_ENABLE_STRIDE 1
#define TSU_RQS_P2_PORT_ENABLE_DEPTH  1

	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
#define TSU_RQS_P1_SMP_ALLOWED_ADDR   0x00400882L
#define TSU_RQS_P1_SMP_ALLOWED_STRIDE 1
#define TSU_RQS_P1_SMP_ALLOWED_DEPTH  1

	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
#define TSU_RQS_P2_SMP_ALLOWED_ADDR   0x00400883L
#define TSU_RQS_P2_SMP_ALLOWED_STRIDE 1
#define TSU_RQS_P2_SMP_ALLOWED_DEPTH  1

	/* Kick FIFO entries in use per UF */
#define TSU_RQS_KICK_FIFO_UF_INUSE_ADDR   0x00400884L
#define TSU_RQS_KICK_FIFO_UF_INUSE_STRIDE 1
#define TSU_RQS_KICK_FIFO_UF_INUSE_DEPTH  35

	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
#define TSU_RQS_P1_GID_FORWARDING_TABLE_ADDR   0x00402000L
#define TSU_RQS_P1_GID_FORWARDING_TABLE_STRIDE 1
#define TSU_RQS_P1_GID_FORWARDING_TABLE_DEPTH  67

	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
#define TSU_RQS_P2_GID_FORWARDING_TABLE_ADDR   0x00402400L
#define TSU_RQS_P2_GID_FORWARDING_TABLE_STRIDE 1
#define TSU_RQS_P2_GID_FORWARDING_TABLE_DEPTH  67

	/*
	 * Per VL register (0-7: Port 0 VL0-7, 8: Port 0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). Maximum global buffer a particular VL can get.
	 */
#define TSU_DMA_MAX_ALLOC_VL_BUFF_ADDR   0x00500000L
#define TSU_DMA_MAX_ALLOC_VL_BUFF_STRIDE 1
#define TSU_DMA_MAX_ALLOC_VL_BUFF_DEPTH  20

	/*
	 * Per VL register (0-7: Port0 VL0-7, 8: Port0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). The amount of buffer dedicated to this VL.
	 */
#define TSU_DMA_PRIVATE_VL_BUFF_ADDR   0x00500020L
#define TSU_DMA_PRIVATE_VL_BUFF_STRIDE 1
#define TSU_DMA_PRIVATE_VL_BUFF_DEPTH  20

	/*
	 * Per VL register (0-7: Port0 VL0-7, 8: Port0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). The amount of dedicated and global buffer used to this VL.
	 */
#define TSU_DMA_VL_BUFF_USED_ADDR   0x00500040L
#define TSU_DMA_VL_BUFF_USED_STRIDE 1
#define TSU_DMA_VL_BUFF_USED_DEPTH  20

	/* Amount of global buffer used shared among all VLs. */
#define TSU_DMA_GLOBAL_BUFF_USED_ADDR   0x00500054L
#define TSU_DMA_GLOBAL_BUFF_USED_STRIDE 1
#define TSU_DMA_GLOBAL_BUFF_USED_DEPTH  1

	/* Num of 256B block DMA buffer check-out */
#define TSU_DMA_NUM_OF_BUF_CO_ADDR   0x00500055L
#define TSU_DMA_NUM_OF_BUF_CO_STRIDE 1
#define TSU_DMA_NUM_OF_BUF_CO_DEPTH  1

	/* Num of 256B block DMA buffer check-in */
#define TSU_DMA_NUM_OF_BUF_CI_ADDR   0x00500056L
#define TSU_DMA_NUM_OF_BUF_CI_STRIDE 1
#define TSU_DMA_NUM_OF_BUF_CI_DEPTH  1

	/* Number of RQS command to DMA */
#define TSU_DMA_NUM_OF_CNTXTLLQ_INBUN_ADDR   0x00500057L
#define TSU_DMA_NUM_OF_CNTXTLLQ_INBUN_STRIDE 1
#define TSU_DMA_NUM_OF_CNTXTLLQ_INBUN_DEPTH  1

	/* Number of Context LLQ pop */
#define TSU_DMA_NUM_OF_CNTXTLLQ_POP_ADDR   0x00500058L
#define TSU_DMA_NUM_OF_CNTXTLLQ_POP_STRIDE 1
#define TSU_DMA_NUM_OF_CNTXTLLQ_POP_DEPTH  1

	/* Number of Context LLQ ready to go set */
#define TSU_DMA_NUM_OF_CNTXTLLQ_R2G_ADDR   0x00500059L
#define TSU_DMA_NUM_OF_CNTXTLLQ_R2G_STRIDE 1
#define TSU_DMA_NUM_OF_CNTXTLLQ_R2G_DEPTH  1

	/* Number of IBPB command from DMA */
#define TSU_DMA_NUM_OF_IBPB_CMD_ADDR   0x0050005aL
#define TSU_DMA_NUM_OF_IBPB_CMD_STRIDE 1
#define TSU_DMA_NUM_OF_IBPB_CMD_DEPTH  1

	/* Number of CMPL command from DMA */
#define TSU_DMA_NUM_OF_CMPL_CMD_ADDR   0x0050005bL
#define TSU_DMA_NUM_OF_CMPL_CMD_STRIDE 1
#define TSU_DMA_NUM_OF_CMPL_CMD_DEPTH  1

	/* Number of QPS RD command from DMA */
#define TSU_DMA_NUM_OF_QPS_RD_CMD_ADDR   0x0050005cL
#define TSU_DMA_NUM_OF_QPS_RD_CMD_STRIDE 1
#define TSU_DMA_NUM_OF_QPS_RD_CMD_DEPTH  1

	/* Number of QPS RD response from QPS */
#define TSU_DMA_NUM_OF_QPS_RD_RSP_ADDR   0x0050005dL
#define TSU_DMA_NUM_OF_QPS_RD_RSP_STRIDE 1
#define TSU_DMA_NUM_OF_QPS_RD_RSP_DEPTH  1

	/* Number of QPS WR command from DMA */
#define TSU_DMA_NUM_OF_QPS_WR_CMD_ADDR   0x0050005eL
#define TSU_DMA_NUM_OF_QPS_WR_CMD_STRIDE 1
#define TSU_DMA_NUM_OF_QPS_WR_CMD_DEPTH  1

	/* Number of QPS WR response from QPS */
#define TSU_DMA_NUM_OF_QPS_WR_RSP_ADDR   0x0050005fL
#define TSU_DMA_NUM_OF_QPS_WR_RSP_STRIDE 1
#define TSU_DMA_NUM_OF_QPS_WR_RSP_DEPTH  1

	/* Number of packet in the packet LLQ */
#define TSU_DMA_NUM_OF_PKTLLQ_INBUN_ADDR   0x00500060L
#define TSU_DMA_NUM_OF_PKTLLQ_INBUN_STRIDE 1
#define TSU_DMA_NUM_OF_PKTLLQ_INBUN_DEPTH  1

	/* Number of Packet LLQ pop */
#define TSU_DMA_NUM_OF_PKTLLQ_POP_ADDR   0x00500061L
#define TSU_DMA_NUM_OF_PKTLLQ_POP_STRIDE 1
#define TSU_DMA_NUM_OF_PKTLLQ_POP_DEPTH  1

	/* Number of Packet LLQ ready to go set */
#define TSU_DMA_NUM_OF_PKTLLQ_R2G_ADDR   0x00500062L
#define TSU_DMA_NUM_OF_PKTLLQ_R2G_STRIDE 1
#define TSU_DMA_NUM_OF_PKTLLQ_R2G_DEPTH  1

	/* Num of payload DMA command */
#define TSU_DMA_NUM_OF_PYLD_CMD_ADDR   0x00500063L
#define TSU_DMA_NUM_OF_PYLD_CMD_STRIDE 1
#define TSU_DMA_NUM_OF_PYLD_CMD_DEPTH  1

	/* Num of payload DMA response */
#define TSU_DMA_NUM_OF_PYLD_RSP_ADDR   0x00500064L
#define TSU_DMA_NUM_OF_PYLD_RSP_STRIDE 1
#define TSU_DMA_NUM_OF_PYLD_RSP_DEPTH  1

	/* Num of sge DMA command */
#define TSU_DMA_NUM_OF_SGE_CMD_ADDR   0x00500065L
#define TSU_DMA_NUM_OF_SGE_CMD_STRIDE 1
#define TSU_DMA_NUM_OF_SGE_CMD_DEPTH  1

	/* Num of sge DMA response */
#define TSU_DMA_NUM_OF_SGE_RSP_ADDR   0x00500066L
#define TSU_DMA_NUM_OF_SGE_RSP_STRIDE 1
#define TSU_DMA_NUM_OF_SGE_RSP_DEPTH  1

	/* Num of LSO buffer used */
#define TSU_DMA_LSO_BUF_USED_ADDR   0x00500067L
#define TSU_DMA_LSO_BUF_USED_STRIDE 1
#define TSU_DMA_LSO_BUF_USED_DEPTH  1

	/* ECC error control */
#define TSU_DMA_ECC_ERR_CTRL_ADDR   0x00500068L
#define TSU_DMA_ECC_ERR_CTRL_STRIDE 1
#define TSU_DMA_ECC_ERR_CTRL_DEPTH  1

	/* ECC status */
#define TSU_DMA_ECC_ERR_STATUS_ADDR   0x00500069L
#define TSU_DMA_ECC_ERR_STATUS_STRIDE 1
#define TSU_DMA_ECC_ERR_STATUS_DEPTH  1

	/* ECC status */
#define TSU_DMA_ECC_ERR_STATUS_CLEAR_ADDR   0x0050006aL
#define TSU_DMA_ECC_ERR_STATUS_CLEAR_STRIDE 1
#define TSU_DMA_ECC_ERR_STATUS_CLEAR_DEPTH  1

	/*
	 * IB link speed per port. 0=EDR, 1=QDR, 2=DDR, 3=SDR. Address to the
	 * Register Table: {uf, port}
	 */
#define TSU_DMA_LINK_SPEED_ADDR   0x00500080L
#define TSU_DMA_LINK_SPEED_STRIDE 1
#define TSU_DMA_LINK_SPEED_DEPTH  70

	/*
	 * IB link width per port. 0=X4 and 1=X1. Address to the Register Table: {uf,
	 * port}
	 */
#define TSU_DMA_LINK_WIDTH_ADDR   0x00500100L
#define TSU_DMA_LINK_WIDTH_STRIDE 1
#define TSU_DMA_LINK_WIDTH_DEPTH  70

	/*
	 * Maximum number of payload read 256B buffer per UF. Address to the Register
	 * Table:uf
	 */
#define TSU_DMA_UF_TRANS_MAX_ADDR   0x00500180L
#define TSU_DMA_UF_TRANS_MAX_STRIDE 1
#define TSU_DMA_UF_TRANS_MAX_DEPTH  35

	/* Number of payload read transaction per UF. Address to the Register Table:uf */
#define TSU_DMA_UF_TRANS_USED_ADDR   0x005001c0L
#define TSU_DMA_UF_TRANS_USED_STRIDE 1
#define TSU_DMA_UF_TRANS_USED_DEPTH  35

	/*
	 * MAC address #0 table for uf 0-33. Inputs/addressing to this table are {UF,
	 * port}.
	 */
#define TSU_DMA_MAC_ADDR0_TABLE_ADDR   0x00500200L
#define TSU_DMA_MAC_ADDR0_TABLE_STRIDE 1
#define TSU_DMA_MAC_ADDR0_TABLE_DEPTH  68

	/*
	 * MAC address #1 table for uf 0-33. Inputs/addressing to this table are {UF,
	 * port}.
	 */
#define TSU_DMA_MAC_ADDR1_TABLE_ADDR   0x00500280L
#define TSU_DMA_MAC_ADDR1_TABLE_STRIDE 1
#define TSU_DMA_MAC_ADDR1_TABLE_DEPTH  68

	/*
	 * VID table for uf 0-33. Inputs/addressing to this table are {UF, port,
	 * index}.
	 */
#define TSU_DMA_VID_TABLE_ADDR   0x00500400L
#define TSU_DMA_VID_TABLE_STRIDE 1
#define TSU_DMA_VID_TABLE_DEPTH  272

	/* MAC control per port per UF 0-33. Address to the Register Table: {uf port} */
#define TSU_DMA_MAC_CTRL_ADDR   0x00500600L
#define TSU_DMA_MAC_CTRL_STRIDE 1
#define TSU_DMA_MAC_CTRL_DEPTH  68

	/* Size of the EoIB and IPoIB header */
#define TSU_DMA_PPTY_HDR_LENGTH_ADDR   0x00500680L
#define TSU_DMA_PPTY_HDR_LENGTH_STRIDE 1
#define TSU_DMA_PPTY_HDR_LENGTH_DEPTH  1

	/* Mask bit to the TCP flags for the LSO segments */
#define TSU_DMA_TCP_FLAGS_MASK_ADDR   0x00500682L
#define TSU_DMA_TCP_FLAGS_MASK_STRIDE 1
#define TSU_DMA_TCP_FLAGS_MASK_DEPTH  1

	/* Control for ip checksum tcp checksum udp checksum and ethernet padding */
#define TSU_DMA_OFFLOAD_CTRL_ADDR   0x00500683L
#define TSU_DMA_OFFLOAD_CTRL_STRIDE 1
#define TSU_DMA_OFFLOAD_CTRL_DEPTH  1

	/*
	 * VLAN membership table per UF 0-33. Inputs/addressing to this table is {UF,
	 * vid[11:6}}.
	 */
#define TSU_DMA_VLAN_MEMBER_TABLE_ADDR   0x00501000L
#define TSU_DMA_VLAN_MEMBER_TABLE_STRIDE 1
#define TSU_DMA_VLAN_MEMBER_TABLE_DEPTH  2176

	/* Outer VLAN Ethernet type */
#define TSU_DMA_OUTER_VLAN_TYPE_ADDR   0x00502000L
#define TSU_DMA_OUTER_VLAN_TYPE_STRIDE 1
#define TSU_DMA_OUTER_VLAN_TYPE_DEPTH  34

	/* Outer VLAN Ethernet type */
#define TSU_DMA_INNER_VLAN_TYPE_ADDR   0x00502040L
#define TSU_DMA_INNER_VLAN_TYPE_STRIDE 1
#define TSU_DMA_INNER_VLAN_TYPE_DEPTH  34

	/* Shared P-Key table for all UFs on this port. */
#define TSU_IBPB_P1_PKEY_TABLE_ADDR   0x00600000L
#define TSU_IBPB_P1_PKEY_TABLE_STRIDE 1
#define TSU_IBPB_P1_PKEY_TABLE_DEPTH  272

	/*
	 * Upper 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
#define TSU_IBPB_P1_GID_UPPER_ADDR   0x00600200L
#define TSU_IBPB_P1_GID_UPPER_STRIDE 1
#define TSU_IBPB_P1_GID_UPPER_DEPTH  67

	/*
	 * Lower 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
#define TSU_IBPB_P1_GID_LOWER_ADDR   0x00600300L
#define TSU_IBPB_P1_GID_LOWER_STRIDE 1
#define TSU_IBPB_P1_GID_LOWER_DEPTH  67

	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
#define TSU_IBPB_P1_OWN_LID_BASE_ADDR   0x00600400L
#define TSU_IBPB_P1_OWN_LID_BASE_STRIDE 1
#define TSU_IBPB_P1_OWN_LID_BASE_DEPTH  35

	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
#define TSU_IBPB_P1_PKEY_UF_STRIDE_ADDR   0x00600440L
#define TSU_IBPB_P1_PKEY_UF_STRIDE_STRIDE 1
#define TSU_IBPB_P1_PKEY_UF_STRIDE_DEPTH  1

	/* Shared P-Key table for all UFs on this port. */
#define TSU_IBPB_P2_PKEY_TABLE_ADDR   0x00600800L
#define TSU_IBPB_P2_PKEY_TABLE_STRIDE 1
#define TSU_IBPB_P2_PKEY_TABLE_DEPTH  272

	/*
	 * Upper 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
#define TSU_IBPB_P2_GID_UPPER_ADDR   0x00600a00L
#define TSU_IBPB_P2_GID_UPPER_STRIDE 1
#define TSU_IBPB_P2_GID_UPPER_DEPTH  67

	/* Lower 64 bits of GID for port2. The table is per UF. */
#define TSU_IBPB_P2_GID_LOWER_ADDR   0x00600b00L
#define TSU_IBPB_P2_GID_LOWER_STRIDE 1
#define TSU_IBPB_P2_GID_LOWER_DEPTH  67

	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
#define TSU_IBPB_P2_OWN_LID_BASE_ADDR   0x00600c00L
#define TSU_IBPB_P2_OWN_LID_BASE_STRIDE 1
#define TSU_IBPB_P2_OWN_LID_BASE_DEPTH  35

	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
#define TSU_IBPB_P2_PKEY_UF_STRIDE_ADDR   0x00600c40L
#define TSU_IBPB_P2_PKEY_UF_STRIDE_STRIDE 1
#define TSU_IBPB_P2_PKEY_UF_STRIDE_DEPTH  1

#define TSU_QPS_AHA_BASE_ADDR_0_ADDR   0x00700000L
#define TSU_QPS_AHA_BASE_ADDR_0_STRIDE 1
#define TSU_QPS_AHA_BASE_ADDR_0_DEPTH  35

#define TSU_QPS_AHA_BASE_ADDR_1_ADDR   0x00700040L
#define TSU_QPS_AHA_BASE_ADDR_1_STRIDE 1
#define TSU_QPS_AHA_BASE_ADDR_1_DEPTH  35

#define TSU_QPS_AHA_BASE_ADDR_2_ADDR   0x00700080L
#define TSU_QPS_AHA_BASE_ADDR_2_STRIDE 1
#define TSU_QPS_AHA_BASE_ADDR_2_DEPTH  35

#define TSU_QPS_QP_BASE_ADDR_0_ADDR   0x00700100L
#define TSU_QPS_QP_BASE_ADDR_0_STRIDE 1
#define TSU_QPS_QP_BASE_ADDR_0_DEPTH  35

#define TSU_QPS_QP_BASE_ADDR_1_ADDR   0x00700140L
#define TSU_QPS_QP_BASE_ADDR_1_STRIDE 1
#define TSU_QPS_QP_BASE_ADDR_1_DEPTH  35

#define TSU_QPS_QP_BASE_ADDR_2_ADDR   0x00700180L
#define TSU_QPS_QP_BASE_ADDR_2_STRIDE 1
#define TSU_QPS_QP_BASE_ADDR_2_DEPTH  35

	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
#define TSU_QPS_UF_CONTROL_ADDR   0x00700200L
#define TSU_QPS_UF_CONTROL_STRIDE 1
#define TSU_QPS_UF_CONTROL_DEPTH  1

	/* Starts operation defined in uf_control. */
#define TSU_QPS_UF_CONTROL_KICK_ADDR   0x00700201L
#define TSU_QPS_UF_CONTROL_KICK_STRIDE 1
#define TSU_QPS_UF_CONTROL_KICK_DEPTH  1

	/*
	 * Bitvector indicating (one bit per UF) if a UF has entries in tsu_qps or
	 * not. This could be used to verify that a UF flush has happened. XXX:
	 * Should there be multiple registers or one register per UF?
	 */
#define TSU_QPS_UF_EMPTY_ADDR   0x00700202L
#define TSU_QPS_UF_EMPTY_STRIDE 1
#define TSU_QPS_UF_EMPTY_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_QPS_INT_STATUS_ADDR   0x00700203L
#define TSU_QPS_INT_STATUS_STRIDE 1
#define TSU_QPS_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_QPS_INT_MASK_ADDR   0x00700204L
#define TSU_QPS_INT_MASK_STRIDE 1
#define TSU_QPS_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_QPS_INT_PRI_ADDR   0x00700205L
#define TSU_QPS_INT_PRI_STRIDE 1
#define TSU_QPS_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_QPS_INT_STATUS_CLEAR_ADDR   0x00700206L
#define TSU_QPS_INT_STATUS_CLEAR_STRIDE 1
#define TSU_QPS_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_QPS_INT_STATUS_CLEAR_KICK_ADDR   0x00700207L
#define TSU_QPS_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_QPS_INT_STATUS_CLEAR_KICK_DEPTH  1

	/*
	 * Stops timeout checking for UF in the uf_control register. This register
	 * must be kicked in order to make sure refcounts are not incremented for the
	 * UF to be flushed/invalidated.
	 */
#define TSU_QPS_UF_STOP_TIMEOUT_KICK_ADDR   0x00700240L
#define TSU_QPS_UF_STOP_TIMEOUT_KICK_STRIDE 1
#define TSU_QPS_UF_STOP_TIMEOUT_KICK_DEPTH  1

	/*
	 * Per UF modify/query QP command/attribute register. Only one register is
	 * implemented in hardware - one at a time. EPS implements one register per
	 * UF. When one is written, the modify data is written to modify_qp_data
	 * register before this register is written. The Modify or Query QP command
	 * is autmatically kicked when this register is written. Is one outstanding
	 * modify/query QP per UF ok, or do we need more?
	 */
#define TSU_QPS_MODIFY_QP_CTRL_ADDR   0x00700400L
#define TSU_QPS_MODIFY_QP_CTRL_STRIDE 1
#define TSU_QPS_MODIFY_QP_CTRL_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_0_ADDR   0x00700440L
#define TSU_QPS_MODIFY_QP_DATA_0_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_0_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_1_ADDR   0x00700441L
#define TSU_QPS_MODIFY_QP_DATA_1_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_1_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_2_ADDR   0x00700442L
#define TSU_QPS_MODIFY_QP_DATA_2_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_2_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_3_ADDR   0x00700443L
#define TSU_QPS_MODIFY_QP_DATA_3_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_3_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_4_ADDR   0x00700444L
#define TSU_QPS_MODIFY_QP_DATA_4_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_4_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_5_ADDR   0x00700445L
#define TSU_QPS_MODIFY_QP_DATA_5_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_5_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_6_ADDR   0x00700446L
#define TSU_QPS_MODIFY_QP_DATA_6_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_6_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_7_ADDR   0x00700447L
#define TSU_QPS_MODIFY_QP_DATA_7_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_7_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_8_ADDR   0x00700448L
#define TSU_QPS_MODIFY_QP_DATA_8_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_8_DEPTH  1

#define TSU_QPS_MODIFY_QP_DATA_9_ADDR   0x00700449L
#define TSU_QPS_MODIFY_QP_DATA_9_STRIDE 10
#define TSU_QPS_MODIFY_QP_DATA_9_DEPTH  1

	/*
	 * Kick register to start a new modify or query command. This register is
	 * written by EPS.
	 */
#define TSU_QPS_MODIFY_QP_KICK_ADDR   0x00700480L
#define TSU_QPS_MODIFY_QP_KICK_STRIDE 1
#define TSU_QPS_MODIFY_QP_KICK_DEPTH  1

	/*
	 * Status register indicating status of modify QP and query QP commands. This
	 * register is read by the EPS only.
	 */
#define TSU_QPS_MODIFY_QP_STATUS_ADDR   0x00700481L
#define TSU_QPS_MODIFY_QP_STATUS_STRIDE 1
#define TSU_QPS_MODIFY_QP_STATUS_DEPTH  1

	/*
	 * Data register containing data for the query QP command. This is read by
	 * the EPS only. The register is laid out to contain QP, primary_path and
	 * alternate path - same as it is in host memory. This is only a data bus,
	 * not using the structure psif_verbs_pkg::query_qp_t. When data is queried,
	 * and written to this register the psif_verbs_pkg::query_qp_t is cast to
	 * this structure. Please look at psif_verbs_pkg::query_qp_t for details.
	 */
#define TSU_QPS_QUERY_QP_DATA_ADDR   0x00700482L
#define TSU_QPS_QUERY_QP_DATA_STRIDE 1
#define TSU_QPS_QUERY_QP_DATA_DEPTH  24

	/*
	 * QP data register - see psif_verbs_pkg::qp_t for details on layout. This
	 * register contain the QP data information to write to QP index (HW cache
	 * index) given by the wr_qp_index CSR. This register is used to initialize
	 * QP 0/1, and is not accessible from user space. It could also be used for
	 * diagnostics.
	 */
#define TSU_QPS_WR_QP_DATA_ADDR   0x00700500L
#define TSU_QPS_WR_QP_DATA_STRIDE 1
#define TSU_QPS_WR_QP_DATA_DEPTH  16

	/*
	 * QP data register - see psif_verbs_pkg::path_info_t for details on layout.
	 * This register contain the path data to write to QP index (HW cache index)
	 * given by the wr_qp_index CSR. This register is used to initialize QP 0/1,
	 * and is not accessible from user space.
	 */
#define TSU_QPS_WR_QP_PATH_ADDR   0x00700514L
#define TSU_QPS_WR_QP_PATH_STRIDE 1
#define TSU_QPS_WR_QP_PATH_DEPTH  4

	/*
	 * QP index register. This register contain the QP index where the QP
	 * information is written to. This register is used to initialize QP 0/1, and
	 * is not accessible from user space. Set this to 0 for QP0 and 1 for QP1.
	 */
#define TSU_QPS_WR_QP_INDEX_ADDR   0x00700540L
#define TSU_QPS_WR_QP_INDEX_STRIDE 1
#define TSU_QPS_WR_QP_INDEX_DEPTH  1

	/*
	 * Kick register to start a new writing the QP information in wr_qp_data and
	 * wr_qp_path to QP index given in wr_qp_index CSR. This register is .
	 */
#define TSU_QPS_WR_QP_KICK_ADDR   0x00700541L
#define TSU_QPS_WR_QP_KICK_STRIDE 1
#define TSU_QPS_WR_QP_KICK_DEPTH  1

	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition INIT to RTR.
	 */
#define TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR_ADDR   0x00700800L
#define TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR_STRIDE 1
#define TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR_DEPTH  2

	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition RTR to RTS.
	 */
#define TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS_ADDR   0x00700802L
#define TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS_STRIDE 1
#define TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS_DEPTH  2

	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition RTS to RTS.
	 */
#define TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS_ADDR   0x00700804L
#define TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS_STRIDE 1
#define TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS_DEPTH  2

	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition from any state to RESET or ERROR.
	 */
#define TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET_ADDR   0x00700806L
#define TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET_STRIDE 1
#define TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET_DEPTH  2

	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. Legal attribute masks for QP modification for
	 * state transition from SQERR to RTS.
	 */
#define TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS_ADDR   0x00700808L
#define TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS_STRIDE 1
#define TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS_DEPTH  2

	/* Per UF refcount register. This is used for UF flushing. */
#define TSU_QPS_REF_COUNT_ADDR   0x00702000L
#define TSU_QPS_REF_COUNT_STRIDE 1
#define TSU_QPS_REF_COUNT_DEPTH  33

	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
#define TSU_CMPL_UF_CONTROL_ADDR   0x00800000L
#define TSU_CMPL_UF_CONTROL_STRIDE 1
#define TSU_CMPL_UF_CONTROL_DEPTH  1

	/* Starts operation defined in uf_control. */
#define TSU_CMPL_UF_CONTROL_KICK_ADDR   0x00800001L
#define TSU_CMPL_UF_CONTROL_KICK_STRIDE 1
#define TSU_CMPL_UF_CONTROL_KICK_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_CMPL_INT_STATUS_ADDR   0x00800002L
#define TSU_CMPL_INT_STATUS_STRIDE 1
#define TSU_CMPL_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_CMPL_INT_MASK_ADDR   0x00800003L
#define TSU_CMPL_INT_MASK_STRIDE 1
#define TSU_CMPL_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_CMPL_INT_PRI_ADDR   0x00800004L
#define TSU_CMPL_INT_PRI_STRIDE 1
#define TSU_CMPL_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_CMPL_INT_STATUS_CLEAR_ADDR   0x00800005L
#define TSU_CMPL_INT_STATUS_CLEAR_STRIDE 1
#define TSU_CMPL_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_CMPL_INT_STATUS_CLEAR_KICK_ADDR   0x00800006L
#define TSU_CMPL_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_CMPL_INT_STATUS_CLEAR_KICK_DEPTH  1

	/* Base address. */
#define TSU_CMPL_SQ_BASE_ADDR_0_ADDR   0x00800040L
#define TSU_CMPL_SQ_BASE_ADDR_0_STRIDE 1
#define TSU_CMPL_SQ_BASE_ADDR_0_DEPTH  35

	/* MMU context. */
#define TSU_CMPL_SQ_BASE_ADDR_1_ADDR   0x00800080L
#define TSU_CMPL_SQ_BASE_ADDR_1_STRIDE 1
#define TSU_CMPL_SQ_BASE_ADDR_1_DEPTH  35

	/* Num entries and extent. */
#define TSU_CMPL_SQ_BASE_ADDR_2_ADDR   0x008000c0L
#define TSU_CMPL_SQ_BASE_ADDR_2_STRIDE 1
#define TSU_CMPL_SQ_BASE_ADDR_2_DEPTH  35

#define TSU_VAL_KEY_BASE_ADDR_0_ADDR   0x00900000L
#define TSU_VAL_KEY_BASE_ADDR_0_STRIDE 1
#define TSU_VAL_KEY_BASE_ADDR_0_DEPTH  35

#define TSU_VAL_KEY_BASE_ADDR_1_ADDR   0x00900040L
#define TSU_VAL_KEY_BASE_ADDR_1_STRIDE 1
#define TSU_VAL_KEY_BASE_ADDR_1_DEPTH  35

#define TSU_VAL_KEY_BASE_ADDR_2_ADDR   0x00900080L
#define TSU_VAL_KEY_BASE_ADDR_2_STRIDE 1
#define TSU_VAL_KEY_BASE_ADDR_2_DEPTH  35

	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
#define TSU_VAL_UF_CONTROL_ADDR   0x00900100L
#define TSU_VAL_UF_CONTROL_STRIDE 1
#define TSU_VAL_UF_CONTROL_DEPTH  1

	/* Starts operation defined in uf_control. */
#define TSU_VAL_UF_CONTROL_KICK_ADDR   0x00900101L
#define TSU_VAL_UF_CONTROL_KICK_STRIDE 1
#define TSU_VAL_UF_CONTROL_KICK_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_VAL_INT_STATUS_ADDR   0x00900102L
#define TSU_VAL_INT_STATUS_STRIDE 1
#define TSU_VAL_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_VAL_INT_MASK_ADDR   0x00900103L
#define TSU_VAL_INT_MASK_STRIDE 1
#define TSU_VAL_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_VAL_INT_PRI_ADDR   0x00900104L
#define TSU_VAL_INT_PRI_STRIDE 1
#define TSU_VAL_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_VAL_INT_STATUS_CLEAR_ADDR   0x00900105L
#define TSU_VAL_INT_STATUS_CLEAR_STRIDE 1
#define TSU_VAL_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_VAL_INT_STATUS_CLEAR_KICK_ADDR   0x00900106L
#define TSU_VAL_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_VAL_INT_STATUS_CLEAR_KICK_DEPTH  1

	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
#define TSU_RQH_UF_CONTROL_ADDR   0x00a00000L
#define TSU_RQH_UF_CONTROL_STRIDE 1
#define TSU_RQH_UF_CONTROL_DEPTH  1

	/* Starts operation defined in uf_control. */
#define TSU_RQH_UF_CONTROL_KICK_ADDR   0x00a00001L
#define TSU_RQH_UF_CONTROL_KICK_STRIDE 1
#define TSU_RQH_UF_CONTROL_KICK_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_RQH_INT_STATUS_ADDR   0x00a00002L
#define TSU_RQH_INT_STATUS_STRIDE 1
#define TSU_RQH_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_RQH_INT_MASK_ADDR   0x00a00003L
#define TSU_RQH_INT_MASK_STRIDE 1
#define TSU_RQH_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_RQH_INT_PRI_ADDR   0x00a00004L
#define TSU_RQH_INT_PRI_STRIDE 1
#define TSU_RQH_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_RQH_INT_STATUS_CLEAR_ADDR   0x00a00005L
#define TSU_RQH_INT_STATUS_CLEAR_STRIDE 1
#define TSU_RQH_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_RQH_INT_STATUS_CLEAR_KICK_ADDR   0x00a00006L
#define TSU_RQH_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_RQH_INT_STATUS_CLEAR_KICK_DEPTH  1

#define TSU_RQH_QP_BASE_ADDR_0_ADDR   0x00a00080L
#define TSU_RQH_QP_BASE_ADDR_0_STRIDE 1
#define TSU_RQH_QP_BASE_ADDR_0_DEPTH  35

#define TSU_RQH_QP_BASE_ADDR_1_ADDR   0x00a000c0L
#define TSU_RQH_QP_BASE_ADDR_1_STRIDE 1
#define TSU_RQH_QP_BASE_ADDR_1_DEPTH  35

#define TSU_RQH_QP_BASE_ADDR_2_ADDR   0x00a00100L
#define TSU_RQH_QP_BASE_ADDR_2_STRIDE 1
#define TSU_RQH_QP_BASE_ADDR_2_DEPTH  35

	/*
	 * Head index register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
#define TSU_RQH_INDIRECT_EQ_SW_INDEX_WR_ADDR   0x00a00200L
#define TSU_RQH_INDIRECT_EQ_SW_INDEX_WR_STRIDE 1
#define TSU_RQH_INDIRECT_EQ_SW_INDEX_WR_DEPTH  1

	/*
	 * Tail index register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
#define TSU_RQH_INDIRECT_EQ_HW_INDEX_WR_ADDR   0x00a00201L
#define TSU_RQH_INDIRECT_EQ_HW_INDEX_WR_STRIDE 1
#define TSU_RQH_INDIRECT_EQ_HW_INDEX_WR_DEPTH  1

	/*
	 * MMU context and descriptor control register. Indirect register to write in
	 * order to get a consistent view of the complete descriptor. This is used
	 * along with the address and write register.
	 */
#define TSU_RQH_INDIRECT_EQ_CTRL_WR_ADDR   0x00a00202L
#define TSU_RQH_INDIRECT_EQ_CTRL_WR_STRIDE 1
#define TSU_RQH_INDIRECT_EQ_CTRL_WR_DEPTH  1

	/*
	 * Base address register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
#define TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR_ADDR   0x00a00203L
#define TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR_STRIDE 1
#define TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR_DEPTH  1

	/*
	 * Max number of entries and sequence number register. Indirect register to
	 * write in order to get a consistent view of the complete descriptor. This
	 * is used along with the address and write register.
	 */
#define TSU_RQH_INDIRECT_MMU_CONTEXT_WR_ADDR   0x00a00204L
#define TSU_RQH_INDIRECT_MMU_CONTEXT_WR_STRIDE 1
#define TSU_RQH_INDIRECT_MMU_CONTEXT_WR_DEPTH  1

	/*
	 * This register must be set prior to kicking a write of the indirect event
	 * queue registers.
	 */
#define TSU_RQH_INDIRECTION_ADDR_WR_ADDR   0x00a00205L
#define TSU_RQH_INDIRECTION_ADDR_WR_STRIDE 1
#define TSU_RQH_INDIRECTION_ADDR_WR_DEPTH  1

	/*
	 * When this register is written to, the content of indirect_eq_sw_index_wr,
	 * indirect_eq_hw_index_wr, indirect_eq_ctrl_wr, indirect_eq_base_addr_wr,
	 * indirect_eq_size_wr is written to event queue entry number defined by the
	 * value in the indirect_addr.
	 */
#define TSU_RQH_INDIRECT_WR_KICK_ADDR   0x00a00206L
#define TSU_RQH_INDIRECT_WR_KICK_STRIDE 1
#define TSU_RQH_INDIRECT_WR_KICK_DEPTH  1

	/*
	 * Head index register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
#define TSU_RQH_INDIRECT_EQ_SW_INDEX_RD_ADDR   0x00a00240L
#define TSU_RQH_INDIRECT_EQ_SW_INDEX_RD_STRIDE 1
#define TSU_RQH_INDIRECT_EQ_SW_INDEX_RD_DEPTH  1

	/*
	 * Tail index register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
#define TSU_RQH_INDIRECT_EQ_HW_INDEX_RD_ADDR   0x00a00241L
#define TSU_RQH_INDIRECT_EQ_HW_INDEX_RD_STRIDE 1
#define TSU_RQH_INDIRECT_EQ_HW_INDEX_RD_DEPTH  1

	/*
	 * MMU context and descriptor control register. Indirect register to read in
	 * order to get a consistent view of the complete descriptor. This is used
	 * along with the address and write register.
	 */
#define TSU_RQH_INDIRECT_EQ_CTRL_RD_ADDR   0x00a00242L
#define TSU_RQH_INDIRECT_EQ_CTRL_RD_STRIDE 1
#define TSU_RQH_INDIRECT_EQ_CTRL_RD_DEPTH  1

	/*
	 * Base address register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
#define TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD_ADDR   0x00a00243L
#define TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD_STRIDE 1
#define TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD_DEPTH  1

	/*
	 * Max number of entries and sequence number register. Indirect register to
	 * read in order to get a consistent view of the complete descriptor. This is
	 * used along with the address and read register.
	 */
#define TSU_RQH_INDIRECT_MMU_CONTEXT_RD_ADDR   0x00a00244L
#define TSU_RQH_INDIRECT_MMU_CONTEXT_RD_STRIDE 1
#define TSU_RQH_INDIRECT_MMU_CONTEXT_RD_DEPTH  1

	/*
	 * This register must be set prior to kicking a read of the indirect event
	 * queue registers.
	 */
#define TSU_RQH_INDIRECTION_ADDR_RD_ADDR   0x00a00245L
#define TSU_RQH_INDIRECTION_ADDR_RD_STRIDE 1
#define TSU_RQH_INDIRECTION_ADDR_RD_DEPTH  1

	/*
	 * When this register is written to, the content of event queue entry in
	 * indirect_addr is written to indirect_eq_sw_index_rd,
	 * indirect_eq_hw_index_rd, indirect_eq_ctrl_rd, indirect_eq_base_addr_rd,
	 * indirect_eq_size_rd. These registers can now be read as one consistent
	 * register.
	 */
#define TSU_RQH_INDIRECT_RD_KICK_ADDR   0x00a00246L
#define TSU_RQH_INDIRECT_RD_KICK_STRIDE 1
#define TSU_RQH_INDIRECT_RD_KICK_DEPTH  1

	/*
	 * Directly accessible software index. Software can update this directly
	 * without having to go through a staging read/write register.
	 */
#define TSU_RQH_EQ_SW_INDEX_ADDR   0x00a01000L
#define TSU_RQH_EQ_SW_INDEX_STRIDE 1
#define TSU_RQH_EQ_SW_INDEX_DEPTH  128

	/*
	 * Directly accessible software index. Software can update this directly
	 * without having to go through a staging read/write register.
	 */
#define TSU_RQH_EQ_HW_INDEX_ADDR   0x00a01100L
#define TSU_RQH_EQ_HW_INDEX_STRIDE 1
#define TSU_RQH_EQ_HW_INDEX_DEPTH  128

	/*
	 * Used for translating each vHCA's EQ number to the physical EQ number.
	 */
#define TSU_RQH_EQ_MAPPING_TABLE_ADDR   0x00a01200L
#define TSU_RQH_EQ_MAPPING_TABLE_STRIDE 1
#define TSU_RQH_EQ_MAPPING_TABLE_DEPTH  34

	/* EQ Overflow Status 0 EQs 0-63 */
#define TSU_RQH_EQ_OVERFLOW_STATUS_0_ADDR   0x00a01400L
#define TSU_RQH_EQ_OVERFLOW_STATUS_0_STRIDE 1
#define TSU_RQH_EQ_OVERFLOW_STATUS_0_DEPTH  1

	/* EQ Overflow Status 1 EQs 64-127 */
#define TSU_RQH_EQ_OVERFLOW_STATUS_1_ADDR   0x00a01401L
#define TSU_RQH_EQ_OVERFLOW_STATUS_1_STRIDE 1
#define TSU_RQH_EQ_OVERFLOW_STATUS_1_DEPTH  1

	/* EQ Invavlid Status 0 EQs 0-63 */
#define TSU_RQH_EQ_INVALID_STATUS_0_ADDR   0x00a01402L
#define TSU_RQH_EQ_INVALID_STATUS_0_STRIDE 1
#define TSU_RQH_EQ_INVALID_STATUS_0_DEPTH  1

	/* EQ Overflow Status 1 EQs 64-127 */
#define TSU_RQH_EQ_INVALID_STATUS_1_ADDR   0x00a01403L
#define TSU_RQH_EQ_INVALID_STATUS_1_STRIDE 1
#define TSU_RQH_EQ_INVALID_STATUS_1_DEPTH  1

	/* EQ out of range status */
#define TSU_RQH_EQ_OUT_OF_RANGE_STATUS_ADDR   0x00a01404L
#define TSU_RQH_EQ_OUT_OF_RANGE_STATUS_STRIDE 1
#define TSU_RQH_EQ_OUT_OF_RANGE_STATUS_DEPTH  1

	/* Clear EQ Status 0 EQs 0-63 */
#define TSU_RQH_CLEAR_EQ_STATUS_0_ADDR   0x00a01405L
#define TSU_RQH_CLEAR_EQ_STATUS_0_STRIDE 1
#define TSU_RQH_CLEAR_EQ_STATUS_0_DEPTH  1

	/* Clear EQ Status 1 EQs 64-127 */
#define TSU_RQH_CLEAR_EQ_STATUS_1_ADDR   0x00a01406L
#define TSU_RQH_CLEAR_EQ_STATUS_1_STRIDE 1
#define TSU_RQH_CLEAR_EQ_STATUS_1_DEPTH  1

	/* Initiates clear of EQ status bits as indicated in Clear EQ Status 0/1. */
#define TSU_RQH_CLEAR_EQ_STATUS_KICK_ADDR   0x00a01407L
#define TSU_RQH_CLEAR_EQ_STATUS_KICK_STRIDE 1
#define TSU_RQH_CLEAR_EQ_STATUS_KICK_DEPTH  1

	/* Clear per UF EQ out of range Status */
#define TSU_RQH_CLEAR_EQ_UF_STATUS_ADDR   0x00a01408L
#define TSU_RQH_CLEAR_EQ_UF_STATUS_STRIDE 1
#define TSU_RQH_CLEAR_EQ_UF_STATUS_DEPTH  1

	/* Initiates clear of per UF out of range EQ status bits */
#define TSU_RQH_CLEAR_EQ_UF_STATUS_KICK_ADDR   0x00a01409L
#define TSU_RQH_CLEAR_EQ_UF_STATUS_KICK_STRIDE 1
#define TSU_RQH_CLEAR_EQ_UF_STATUS_KICK_DEPTH  1

	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * completion queue descriptors.
	 */
#define TSU_DSCR_CQ_BASE_ADDR_SW_0_ADDR   0x00b00000L
#define TSU_DSCR_CQ_BASE_ADDR_SW_0_STRIDE 1
#define TSU_DSCR_CQ_BASE_ADDR_SW_0_DEPTH  35

#define TSU_DSCR_CQ_BASE_ADDR_SW_1_ADDR   0x00b00040L
#define TSU_DSCR_CQ_BASE_ADDR_SW_1_STRIDE 1
#define TSU_DSCR_CQ_BASE_ADDR_SW_1_DEPTH  35

#define TSU_DSCR_CQ_BASE_ADDR_SW_2_ADDR   0x00b00080L
#define TSU_DSCR_CQ_BASE_ADDR_SW_2_STRIDE 1
#define TSU_DSCR_CQ_BASE_ADDR_SW_2_DEPTH  35

	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * completion queue descriptors.
	 */
#define TSU_DSCR_CQ_BASE_ADDR_HW_0_ADDR   0x00b000c0L
#define TSU_DSCR_CQ_BASE_ADDR_HW_0_STRIDE 1
#define TSU_DSCR_CQ_BASE_ADDR_HW_0_DEPTH  35

#define TSU_DSCR_CQ_BASE_ADDR_HW_1_ADDR   0x00b00100L
#define TSU_DSCR_CQ_BASE_ADDR_HW_1_STRIDE 1
#define TSU_DSCR_CQ_BASE_ADDR_HW_1_DEPTH  35

#define TSU_DSCR_CQ_BASE_ADDR_HW_2_ADDR   0x00b00140L
#define TSU_DSCR_CQ_BASE_ADDR_HW_2_STRIDE 1
#define TSU_DSCR_CQ_BASE_ADDR_HW_2_DEPTH  35

	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * ring buffer descriptors.
	 */
#define TSU_DSCR_RB_BASE_ADDR_SW_0_ADDR   0x00b00180L
#define TSU_DSCR_RB_BASE_ADDR_SW_0_STRIDE 1
#define TSU_DSCR_RB_BASE_ADDR_SW_0_DEPTH  35

#define TSU_DSCR_RB_BASE_ADDR_SW_1_ADDR   0x00b001c0L
#define TSU_DSCR_RB_BASE_ADDR_SW_1_STRIDE 1
#define TSU_DSCR_RB_BASE_ADDR_SW_1_DEPTH  35

#define TSU_DSCR_RB_BASE_ADDR_SW_2_ADDR   0x00b00200L
#define TSU_DSCR_RB_BASE_ADDR_SW_2_STRIDE 1
#define TSU_DSCR_RB_BASE_ADDR_SW_2_DEPTH  35

	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * ring buffer descriptors.
	 */
#define TSU_DSCR_RB_BASE_ADDR_HW_0_ADDR   0x00b00240L
#define TSU_DSCR_RB_BASE_ADDR_HW_0_STRIDE 1
#define TSU_DSCR_RB_BASE_ADDR_HW_0_DEPTH  35

#define TSU_DSCR_RB_BASE_ADDR_HW_1_ADDR   0x00b00280L
#define TSU_DSCR_RB_BASE_ADDR_HW_1_STRIDE 1
#define TSU_DSCR_RB_BASE_ADDR_HW_1_DEPTH  35

#define TSU_DSCR_RB_BASE_ADDR_HW_2_ADDR   0x00b002c0L
#define TSU_DSCR_RB_BASE_ADDR_HW_2_STRIDE 1
#define TSU_DSCR_RB_BASE_ADDR_HW_2_DEPTH  35

	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * receive queue descriptors.
	 */
#define TSU_DSCR_RQ_BASE_ADDR_SW_0_ADDR   0x00b00300L
#define TSU_DSCR_RQ_BASE_ADDR_SW_0_STRIDE 1
#define TSU_DSCR_RQ_BASE_ADDR_SW_0_DEPTH  35

#define TSU_DSCR_RQ_BASE_ADDR_SW_1_ADDR   0x00b00340L
#define TSU_DSCR_RQ_BASE_ADDR_SW_1_STRIDE 1
#define TSU_DSCR_RQ_BASE_ADDR_SW_1_DEPTH  35

#define TSU_DSCR_RQ_BASE_ADDR_SW_2_ADDR   0x00b00380L
#define TSU_DSCR_RQ_BASE_ADDR_SW_2_STRIDE 1
#define TSU_DSCR_RQ_BASE_ADDR_SW_2_DEPTH  35

	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * receive queue descriptors.
	 */
#define TSU_DSCR_RQ_BASE_ADDR_HW_0_ADDR   0x00b003c0L
#define TSU_DSCR_RQ_BASE_ADDR_HW_0_STRIDE 1
#define TSU_DSCR_RQ_BASE_ADDR_HW_0_DEPTH  35

#define TSU_DSCR_RQ_BASE_ADDR_HW_1_ADDR   0x00b00400L
#define TSU_DSCR_RQ_BASE_ADDR_HW_1_STRIDE 1
#define TSU_DSCR_RQ_BASE_ADDR_HW_1_DEPTH  35

#define TSU_DSCR_RQ_BASE_ADDR_HW_2_ADDR   0x00b00440L
#define TSU_DSCR_RQ_BASE_ADDR_HW_2_STRIDE 1
#define TSU_DSCR_RQ_BASE_ADDR_HW_2_DEPTH  35

	/*
	 * Base address registers per UF for software owned descriptor portion of XRC
	 * SRQ descriptors.
	 */
#define TSU_DSCR_XRQ_BASE_ADDR_SW_0_ADDR   0x00b00480L
#define TSU_DSCR_XRQ_BASE_ADDR_SW_0_STRIDE 1
#define TSU_DSCR_XRQ_BASE_ADDR_SW_0_DEPTH  35

#define TSU_DSCR_XRQ_BASE_ADDR_SW_1_ADDR   0x00b004c0L
#define TSU_DSCR_XRQ_BASE_ADDR_SW_1_STRIDE 1
#define TSU_DSCR_XRQ_BASE_ADDR_SW_1_DEPTH  35

#define TSU_DSCR_XRQ_BASE_ADDR_SW_2_ADDR   0x00b00500L
#define TSU_DSCR_XRQ_BASE_ADDR_SW_2_STRIDE 1
#define TSU_DSCR_XRQ_BASE_ADDR_SW_2_DEPTH  35

	/*
	 * Base address registers per UF for hardware owned descriptor portion of XRC
	 * SRQ descriptors.
	 */
#define TSU_DSCR_XRQ_BASE_ADDR_HW_0_ADDR   0x00b00540L
#define TSU_DSCR_XRQ_BASE_ADDR_HW_0_STRIDE 1
#define TSU_DSCR_XRQ_BASE_ADDR_HW_0_DEPTH  35

#define TSU_DSCR_XRQ_BASE_ADDR_HW_1_ADDR   0x00b00580L
#define TSU_DSCR_XRQ_BASE_ADDR_HW_1_STRIDE 1
#define TSU_DSCR_XRQ_BASE_ADDR_HW_1_DEPTH  35

#define TSU_DSCR_XRQ_BASE_ADDR_HW_2_ADDR   0x00b005c0L
#define TSU_DSCR_XRQ_BASE_ADDR_HW_2_STRIDE 1
#define TSU_DSCR_XRQ_BASE_ADDR_HW_2_DEPTH  35

	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
#define TSU_DSCR_UF_CONTROL_ADDR   0x00b00700L
#define TSU_DSCR_UF_CONTROL_STRIDE 1
#define TSU_DSCR_UF_CONTROL_DEPTH  1

	/* Starts operation defined in uf_control. */
#define TSU_DSCR_UF_CONTROL_KICK_ADDR   0x00b00701L
#define TSU_DSCR_UF_CONTROL_KICK_STRIDE 1
#define TSU_DSCR_UF_CONTROL_KICK_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_DSCR_INT_STATUS_ADDR   0x00b00702L
#define TSU_DSCR_INT_STATUS_STRIDE 1
#define TSU_DSCR_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_DSCR_INT_MASK_ADDR   0x00b00703L
#define TSU_DSCR_INT_MASK_STRIDE 1
#define TSU_DSCR_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_DSCR_INT_PRI_ADDR   0x00b00704L
#define TSU_DSCR_INT_PRI_STRIDE 1
#define TSU_DSCR_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_DSCR_INT_STATUS_CLEAR_ADDR   0x00b00705L
#define TSU_DSCR_INT_STATUS_CLEAR_STRIDE 1
#define TSU_DSCR_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_DSCR_INT_STATUS_CLEAR_KICK_ADDR   0x00b00706L
#define TSU_DSCR_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_DSCR_INT_STATUS_CLEAR_KICK_DEPTH  1

	/* Async event FIFO - status portion. */
#define TSU_DSCR_ASYNC_EVENT_STATUS_ADDR   0x00b00780L
#define TSU_DSCR_ASYNC_EVENT_STATUS_STRIDE 1
#define TSU_DSCR_ASYNC_EVENT_STATUS_DEPTH  1

	/* Async event FIFO - affiliated data portion. */
#define TSU_DSCR_ASYNC_EVENT_AFFILIATED_ADDR   0x00b00781L
#define TSU_DSCR_ASYNC_EVENT_AFFILIATED_STRIDE 1
#define TSU_DSCR_ASYNC_EVENT_AFFILIATED_DEPTH  1

	/* This pop register is written after async event register is read. */
#define TSU_DSCR_ASYNC_EVENT_POP_ADDR   0x00b00782L
#define TSU_DSCR_ASYNC_EVENT_POP_STRIDE 1
#define TSU_DSCR_ASYNC_EVENT_POP_DEPTH  1

	/* Various diagnostic control bits */
#define TSU_DSCR_DIAGNOSTIC_ADDR   0x00b00800L
#define TSU_DSCR_DIAGNOSTIC_STRIDE 1
#define TSU_DSCR_DIAGNOSTIC_DEPTH  1

	/* Fatal interrupt bits */
#define TSU_DSCR_FATAL_INTERRUPT_ADDR   0x00b01000L
#define TSU_DSCR_FATAL_INTERRUPT_STRIDE 1
#define TSU_DSCR_FATAL_INTERRUPT_DEPTH  1

	/* Clear fatal interrupt status. */
#define TSU_DSCR_FATAL_INTERRUPT_CLEAR_ADDR   0x00b01001L
#define TSU_DSCR_FATAL_INTERRUPT_CLEAR_STRIDE 1
#define TSU_DSCR_FATAL_INTERRUPT_CLEAR_DEPTH  1

	/* RSS table containing CQ and RQ. This table is used for EoIB RSS. */
#define TSU_RCV_RSS_EOIB_TABLE_ADDR   0x00c00000L
#define TSU_RCV_RSS_EOIB_TABLE_STRIDE 1
#define TSU_RCV_RSS_EOIB_TABLE_DEPTH  128

	/*
	 * Control register for RSS per vHCA (UF0-UF32). Containing the bit masks to
	 * use when masking hashes.
	 */
#define TSU_RCV_RSS_CTRL_EOIB_TABLE_ADDR   0x00c00080L
#define TSU_RCV_RSS_CTRL_EOIB_TABLE_STRIDE 1
#define TSU_RCV_RSS_CTRL_EOIB_TABLE_DEPTH  33

	/* RSS table containing CQ and RQ. This table is used for IPoIB RSS. */
#define TSU_RCV_RSS_IPOIB_TABLE_ADDR   0x00c00100L
#define TSU_RCV_RSS_IPOIB_TABLE_STRIDE 1
#define TSU_RCV_RSS_IPOIB_TABLE_DEPTH  128

	/*
	 * Control register for RSS per vHCA (UF0-UF32). Containing the bit masks to
	 * use when masking hashes.
	 */
#define TSU_RCV_RSS_CTRL_IPOIB_TABLE_ADDR   0x00c00180L
#define TSU_RCV_RSS_CTRL_IPOIB_TABLE_STRIDE 1
#define TSU_RCV_RSS_CTRL_IPOIB_TABLE_DEPTH  33

	/*
	 * Control register for EPS-A offloading per vHCA (UF0-UF32). It is
	 * containing the size which is the limit for sending packets to EPS-A.
	 */
#define TSU_RCV_PROXY_SIZE_ADDR   0x00c00200L
#define TSU_RCV_PROXY_SIZE_STRIDE 1
#define TSU_RCV_PROXY_SIZE_DEPTH  33

	/* Maximum MAD packet size supported. */
#define TSU_RCV_MAD_SIZE_ADDR   0x00c00300L
#define TSU_RCV_MAD_SIZE_STRIDE 1
#define TSU_RCV_MAD_SIZE_DEPTH  1

	/*
	 * Error counter for multicast rejects. There is one register per vHCA port.
	 */
#define TSU_RCV_EOIB_MCAST_REJECT_ADDR   0x00c02000L
#define TSU_RCV_EOIB_MCAST_REJECT_STRIDE 1
#define TSU_RCV_EOIB_MCAST_REJECT_DEPTH  66

	/*
	 * Error counter for broadcast rejects. There is one register per vHCA port.
	 */
#define TSU_RCV_EOIB_BCAST_REJECT_ADDR   0x00c02080L
#define TSU_RCV_EOIB_BCAST_REJECT_STRIDE 1
#define TSU_RCV_EOIB_BCAST_REJECT_DEPTH  66

	/*
	 * Error counter for unicast rejects. There is one register per vHCA port.
	 */
#define TSU_RCV_EOIB_UCAST_REJECT_ADDR   0x00c02100L
#define TSU_RCV_EOIB_UCAST_REJECT_STRIDE 1
#define TSU_RCV_EOIB_UCAST_REJECT_DEPTH  66

	/*
	 * Error counter for fragment rejects. There is one register per vHCA port.
	 */
#define TSU_RCV_EIOB_FRAGMENT_REJECT_ADDR   0x00c02180L
#define TSU_RCV_EIOB_FRAGMENT_REJECT_STRIDE 1
#define TSU_RCV_EIOB_FRAGMENT_REJECT_DEPTH  66

	/*
	 * Error counter for runt rejects. There is one register per vHCA port.
	 */
#define TSU_RCV_EIOB_RUNTS_REJECT_ADDR   0x00c02200L
#define TSU_RCV_EIOB_RUNTS_REJECT_STRIDE 1
#define TSU_RCV_EIOB_RUNTS_REJECT_DEPTH  66

	/*
	 * Error counter for outer VLAN rejects. There is one register per vHCA port.
	 */
#define TSU_RCV_EIOB_OUTER_VLAN_REJECT_ADDR   0x00c02280L
#define TSU_RCV_EIOB_OUTER_VLAN_REJECT_STRIDE 1
#define TSU_RCV_EIOB_OUTER_VLAN_REJECT_DEPTH  66

	/*
	 * Error counter for VALN tag rejects. There is one register per vHCA port.
	 */
#define TSU_RCV_EIOB_VLAN_TAG_REJECT_ADDR   0x00c02300L
#define TSU_RCV_EIOB_VLAN_TAG_REJECT_STRIDE 1
#define TSU_RCV_EIOB_VLAN_TAG_REJECT_DEPTH  66

	/*
	 * Error counter for VID rejects. There is one register per vHCA port.
	 */
#define TSU_RCV_EIOB_VID_REJECT_ADDR   0x00c02380L
#define TSU_RCV_EIOB_VID_REJECT_STRIDE 1
#define TSU_RCV_EIOB_VID_REJECT_DEPTH  66

	/*
	 * Control if multicast packets should be forwarded to yourself or not when
	 * the QP is a IPoIB or EoIB QP.
	 */
#define TSU_RCV_NO_MCAST_DUPLICATION_ADDR   0x00c02800L
#define TSU_RCV_NO_MCAST_DUPLICATION_STRIDE 1
#define TSU_RCV_NO_MCAST_DUPLICATION_DEPTH  1

	/* Trap register for P-Key and Q-Key traps. */
#define TSU_RCV_KEY_TRAP_SGID_UPPER_ADDR   0x00c04000L
#define TSU_RCV_KEY_TRAP_SGID_UPPER_STRIDE 1
#define TSU_RCV_KEY_TRAP_SGID_UPPER_DEPTH  1

	/* Trap register for P-Key and Q-Key traps. */
#define TSU_RCV_KEY_TRAP_SGID_LOWER_ADDR   0x00c04001L
#define TSU_RCV_KEY_TRAP_SGID_LOWER_STRIDE 1
#define TSU_RCV_KEY_TRAP_SGID_LOWER_DEPTH  1

	/* Trap register for P-Key and Q-Key traps. */
#define TSU_RCV_KEY_TRAP_DGID_UPPER_ADDR   0x00c04002L
#define TSU_RCV_KEY_TRAP_DGID_UPPER_STRIDE 1
#define TSU_RCV_KEY_TRAP_DGID_UPPER_DEPTH  1

	/* Trap register for P-Key and Q-Key traps. */
#define TSU_RCV_KEY_TRAP_DGID_LOWER_ADDR   0x00c04003L
#define TSU_RCV_KEY_TRAP_DGID_LOWER_STRIDE 1
#define TSU_RCV_KEY_TRAP_DGID_LOWER_DEPTH  1

	/* Trap register for P-Key and Q-Key traps. */
#define TSU_RCV_KEY_TRAP_QP_ADDR   0x00c04004L
#define TSU_RCV_KEY_TRAP_QP_STRIDE 1
#define TSU_RCV_KEY_TRAP_QP_DEPTH  1

	/* Trap register for P-Key and Q-Key traps. */
#define TSU_RCV_KEY_TRAP_LID_KEY_ADDR   0x00c04005L
#define TSU_RCV_KEY_TRAP_LID_KEY_STRIDE 1
#define TSU_RCV_KEY_TRAP_LID_KEY_DEPTH  1

	/* Pop register for P-Key and Q-Key trap FIFO. */
#define TSU_RCV_KEY_TRAP_POP_ADDR   0x00c04008L
#define TSU_RCV_KEY_TRAP_POP_STRIDE 1
#define TSU_RCV_KEY_TRAP_POP_DEPTH  1

	/* Register indicating what to do if the trap FIFO is full. */
#define TSU_RCV_KEY_TRAP_BACKPRESSURE_ADDR   0x00c04010L
#define TSU_RCV_KEY_TRAP_BACKPRESSURE_STRIDE 1
#define TSU_RCV_KEY_TRAP_BACKPRESSURE_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_RCV_INT_STATUS_ADDR   0x00c04400L
#define TSU_RCV_INT_STATUS_STRIDE 1
#define TSU_RCV_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_RCV_INT_MASK_ADDR   0x00c04401L
#define TSU_RCV_INT_MASK_STRIDE 1
#define TSU_RCV_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_RCV_INT_PRI_ADDR   0x00c04402L
#define TSU_RCV_INT_PRI_STRIDE 1
#define TSU_RCV_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_RCV_INT_STATUS_CLEAR_ADDR   0x00c04403L
#define TSU_RCV_INT_STATUS_CLEAR_STRIDE 1
#define TSU_RCV_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_RCV_INT_STATUS_CLEAR_KICK_ADDR   0x00c04404L
#define TSU_RCV_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_RCV_INT_STATUS_CLEAR_KICK_DEPTH  1

	/* Shared P-Key table for all UFs on this port. */
#define TSU_IBPR_P1_PKEY_TABLE_ADDR   0x00d00000L
#define TSU_IBPR_P1_PKEY_TABLE_STRIDE 1
#define TSU_IBPR_P1_PKEY_TABLE_DEPTH  272

	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
#define TSU_IBPR_P1_OWN_LID_BASE_ADDR   0x00d00280L
#define TSU_IBPR_P1_OWN_LID_BASE_STRIDE 1
#define TSU_IBPR_P1_OWN_LID_BASE_DEPTH  35

	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
#define TSU_IBPR_P1_PKEY_UF_STRIDE_ADDR   0x00d00400L
#define TSU_IBPR_P1_PKEY_UF_STRIDE_STRIDE 1
#define TSU_IBPR_P1_PKEY_UF_STRIDE_DEPTH  1

	/* Default vSwitch port for vSwitch1. */
#define TSU_IBPR_P1_DEFAULT_VSWITCH_PORT_ADDR   0x00d00402L
#define TSU_IBPR_P1_DEFAULT_VSWITCH_PORT_STRIDE 1
#define TSU_IBPR_P1_DEFAULT_VSWITCH_PORT_DEPTH  1

	/* Default SM HCA. Indicating which vHCA to send SM packets to. */
#define TSU_IBPR_P1_DEFAULT_SM_HCA_ADDR   0x00d00403L
#define TSU_IBPR_P1_DEFAULT_SM_HCA_STRIDE 1
#define TSU_IBPR_P1_DEFAULT_SM_HCA_DEPTH  1

	/*
	 * When a bit is set, the TSU will forward the particular management class to
	 * EPS-C. Per UF0-UF32.
	 */
#define TSU_IBPR_P1_GSI_FORWARDING_TABLE_ADDR   0x00d00440L
#define TSU_IBPR_P1_GSI_FORWARDING_TABLE_STRIDE 1
#define TSU_IBPR_P1_GSI_FORWARDING_TABLE_DEPTH  33

	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
#define TSU_IBPR_P1_SMP_ALLOWED_ADDR   0x00d00600L
#define TSU_IBPR_P1_SMP_ALLOWED_STRIDE 1
#define TSU_IBPR_P1_SMP_ALLOWED_DEPTH  1

	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet drop status is cleared.
	 */
#define TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR_ADDR   0x00d00602L
#define TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR_STRIDE 1
#define TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR_DEPTH  1

	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet is dropped.
	 */
#define TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_ADDR   0x00d00604L
#define TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_STRIDE 1
#define TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_DEPTH  1

	/* Shared P-Key table for all UFs on this port. */
#define TSU_IBPR_P2_PKEY_TABLE_ADDR   0x00d00800L
#define TSU_IBPR_P2_PKEY_TABLE_STRIDE 1
#define TSU_IBPR_P2_PKEY_TABLE_DEPTH  272

	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
#define TSU_IBPR_P2_OWN_LID_BASE_ADDR   0x00d00a80L
#define TSU_IBPR_P2_OWN_LID_BASE_STRIDE 1
#define TSU_IBPR_P2_OWN_LID_BASE_DEPTH  35

	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
#define TSU_IBPR_P2_PKEY_UF_STRIDE_ADDR   0x00d00c00L
#define TSU_IBPR_P2_PKEY_UF_STRIDE_STRIDE 1
#define TSU_IBPR_P2_PKEY_UF_STRIDE_DEPTH  1

	/* Default vSwitch port for vSwitch2. */
#define TSU_IBPR_P2_DEFAULT_VSWITCH_PORT_ADDR   0x00d00c02L
#define TSU_IBPR_P2_DEFAULT_VSWITCH_PORT_STRIDE 1
#define TSU_IBPR_P2_DEFAULT_VSWITCH_PORT_DEPTH  1

	/* Default SM HCA. Indicating which vHCA to send SM packets to. */
#define TSU_IBPR_P2_DEFAULT_SM_HCA_ADDR   0x00d00c03L
#define TSU_IBPR_P2_DEFAULT_SM_HCA_STRIDE 1
#define TSU_IBPR_P2_DEFAULT_SM_HCA_DEPTH  1

	/*
	 * When a bit is set, the TSU will forward the particular management class to
	 * EPS-C. Per UF0-UF32.
	 */
#define TSU_IBPR_P2_GSI_FORWARDING_TABLE_ADDR   0x00d00c40L
#define TSU_IBPR_P2_GSI_FORWARDING_TABLE_STRIDE 1
#define TSU_IBPR_P2_GSI_FORWARDING_TABLE_DEPTH  33

	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
#define TSU_IBPR_P2_SMP_ALLOWED_ADDR   0x00d00e00L
#define TSU_IBPR_P2_SMP_ALLOWED_STRIDE 1
#define TSU_IBPR_P2_SMP_ALLOWED_DEPTH  1

	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet drop status is cleared.
	 */
#define TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR_ADDR   0x00d00e02L
#define TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR_STRIDE 1
#define TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR_DEPTH  1

	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet is dropped.
	 */
#define TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_ADDR   0x00d00e04L
#define TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_STRIDE 1
#define TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_DEPTH  1

	/* Sample interval register. */
#define TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL_ADDR   0x00d01000L
#define TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL_STRIDE 1
#define TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL_DEPTH  1

	/* Sample start delay register. */
#define TSU_IBPR_VSWITCH1_SAMPLE_START_ADDR   0x00d01040L
#define TSU_IBPR_VSWITCH1_SAMPLE_START_STRIDE 1
#define TSU_IBPR_VSWITCH1_SAMPLE_START_DEPTH  1

	/* Sample count register. This register contain the counted values. */
#define TSU_IBPR_VSWITCH1_SAMPLE_COUNT_ADDR   0x00d01080L
#define TSU_IBPR_VSWITCH1_SAMPLE_COUNT_STRIDE 1
#define TSU_IBPR_VSWITCH1_SAMPLE_COUNT_DEPTH  1

	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
#define TSU_IBPR_VSWITCH1_SAMPLE_PORT_ADDR   0x00d010c0L
#define TSU_IBPR_VSWITCH1_SAMPLE_PORT_STRIDE 1
#define TSU_IBPR_VSWITCH1_SAMPLE_PORT_DEPTH  1

	/* Start port Sampling. */
#define TSU_IBPR_VSWITCH1_PORTSAMPLE_START_ADDR   0x00d010c2L
#define TSU_IBPR_VSWITCH1_PORTSAMPLE_START_STRIDE 1
#define TSU_IBPR_VSWITCH1_PORTSAMPLE_START_DEPTH  1

	/* Sample status register. */
#define TSU_IBPR_VSWITCH1_SAMPLE_STATUS_ADDR   0x00d01100L
#define TSU_IBPR_VSWITCH1_SAMPLE_STATUS_STRIDE 1
#define TSU_IBPR_VSWITCH1_SAMPLE_STATUS_DEPTH  1

	/* Sample interval register. */
#define TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL_ADDR   0x00d01140L
#define TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL_STRIDE 1
#define TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL_DEPTH  1

	/* Sample start delay register. */
#define TSU_IBPR_VHCA_P1_SAMPLE_START_ADDR   0x00d01180L
#define TSU_IBPR_VHCA_P1_SAMPLE_START_STRIDE 1
#define TSU_IBPR_VHCA_P1_SAMPLE_START_DEPTH  1

	/* Sample count register. This register contain the counted values. */
#define TSU_IBPR_VHCA_P1_SAMPLE_COUNT_ADDR   0x00d011c0L
#define TSU_IBPR_VHCA_P1_SAMPLE_COUNT_STRIDE 1
#define TSU_IBPR_VHCA_P1_SAMPLE_COUNT_DEPTH  1

	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
#define TSU_IBPR_VHCA_P1_SAMPLE_PORT_ADDR   0x00d01200L
#define TSU_IBPR_VHCA_P1_SAMPLE_PORT_STRIDE 1
#define TSU_IBPR_VHCA_P1_SAMPLE_PORT_DEPTH  1

	/* Start port Sampling. */
#define TSU_IBPR_VHCA_P1_PORTSAMPLE_START_ADDR   0x00d01202L
#define TSU_IBPR_VHCA_P1_PORTSAMPLE_START_STRIDE 1
#define TSU_IBPR_VHCA_P1_PORTSAMPLE_START_DEPTH  1

	/* Sample status register. */
#define TSU_IBPR_VHCA_P1_SAMPLE_STATUS_ADDR   0x00d01240L
#define TSU_IBPR_VHCA_P1_SAMPLE_STATUS_STRIDE 1
#define TSU_IBPR_VHCA_P1_SAMPLE_STATUS_DEPTH  1

	/* Sample interval register. */
#define TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL_ADDR   0x00d01300L
#define TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL_STRIDE 1
#define TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL_DEPTH  1

	/* Sample start delay register. */
#define TSU_IBPR_VSWITCH2_SAMPLE_START_ADDR   0x00d01340L
#define TSU_IBPR_VSWITCH2_SAMPLE_START_STRIDE 1
#define TSU_IBPR_VSWITCH2_SAMPLE_START_DEPTH  1

	/* Sample count register. This register contain the counted values. */
#define TSU_IBPR_VSWITCH2_SAMPLE_COUNT_ADDR   0x00d01380L
#define TSU_IBPR_VSWITCH2_SAMPLE_COUNT_STRIDE 1
#define TSU_IBPR_VSWITCH2_SAMPLE_COUNT_DEPTH  1

	/*
	 * Sample UF register. Indicating which UF this entry is counting for and
	 * what type it is counting.
	 */
#define TSU_IBPR_VSWITCH2_SAMPLE_PORT_ADDR   0x00d013c0L
#define TSU_IBPR_VSWITCH2_SAMPLE_PORT_STRIDE 1
#define TSU_IBPR_VSWITCH2_SAMPLE_PORT_DEPTH  1

	/* Start port Sampling. */
#define TSU_IBPR_VSWITCH2_PORTSAMPLE_START_ADDR   0x00d013c2L
#define TSU_IBPR_VSWITCH2_PORTSAMPLE_START_STRIDE 1
#define TSU_IBPR_VSWITCH2_PORTSAMPLE_START_DEPTH  1

	/* Sample status register. */
#define TSU_IBPR_VSWITCH2_SAMPLE_STATUS_ADDR   0x00d01400L
#define TSU_IBPR_VSWITCH2_SAMPLE_STATUS_STRIDE 1
#define TSU_IBPR_VSWITCH2_SAMPLE_STATUS_DEPTH  1

	/* Sample interval register. */
#define TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL_ADDR   0x00d01440L
#define TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL_STRIDE 1
#define TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL_DEPTH  1

	/* Sample start delay register. */
#define TSU_IBPR_VHCA_P2_SAMPLE_START_ADDR   0x00d01480L
#define TSU_IBPR_VHCA_P2_SAMPLE_START_STRIDE 1
#define TSU_IBPR_VHCA_P2_SAMPLE_START_DEPTH  1

	/* Sample count register. This register contain the counted values. */
#define TSU_IBPR_VHCA_P2_SAMPLE_COUNT_ADDR   0x00d014c0L
#define TSU_IBPR_VHCA_P2_SAMPLE_COUNT_STRIDE 1
#define TSU_IBPR_VHCA_P2_SAMPLE_COUNT_DEPTH  1

	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
#define TSU_IBPR_VHCA_P2_SAMPLE_PORT_ADDR   0x00d01500L
#define TSU_IBPR_VHCA_P2_SAMPLE_PORT_STRIDE 1
#define TSU_IBPR_VHCA_P2_SAMPLE_PORT_DEPTH  1

	/* Start port Sampling. */
#define TSU_IBPR_VHCA_P2_PORTSAMPLE_START_ADDR   0x00d01502L
#define TSU_IBPR_VHCA_P2_PORTSAMPLE_START_STRIDE 1
#define TSU_IBPR_VHCA_P2_PORTSAMPLE_START_DEPTH  1

	/* Sample status register. */
#define TSU_IBPR_VHCA_P2_SAMPLE_STATUS_ADDR   0x00d01540L
#define TSU_IBPR_VHCA_P2_SAMPLE_STATUS_STRIDE 1
#define TSU_IBPR_VHCA_P2_SAMPLE_STATUS_DEPTH  1

	/* Set link state for the vHCA or the vSwitch. */
#define TSU_IBPR_SET_VLINK_STATE_ADDR   0x00d01800L
#define TSU_IBPR_SET_VLINK_STATE_STRIDE 1
#define TSU_IBPR_SET_VLINK_STATE_DEPTH  1

	/* link state for the vHCA or the vSwitch. */
#define TSU_IBPR_VLINK_STATE_REGISTER_ADDR   0x00d01802L
#define TSU_IBPR_VLINK_STATE_REGISTER_STRIDE 1
#define TSU_IBPR_VLINK_STATE_REGISTER_DEPTH  1

	/*
	 * Get vlink state for the vHCA and the vSwitch. It is up to the firmware to
	 * report correct physical link states when one side is set to disabled and
	 * the other side is down.
	 */
#define TSU_IBPR_P1_VLINK_STATE_ADDR   0x00d01840L
#define TSU_IBPR_P1_VLINK_STATE_STRIDE 1
#define TSU_IBPR_P1_VLINK_STATE_DEPTH  33

	/*
	 * Get vlink state for the vHCA and the vSwitch. It is up to the firmware to
	 * report correct physical link states when one side is set to disabled and
	 * the other side is down.
	 */
#define TSU_IBPR_P2_VLINK_STATE_ADDR   0x00d018c0L
#define TSU_IBPR_P2_VLINK_STATE_STRIDE 1
#define TSU_IBPR_P2_VLINK_STATE_DEPTH  33

	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
#define TSU_IBPR_P1_MCAST_GID_UPPER_ADDR   0x00d01c01L
#define TSU_IBPR_P1_MCAST_GID_UPPER_STRIDE 1
#define TSU_IBPR_P1_MCAST_GID_UPPER_DEPTH  1

	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
#define TSU_IBPR_P1_MCAST_GID_LOWER_ADDR   0x00d01c02L
#define TSU_IBPR_P1_MCAST_GID_LOWER_STRIDE 1
#define TSU_IBPR_P1_MCAST_GID_LOWER_DEPTH  1

	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
#define TSU_IBPR_P1_MCAST_GIDHASH_LID_ADDR   0x00d01c03L
#define TSU_IBPR_P1_MCAST_GIDHASH_LID_STRIDE 1
#define TSU_IBPR_P1_MCAST_GIDHASH_LID_DEPTH  1

	/*
	 * This pop register is written after data in p1_mcast_gid_upper,
	 * p1_mcast_gid_lower and p1_mcast_lid is read. Writing this register will
	 * pop the FIFO.
	 */
#define TSU_IBPR_P1_MCAST_POP_ADDR   0x00d01c04L
#define TSU_IBPR_P1_MCAST_POP_STRIDE 1
#define TSU_IBPR_P1_MCAST_POP_DEPTH  1

	/*
	 * This registers indicate how many multicast packets this port can hold
	 * before starting drop packets.
	 */
#define TSU_IBPR_P1_MCAST_MAX_PKTS_ADDR   0x00d01c05L
#define TSU_IBPR_P1_MCAST_MAX_PKTS_STRIDE 1
#define TSU_IBPR_P1_MCAST_MAX_PKTS_DEPTH  1

	/*
	 * This register contain the credit for writing to the CSR FIFO for multicast
	 * packets.
	 */
#define TSU_IBPR_P1_MCAST_WR_CREDIT_ADDR   0x00d01c06L
#define TSU_IBPR_P1_MCAST_WR_CREDIT_STRIDE 1
#define TSU_IBPR_P1_MCAST_WR_CREDIT_DEPTH  1

	/* Write to multicast FIFO. */
#define TSU_IBPR_P1_MCAST_WR_FIFO_ADDR   0x00d01c07L
#define TSU_IBPR_P1_MCAST_WR_FIFO_STRIDE 1
#define TSU_IBPR_P1_MCAST_WR_FIFO_DEPTH  1

	/* Kick multicast FIFO - data is valid in the multicast FIFO. */
#define TSU_IBPR_P1_MCAST_WR_FIFO_KICK_ADDR   0x00d01c08L
#define TSU_IBPR_P1_MCAST_WR_FIFO_KICK_STRIDE 1
#define TSU_IBPR_P1_MCAST_WR_FIFO_KICK_DEPTH  1

	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
#define TSU_IBPR_P2_MCAST_GID_UPPER_ADDR   0x00d01c41L
#define TSU_IBPR_P2_MCAST_GID_UPPER_STRIDE 1
#define TSU_IBPR_P2_MCAST_GID_UPPER_DEPTH  1

	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
#define TSU_IBPR_P2_MCAST_GID_LOWER_ADDR   0x00d01c42L
#define TSU_IBPR_P2_MCAST_GID_LOWER_STRIDE 1
#define TSU_IBPR_P2_MCAST_GID_LOWER_DEPTH  1

	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
#define TSU_IBPR_P2_MCAST_GIDHASH_LID_ADDR   0x00d01c43L
#define TSU_IBPR_P2_MCAST_GIDHASH_LID_STRIDE 1
#define TSU_IBPR_P2_MCAST_GIDHASH_LID_DEPTH  1

	/*
	 * This pop register is written after data in p2_mcast_gid_upper,
	 * p2_mcast_gid_lower and p2_mcast_lid is read. Writing this register will
	 * pop the FIFO.
	 */
#define TSU_IBPR_P2_MCAST_POP_ADDR   0x00d01c44L
#define TSU_IBPR_P2_MCAST_POP_STRIDE 1
#define TSU_IBPR_P2_MCAST_POP_DEPTH  1

	/*
	 * This registers indicate how many multicast packets this port can hold
	 * before starting drop packets.
	 */
#define TSU_IBPR_P2_MCAST_MAX_PKTS_ADDR   0x00d01c45L
#define TSU_IBPR_P2_MCAST_MAX_PKTS_STRIDE 1
#define TSU_IBPR_P2_MCAST_MAX_PKTS_DEPTH  1

	/*
	 * This register contain the credit for writing to the CSR FIFO for multicast
	 * packets.
	 */
#define TSU_IBPR_P2_MCAST_WR_CREDIT_ADDR   0x00d01c46L
#define TSU_IBPR_P2_MCAST_WR_CREDIT_STRIDE 1
#define TSU_IBPR_P2_MCAST_WR_CREDIT_DEPTH  1

	/* Write to multicast FIFO. */
#define TSU_IBPR_P2_MCAST_WR_FIFO_ADDR   0x00d01c47L
#define TSU_IBPR_P2_MCAST_WR_FIFO_STRIDE 1
#define TSU_IBPR_P2_MCAST_WR_FIFO_DEPTH  1

	/* Kick multicast FIFO - data is valid in the multicast FIFO. */
#define TSU_IBPR_P2_MCAST_WR_FIFO_KICK_ADDR   0x00d01c48L
#define TSU_IBPR_P2_MCAST_WR_FIFO_KICK_STRIDE 1
#define TSU_IBPR_P2_MCAST_WR_FIFO_KICK_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_IBPR_INT_STATUS_ADDR   0x00d01c4aL
#define TSU_IBPR_INT_STATUS_STRIDE 1
#define TSU_IBPR_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_IBPR_INT_MASK_ADDR   0x00d01c4bL
#define TSU_IBPR_INT_MASK_STRIDE 1
#define TSU_IBPR_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_IBPR_INT_PRI_ADDR   0x00d01c4cL
#define TSU_IBPR_INT_PRI_STRIDE 1
#define TSU_IBPR_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_IBPR_INT_STATUS_CLEAR_ADDR   0x00d01c4dL
#define TSU_IBPR_INT_STATUS_CLEAR_STRIDE 1
#define TSU_IBPR_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_IBPR_INT_STATUS_CLEAR_KICK_ADDR   0x00d01c4eL
#define TSU_IBPR_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_IBPR_INT_STATUS_CLEAR_KICK_DEPTH  1

	/* Rx choke register */
#define TSU_IBPR_P1_RX_CHOKE_ADDR   0x00d01c56L
#define TSU_IBPR_P1_RX_CHOKE_STRIDE 1
#define TSU_IBPR_P1_RX_CHOKE_DEPTH  1

	/* Rx choke register */
#define TSU_IBPR_P2_RX_CHOKE_ADDR   0x00d01c58L
#define TSU_IBPR_P2_RX_CHOKE_STRIDE 1
#define TSU_IBPR_P2_RX_CHOKE_DEPTH  1

	/* Port counter PortXmitDiscards. This is per vSwitch port [32:0]. */
#define TSU_IBPR_VSWITCH1_XMIT_DISCARDS_ADDR   0x00d04000L
#define TSU_IBPR_VSWITCH1_XMIT_DISCARDS_STRIDE 1
#define TSU_IBPR_VSWITCH1_XMIT_DISCARDS_DEPTH  33

	/*
	 * Port counter PortRcvSwitchRelayErrors. This register entry is associated
	 * with the corresponding register entry in all other sample register per
	 * port.
	 */
#define TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS_ADDR   0x00d04040L
#define TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS_STRIDE 1
#define TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS_DEPTH  1

	/* Vendor Port counter receive packets drop. This is per vSwitch. */
#define TSU_IBPR_VSWITCH1_RCV_PKTS_DROP_ADDR   0x00d04042L
#define TSU_IBPR_VSWITCH1_RCV_PKTS_DROP_STRIDE 1
#define TSU_IBPR_VSWITCH1_RCV_PKTS_DROP_DEPTH  1

	/*
	 * Clear portcounter according to setting in portcounter_clear registers
	 */
#define TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_ADDR   0x00d04044L
#define TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_STRIDE 1
#define TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_DEPTH  1

	/* Clear register for the the PortXmitDiscard */
#define TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER_ADDR   0x00d04046L
#define TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER_DEPTH  1

	/* Clear register for portcounters (single instance) */
#define TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER_ADDR   0x00d04048L
#define TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER_DEPTH  1

	/* Port counter PortXmitDiscards. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P1_XMIT_DISCARDS_ADDR   0x00d04800L
#define TSU_IBPR_VHCA_P1_XMIT_DISCARDS_STRIDE 1
#define TSU_IBPR_VHCA_P1_XMIT_DISCARDS_DEPTH  33

	/* Port counter Port Receive data. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P1_RCV_DATA_ADDR   0x00d04840L
#define TSU_IBPR_VHCA_P1_RCV_DATA_STRIDE 1
#define TSU_IBPR_VHCA_P1_RCV_DATA_DEPTH  33

	/* Port counter Port Receive Packets. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P1_RCV_PKTS_ADDR   0x00d04880L
#define TSU_IBPR_VHCA_P1_RCV_PKTS_STRIDE 1
#define TSU_IBPR_VHCA_P1_RCV_PKTS_DEPTH  33

	/* Port counter Port Xmit data. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P1_XMIT_DATA_ADDR   0x00d048c0L
#define TSU_IBPR_VHCA_P1_XMIT_DATA_STRIDE 1
#define TSU_IBPR_VHCA_P1_XMIT_DATA_DEPTH  33

	/* Port counter Port Xmit Packets. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_ADDR   0x00d04900L
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_STRIDE 1
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_DEPTH  33

	/*
	 * Port counter counting packets dropped (marked p_error) in Xmit path.
	 */
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_ADDR   0x00d04940L
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_STRIDE 1
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_DEPTH  1

	/*
	 * Clear vhca portcounters according to vhca port counter clear registers.
	 */
#define TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR_ADDR   0x00d04942L
#define TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR_STRIDE 1
#define TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR_DEPTH  1

	/*
	 * Register specifying clear on the the PortXmitDiscards counter. This is per
	 * vSwitch port.
	 */
#define TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER_ADDR   0x00d04944L
#define TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
#define TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER_ADDR   0x00d04946L
#define TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortRcvPkts counter. This is per vHCA
	 * port[32:0].
	 */
#define TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER_ADDR   0x00d04948L
#define TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
#define TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER_ADDR   0x00d0494aL
#define TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortXmitPkts counter. This is per
	 * vHCA port[32:0].
	 */
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER_ADDR   0x00d0494cL
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortXmitPkts drop counter. This is
	 * per vHCA port[32:0].
	 */
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER_ADDR   0x00d0494eL
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER_DEPTH  1

	/* Port counter PortXmitDiscards. This is per vSwitch port [32:0]. */
#define TSU_IBPR_VSWITCH2_XMIT_DISCARDS_ADDR   0x00d05000L
#define TSU_IBPR_VSWITCH2_XMIT_DISCARDS_STRIDE 1
#define TSU_IBPR_VSWITCH2_XMIT_DISCARDS_DEPTH  33

	/*
	 * Port counter PortRcvSwitchRelayErrors. This register entry is associated
	 * with the corresponding register entry in all other sample register per
	 * port.
	 */
#define TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS_ADDR   0x00d05040L
#define TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS_STRIDE 1
#define TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS_DEPTH  1

	/* Vendor Port counter receive packets drop. This is per vSwitch. */
#define TSU_IBPR_VSWITCH2_RCV_PKTS_DROP_ADDR   0x00d05042L
#define TSU_IBPR_VSWITCH2_RCV_PKTS_DROP_STRIDE 1
#define TSU_IBPR_VSWITCH2_RCV_PKTS_DROP_DEPTH  1

	/*
	 * Clear portcounter according to setting in portcounter_clear registers
	 */
#define TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_ADDR   0x00d05044L
#define TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_STRIDE 1
#define TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_DEPTH  1

	/* Clear register for the the PortXmitDiscard */
#define TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER_ADDR   0x00d05046L
#define TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER_DEPTH  1

	/* Clear register for portcounters (single instance) */
#define TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER_ADDR   0x00d05048L
#define TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER_DEPTH  1

	/* Port counter PortXmitDiscards. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P2_XMIT_DISCARDS_ADDR   0x00d05840L
#define TSU_IBPR_VHCA_P2_XMIT_DISCARDS_STRIDE 1
#define TSU_IBPR_VHCA_P2_XMIT_DISCARDS_DEPTH  33

	/* Port counter Port Receive data. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P2_RCV_DATA_ADDR   0x00d05880L
#define TSU_IBPR_VHCA_P2_RCV_DATA_STRIDE 1
#define TSU_IBPR_VHCA_P2_RCV_DATA_DEPTH  33

	/* Port counter Port Receive Packets. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P2_RCV_PKTS_ADDR   0x00d058c0L
#define TSU_IBPR_VHCA_P2_RCV_PKTS_STRIDE 1
#define TSU_IBPR_VHCA_P2_RCV_PKTS_DEPTH  33

	/* Port counter Port Xmit data. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P2_XMIT_DATA_ADDR   0x00d05900L
#define TSU_IBPR_VHCA_P2_XMIT_DATA_STRIDE 1
#define TSU_IBPR_VHCA_P2_XMIT_DATA_DEPTH  33

	/* Port counter Port Xmit Packets. This is per vSwitch port. */
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_ADDR   0x00d05940L
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_STRIDE 1
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_DEPTH  33

	/*
	 * Port counter counting packets dropped (marked p_error) in Xmit path.
	 */
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_ADDR   0x00d05980L
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_STRIDE 1
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_DEPTH  1

	/*
	 * Clear vhca portcounters according to vhca port counter clear registers.
	 */
#define TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR_ADDR   0x00d05982L
#define TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR_STRIDE 1
#define TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR_DEPTH  1

	/*
	 * Register specifying clear on the the PortXmitDiscards counter. This is per
	 * vSwitch port.
	 */
#define TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER_ADDR   0x00d05984L
#define TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
#define TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER_ADDR   0x00d05986L
#define TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortRcvPkts counter. This is per vHCA
	 * port[32:0].
	 */
#define TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER_ADDR   0x00d05988L
#define TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
#define TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER_ADDR   0x00d0598aL
#define TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortXmitPkts counter. This is per
	 * vHCA port[32:0].
	 */
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER_ADDR   0x00d0598cL
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER_DEPTH  1

	/*
	 * Register specifying clear on the the PortXmitPkts drop counter. This is
	 * per vHCA port[32:0].
	 */
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER_ADDR   0x00d0598eL
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER_STRIDE 1
#define TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER_DEPTH  1

	/*
	 * Per vHCA (UF0-32) register. This table contain valid RSS combinations to
	 * calculate for this UF.
	 */
#define TSU_IBPR_RSS_CONTROL_ADDR   0x00d08000L
#define TSU_IBPR_RSS_CONTROL_STRIDE 1
#define TSU_IBPR_RSS_CONTROL_DEPTH  33

	/* 16B Secret key for RSS generation for IPv4. */
#define TSU_IBPR_RSS_IPV4_SECRET_KEY_ADDR   0x00d08100L
#define TSU_IBPR_RSS_IPV4_SECRET_KEY_STRIDE 1
#define TSU_IBPR_RSS_IPV4_SECRET_KEY_DEPTH  2

	/* 40B Secret key for RSS generation for IPv6. */
#define TSU_IBPR_RSS_IPV6_SECRET_KEY_ADDR   0x00d08140L
#define TSU_IBPR_RSS_IPV6_SECRET_KEY_STRIDE 1
#define TSU_IBPR_RSS_IPV6_SECRET_KEY_DEPTH  5

	/*
	 * Upper 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
#define TSU_IBPR_P1_GID_UPPER_ADDR   0x00d10000L
#define TSU_IBPR_P1_GID_UPPER_STRIDE 1
#define TSU_IBPR_P1_GID_UPPER_DEPTH  67

	/*
	 * Lower 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
#define TSU_IBPR_P1_GID_LOWER_ADDR   0x00d10100L
#define TSU_IBPR_P1_GID_LOWER_STRIDE 1
#define TSU_IBPR_P1_GID_LOWER_DEPTH  67

	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
#define TSU_IBPR_P1_GID_FORWARDING_TABLE_ADDR   0x00d10200L
#define TSU_IBPR_P1_GID_FORWARDING_TABLE_STRIDE 1
#define TSU_IBPR_P1_GID_FORWARDING_TABLE_DEPTH  67

	/*
	 * Upper 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
#define TSU_IBPR_P2_GID_UPPER_ADDR   0x00d10800L
#define TSU_IBPR_P2_GID_UPPER_STRIDE 1
#define TSU_IBPR_P2_GID_UPPER_DEPTH  67

	/*
	 * Lower 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
#define TSU_IBPR_P2_GID_LOWER_ADDR   0x00d10900L
#define TSU_IBPR_P2_GID_LOWER_STRIDE 1
#define TSU_IBPR_P2_GID_LOWER_DEPTH  67

	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
#define TSU_IBPR_P2_GID_FORWARDING_TABLE_ADDR   0x00d10a00L
#define TSU_IBPR_P2_GID_FORWARDING_TABLE_STRIDE 1
#define TSU_IBPR_P2_GID_FORWARDING_TABLE_DEPTH  67

	/* Per vHCA + EPS-C ethernet MAC address register. */
#define TSU_IBPR_P1_EOIB_MAC1_ADDR   0x00d20000L
#define TSU_IBPR_P1_EOIB_MAC1_STRIDE 1
#define TSU_IBPR_P1_EOIB_MAC1_DEPTH  34

	/* Per vHCA + EPS-C ethernet MAC address register. */
#define TSU_IBPR_P1_EOIB_MAC2_ADDR   0x00d20040L
#define TSU_IBPR_P1_EOIB_MAC2_STRIDE 1
#define TSU_IBPR_P1_EOIB_MAC2_DEPTH  34

	/* Per vHCA + EPS-C ethernet MAC address register. */
#define TSU_IBPR_P2_EOIB_MAC1_ADDR   0x00d20080L
#define TSU_IBPR_P2_EOIB_MAC1_STRIDE 1
#define TSU_IBPR_P2_EOIB_MAC1_DEPTH  34

	/* Per vHCA + EPS-C ethernet MAC address register. */
#define TSU_IBPR_P2_EOIB_MAC2_ADDR   0x00d200c0L
#define TSU_IBPR_P2_EOIB_MAC2_STRIDE 1
#define TSU_IBPR_P2_EOIB_MAC2_DEPTH  34

	/* Per vHCA + EPS-C ethernet control register. */
#define TSU_IBPR_EOIB_CONTROL_ADDR   0x00d20100L
#define TSU_IBPR_EOIB_CONTROL_STRIDE 1
#define TSU_IBPR_EOIB_CONTROL_DEPTH  34

	/* Per vHCA + EPS-C DMAC seed register. */
#define TSU_IBPR_DMAC_SEED_ADDR   0x00d20180L
#define TSU_IBPR_DMAC_SEED_STRIDE 1
#define TSU_IBPR_DMAC_SEED_DEPTH  34

	/* Per vHCA + EPS-C VLAN EtherTypes register. */
#define TSU_IBPR_EOIB_VLAN_ETHERTYPES_ADDR   0x00d201c0L
#define TSU_IBPR_EOIB_VLAN_ETHERTYPES_STRIDE 1
#define TSU_IBPR_EOIB_VLAN_ETHERTYPES_DEPTH  34

	/* Per vHCA PF control register. */
#define TSU_IBPR_EOIB_PF_CONTROL_ADDR   0x00d20200L
#define TSU_IBPR_EOIB_PF_CONTROL_STRIDE 1
#define TSU_IBPR_EOIB_PF_CONTROL_DEPTH  34

	/* Common unicast overflow table for all vHCAs. */
#define TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE_ADDR   0x00d20240L
#define TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE_STRIDE 1
#define TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE_DEPTH  64

	/* Common multicast table for all VHCAs. */
#define TSU_IBPR_EOIB_MULTICAST_TABLE_ADDR   0x00d20280L
#define TSU_IBPR_EOIB_MULTICAST_TABLE_STRIDE 1
#define TSU_IBPR_EOIB_MULTICAST_TABLE_DEPTH  64

	/*
	 * Header split register indicating what EoIB headers to try splitting at.
	 */
#define TSU_IBPR_HDR_SPLIT_EOIB_ADDR   0x00d202c0L
#define TSU_IBPR_HDR_SPLIT_EOIB_STRIDE 1
#define TSU_IBPR_HDR_SPLIT_EOIB_DEPTH  1

	/*
	 * Header split register indicating what IPoIB headers to try splitting at
	 * for UD transport.
	 */
#define TSU_IBPR_HDR_SPLIT_IPOIB_UD_ADDR   0x00d202c1L
#define TSU_IBPR_HDR_SPLIT_IPOIB_UD_STRIDE 1
#define TSU_IBPR_HDR_SPLIT_IPOIB_UD_DEPTH  1

	/* Trace buffer setup */
#define TSU_IBPR_TRACE_BUFFER_SETUP_ADDR   0x00d249f0L
#define TSU_IBPR_TRACE_BUFFER_SETUP_STRIDE 1
#define TSU_IBPR_TRACE_BUFFER_SETUP_DEPTH  1

	/* Trace buffer Store qualifier1 */
#define TSU_IBPR_TRACE_STORE_QUALIFIER1_ADDR   0x00d249f1L
#define TSU_IBPR_TRACE_STORE_QUALIFIER1_STRIDE 1
#define TSU_IBPR_TRACE_STORE_QUALIFIER1_DEPTH  1

	/* Trace buffer Store qualifier2 */
#define TSU_IBPR_TRACE_STORE_QUALIFIER2_ADDR   0x00d249f2L
#define TSU_IBPR_TRACE_STORE_QUALIFIER2_STRIDE 1
#define TSU_IBPR_TRACE_STORE_QUALIFIER2_DEPTH  1

	/* Trace buffer Store qualifier1 mask */
#define TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK_ADDR   0x00d249f3L
#define TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK_STRIDE 1
#define TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK_DEPTH  1

	/* Trace buffer Store qualifier2 mask */
#define TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK_ADDR   0x00d249f4L
#define TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK_STRIDE 1
#define TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK_DEPTH  1

	/* Trace buffer trigger1 */
#define TSU_IBPR_TRACE_TRIGGER1_ADDR   0x00d249f5L
#define TSU_IBPR_TRACE_TRIGGER1_STRIDE 1
#define TSU_IBPR_TRACE_TRIGGER1_DEPTH  1

	/* Trace buffer trigger2 */
#define TSU_IBPR_TRACE_TRIGGER2_ADDR   0x00d249f6L
#define TSU_IBPR_TRACE_TRIGGER2_STRIDE 1
#define TSU_IBPR_TRACE_TRIGGER2_DEPTH  1

	/* Trace buffer trigger1 mask */
#define TSU_IBPR_TRACE_TRIGGER1_MASK_ADDR   0x00d249f7L
#define TSU_IBPR_TRACE_TRIGGER1_MASK_STRIDE 1
#define TSU_IBPR_TRACE_TRIGGER1_MASK_DEPTH  1

	/* Trace buffer trigger2 mask */
#define TSU_IBPR_TRACE_TRIGGER2_MASK_ADDR   0x00d249f8L
#define TSU_IBPR_TRACE_TRIGGER2_MASK_STRIDE 1
#define TSU_IBPR_TRACE_TRIGGER2_MASK_DEPTH  1

	/* Start trace buffer */
#define TSU_IBPR_TRACE_START_ADDR   0x00d249f9L
#define TSU_IBPR_TRACE_START_STRIDE 1
#define TSU_IBPR_TRACE_START_DEPTH  1

	/* Stop trace buffer */
#define TSU_IBPR_TRACE_STOP_ADDR   0x00d249faL
#define TSU_IBPR_TRACE_STOP_STRIDE 1
#define TSU_IBPR_TRACE_STOP_DEPTH  1

	/* Trace buffer status */
#define TSU_IBPR_TRACE_BUFFER_STATUS_ADDR   0x00d249fbL
#define TSU_IBPR_TRACE_BUFFER_STATUS_STRIDE 1
#define TSU_IBPR_TRACE_BUFFER_STATUS_DEPTH  1

	/*
	 * Per vHCA + EPS-C VID table. There are 64 entries per UF. 4096b * 34 (64x34
	 * entries).
	 */
#define TSU_IBPR_EOIB_VID_TABLE_ADDR   0x00d40000L
#define TSU_IBPR_EOIB_VID_TABLE_STRIDE 1
#define TSU_IBPR_EOIB_VID_TABLE_DEPTH  2176

	/* Trace buffer */
#define TSU_IBPR_TRACE_BUFFER_ADDR   0x00d48000L
#define TSU_IBPR_TRACE_BUFFER_STRIDE 1
#define TSU_IBPR_TRACE_BUFFER_DEPTH  32768

#define TSU_SQS_SQ_BASE_ADDR_SW_0_ADDR   0x00e00000L
#define TSU_SQS_SQ_BASE_ADDR_SW_0_STRIDE 1
#define TSU_SQS_SQ_BASE_ADDR_SW_0_DEPTH  35

#define TSU_SQS_SQ_BASE_ADDR_SW_1_ADDR   0x00e00040L
#define TSU_SQS_SQ_BASE_ADDR_SW_1_STRIDE 1
#define TSU_SQS_SQ_BASE_ADDR_SW_1_DEPTH  35

#define TSU_SQS_SQ_BASE_ADDR_SW_2_ADDR   0x00e00080L
#define TSU_SQS_SQ_BASE_ADDR_SW_2_STRIDE 1
#define TSU_SQS_SQ_BASE_ADDR_SW_2_DEPTH  35

#define TSU_SQS_SQ_BASE_ADDR_HW_0_ADDR   0x00e00100L
#define TSU_SQS_SQ_BASE_ADDR_HW_0_STRIDE 1
#define TSU_SQS_SQ_BASE_ADDR_HW_0_DEPTH  35

#define TSU_SQS_SQ_BASE_ADDR_HW_1_ADDR   0x00e00140L
#define TSU_SQS_SQ_BASE_ADDR_HW_1_STRIDE 1
#define TSU_SQS_SQ_BASE_ADDR_HW_1_DEPTH  35

#define TSU_SQS_SQ_BASE_ADDR_HW_2_ADDR   0x00e00180L
#define TSU_SQS_SQ_BASE_ADDR_HW_2_STRIDE 1
#define TSU_SQS_SQ_BASE_ADDR_HW_2_DEPTH  35

	/*
	 * SQS list table is used to program the list number to associate with UF.
	 * Address is list number and data is UF. A single UF can allocate multiple
	 * lists.
	 */
#define TSU_SQS_SQS_LIST_TABLE_ADDR   0x00e00200L
#define TSU_SQS_SQS_LIST_TABLE_STRIDE 1
#define TSU_SQS_SQS_LIST_TABLE_DEPTH  70

	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
#define TSU_SQS_UF_CONTROL_ADDR   0x00e00280L
#define TSU_SQS_UF_CONTROL_STRIDE 1
#define TSU_SQS_UF_CONTROL_DEPTH  1

	/* Starts operation defined in uf_control. */
#define TSU_SQS_UF_CONTROL_KICK_ADDR   0x00e00281L
#define TSU_SQS_UF_CONTROL_KICK_STRIDE 1
#define TSU_SQS_UF_CONTROL_KICK_DEPTH  1

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_SQS_INT_STATUS_ADDR   0x00e00282L
#define TSU_SQS_INT_STATUS_STRIDE 1
#define TSU_SQS_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_SQS_INT_MASK_ADDR   0x00e00283L
#define TSU_SQS_INT_MASK_STRIDE 1
#define TSU_SQS_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_SQS_INT_PRI_ADDR   0x00e00284L
#define TSU_SQS_INT_PRI_STRIDE 1
#define TSU_SQS_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_SQS_INT_STATUS_CLEAR_ADDR   0x00e00285L
#define TSU_SQS_INT_STATUS_CLEAR_STRIDE 1
#define TSU_SQS_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_SQS_INT_STATUS_CLEAR_KICK_ADDR   0x00e00286L
#define TSU_SQS_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_SQS_INT_STATUS_CLEAR_KICK_DEPTH  1

	/* Address: SQS list number. Flush status. */
#define TSU_SQS_SQS_LIST_STATUS0_ADDR   0x00e00300L
#define TSU_SQS_SQS_LIST_STATUS0_STRIDE 1
#define TSU_SQS_SQS_LIST_STATUS0_DEPTH  70

	/*
	 * Address: SQS list number. Set when the PCIe response has error on the
	 * descriptor read.
	 */
#define TSU_SQS_SQS_LIST_STATUS1_ADDR   0x00e00380L
#define TSU_SQS_SQS_LIST_STATUS1_STRIDE 1
#define TSU_SQS_SQS_LIST_STATUS1_DEPTH  70

	/*
	 * Hash mask and shift control. XOR width is based on the log 2 of number of
	 * list for that UF.
	 */
#define TSU_SQS_HASH_CTRL_ADDR   0x00e00400L
#define TSU_SQS_HASH_CTRL_STRIDE 1
#define TSU_SQS_HASH_CTRL_DEPTH  4

	/*
	 * Disble Atomic cmp and swap for the QP next pointer null check. If set,
	 * hardware generates read-then-write to update the QP next pointer.
	 */
#define TSU_SQS_ATOMIC_DISABLE_ADDR   0x00e00405L
#define TSU_SQS_ATOMIC_DISABLE_STRIDE 1
#define TSU_SQS_ATOMIC_DISABLE_DEPTH  1

	/* Number of burst read for the send queue element per QP. */
#define TSU_SQS_SQ_BURST_READ_SIZE_ADDR   0x00e00406L
#define TSU_SQS_SQ_BURST_READ_SIZE_STRIDE 1
#define TSU_SQS_SQ_BURST_READ_SIZE_DEPTH  1

	/* Number of DB count from CBU. */
#define TSU_SQS_CBU_DB_CNT_ADDR   0x00e00407L
#define TSU_SQS_CBU_DB_CNT_STRIDE 1
#define TSU_SQS_CBU_DB_CNT_DEPTH  1

	/* Number of DB count from ERR. */
#define TSU_SQS_ERR_DB_CNT_ADDR   0x00e00408L
#define TSU_SQS_ERR_DB_CNT_STRIDE 1
#define TSU_SQS_ERR_DB_CNT_DEPTH  1

	/* Number of LLQ push. */
#define TSU_SQS_LLQ_PUSH_CNT_ADDR   0x00e00409L
#define TSU_SQS_LLQ_PUSH_CNT_STRIDE 1
#define TSU_SQS_LLQ_PUSH_CNT_DEPTH  1

	/* Number of LLQ pop. */
#define TSU_SQS_LLQ_POP_CNT_ADDR   0x00e0040aL
#define TSU_SQS_LLQ_POP_CNT_STRIDE 1
#define TSU_SQS_LLQ_POP_CNT_DEPTH  1

	/* Number of LLQ peek. */
#define TSU_SQS_LLQ_PEEK_CNT_ADDR   0x00e0040bL
#define TSU_SQS_LLQ_PEEK_CNT_STRIDE 1
#define TSU_SQS_LLQ_PEEK_CNT_DEPTH  1

	/* Number of Send Queue read. */
#define TSU_SQS_SQ_RD_CNT_ADDR   0x00e0040cL
#define TSU_SQS_SQ_RD_CNT_STRIDE 1
#define TSU_SQS_SQ_RD_CNT_DEPTH  1

	/* Number of Descriptor read. */
#define TSU_SQS_DSCR_REQ_CNT_ADDR   0x00e0040dL
#define TSU_SQS_DSCR_REQ_CNT_STRIDE 1
#define TSU_SQS_DSCR_REQ_CNT_DEPTH  1

	/* Number of Descriptor read response. */
#define TSU_SQS_DSCR_RSP_CNT_ADDR   0x00e0040eL
#define TSU_SQS_DSCR_RSP_CNT_STRIDE 1
#define TSU_SQS_DSCR_RSP_CNT_DEPTH  1

	/* Number of Atomic request. */
#define TSU_SQS_ATM_REQ_CNT_ADDR   0x00e0040fL
#define TSU_SQS_ATM_REQ_CNT_STRIDE 1
#define TSU_SQS_ATM_REQ_CNT_DEPTH  1

	/* Number of Atomic response. */
#define TSU_SQS_ATM_RSP_CNT_ADDR   0x00e00410L
#define TSU_SQS_ATM_RSP_CNT_STRIDE 1
#define TSU_SQS_ATM_RSP_CNT_DEPTH  1

	/* Number of QP insert to the SQS list. */
#define TSU_SQS_PUSH_SQS_LIST_CNT_ADDR   0x00e00411L
#define TSU_SQS_PUSH_SQS_LIST_CNT_STRIDE 1
#define TSU_SQS_PUSH_SQS_LIST_CNT_DEPTH  1

	/* Number of clock to wait before writting to the ring. */
#define TSU_SQS_RING_TIMER_ADDR   0x00e00412L
#define TSU_SQS_RING_TIMER_STRIDE 1
#define TSU_SQS_RING_TIMER_DEPTH  1

	/* Set to write 64B for the send queue hardware descriptor. */
#define TSU_SQS_PADDED_SQ_DSCR_HW_ADDR   0x00e00413L
#define TSU_SQS_PADDED_SQ_DSCR_HW_STRIDE 1
#define TSU_SQS_PADDED_SQ_DSCR_HW_DEPTH  1

	/* Set to write 64B for the PIO ring buffer. */
#define TSU_SQS_PADDED_RING_BUFFER_ADDR   0x00e00414L
#define TSU_SQS_PADDED_RING_BUFFER_STRIDE 1
#define TSU_SQS_PADDED_RING_BUFFER_DEPTH  1

	/* ECC error control */
#define TSU_SQS_ECC_ERR_CTRL_ADDR   0x00e00415L
#define TSU_SQS_ECC_ERR_CTRL_STRIDE 1
#define TSU_SQS_ECC_ERR_CTRL_DEPTH  1

	/* ECC status */
#define TSU_SQS_ECC_ERR_STATUS_ADDR   0x00e00416L
#define TSU_SQS_ECC_ERR_STATUS_STRIDE 1
#define TSU_SQS_ECC_ERR_STATUS_DEPTH  1

	/* ECC status */
#define TSU_SQS_ECC_ERR_STATUS_CLEAR_ADDR   0x00e00417L
#define TSU_SQS_ECC_ERR_STATUS_CLEAR_STRIDE 1
#define TSU_SQS_ECC_ERR_STATUS_CLEAR_DEPTH  1

#define TSU_SQS_PIO_RING_BASE_ADDR_0_ADDR   0x00e00500L
#define TSU_SQS_PIO_RING_BASE_ADDR_0_STRIDE 1
#define TSU_SQS_PIO_RING_BASE_ADDR_0_DEPTH  35

#define TSU_SQS_PIO_RING_BASE_ADDR_1_ADDR   0x00e00540L
#define TSU_SQS_PIO_RING_BASE_ADDR_1_STRIDE 1
#define TSU_SQS_PIO_RING_BASE_ADDR_1_DEPTH  35

#define TSU_SQS_PIO_RING_BASE_ADDR_2_ADDR   0x00e00580L
#define TSU_SQS_PIO_RING_BASE_ADDR_2_STRIDE 1
#define TSU_SQS_PIO_RING_BASE_ADDR_2_DEPTH  35

	/* Read/Write for the PIO ring buffer write pointer */
#define TSU_SQS_PIO_RING_BUFFER_WR_PTR_ADDR   0x00e005c0L
#define TSU_SQS_PIO_RING_BUFFER_WR_PTR_STRIDE 1
#define TSU_SQS_PIO_RING_BUFFER_WR_PTR_DEPTH  35

	/*
	 * Address: SQS list number. Set when the PCIe response has error on the
	 * descriptor read.
	 */
#define TSU_SQS_SQS_LIST_ERR_STATUS_ADDR   0x00e00600L
#define TSU_SQS_SQS_LIST_ERR_STATUS_STRIDE 1
#define TSU_SQS_SQS_LIST_ERR_STATUS_DEPTH  70

	/* Read/Write for the PIO ring buffer read pointer */
#define TSU_SQS_PIO_RING_BUFFER_RD_PTR_ADDR   0x00e00680L
#define TSU_SQS_PIO_RING_BUFFER_RD_PTR_STRIDE 1
#define TSU_SQS_PIO_RING_BUFFER_RD_PTR_DEPTH  35

	/* Read/Write for the PIO ring buffer pending count */
#define TSU_SQS_PIO_RING_BUFFER_PENDING_CNT_ADDR   0x00e006c0L
#define TSU_SQS_PIO_RING_BUFFER_PENDING_CNT_STRIDE 1
#define TSU_SQS_PIO_RING_BUFFER_PENDING_CNT_DEPTH  35

	/* Interrupt status register. 1b per source (1 = int triggered). */
#define TSU_ERR_INT_STATUS_ADDR   0x00f00000L
#define TSU_ERR_INT_STATUS_STRIDE 1
#define TSU_ERR_INT_STATUS_DEPTH  1

	/* Interrupt mask register. 1b per source (1 = masked). */
#define TSU_ERR_INT_MASK_ADDR   0x00f00001L
#define TSU_ERR_INT_MASK_STRIDE 1
#define TSU_ERR_INT_MASK_DEPTH  1

	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
#define TSU_ERR_INT_PRI_ADDR   0x00f00002L
#define TSU_ERR_INT_PRI_STRIDE 1
#define TSU_ERR_INT_PRI_DEPTH  1

	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
#define TSU_ERR_INT_STATUS_CLEAR_ADDR   0x00f00003L
#define TSU_ERR_INT_STATUS_CLEAR_STRIDE 1
#define TSU_ERR_INT_STATUS_CLEAR_DEPTH  1

	/* Trigger the int_status clear operation. */
#define TSU_ERR_INT_STATUS_CLEAR_KICK_ADDR   0x00f00004L
#define TSU_ERR_INT_STATUS_CLEAR_KICK_STRIDE 1
#define TSU_ERR_INT_STATUS_CLEAR_KICK_DEPTH  1

	/* Async event FIFO - status portion. */
#define TSU_ERR_ASYNC_EVENT_STATUS_ADDR   0x00f00010L
#define TSU_ERR_ASYNC_EVENT_STATUS_STRIDE 1
#define TSU_ERR_ASYNC_EVENT_STATUS_DEPTH  1

	/* Async event FIFO - affiliated data portion. */
#define TSU_ERR_ASYNC_EVENT_AFFILIATED_ADDR   0x00f00011L
#define TSU_ERR_ASYNC_EVENT_AFFILIATED_STRIDE 1
#define TSU_ERR_ASYNC_EVENT_AFFILIATED_DEPTH  1

	/* This pop register is written after async event register is read. */
#define TSU_ERR_ASYNC_EVENT_POP_ADDR   0x00f00012L
#define TSU_ERR_ASYNC_EVENT_POP_STRIDE 1
#define TSU_ERR_ASYNC_EVENT_POP_DEPTH  1

	/* Error type the host_counter is counting. */
#define TSU_ERR_HOST_ERROR_TYPE_ADDR   0x00f00200L
#define TSU_ERR_HOST_ERROR_TYPE_STRIDE 1
#define TSU_ERR_HOST_ERROR_TYPE_DEPTH  1

	/*
	 * Counts how many times error type defined in host_error_type register is
	 * received by tsu_err. Sticky at max value and then needs to be cleared.
	 */
#define TSU_ERR_HOST_COUNTER_ADDR   0x00f00201L
#define TSU_ERR_HOST_COUNTER_STRIDE 1
#define TSU_ERR_HOST_COUNTER_DEPTH  1

	/* Clears host_counter. */
#define TSU_ERR_CLEAR_HOST_COUNTER_ADDR   0x00f00202L
#define TSU_ERR_CLEAR_HOST_COUNTER_STRIDE 1
#define TSU_ERR_CLEAR_HOST_COUNTER_DEPTH  1

	/* Error type the cmpl_counter is counting. */
#define TSU_ERR_CMPL_ERROR_TYPE_ADDR   0x00f00210L
#define TSU_ERR_CMPL_ERROR_TYPE_STRIDE 1
#define TSU_ERR_CMPL_ERROR_TYPE_DEPTH  1

	/*
	 * Counts how many times error type defined in cmpl_error_type register is
	 * received by tsu_err. Sticky at max value and then needs to be cleared.
	 */
#define TSU_ERR_CMPL_COUNTER_ADDR   0x00f00211L
#define TSU_ERR_CMPL_COUNTER_STRIDE 1
#define TSU_ERR_CMPL_COUNTER_DEPTH  1

	/* Clears. */
#define TSU_ERR_CLEAR_CMPL_COUNTER_ADDR   0x00f00212L
#define TSU_ERR_CLEAR_CMPL_COUNTER_STRIDE 1
#define TSU_ERR_CLEAR_CMPL_COUNTER_DEPTH  1

	/* Clears the diag RAM for the UF specified. */
#define TSU_ERR_CLEAR_DIAG_RAM_ADDR   0x00f01000L
#define TSU_ERR_CLEAR_DIAG_RAM_STRIDE 1
#define TSU_ERR_CLEAR_DIAG_RAM_DEPTH  1

	/* Clears the diag RAM - per UF. */
#define TSU_ERR_CLEAR_DIAG_RAM_KICK_ADDR   0x00f01001L
#define TSU_ERR_CLEAR_DIAG_RAM_KICK_STRIDE 1
#define TSU_ERR_CLEAR_DIAG_RAM_KICK_DEPTH  1

	/* Read the address for the UF. */
#define TSU_ERR_DIAG_RAM_ADDR_ADDR   0x00f0139cL
#define TSU_ERR_DIAG_RAM_ADDR_STRIDE 1
#define TSU_ERR_DIAG_RAM_ADDR_DEPTH  35

	/* Set up which RAM entry to read. */
#define TSU_ERR_DIAG_RAM_READ_ADDR_ADDR   0x00f0179cL
#define TSU_ERR_DIAG_RAM_READ_ADDR_STRIDE 1
#define TSU_ERR_DIAG_RAM_READ_ADDR_DEPTH  1

	/*
	 * Kick - reads the data from the RAM entry specified in diag_ram_read_addr
	 * and adds it to registers which can be read.
	 */
#define TSU_ERR_DIAG_RAM_READ_KICK_ADDR   0x00f01b9bL
#define TSU_ERR_DIAG_RAM_READ_KICK_STRIDE 1
#define TSU_ERR_DIAG_RAM_READ_KICK_DEPTH  1

	/* Time to wait before starting send queue mode. */
#define TSU_ERR_FENCE_TIME_TO_WAIT_ADDR   0x00f02000L
#define TSU_ERR_FENCE_TIME_TO_WAIT_STRIDE 1
#define TSU_ERR_FENCE_TIME_TO_WAIT_DEPTH  1

	/* Data from the diagnostic RAM. */
#define TSU_ERR_DIAG_RAM_DATA_ADDR   0x00f08000L
#define TSU_ERR_DIAG_RAM_DATA_STRIDE 1
#define TSU_ERR_DIAG_RAM_DATA_DEPTH  6

	/* Clear all counters having the bit set in the mask. */
#define TSU_ERR_CLEAR_ERROR_COUNTERS_ADDR   0x00f08400L
#define TSU_ERR_CLEAR_ERROR_COUNTERS_STRIDE 1
#define TSU_ERR_CLEAR_ERROR_COUNTERS_DEPTH  1

	/* Clear all counters having the bit set in the mask. */
#define TSU_ERR_CLEAR_ERROR_COUNTERS_KICK_ADDR   0x00f08401L
#define TSU_ERR_CLEAR_ERROR_COUNTERS_KICK_STRIDE 1
#define TSU_ERR_CLEAR_ERROR_COUNTERS_KICK_DEPTH  1

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_0_ADDR   0x00f10000L
#define TSU_ERR_ERROR_COUNTER_0_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_0_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_1_ADDR   0x00f10040L
#define TSU_ERR_ERROR_COUNTER_1_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_1_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_2_ADDR   0x00f10080L
#define TSU_ERR_ERROR_COUNTER_2_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_2_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_3_ADDR   0x00f100c0L
#define TSU_ERR_ERROR_COUNTER_3_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_3_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_4_ADDR   0x00f10100L
#define TSU_ERR_ERROR_COUNTER_4_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_4_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_5_ADDR   0x00f10140L
#define TSU_ERR_ERROR_COUNTER_5_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_5_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_6_ADDR   0x00f10180L
#define TSU_ERR_ERROR_COUNTER_6_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_6_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_7_ADDR   0x00f101c0L
#define TSU_ERR_ERROR_COUNTER_7_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_7_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_8_ADDR   0x00f10200L
#define TSU_ERR_ERROR_COUNTER_8_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_8_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_9_ADDR   0x00f10240L
#define TSU_ERR_ERROR_COUNTER_9_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_9_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_10_ADDR   0x00f10280L
#define TSU_ERR_ERROR_COUNTER_10_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_10_DEPTH  33

	/* Error counters. */
#define TSU_ERR_ERROR_COUNTER_11_ADDR   0x00f102c0L
#define TSU_ERR_ERROR_COUNTER_11_STRIDE 1
#define TSU_ERR_ERROR_COUNTER_11_DEPTH  33

#define IBU_P1_CNT1US_CNT124US_ADDR   0x01100001L
#define IBU_P1_CNT1US_CNT124US_STRIDE 1
#define IBU_P1_CNT1US_CNT124US_DEPTH  1

#define IBU_P1_CNT2MS_ADDR   0x01100002L
#define IBU_P1_CNT2MS_STRIDE 1
#define IBU_P1_CNT2MS_DEPTH  1

#define IBU_P1_CNT10MS_ADDR   0x01100003L
#define IBU_P1_CNT10MS_STRIDE 1
#define IBU_P1_CNT10MS_DEPTH  1

#define IBU_P1_CNT100MS_ADDR   0x01100004L
#define IBU_P1_CNT100MS_STRIDE 1
#define IBU_P1_CNT100MS_DEPTH  1

#define IBU_P1_CNT150MS_ADDR   0x01100005L
#define IBU_P1_CNT150MS_STRIDE 1
#define IBU_P1_CNT150MS_DEPTH  1

#define IBU_P1_CNT400MS_ADDR   0x01100006L
#define IBU_P1_CNT400MS_STRIDE 1
#define IBU_P1_CNT400MS_DEPTH  1

#define IBU_P1_SKP_TO_CNT_ADDR   0x01100007L
#define IBU_P1_SKP_TO_CNT_STRIDE 1
#define IBU_P1_SKP_TO_CNT_DEPTH  1

#define IBU_P1_TGT_VAL_ADDR   0x01100008L
#define IBU_P1_TGT_VAL_STRIDE 1
#define IBU_P1_TGT_VAL_DEPTH  1

#define IBU_P1_PHY_VCONFIG_ADDR   0x01100009L
#define IBU_P1_PHY_VCONFIG_STRIDE 1
#define IBU_P1_PHY_VCONFIG_DEPTH  1

#define IBU_P1_PHY_DISP_ERROR_CNT_ADDR   0x0110000aL
#define IBU_P1_PHY_DISP_ERROR_CNT_STRIDE 1
#define IBU_P1_PHY_DISP_ERROR_CNT_DEPTH  1

#define IBU_P1_PHY_CODE_ERROR_CNT_ADDR   0x0110000bL
#define IBU_P1_PHY_CODE_ERROR_CNT_STRIDE 1
#define IBU_P1_PHY_CODE_ERROR_CNT_DEPTH  1

#define IBU_P1_PHY_EVENT_LOG_ADDR   0x0110000cL
#define IBU_P1_PHY_EVENT_LOG_STRIDE 1
#define IBU_P1_PHY_EVENT_LOG_DEPTH  1

#define IBU_P1_PORT_TRAIN_FSM_ADDR   0x0110000dL
#define IBU_P1_PORT_TRAIN_FSM_STRIDE 1
#define IBU_P1_PORT_TRAIN_FSM_DEPTH  1

#define IBU_P1_PHY_TRAIN_SMTIMER_VS1_ADDR   0x0110000eL
#define IBU_P1_PHY_TRAIN_SMTIMER_VS1_STRIDE 1
#define IBU_P1_PHY_TRAIN_SMTIMER_VS1_DEPTH  1

#define IBU_P1_MASK_ADDR   0x0110000fL
#define IBU_P1_MASK_STRIDE 1
#define IBU_P1_MASK_DEPTH  1

#define IBU_P1_STATUS_ADDR   0x01100010L
#define IBU_P1_STATUS_STRIDE 1
#define IBU_P1_STATUS_DEPTH  1

#define IBU_P1_LINK_WIDTH_ENABLED_ADDR   0x01100011L
#define IBU_P1_LINK_WIDTH_ENABLED_STRIDE 1
#define IBU_P1_LINK_WIDTH_ENABLED_DEPTH  1

#define IBU_P1_LINK_WIDTH_SUPPORTED_ADDR   0x01100012L
#define IBU_P1_LINK_WIDTH_SUPPORTED_STRIDE 1
#define IBU_P1_LINK_WIDTH_SUPPORTED_DEPTH  1

#define IBU_P1_LINK_WIDTH_ACTIVE_ADDR   0x01100013L
#define IBU_P1_LINK_WIDTH_ACTIVE_STRIDE 1
#define IBU_P1_LINK_WIDTH_ACTIVE_DEPTH  1

#define IBU_P1_LINK_SPEED_SUPPORTED_ADDR   0x01100014L
#define IBU_P1_LINK_SPEED_SUPPORTED_STRIDE 1
#define IBU_P1_LINK_SPEED_SUPPORTED_DEPTH  1

#define IBU_P1_PORT_PHYSICAL_STATE_ADDR   0x01100015L
#define IBU_P1_PORT_PHYSICAL_STATE_STRIDE 1
#define IBU_P1_PORT_PHYSICAL_STATE_DEPTH  1

#define IBU_P1_LINK_DOWN_DEFAULT_STATE_ADDR   0x01100016L
#define IBU_P1_LINK_DOWN_DEFAULT_STATE_STRIDE 1
#define IBU_P1_LINK_DOWN_DEFAULT_STATE_DEPTH  1

#define IBU_P1_LINK_SPEED_ACTIVE_ADDR   0x01100017L
#define IBU_P1_LINK_SPEED_ACTIVE_STRIDE 1
#define IBU_P1_LINK_SPEED_ACTIVE_DEPTH  1

#define IBU_P1_LINK_SPEED_ENABLED_ADDR   0x01100018L
#define IBU_P1_LINK_SPEED_ENABLED_STRIDE 1
#define IBU_P1_LINK_SPEED_ENABLED_DEPTH  1

#define IBU_P1_PCPHY_CNT_RST_ADDR   0x01100019L
#define IBU_P1_PCPHY_CNT_RST_STRIDE 1
#define IBU_P1_PCPHY_CNT_RST_DEPTH  1

#define IBU_P1_PCPHY_CNT_LOAD_ADDR   0x0110001aL
#define IBU_P1_PCPHY_CNT_LOAD_STRIDE 1
#define IBU_P1_PCPHY_CNT_LOAD_DEPTH  1

#define IBU_P1_PCSYMB_ERR_CNT_ADDR   0x0110001bL
#define IBU_P1_PCSYMB_ERR_CNT_STRIDE 1
#define IBU_P1_PCSYMB_ERR_CNT_DEPTH  1

#define IBU_P1_PCLINK_ERR_REC_CNT_ADDR   0x0110001cL
#define IBU_P1_PCLINK_ERR_REC_CNT_STRIDE 1
#define IBU_P1_PCLINK_ERR_REC_CNT_DEPTH  1

#define IBU_P1_PCLINK_DOWNED_CNT_ADDR   0x0110001dL
#define IBU_P1_PCLINK_DOWNED_CNT_STRIDE 1
#define IBU_P1_PCLINK_DOWNED_CNT_DEPTH  1

#define IBU_P1_PCSYMB_ERR_CNT_LANE0_ADDR   0x0110001eL
#define IBU_P1_PCSYMB_ERR_CNT_LANE0_STRIDE 1
#define IBU_P1_PCSYMB_ERR_CNT_LANE0_DEPTH  1

#define IBU_P1_PCSYMB_ERR_CNT_LANE1_ADDR   0x0110001fL
#define IBU_P1_PCSYMB_ERR_CNT_LANE1_STRIDE 1
#define IBU_P1_PCSYMB_ERR_CNT_LANE1_DEPTH  1

#define IBU_P1_PCSYMB_ERR_CNT_LANE2_ADDR   0x01100020L
#define IBU_P1_PCSYMB_ERR_CNT_LANE2_STRIDE 1
#define IBU_P1_PCSYMB_ERR_CNT_LANE2_DEPTH  1

#define IBU_P1_PCSYMB_ERR_CNT_LANE3_ADDR   0x01100021L
#define IBU_P1_PCSYMB_ERR_CNT_LANE3_STRIDE 1
#define IBU_P1_PCSYMB_ERR_CNT_LANE3_DEPTH  1

#define IBU_P1_TS3_REV1_TT0_COUNTER_ADDR   0x01100022L
#define IBU_P1_TS3_REV1_TT0_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT0_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT1_COUNTER_ADDR   0x01100023L
#define IBU_P1_TS3_REV1_TT1_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT1_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT2_COUNTER_ADDR   0x01100024L
#define IBU_P1_TS3_REV1_TT2_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT2_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT3_COUNTER_ADDR   0x01100025L
#define IBU_P1_TS3_REV1_TT3_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT3_COUNTER_DEPTH  1

#define IBU_P1_PHY_ALIGN_ERROR_CNT_ADDR   0x01100026L
#define IBU_P1_PHY_ALIGN_ERROR_CNT_STRIDE 1
#define IBU_P1_PHY_ALIGN_ERROR_CNT_DEPTH  1

#define IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT_ADDR   0x01100027L
#define IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT_STRIDE 1
#define IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT_DEPTH  1

#define IBU_P1_PHY_PAD_ERROR_CNT_ADDR   0x01100028L
#define IBU_P1_PHY_PAD_ERROR_CNT_STRIDE 1
#define IBU_P1_PHY_PAD_ERROR_CNT_DEPTH  1

#define IBU_P1_PHY_EDR_FDR_CONFIG0_ADDR   0x01100029L
#define IBU_P1_PHY_EDR_FDR_CONFIG0_STRIDE 1
#define IBU_P1_PHY_EDR_FDR_CONFIG0_DEPTH  1

#define IBU_P1_PHY_EDR_FDR_CONFIG1_ADDR   0x0110002aL
#define IBU_P1_PHY_EDR_FDR_CONFIG1_STRIDE 1
#define IBU_P1_PHY_EDR_FDR_CONFIG1_DEPTH  1

#define IBU_P1_PHY_LEAKY_BKT_THRSH_ADDR   0x0110002bL
#define IBU_P1_PHY_LEAKY_BKT_THRSH_STRIDE 1
#define IBU_P1_PHY_LEAKY_BKT_THRSH_DEPTH  1

#define IBU_P1_RCV_TS3_STATUS_LOW_ADDR   0x0110002dL
#define IBU_P1_RCV_TS3_STATUS_LOW_STRIDE 1
#define IBU_P1_RCV_TS3_STATUS_LOW_DEPTH  1

#define IBU_P1_RCV_TS3_STATUS_HIGH_ADDR   0x0110002eL
#define IBU_P1_RCV_TS3_STATUS_HIGH_STRIDE 1
#define IBU_P1_RCV_TS3_STATUS_HIGH_DEPTH  1

#define IBU_P1_GUID0_ADDR   0x0110002fL
#define IBU_P1_GUID0_STRIDE 1
#define IBU_P1_GUID0_DEPTH  1

#define IBU_P1_GUID1_ADDR   0x01100030L
#define IBU_P1_GUID1_STRIDE 1
#define IBU_P1_GUID1_DEPTH  1

#define IBU_P1_PNUM_ADDR   0x01100031L
#define IBU_P1_PNUM_STRIDE 1
#define IBU_P1_PNUM_DEPTH  1

#define IBU_P1_CNT4MS_ADDR   0x01100032L
#define IBU_P1_CNT4MS_STRIDE 1
#define IBU_P1_CNT4MS_DEPTH  1

#define IBU_P1_CNT36MS_ADDR   0x01100033L
#define IBU_P1_CNT36MS_STRIDE 1
#define IBU_P1_CNT36MS_DEPTH  1

#define IBU_P1_PHY_TS3_CONFIG_ADDR   0x01100034L
#define IBU_P1_PHY_TS3_CONFIG_STRIDE 1
#define IBU_P1_PHY_TS3_CONFIG_DEPTH  1

#define IBU_P1_DDS_WINDOW_START_ADDR   0x01100035L
#define IBU_P1_DDS_WINDOW_START_STRIDE 1
#define IBU_P1_DDS_WINDOW_START_DEPTH  1

#define IBU_P1_DDS_WINDOW_END_ADDR   0x01100036L
#define IBU_P1_DDS_WINDOW_END_STRIDE 1
#define IBU_P1_DDS_WINDOW_END_DEPTH  1

#define IBU_P1_DDS_DEFAULT_WINDOW_END_ADDR   0x01100037L
#define IBU_P1_DDS_DEFAULT_WINDOW_END_STRIDE 1
#define IBU_P1_DDS_DEFAULT_WINDOW_END_DEPTH  1

#define IBU_P1_RX_TS3DDS_STATUS_ADDR   0x01100038L
#define IBU_P1_RX_TS3DDS_STATUS_STRIDE 1
#define IBU_P1_RX_TS3DDS_STATUS_DEPTH  1

#define IBU_P1_TX_TS3DDS_STATUS_ADDR   0x01100039L
#define IBU_P1_TX_TS3DDS_STATUS_STRIDE 1
#define IBU_P1_TX_TS3DDS_STATUS_DEPTH  1

#define IBU_P1_CNT16MS_ADDR   0x0110003aL
#define IBU_P1_CNT16MS_STRIDE 1
#define IBU_P1_CNT16MS_DEPTH  1

#define IBU_P1_CONF_TEST4MS_SCT_ADDR   0x0110003bL
#define IBU_P1_CONF_TEST4MS_SCT_STRIDE 1
#define IBU_P1_CONF_TEST4MS_SCT_DEPTH  1

#define IBU_P1_CONF_TEST16MS_SCT_ADDR   0x0110003cL
#define IBU_P1_CONF_TEST16MS_SCT_STRIDE 1
#define IBU_P1_CONF_TEST16MS_SCT_DEPTH  1

#define IBU_P1_LOCAL_ADDTEST_LIMIT_ADDR   0x0110003dL
#define IBU_P1_LOCAL_ADDTEST_LIMIT_STRIDE 1
#define IBU_P1_LOCAL_ADDTEST_LIMIT_DEPTH  1

#define IBU_P1_REMOTE_ADDTEST_LIMIT_ADDR   0x0110003eL
#define IBU_P1_REMOTE_ADDTEST_LIMIT_STRIDE 1
#define IBU_P1_REMOTE_ADDTEST_LIMIT_DEPTH  1

#define IBU_P1_TS3_REV1_TT4_COUNTER_ADDR   0x0110003fL
#define IBU_P1_TS3_REV1_TT4_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT4_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT5_COUNTER_ADDR   0x01100040L
#define IBU_P1_TS3_REV1_TT5_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT5_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT6_COUNTER_ADDR   0x01100041L
#define IBU_P1_TS3_REV1_TT6_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT6_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT7_COUNTER_ADDR   0x01100042L
#define IBU_P1_TS3_REV1_TT7_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT7_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT8_COUNTER_ADDR   0x01100043L
#define IBU_P1_TS3_REV1_TT8_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT8_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT9_COUNTER_ADDR   0x01100044L
#define IBU_P1_TS3_REV1_TT9_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT9_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT10_COUNTER_ADDR   0x01100045L
#define IBU_P1_TS3_REV1_TT10_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT10_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT11_COUNTER_ADDR   0x01100046L
#define IBU_P1_TS3_REV1_TT11_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT11_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT12_COUNTER_ADDR   0x01100047L
#define IBU_P1_TS3_REV1_TT12_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT12_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT13_COUNTER_ADDR   0x01100048L
#define IBU_P1_TS3_REV1_TT13_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT13_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT14_COUNTER_ADDR   0x01100049L
#define IBU_P1_TS3_REV1_TT14_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT14_COUNTER_DEPTH  1

#define IBU_P1_TS3_REV1_TT15_COUNTER_ADDR   0x0110004aL
#define IBU_P1_TS3_REV1_TT15_COUNTER_STRIDE 1
#define IBU_P1_TS3_REV1_TT15_COUNTER_DEPTH  1

#define IBU_P1_CONF_TEST_LANE_ERROR_LIMIT_ADDR   0x0110004bL
#define IBU_P1_CONF_TEST_LANE_ERROR_LIMIT_STRIDE 1
#define IBU_P1_CONF_TEST_LANE_ERROR_LIMIT_DEPTH  1

#define IBU_P1_CONF_TEST_IDLE_LIMIT_ADDR   0x0110004cL
#define IBU_P1_CONF_TEST_IDLE_LIMIT_STRIDE 1
#define IBU_P1_CONF_TEST_IDLE_LIMIT_DEPTH  1

#define IBU_P1_CONF_TEST2MS_SCT_ADDR   0x0110004dL
#define IBU_P1_CONF_TEST2MS_SCT_STRIDE 1
#define IBU_P1_CONF_TEST2MS_SCT_DEPTH  1

#define IBU_P1_CNT100_MS_HBR_ADDR   0x0110004eL
#define IBU_P1_CNT100_MS_HBR_STRIDE 1
#define IBU_P1_CNT100_MS_HBR_DEPTH  1

#define IBU_P1_PMAEQULANE0_STATUS_ADDR   0x0110004fL
#define IBU_P1_PMAEQULANE0_STATUS_STRIDE 1
#define IBU_P1_PMAEQULANE0_STATUS_DEPTH  1

#define IBU_P1_PMAEQULANE1_STATUS_ADDR   0x01100050L
#define IBU_P1_PMAEQULANE1_STATUS_STRIDE 1
#define IBU_P1_PMAEQULANE1_STATUS_DEPTH  1

#define IBU_P1_PMAEQULANE2_STATUS_ADDR   0x01100051L
#define IBU_P1_PMAEQULANE2_STATUS_STRIDE 1
#define IBU_P1_PMAEQULANE2_STATUS_DEPTH  1

#define IBU_P1_PMAEQULANE3_STATUS_ADDR   0x01100052L
#define IBU_P1_PMAEQULANE3_STATUS_STRIDE 1
#define IBU_P1_PMAEQULANE3_STATUS_DEPTH  1

#define IBU_P1_PMADDSLANE0_STATUS_ADDR   0x01100053L
#define IBU_P1_PMADDSLANE0_STATUS_STRIDE 1
#define IBU_P1_PMADDSLANE0_STATUS_DEPTH  1

#define IBU_P1_PMADDSLANE1_STATUS_ADDR   0x01100054L
#define IBU_P1_PMADDSLANE1_STATUS_STRIDE 1
#define IBU_P1_PMADDSLANE1_STATUS_DEPTH  1

#define IBU_P1_PMADDSLANE2_STATUS_ADDR   0x01100055L
#define IBU_P1_PMADDSLANE2_STATUS_STRIDE 1
#define IBU_P1_PMADDSLANE2_STATUS_DEPTH  1

#define IBU_P1_PMADDSLANE3_STATUS_ADDR   0x01100056L
#define IBU_P1_PMADDSLANE3_STATUS_STRIDE 1
#define IBU_P1_PMADDSLANE3_STATUS_DEPTH  1

#define IBU_P1_PHY_EDPL_ERR0_ADDR   0x01100057L
#define IBU_P1_PHY_EDPL_ERR0_STRIDE 1
#define IBU_P1_PHY_EDPL_ERR0_DEPTH  1

#define IBU_P1_PHY_EDPL_ERR1_ADDR   0x01100058L
#define IBU_P1_PHY_EDPL_ERR1_STRIDE 1
#define IBU_P1_PHY_EDPL_ERR1_DEPTH  1

#define IBU_P1_PHY_EDPL_ERR2_ADDR   0x01100059L
#define IBU_P1_PHY_EDPL_ERR2_STRIDE 1
#define IBU_P1_PHY_EDPL_ERR2_DEPTH  1

#define IBU_P1_PHY_EDPL_ERR3_ADDR   0x0110005aL
#define IBU_P1_PHY_EDPL_ERR3_STRIDE 1
#define IBU_P1_PHY_EDPL_ERR3_DEPTH  1

#define IBU_P1_PHY_BLK_TYPE_ERR_ADDR   0x0110005bL
#define IBU_P1_PHY_BLK_TYPE_ERR_STRIDE 1
#define IBU_P1_PHY_BLK_TYPE_ERR_DEPTH  1

#define IBU_P1_PHY_BLK_EOP_ERR_ADDR   0x0110005cL
#define IBU_P1_PHY_BLK_EOP_ERR_STRIDE 1
#define IBU_P1_PHY_BLK_EOP_ERR_DEPTH  1

#define IBU_P1_PHY_CIN_PKT_ERR_ADDR   0x0110005dL
#define IBU_P1_PHY_CIN_PKT_ERR_STRIDE 1
#define IBU_P1_PHY_CIN_PKT_ERR_DEPTH  1

#define IBU_P1_PHY_SYN_HDR_ERR_ADDR   0x0110005eL
#define IBU_P1_PHY_SYN_HDR_ERR_STRIDE 1
#define IBU_P1_PHY_SYN_HDR_ERR_DEPTH  1

#define IBU_P1_PHY_PRBS_ERR0_ADDR   0x0110005fL
#define IBU_P1_PHY_PRBS_ERR0_STRIDE 1
#define IBU_P1_PHY_PRBS_ERR0_DEPTH  1

#define IBU_P1_PHY_PRBS_ERR1_ADDR   0x01100060L
#define IBU_P1_PHY_PRBS_ERR1_STRIDE 1
#define IBU_P1_PHY_PRBS_ERR1_DEPTH  1

#define IBU_P1_PHY_PRBS_ERR2_ADDR   0x01100061L
#define IBU_P1_PHY_PRBS_ERR2_STRIDE 1
#define IBU_P1_PHY_PRBS_ERR2_DEPTH  1

#define IBU_P1_PHY_PRBS_ERR3_ADDR   0x01100062L
#define IBU_P1_PHY_PRBS_ERR3_STRIDE 1
#define IBU_P1_PHY_PRBS_ERR3_DEPTH  1

#define IBU_P1_PHY_DESKEW_STATUS_ADDR   0x01100063L
#define IBU_P1_PHY_DESKEW_STATUS_STRIDE 1
#define IBU_P1_PHY_DESKEW_STATUS_DEPTH  1

#define IBU_P1_PHY_FECUNC_ERR0_ADDR   0x01100064L
#define IBU_P1_PHY_FECUNC_ERR0_STRIDE 1
#define IBU_P1_PHY_FECUNC_ERR0_DEPTH  1

#define IBU_P1_PHY_FECUNC_ERR1_ADDR   0x01100065L
#define IBU_P1_PHY_FECUNC_ERR1_STRIDE 1
#define IBU_P1_PHY_FECUNC_ERR1_DEPTH  1

#define IBU_P1_PHY_FECUNC_ERR2_ADDR   0x01100066L
#define IBU_P1_PHY_FECUNC_ERR2_STRIDE 1
#define IBU_P1_PHY_FECUNC_ERR2_DEPTH  1

#define IBU_P1_PHY_FECUNC_ERR3_ADDR   0x01100067L
#define IBU_P1_PHY_FECUNC_ERR3_STRIDE 1
#define IBU_P1_PHY_FECUNC_ERR3_DEPTH  1

#define IBU_P1_PHY_FECCOR_ERR0_ADDR   0x01100068L
#define IBU_P1_PHY_FECCOR_ERR0_STRIDE 1
#define IBU_P1_PHY_FECCOR_ERR0_DEPTH  1

#define IBU_P1_PHY_FECCOR_ERR1_ADDR   0x01100069L
#define IBU_P1_PHY_FECCOR_ERR1_STRIDE 1
#define IBU_P1_PHY_FECCOR_ERR1_DEPTH  1

#define IBU_P1_PHY_FECCOR_ERR2_ADDR   0x0110006aL
#define IBU_P1_PHY_FECCOR_ERR2_STRIDE 1
#define IBU_P1_PHY_FECCOR_ERR2_DEPTH  1

#define IBU_P1_PHY_FECCOR_ERR3_ADDR   0x0110006bL
#define IBU_P1_PHY_FECCOR_ERR3_STRIDE 1
#define IBU_P1_PHY_FECCOR_ERR3_DEPTH  1

#define IBU_P1_PHY_SMSTATUS_ADDR   0x0110006cL
#define IBU_P1_PHY_SMSTATUS_STRIDE 1
#define IBU_P1_PHY_SMSTATUS_DEPTH  1

#define IBU_P1_PHY_TS3_NEGOTIATED_STATUS_ADDR   0x0110006dL
#define IBU_P1_PHY_TS3_NEGOTIATED_STATUS_STRIDE 1
#define IBU_P1_PHY_TS3_NEGOTIATED_STATUS_DEPTH  1

#define IBU_P1_PHY_TEST_ADDR   0x0110006eL
#define IBU_P1_PHY_TEST_STRIDE 1
#define IBU_P1_PHY_TEST_DEPTH  1

#define IBU_P1_EDR_FDR_RX_STATUS_REG0_ADDR   0x0110006fL
#define IBU_P1_EDR_FDR_RX_STATUS_REG0_STRIDE 1
#define IBU_P1_EDR_FDR_RX_STATUS_REG0_DEPTH  1

#define IBU_P1_EDR_FDR_RX_STATUS_REG1_ADDR   0x01100070L
#define IBU_P1_EDR_FDR_RX_STATUS_REG1_STRIDE 1
#define IBU_P1_EDR_FDR_RX_STATUS_REG1_DEPTH  1

#define IBU_P1_EDR_FDR_RX_STATUS_REG2_ADDR   0x01100071L
#define IBU_P1_EDR_FDR_RX_STATUS_REG2_STRIDE 1
#define IBU_P1_EDR_FDR_RX_STATUS_REG2_DEPTH  1

#define IBU_P1_EDR_FDR_TX_STATUS_REG0_ADDR   0x01100072L
#define IBU_P1_EDR_FDR_TX_STATUS_REG0_STRIDE 1
#define IBU_P1_EDR_FDR_TX_STATUS_REG0_DEPTH  1

#define IBU_P1_INT_PRIORITY_ADDR   0x01100073L
#define IBU_P1_INT_PRIORITY_STRIDE 1
#define IBU_P1_INT_PRIORITY_DEPTH  1

#define IBU_P1_INT_FATAL_ADDR   0x01100074L
#define IBU_P1_INT_FATAL_STRIDE 1
#define IBU_P1_INT_FATAL_DEPTH  1

#define IBU_P1_LINK_ROUND_TRIP_LATENCY_ADDR   0x01100075L
#define IBU_P1_LINK_ROUND_TRIP_LATENCY_STRIDE 1
#define IBU_P1_LINK_ROUND_TRIP_LATENCY_DEPTH  1

#define IBU_P1_PHY_FORCE_LEGACY_MODE_ADDR   0x01100076L
#define IBU_P1_PHY_FORCE_LEGACY_MODE_STRIDE 1
#define IBU_P1_PHY_FORCE_LEGACY_MODE_DEPTH  1

#define IBU_P1_LID_ADDR   0x01100100L
#define IBU_P1_LID_STRIDE 1
#define IBU_P1_LID_DEPTH  1

#define IBU_P1_LMC_ADDR   0x01100101L
#define IBU_P1_LMC_STRIDE 1
#define IBU_P1_LMC_DEPTH  1

#define IBU_P1_PORT_STATE_ADDR   0x01100102L
#define IBU_P1_PORT_STATE_STRIDE 1
#define IBU_P1_PORT_STATE_DEPTH  1

#define IBU_P1_VLCAP_ADDR   0x01100103L
#define IBU_P1_VLCAP_STRIDE 1
#define IBU_P1_VLCAP_DEPTH  1

#define IBU_P1_NEIGHBOR_MTU_ADDR   0x01100104L
#define IBU_P1_NEIGHBOR_MTU_STRIDE 1
#define IBU_P1_NEIGHBOR_MTU_DEPTH  1

#define IBU_P1_VLHIGH_LIMIT_ADDR   0x01100105L
#define IBU_P1_VLHIGH_LIMIT_STRIDE 1
#define IBU_P1_VLHIGH_LIMIT_DEPTH  1

#define IBU_P1_VLARBITRATION_HIGH_CAP_ADDR   0x01100106L
#define IBU_P1_VLARBITRATION_HIGH_CAP_STRIDE 1
#define IBU_P1_VLARBITRATION_HIGH_CAP_DEPTH  1

#define IBU_P1_VLARBITRATION_LOW_CAP_ADDR   0x01100107L
#define IBU_P1_VLARBITRATION_LOW_CAP_STRIDE 1
#define IBU_P1_VLARBITRATION_LOW_CAP_DEPTH  1

#define IBU_P1_MTUCAP_ADDR   0x01100108L
#define IBU_P1_MTUCAP_STRIDE 1
#define IBU_P1_MTUCAP_DEPTH  1

#define IBU_P1_OPERATIONAL_VLS_ADDR   0x01100109L
#define IBU_P1_OPERATIONAL_VLS_STRIDE 1
#define IBU_P1_OPERATIONAL_VLS_DEPTH  1

#define IBU_P1_PCPORT_RCV_ERROR_ADDR   0x0110010cL
#define IBU_P1_PCPORT_RCV_ERROR_STRIDE 1
#define IBU_P1_PCPORT_RCV_ERROR_DEPTH  1

#define IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_ADDR   0x0110010dL
#define IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_STRIDE 1
#define IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_DEPTH  1

#define IBU_P1_PCPORT_XMIT_DISCARDS_ADDR   0x0110010eL
#define IBU_P1_PCPORT_XMIT_DISCARDS_STRIDE 1
#define IBU_P1_PCPORT_XMIT_DISCARDS_DEPTH  1

#define IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS_ADDR   0x0110010fL
#define IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS_STRIDE 1
#define IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS_DEPTH  1

#define IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_ADDR   0x01100110L
#define IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_STRIDE 1
#define IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_DEPTH  1

#define IBU_P1_PCVL15_DROPPED_ADDR   0x01100111L
#define IBU_P1_PCVL15_DROPPED_STRIDE 1
#define IBU_P1_PCVL15_DROPPED_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_ADDR   0x01100112L
#define IBU_P1_PCPORT_XMIT_WAIT_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_DEPTH  1

#define IBU_P1_PCPORT_XMIT_DATA_LSQW_ADDR   0x01100113L
#define IBU_P1_PCPORT_XMIT_DATA_LSQW_STRIDE 1
#define IBU_P1_PCPORT_XMIT_DATA_LSQW_DEPTH  1

#define IBU_P1_LINK_ERROR_CHECK_ENABLE_ADDR   0x01100114L
#define IBU_P1_LINK_ERROR_CHECK_ENABLE_STRIDE 1
#define IBU_P1_LINK_ERROR_CHECK_ENABLE_DEPTH  1

#define IBU_P1_PCPORT_RCV_DATA_LSQW_ADDR   0x01100115L
#define IBU_P1_PCPORT_RCV_DATA_LSQW_STRIDE 1
#define IBU_P1_PCPORT_RCV_DATA_LSQW_DEPTH  1

#define IBU_P1_PCPORT_XMIT_PKTS_LSQW_ADDR   0x01100117L
#define IBU_P1_PCPORT_XMIT_PKTS_LSQW_STRIDE 1
#define IBU_P1_PCPORT_XMIT_PKTS_LSQW_DEPTH  1

#define IBU_P1_PCPORT_RCV_PKTS_LSQW_ADDR   0x01100119L
#define IBU_P1_PCPORT_RCV_PKTS_LSQW_STRIDE 1
#define IBU_P1_PCPORT_RCV_PKTS_LSQW_DEPTH  1

#define IBU_P1_PCPORT_UCXMIT_PKTS_LSQW_ADDR   0x0110011bL
#define IBU_P1_PCPORT_UCXMIT_PKTS_LSQW_STRIDE 1
#define IBU_P1_PCPORT_UCXMIT_PKTS_LSQW_DEPTH  1

#define IBU_P1_PCPORT_MCXMIT_PKTS_LSQW_ADDR   0x0110011dL
#define IBU_P1_PCPORT_MCXMIT_PKTS_LSQW_STRIDE 1
#define IBU_P1_PCPORT_MCXMIT_PKTS_LSQW_DEPTH  1

#define IBU_P1_PCPORT_UCRCV_PKTS_LSQW_ADDR   0x0110011fL
#define IBU_P1_PCPORT_UCRCV_PKTS_LSQW_STRIDE 1
#define IBU_P1_PCPORT_UCRCV_PKTS_LSQW_DEPTH  1

#define IBU_P1_PCPORT_MCRCV_PKTS_LSQW_ADDR   0x01100121L
#define IBU_P1_PCPORT_MCRCV_PKTS_LSQW_STRIDE 1
#define IBU_P1_PCPORT_MCRCV_PKTS_LSQW_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL0_ADDR   0x01100123L
#define IBU_P1_PCPORT_XMIT_WAIT_VL0_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL0_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL1_ADDR   0x01100124L
#define IBU_P1_PCPORT_XMIT_WAIT_VL1_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL1_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL2_ADDR   0x01100125L
#define IBU_P1_PCPORT_XMIT_WAIT_VL2_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL2_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL3_ADDR   0x01100126L
#define IBU_P1_PCPORT_XMIT_WAIT_VL3_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL3_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL4_ADDR   0x01100127L
#define IBU_P1_PCPORT_XMIT_WAIT_VL4_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL4_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL5_ADDR   0x01100128L
#define IBU_P1_PCPORT_XMIT_WAIT_VL5_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL5_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL6_ADDR   0x01100129L
#define IBU_P1_PCPORT_XMIT_WAIT_VL6_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL6_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL7_ADDR   0x0110012aL
#define IBU_P1_PCPORT_XMIT_WAIT_VL7_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL7_DEPTH  1

#define IBU_P1_PCPORT_XMIT_WAIT_VL15_ADDR   0x0110012bL
#define IBU_P1_PCPORT_XMIT_WAIT_VL15_STRIDE 1
#define IBU_P1_PCPORT_XMIT_WAIT_VL15_DEPTH  1

#define IBU_P1_PCRX_LINK_CNT_RST_ADDR   0x0110012cL
#define IBU_P1_PCRX_LINK_CNT_RST_STRIDE 1
#define IBU_P1_PCRX_LINK_CNT_RST_DEPTH  1

#define IBU_P1_PCRX_LINK_CNT_LOAD_ADDR   0x0110012dL
#define IBU_P1_PCRX_LINK_CNT_LOAD_STRIDE 1
#define IBU_P1_PCRX_LINK_CNT_LOAD_DEPTH  1

#define IBU_P1_LOCAL_PHY_ERRORS_ADDR   0x0110012eL
#define IBU_P1_LOCAL_PHY_ERRORS_STRIDE 1
#define IBU_P1_LOCAL_PHY_ERRORS_DEPTH  1

#define IBU_P1_OVERRUN_ERRORS_ADDR   0x0110012fL
#define IBU_P1_OVERRUN_ERRORS_STRIDE 1
#define IBU_P1_OVERRUN_ERRORS_DEPTH  1

#define IBU_P1_PSLINK_DLID_ADDR   0x01100130L
#define IBU_P1_PSLINK_DLID_STRIDE 1
#define IBU_P1_PSLINK_DLID_DEPTH  1

#define IBU_P1_PSTICK_ADDR   0x01100131L
#define IBU_P1_PSTICK_STRIDE 1
#define IBU_P1_PSTICK_DEPTH  1

#define IBU_P1_PSSTATUS_ADDR   0x01100132L
#define IBU_P1_PSSTATUS_STRIDE 1
#define IBU_P1_PSSTATUS_DEPTH  1

#define IBU_P1_PSSTART_DELAY_ADDR   0x01100133L
#define IBU_P1_PSSTART_DELAY_STRIDE 1
#define IBU_P1_PSSTART_DELAY_DEPTH  1

#define IBU_P1_PSINTERVAL_ADDR   0x01100134L
#define IBU_P1_PSINTERVAL_STRIDE 1
#define IBU_P1_PSINTERVAL_DEPTH  1

#define IBU_P1_PSCNT_SEL0_ADDR   0x01100135L
#define IBU_P1_PSCNT_SEL0_STRIDE 1
#define IBU_P1_PSCNT_SEL0_DEPTH  1

#define IBU_P1_PSCNT_SEL1_ADDR   0x01100136L
#define IBU_P1_PSCNT_SEL1_STRIDE 1
#define IBU_P1_PSCNT_SEL1_DEPTH  1

#define IBU_P1_PSCNT_SEL2_ADDR   0x01100137L
#define IBU_P1_PSCNT_SEL2_STRIDE 1
#define IBU_P1_PSCNT_SEL2_DEPTH  1

#define IBU_P1_PSCNT_SEL3_ADDR   0x01100138L
#define IBU_P1_PSCNT_SEL3_STRIDE 1
#define IBU_P1_PSCNT_SEL3_DEPTH  1

#define IBU_P1_PSCNT0_ADDR   0x01100139L
#define IBU_P1_PSCNT0_STRIDE 1
#define IBU_P1_PSCNT0_DEPTH  1

#define IBU_P1_PSCNT1_ADDR   0x0110013aL
#define IBU_P1_PSCNT1_STRIDE 1
#define IBU_P1_PSCNT1_DEPTH  1

#define IBU_P1_PSCNT2_ADDR   0x0110013bL
#define IBU_P1_PSCNT2_STRIDE 1
#define IBU_P1_PSCNT2_DEPTH  1

#define IBU_P1_PSCNT3_ADDR   0x0110013cL
#define IBU_P1_PSCNT3_STRIDE 1
#define IBU_P1_PSCNT3_DEPTH  1

#define IBU_P1_PSINIT_SAMPLING_ADDR   0x0110013dL
#define IBU_P1_PSINIT_SAMPLING_STRIDE 1
#define IBU_P1_PSINIT_SAMPLING_DEPTH  1

#define IBU_P1_PSCNT_LOAD_ADDR   0x0110013eL
#define IBU_P1_PSCNT_LOAD_STRIDE 1
#define IBU_P1_PSCNT_LOAD_DEPTH  1

#define IBU_P1_PORT_STATE_CHANGE_ADDR   0x0110013fL
#define IBU_P1_PORT_STATE_CHANGE_STRIDE 1
#define IBU_P1_PORT_STATE_CHANGE_DEPTH  1

#define IBU_P1_TRAP_REGISTER_ADDR   0x01100140L
#define IBU_P1_TRAP_REGISTER_STRIDE 1
#define IBU_P1_TRAP_REGISTER_DEPTH  1

#define IBU_P1_LINK_VCONFIG0_ADDR   0x01100141L
#define IBU_P1_LINK_VCONFIG0_STRIDE 1
#define IBU_P1_LINK_VCONFIG0_DEPTH  1

#define IBU_P1_LINK_VCONFIG1_ADDR   0x01100142L
#define IBU_P1_LINK_VCONFIG1_STRIDE 1
#define IBU_P1_LINK_VCONFIG1_DEPTH  1

#define IBU_P1_LINK_VCONFIG2_ADDR   0x01100143L
#define IBU_P1_LINK_VCONFIG2_STRIDE 1
#define IBU_P1_LINK_VCONFIG2_DEPTH  1

#define IBU_P1_LINK_RX_CREDIT_VL1_0_ADDR   0x01100144L
#define IBU_P1_LINK_RX_CREDIT_VL1_0_STRIDE 1
#define IBU_P1_LINK_RX_CREDIT_VL1_0_DEPTH  1

#define IBU_P1_LINK_RX_CREDIT_VL3_2_ADDR   0x01100145L
#define IBU_P1_LINK_RX_CREDIT_VL3_2_STRIDE 1
#define IBU_P1_LINK_RX_CREDIT_VL3_2_DEPTH  1

#define IBU_P1_LINK_RX_CREDIT_VL5_4_ADDR   0x01100146L
#define IBU_P1_LINK_RX_CREDIT_VL5_4_STRIDE 1
#define IBU_P1_LINK_RX_CREDIT_VL5_4_DEPTH  1

#define IBU_P1_LINK_RX_CREDIT_VL7_6_ADDR   0x01100147L
#define IBU_P1_LINK_RX_CREDIT_VL7_6_STRIDE 1
#define IBU_P1_LINK_RX_CREDIT_VL7_6_DEPTH  1

#define IBU_P1_LINK_TX_CREDIT_VL1_0_ADDR   0x01100148L
#define IBU_P1_LINK_TX_CREDIT_VL1_0_STRIDE 1
#define IBU_P1_LINK_TX_CREDIT_VL1_0_DEPTH  1

#define IBU_P1_LINK_TX_CREDIT_VL3_2_ADDR   0x01100149L
#define IBU_P1_LINK_TX_CREDIT_VL3_2_STRIDE 1
#define IBU_P1_LINK_TX_CREDIT_VL3_2_DEPTH  1

#define IBU_P1_LINK_TX_CREDIT_VL5_4_ADDR   0x0110014aL
#define IBU_P1_LINK_TX_CREDIT_VL5_4_STRIDE 1
#define IBU_P1_LINK_TX_CREDIT_VL5_4_DEPTH  1

#define IBU_P1_LINK_TX_CREDIT_VL7_6_ADDR   0x0110014bL
#define IBU_P1_LINK_TX_CREDIT_VL7_6_STRIDE 1
#define IBU_P1_LINK_TX_CREDIT_VL7_6_DEPTH  1

#define IBU_P1_PCTX_LINK_CNT_RST_ADDR   0x0110014cL
#define IBU_P1_PCTX_LINK_CNT_RST_STRIDE 1
#define IBU_P1_PCTX_LINK_CNT_RST_DEPTH  1

#define IBU_P1_PCTX_LINK_CNT_LOAD_ADDR   0x0110014dL
#define IBU_P1_PCTX_LINK_CNT_LOAD_STRIDE 1
#define IBU_P1_PCTX_LINK_CNT_LOAD_DEPTH  1

#define IBU_P1_PSCNT_WIDTH_ADDR   0x0110014fL
#define IBU_P1_PSCNT_WIDTH_STRIDE 1
#define IBU_P1_PSCNT_WIDTH_DEPTH  1

#define IBU_P1_PSCNT_MASK_ADDR   0x01100150L
#define IBU_P1_PSCNT_MASK_STRIDE 1
#define IBU_P1_PSCNT_MASK_DEPTH  1

#define IBU_P1_PCICRC_RCV_ERRORS_ADDR   0x01100151L
#define IBU_P1_PCICRC_RCV_ERRORS_STRIDE 1
#define IBU_P1_PCICRC_RCV_ERRORS_DEPTH  1

#define IBU_P1_PCVCRC_RCV_ERRORS_ADDR   0x01100152L
#define IBU_P1_PCVCRC_RCV_ERRORS_STRIDE 1
#define IBU_P1_PCVCRC_RCV_ERRORS_DEPTH  1

#define IBU_P1_PCLEN_RCV_ERRORS_ADDR   0x01100153L
#define IBU_P1_PCLEN_RCV_ERRORS_STRIDE 1
#define IBU_P1_PCLEN_RCV_ERRORS_DEPTH  1

#define IBU_P1_PCDLID_RCV_ERRORS_ADDR   0x01100154L
#define IBU_P1_PCDLID_RCV_ERRORS_STRIDE 1
#define IBU_P1_PCDLID_RCV_ERRORS_DEPTH  1

#define IBU_P1_PCRCV_FCLEN_ERRORS_ADDR   0x01100155L
#define IBU_P1_PCRCV_FCLEN_ERRORS_STRIDE 1
#define IBU_P1_PCRCV_FCLEN_ERRORS_DEPTH  1

#define IBU_P1_PCRCV_FCVL_ERRORS_ADDR   0x01100156L
#define IBU_P1_PCRCV_FCVL_ERRORS_STRIDE 1
#define IBU_P1_PCRCV_FCVL_ERRORS_DEPTH  1

#define IBU_P1_PCRCV_FCCRC_ERRORS_ADDR   0x01100157L
#define IBU_P1_PCRCV_FCCRC_ERRORS_STRIDE 1
#define IBU_P1_PCRCV_FCCRC_ERRORS_DEPTH  1

#define IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS_ADDR   0x01100158L
#define IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS_STRIDE 1
#define IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS_DEPTH  1

#define IBU_P1_PCMAL_FORMED_ERRORS_ADDR   0x01100159L
#define IBU_P1_PCMAL_FORMED_ERRORS_STRIDE 1
#define IBU_P1_PCMAL_FORMED_ERRORS_DEPTH  1

#define IBU_P1_PCBUF_OVER_ERRORS_ADDR   0x0110015aL
#define IBU_P1_PCBUF_OVER_ERRORS_STRIDE 1
#define IBU_P1_PCBUF_OVER_ERRORS_DEPTH  1

#define IBU_P1_PCVLMAP_ERRORS_ADDR   0x0110015bL
#define IBU_P1_PCVLMAP_ERRORS_STRIDE 1
#define IBU_P1_PCVLMAP_ERRORS_DEPTH  1

#define IBU_P1_PCVLINIT_CREDIT_VL1_VL0_ADDR   0x0110015cL
#define IBU_P1_PCVLINIT_CREDIT_VL1_VL0_STRIDE 1
#define IBU_P1_PCVLINIT_CREDIT_VL1_VL0_DEPTH  1

#define IBU_P1_PCVLINIT_CREDIT_VL3_VL2_ADDR   0x0110015dL
#define IBU_P1_PCVLINIT_CREDIT_VL3_VL2_STRIDE 1
#define IBU_P1_PCVLINIT_CREDIT_VL3_VL2_DEPTH  1

#define IBU_P1_PCVLINIT_CREDIT_VL5_VL4_ADDR   0x0110015eL
#define IBU_P1_PCVLINIT_CREDIT_VL5_VL4_STRIDE 1
#define IBU_P1_PCVLINIT_CREDIT_VL5_VL4_DEPTH  1

#define IBU_P1_PCVLINIT_CREDIT_VL7_VL6_ADDR   0x0110015fL
#define IBU_P1_PCVLINIT_CREDIT_VL7_VL6_STRIDE 1
#define IBU_P1_PCVLINIT_CREDIT_VL7_VL6_DEPTH  1

#define IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT_ADDR   0x01100160L
#define IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT_STRIDE 1
#define IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT_DEPTH  1

#define IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT_ADDR   0x01100161L
#define IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT_STRIDE 1
#define IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT_DEPTH  1

#define IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT_ADDR   0x01100162L
#define IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT_STRIDE 1
#define IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT_DEPTH  1

#define IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT_ADDR   0x01100163L
#define IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT_STRIDE 1
#define IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT_DEPTH  1

#define IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT_ADDR   0x01100164L
#define IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT_STRIDE 1
#define IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT_DEPTH  1

#define IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT_ADDR   0x01100165L
#define IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT_STRIDE 1
#define IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT_DEPTH  1

#define IBU_P1_PCECCENA_ERR_ADDR   0x01100166L
#define IBU_P1_PCECCENA_ERR_STRIDE 1
#define IBU_P1_PCECCENA_ERR_DEPTH  1

#define IBU_P1_PCTX_ECC_COR_ERR_CNT_ADDR   0x01100167L
#define IBU_P1_PCTX_ECC_COR_ERR_CNT_STRIDE 1
#define IBU_P1_PCTX_ECC_COR_ERR_CNT_DEPTH  1

#define IBU_P1_PCTX_ECC_UNC_ERR_CNT_ADDR   0x01100168L
#define IBU_P1_PCTX_ECC_UNC_ERR_CNT_STRIDE 1
#define IBU_P1_PCTX_ECC_UNC_ERR_CNT_DEPTH  1

#define IBU_P1_TX_SRAMSTATUS_ADDR   0x01100169L
#define IBU_P1_TX_SRAMSTATUS_STRIDE 1
#define IBU_P1_TX_SRAMSTATUS_DEPTH  1

#define IBU_P1_TX_CACHE_STATUS_ADDR   0x0110016aL
#define IBU_P1_TX_CACHE_STATUS_STRIDE 1
#define IBU_P1_TX_CACHE_STATUS_DEPTH  1

#define IBU_P1_TX_DEBUG_ADDR   0x0110016bL
#define IBU_P1_TX_DEBUG_STRIDE 1
#define IBU_P1_TX_DEBUG_DEPTH  1

#define IBU_P1_RX_VL07_SRAMSTATUS_ADDR   0x0110016cL
#define IBU_P1_RX_VL07_SRAMSTATUS_STRIDE 1
#define IBU_P1_RX_VL07_SRAMSTATUS_DEPTH  1

#define IBU_P1_RX_VL15_SRAMSTATUS_ADDR   0x0110016dL
#define IBU_P1_RX_VL15_SRAMSTATUS_STRIDE 1
#define IBU_P1_RX_VL15_SRAMSTATUS_DEPTH  1

#define IBU_P1_LOOPSRAMSTATUS_ADDR   0x0110016eL
#define IBU_P1_LOOPSRAMSTATUS_STRIDE 1
#define IBU_P1_LOOPSRAMSTATUS_DEPTH  1

#define IBU_P1_RX_DEBUG_ADDR   0x0110016fL
#define IBU_P1_RX_DEBUG_STRIDE 1
#define IBU_P1_RX_DEBUG_DEPTH  1

#define IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS_ADDR   0x01100170L
#define IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS_STRIDE 1
#define IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS_DEPTH  1

#define IBU_P1_VLARB_HI_PRI_TABLE_ADDR   0x01100180L
#define IBU_P1_VLARB_HI_PRI_TABLE_STRIDE 1
#define IBU_P1_VLARB_HI_PRI_TABLE_DEPTH  10

#define IBU_P1_VLARB_LO_PRI_TABLE_ADDR   0x011001c0L
#define IBU_P1_VLARB_LO_PRI_TABLE_STRIDE 1
#define IBU_P1_VLARB_LO_PRI_TABLE_DEPTH  10

#define IBU_P1_TX_TBSVL10_ADDR   0x011001d0L
#define IBU_P1_TX_TBSVL10_STRIDE 1
#define IBU_P1_TX_TBSVL10_DEPTH  1

#define IBU_P1_TX_TBSVL32_ADDR   0x011001d1L
#define IBU_P1_TX_TBSVL32_STRIDE 1
#define IBU_P1_TX_TBSVL32_DEPTH  1

#define IBU_P1_TX_TBSVL54_ADDR   0x011001d2L
#define IBU_P1_TX_TBSVL54_STRIDE 1
#define IBU_P1_TX_TBSVL54_DEPTH  1

#define IBU_P1_TX_TBSVL76_ADDR   0x011001d3L
#define IBU_P1_TX_TBSVL76_STRIDE 1
#define IBU_P1_TX_TBSVL76_DEPTH  1

#define IBU_P1_TX_TBSARB_VL10_ADDR   0x011001d4L
#define IBU_P1_TX_TBSARB_VL10_STRIDE 1
#define IBU_P1_TX_TBSARB_VL10_DEPTH  1

#define IBU_P1_TX_TBSARB_VL32_ADDR   0x011001d5L
#define IBU_P1_TX_TBSARB_VL32_STRIDE 1
#define IBU_P1_TX_TBSARB_VL32_DEPTH  1

#define IBU_P1_TX_TBSARB_VL54_ADDR   0x011001d6L
#define IBU_P1_TX_TBSARB_VL54_STRIDE 1
#define IBU_P1_TX_TBSARB_VL54_DEPTH  1

#define IBU_P1_TX_TBSARB_VL76_ADDR   0x011001d7L
#define IBU_P1_TX_TBSARB_VL76_STRIDE 1
#define IBU_P1_TX_TBSARB_VL76_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_ENABLE_ADDR   0x011001d8L
#define IBU_P1_RX_TRACE_CAPTURE_ENABLE_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_ENABLE_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_MODE_ADDR   0x011001d9L
#define IBU_P1_RX_TRACE_CAPTURE_MODE_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_MODE_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_RDY_ADDR   0x011001daL
#define IBU_P1_RX_TRACE_CAPTURE_RDY_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_RDY_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_TIMER_ADDR   0x011001dbL
#define IBU_P1_RX_TRACE_CAPTURE_TIMER_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_TIMER_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_START_ADDR   0x011001dcL
#define IBU_P1_RX_TRACE_CAPTURE_START_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_START_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA1_ADDR   0x011001e0L
#define IBU_P1_RX_TRACE_CAPTURE_DATA1_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA1_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA2_ADDR   0x011001e1L
#define IBU_P1_RX_TRACE_CAPTURE_DATA2_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA2_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA3_ADDR   0x011001e2L
#define IBU_P1_RX_TRACE_CAPTURE_DATA3_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA3_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA4_ADDR   0x011001e3L
#define IBU_P1_RX_TRACE_CAPTURE_DATA4_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA4_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA5_ADDR   0x011001e4L
#define IBU_P1_RX_TRACE_CAPTURE_DATA5_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA5_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA6_ADDR   0x011001e5L
#define IBU_P1_RX_TRACE_CAPTURE_DATA6_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA6_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA7_ADDR   0x011001e6L
#define IBU_P1_RX_TRACE_CAPTURE_DATA7_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA7_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA8_ADDR   0x011001e7L
#define IBU_P1_RX_TRACE_CAPTURE_DATA8_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA8_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA9_ADDR   0x011001e8L
#define IBU_P1_RX_TRACE_CAPTURE_DATA9_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA9_DEPTH  1

#define IBU_P1_RX_TRACE_CAPTURE_DATA10_ADDR   0x011001e9L
#define IBU_P1_RX_TRACE_CAPTURE_DATA10_STRIDE 1
#define IBU_P1_RX_TRACE_CAPTURE_DATA10_DEPTH  1

#define IBU_P1_LINK_RX_FCCL_VL1_0_ADDR   0x011001eaL
#define IBU_P1_LINK_RX_FCCL_VL1_0_STRIDE 1
#define IBU_P1_LINK_RX_FCCL_VL1_0_DEPTH  1

#define IBU_P1_LINK_RX_FCCL_VL3_2_ADDR   0x011001ebL
#define IBU_P1_LINK_RX_FCCL_VL3_2_STRIDE 1
#define IBU_P1_LINK_RX_FCCL_VL3_2_DEPTH  1

#define IBU_P1_LINK_RX_FCCL_VL5_4_ADDR   0x011001ecL
#define IBU_P1_LINK_RX_FCCL_VL5_4_STRIDE 1
#define IBU_P1_LINK_RX_FCCL_VL5_4_DEPTH  1

#define IBU_P1_LINK_RX_FCCL_VL7_6_ADDR   0x011001edL
#define IBU_P1_LINK_RX_FCCL_VL7_6_STRIDE 1
#define IBU_P1_LINK_RX_FCCL_VL7_6_DEPTH  1

#define IBU_P1_ADD_DEFAULT_LANE0_ADDR   0x01100210L
#define IBU_P1_ADD_DEFAULT_LANE0_STRIDE 1
#define IBU_P1_ADD_DEFAULT_LANE0_DEPTH  1

#define IBU_P1_ADD_DEFAULT_LANE1_ADDR   0x01100211L
#define IBU_P1_ADD_DEFAULT_LANE1_STRIDE 1
#define IBU_P1_ADD_DEFAULT_LANE1_DEPTH  1

#define IBU_P1_ADD_DEFAULT_LANE2_ADDR   0x01100212L
#define IBU_P1_ADD_DEFAULT_LANE2_STRIDE 1
#define IBU_P1_ADD_DEFAULT_LANE2_DEPTH  1

#define IBU_P1_ADD_DEFAULT_LANE3_ADDR   0x01100213L
#define IBU_P1_ADD_DEFAULT_LANE3_STRIDE 1
#define IBU_P1_ADD_DEFAULT_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD0_LANE0_ADDR   0x01100214L
#define IBU_P1_PHY_ADD0_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD0_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD0_LANE1_ADDR   0x01100215L
#define IBU_P1_PHY_ADD0_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD0_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD0_LANE2_ADDR   0x01100216L
#define IBU_P1_PHY_ADD0_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD0_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD0_LANE3_ADDR   0x01100217L
#define IBU_P1_PHY_ADD0_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD0_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD1_LANE0_ADDR   0x01100218L
#define IBU_P1_PHY_ADD1_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD1_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD1_LANE1_ADDR   0x01100219L
#define IBU_P1_PHY_ADD1_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD1_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD1_LANE2_ADDR   0x0110021aL
#define IBU_P1_PHY_ADD1_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD1_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD1_LANE3_ADDR   0x0110021bL
#define IBU_P1_PHY_ADD1_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD1_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD2_LANE0_ADDR   0x0110021cL
#define IBU_P1_PHY_ADD2_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD2_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD2_LANE1_ADDR   0x0110021dL
#define IBU_P1_PHY_ADD2_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD2_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD2_LANE2_ADDR   0x0110021eL
#define IBU_P1_PHY_ADD2_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD2_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD2_LANE3_ADDR   0x0110021fL
#define IBU_P1_PHY_ADD2_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD2_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD3_LANE0_ADDR   0x01100220L
#define IBU_P1_PHY_ADD3_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD3_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD3_LANE1_ADDR   0x01100221L
#define IBU_P1_PHY_ADD3_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD3_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD3_LANE2_ADDR   0x01100222L
#define IBU_P1_PHY_ADD3_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD3_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD3_LANE3_ADDR   0x01100223L
#define IBU_P1_PHY_ADD3_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD3_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD4_LANE0_ADDR   0x01100224L
#define IBU_P1_PHY_ADD4_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD4_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD4_LANE1_ADDR   0x01100225L
#define IBU_P1_PHY_ADD4_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD4_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD4_LANE2_ADDR   0x01100226L
#define IBU_P1_PHY_ADD4_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD4_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD4_LANE3_ADDR   0x01100227L
#define IBU_P1_PHY_ADD4_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD4_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD5_LANE0_ADDR   0x01100228L
#define IBU_P1_PHY_ADD5_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD5_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD5_LANE1_ADDR   0x01100229L
#define IBU_P1_PHY_ADD5_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD5_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD5_LANE2_ADDR   0x0110022aL
#define IBU_P1_PHY_ADD5_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD5_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD5_LANE3_ADDR   0x0110022bL
#define IBU_P1_PHY_ADD5_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD5_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD6_LANE0_ADDR   0x0110022cL
#define IBU_P1_PHY_ADD6_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD6_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD6_LANE1_ADDR   0x0110022dL
#define IBU_P1_PHY_ADD6_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD6_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD6_LANE2_ADDR   0x0110022eL
#define IBU_P1_PHY_ADD6_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD6_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD6_LANE3_ADDR   0x0110022fL
#define IBU_P1_PHY_ADD6_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD6_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD7_LANE0_ADDR   0x01100230L
#define IBU_P1_PHY_ADD7_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD7_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD7_LANE1_ADDR   0x01100231L
#define IBU_P1_PHY_ADD7_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD7_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD7_LANE2_ADDR   0x01100232L
#define IBU_P1_PHY_ADD7_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD7_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD7_LANE3_ADDR   0x01100233L
#define IBU_P1_PHY_ADD7_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD7_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD8_LANE0_ADDR   0x01100234L
#define IBU_P1_PHY_ADD8_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD8_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD8_LANE1_ADDR   0x01100235L
#define IBU_P1_PHY_ADD8_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD8_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD8_LANE2_ADDR   0x01100236L
#define IBU_P1_PHY_ADD8_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD8_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD8_LANE3_ADDR   0x01100237L
#define IBU_P1_PHY_ADD8_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD8_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD9_LANE0_ADDR   0x01100238L
#define IBU_P1_PHY_ADD9_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD9_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD9_LANE1_ADDR   0x01100239L
#define IBU_P1_PHY_ADD9_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD9_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD9_LANE2_ADDR   0x0110023aL
#define IBU_P1_PHY_ADD9_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD9_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD9_LANE3_ADDR   0x0110023bL
#define IBU_P1_PHY_ADD9_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD9_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD10_LANE0_ADDR   0x0110023cL
#define IBU_P1_PHY_ADD10_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD10_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD10_LANE1_ADDR   0x0110023dL
#define IBU_P1_PHY_ADD10_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD10_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD10_LANE2_ADDR   0x0110023eL
#define IBU_P1_PHY_ADD10_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD10_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD10_LANE3_ADDR   0x0110023fL
#define IBU_P1_PHY_ADD10_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD10_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD11_LANE0_ADDR   0x01100240L
#define IBU_P1_PHY_ADD11_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD11_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD11_LANE1_ADDR   0x01100241L
#define IBU_P1_PHY_ADD11_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD11_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD11_LANE2_ADDR   0x01100242L
#define IBU_P1_PHY_ADD11_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD11_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD11_LANE3_ADDR   0x01100243L
#define IBU_P1_PHY_ADD11_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD11_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD12_LANE0_ADDR   0x01100244L
#define IBU_P1_PHY_ADD12_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD12_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD12_LANE1_ADDR   0x01100245L
#define IBU_P1_PHY_ADD12_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD12_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD12_LANE2_ADDR   0x01100246L
#define IBU_P1_PHY_ADD12_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD12_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD12_LANE3_ADDR   0x01100247L
#define IBU_P1_PHY_ADD12_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD12_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD13_LANE0_ADDR   0x01100248L
#define IBU_P1_PHY_ADD13_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD13_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD13_LANE1_ADDR   0x01100249L
#define IBU_P1_PHY_ADD13_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD13_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD13_LANE2_ADDR   0x0110024aL
#define IBU_P1_PHY_ADD13_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD13_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD13_LANE3_ADDR   0x0110024bL
#define IBU_P1_PHY_ADD13_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD13_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD14_LANE0_ADDR   0x0110024cL
#define IBU_P1_PHY_ADD14_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD14_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD14_LANE1_ADDR   0x0110024dL
#define IBU_P1_PHY_ADD14_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD14_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD14_LANE2_ADDR   0x0110024eL
#define IBU_P1_PHY_ADD14_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD14_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD14_LANE3_ADDR   0x0110024fL
#define IBU_P1_PHY_ADD14_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD14_LANE3_DEPTH  1

#define IBU_P1_PHY_ADD15_LANE0_ADDR   0x01100250L
#define IBU_P1_PHY_ADD15_LANE0_STRIDE 1
#define IBU_P1_PHY_ADD15_LANE0_DEPTH  1

#define IBU_P1_PHY_ADD15_LANE1_ADDR   0x01100251L
#define IBU_P1_PHY_ADD15_LANE1_STRIDE 1
#define IBU_P1_PHY_ADD15_LANE1_DEPTH  1

#define IBU_P1_PHY_ADD15_LANE2_ADDR   0x01100252L
#define IBU_P1_PHY_ADD15_LANE2_STRIDE 1
#define IBU_P1_PHY_ADD15_LANE2_DEPTH  1

#define IBU_P1_PHY_ADD15_LANE3_ADDR   0x01100253L
#define IBU_P1_PHY_ADD15_LANE3_STRIDE 1
#define IBU_P1_PHY_ADD15_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD0_LANE0_ADDR   0x01100254L
#define IBU_P1_PHY_AMP1_ADD0_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD0_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD0_LANE1_ADDR   0x01100255L
#define IBU_P1_PHY_AMP1_ADD0_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD0_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD0_LANE2_ADDR   0x01100256L
#define IBU_P1_PHY_AMP1_ADD0_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD0_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD0_LANE3_ADDR   0x01100257L
#define IBU_P1_PHY_AMP1_ADD0_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD0_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD1_LANE0_ADDR   0x01100258L
#define IBU_P1_PHY_AMP1_ADD1_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD1_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD1_LANE1_ADDR   0x01100259L
#define IBU_P1_PHY_AMP1_ADD1_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD1_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD1_LANE2_ADDR   0x0110025aL
#define IBU_P1_PHY_AMP1_ADD1_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD1_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD1_LANE3_ADDR   0x0110025bL
#define IBU_P1_PHY_AMP1_ADD1_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD1_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD2_LANE0_ADDR   0x0110025cL
#define IBU_P1_PHY_AMP1_ADD2_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD2_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD2_LANE1_ADDR   0x0110025dL
#define IBU_P1_PHY_AMP1_ADD2_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD2_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD2_LANE2_ADDR   0x0110025eL
#define IBU_P1_PHY_AMP1_ADD2_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD2_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD2_LANE3_ADDR   0x0110025fL
#define IBU_P1_PHY_AMP1_ADD2_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD2_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD3_LANE0_ADDR   0x01100260L
#define IBU_P1_PHY_AMP1_ADD3_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD3_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD3_LANE1_ADDR   0x01100261L
#define IBU_P1_PHY_AMP1_ADD3_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD3_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD3_LANE2_ADDR   0x01100262L
#define IBU_P1_PHY_AMP1_ADD3_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD3_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD3_LANE3_ADDR   0x01100263L
#define IBU_P1_PHY_AMP1_ADD3_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD3_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD4_LANE0_ADDR   0x01100264L
#define IBU_P1_PHY_AMP1_ADD4_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD4_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD4_LANE1_ADDR   0x01100265L
#define IBU_P1_PHY_AMP1_ADD4_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD4_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD4_LANE2_ADDR   0x01100266L
#define IBU_P1_PHY_AMP1_ADD4_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD4_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD4_LANE3_ADDR   0x01100267L
#define IBU_P1_PHY_AMP1_ADD4_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD4_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD5_LANE0_ADDR   0x01100268L
#define IBU_P1_PHY_AMP1_ADD5_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD5_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD5_LANE1_ADDR   0x01100269L
#define IBU_P1_PHY_AMP1_ADD5_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD5_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD5_LANE2_ADDR   0x0110026aL
#define IBU_P1_PHY_AMP1_ADD5_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD5_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD5_LANE3_ADDR   0x0110026bL
#define IBU_P1_PHY_AMP1_ADD5_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD5_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD6_LANE0_ADDR   0x0110026cL
#define IBU_P1_PHY_AMP1_ADD6_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD6_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD6_LANE1_ADDR   0x0110026dL
#define IBU_P1_PHY_AMP1_ADD6_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD6_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD6_LANE2_ADDR   0x0110026eL
#define IBU_P1_PHY_AMP1_ADD6_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD6_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD6_LANE3_ADDR   0x0110026fL
#define IBU_P1_PHY_AMP1_ADD6_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD6_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD7_LANE0_ADDR   0x01100270L
#define IBU_P1_PHY_AMP1_ADD7_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD7_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD7_LANE1_ADDR   0x01100271L
#define IBU_P1_PHY_AMP1_ADD7_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD7_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD7_LANE2_ADDR   0x01100272L
#define IBU_P1_PHY_AMP1_ADD7_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD7_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD7_LANE3_ADDR   0x01100273L
#define IBU_P1_PHY_AMP1_ADD7_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD7_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD8_LANE0_ADDR   0x01100274L
#define IBU_P1_PHY_AMP1_ADD8_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD8_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD8_LANE1_ADDR   0x01100275L
#define IBU_P1_PHY_AMP1_ADD8_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD8_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD8_LANE2_ADDR   0x01100276L
#define IBU_P1_PHY_AMP1_ADD8_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD8_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD8_LANE3_ADDR   0x01100277L
#define IBU_P1_PHY_AMP1_ADD8_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD8_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD9_LANE0_ADDR   0x01100278L
#define IBU_P1_PHY_AMP1_ADD9_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD9_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD9_LANE1_ADDR   0x01100279L
#define IBU_P1_PHY_AMP1_ADD9_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD9_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD9_LANE2_ADDR   0x0110027aL
#define IBU_P1_PHY_AMP1_ADD9_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD9_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD9_LANE3_ADDR   0x0110027bL
#define IBU_P1_PHY_AMP1_ADD9_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD9_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD10_LANE0_ADDR   0x0110027cL
#define IBU_P1_PHY_AMP1_ADD10_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD10_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD10_LANE1_ADDR   0x0110027dL
#define IBU_P1_PHY_AMP1_ADD10_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD10_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD10_LANE2_ADDR   0x0110027eL
#define IBU_P1_PHY_AMP1_ADD10_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD10_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD10_LANE3_ADDR   0x0110027fL
#define IBU_P1_PHY_AMP1_ADD10_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD10_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD11_LANE0_ADDR   0x01100280L
#define IBU_P1_PHY_AMP1_ADD11_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD11_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD11_LANE1_ADDR   0x01100281L
#define IBU_P1_PHY_AMP1_ADD11_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD11_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD11_LANE2_ADDR   0x01100282L
#define IBU_P1_PHY_AMP1_ADD11_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD11_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD11_LANE3_ADDR   0x01100283L
#define IBU_P1_PHY_AMP1_ADD11_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD11_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD12_LANE0_ADDR   0x01100284L
#define IBU_P1_PHY_AMP1_ADD12_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD12_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD12_LANE1_ADDR   0x01100285L
#define IBU_P1_PHY_AMP1_ADD12_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD12_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD12_LANE2_ADDR   0x01100286L
#define IBU_P1_PHY_AMP1_ADD12_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD12_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD12_LANE3_ADDR   0x01100287L
#define IBU_P1_PHY_AMP1_ADD12_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD12_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD13_LANE0_ADDR   0x01100288L
#define IBU_P1_PHY_AMP1_ADD13_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD13_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD13_LANE1_ADDR   0x01100289L
#define IBU_P1_PHY_AMP1_ADD13_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD13_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD13_LANE2_ADDR   0x0110028aL
#define IBU_P1_PHY_AMP1_ADD13_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD13_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD13_LANE3_ADDR   0x0110028bL
#define IBU_P1_PHY_AMP1_ADD13_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD13_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD14_LANE0_ADDR   0x0110028cL
#define IBU_P1_PHY_AMP1_ADD14_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD14_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD14_LANE1_ADDR   0x0110028dL
#define IBU_P1_PHY_AMP1_ADD14_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD14_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD14_LANE2_ADDR   0x0110028eL
#define IBU_P1_PHY_AMP1_ADD14_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD14_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD14_LANE3_ADDR   0x0110028fL
#define IBU_P1_PHY_AMP1_ADD14_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD14_LANE3_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD15_LANE0_ADDR   0x01100290L
#define IBU_P1_PHY_AMP1_ADD15_LANE0_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD15_LANE0_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD15_LANE1_ADDR   0x01100291L
#define IBU_P1_PHY_AMP1_ADD15_LANE1_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD15_LANE1_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD15_LANE2_ADDR   0x01100292L
#define IBU_P1_PHY_AMP1_ADD15_LANE2_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD15_LANE2_DEPTH  1

#define IBU_P1_PHY_AMP1_ADD15_LANE3_ADDR   0x01100293L
#define IBU_P1_PHY_AMP1_ADD15_LANE3_STRIDE 1
#define IBU_P1_PHY_AMP1_ADD15_LANE3_DEPTH  1

#define IBU_P1_REMOTE_DDS0_ADDR   0x01100294L
#define IBU_P1_REMOTE_DDS0_STRIDE 1
#define IBU_P1_REMOTE_DDS0_DEPTH  1

#define IBU_P1_REMOTE_DDS1_ADDR   0x01100295L
#define IBU_P1_REMOTE_DDS1_STRIDE 1
#define IBU_P1_REMOTE_DDS1_DEPTH  1

#define IBU_P1_REMOTE_DDS2_ADDR   0x01100296L
#define IBU_P1_REMOTE_DDS2_STRIDE 1
#define IBU_P1_REMOTE_DDS2_DEPTH  1

#define IBU_P1_REMOTE_DDS3_ADDR   0x01100297L
#define IBU_P1_REMOTE_DDS3_STRIDE 1
#define IBU_P1_REMOTE_DDS3_DEPTH  1

#define IBU_P1_REMOTE_DDS4_ADDR   0x01100298L
#define IBU_P1_REMOTE_DDS4_STRIDE 1
#define IBU_P1_REMOTE_DDS4_DEPTH  1

#define IBU_P1_REMOTE_DDS5_ADDR   0x01100299L
#define IBU_P1_REMOTE_DDS5_STRIDE 1
#define IBU_P1_REMOTE_DDS5_DEPTH  1

#define IBU_P1_REMOTE_DDS6_ADDR   0x0110029aL
#define IBU_P1_REMOTE_DDS6_STRIDE 1
#define IBU_P1_REMOTE_DDS6_DEPTH  1

#define IBU_P1_REMOTE_DDS7_ADDR   0x0110029bL
#define IBU_P1_REMOTE_DDS7_STRIDE 1
#define IBU_P1_REMOTE_DDS7_DEPTH  1

#define IBU_P1_REMOTE_DDS8_ADDR   0x0110029cL
#define IBU_P1_REMOTE_DDS8_STRIDE 1
#define IBU_P1_REMOTE_DDS8_DEPTH  1

#define IBU_P1_REMOTE_DDS9_ADDR   0x0110029dL
#define IBU_P1_REMOTE_DDS9_STRIDE 1
#define IBU_P1_REMOTE_DDS9_DEPTH  1

#define IBU_P1_REMOTE_DDS10_ADDR   0x0110029eL
#define IBU_P1_REMOTE_DDS10_STRIDE 1
#define IBU_P1_REMOTE_DDS10_DEPTH  1

#define IBU_P1_REMOTE_DDS11_ADDR   0x0110029fL
#define IBU_P1_REMOTE_DDS11_STRIDE 1
#define IBU_P1_REMOTE_DDS11_DEPTH  1

#define IBU_P1_REMOTE_DDS12_ADDR   0x011002a0L
#define IBU_P1_REMOTE_DDS12_STRIDE 1
#define IBU_P1_REMOTE_DDS12_DEPTH  1

#define IBU_P1_REMOTE_DDS13_ADDR   0x011002a1L
#define IBU_P1_REMOTE_DDS13_STRIDE 1
#define IBU_P1_REMOTE_DDS13_DEPTH  1

#define IBU_P1_REMOTE_DDS14_ADDR   0x011002a2L
#define IBU_P1_REMOTE_DDS14_STRIDE 1
#define IBU_P1_REMOTE_DDS14_DEPTH  1

#define IBU_P1_REMOTE_DDS15_ADDR   0x011002a3L
#define IBU_P1_REMOTE_DDS15_STRIDE 1
#define IBU_P1_REMOTE_DDS15_DEPTH  1

#define IBU_P1_BAD_CSR_ADDR   0x01100badL
#define IBU_P1_BAD_CSR_STRIDE 1
#define IBU_P1_BAD_CSR_DEPTH  1

#define IBU_P1_CETUS_CH0_REG15_CSR_ADDR   0x0114000fL
#define IBU_P1_CETUS_CH0_REG15_CSR_STRIDE 1
#define IBU_P1_CETUS_CH0_REG15_CSR_DEPTH  1

#define IBU_P1_CETUS_CH0_REG102_CSR_ADDR   0x01140066L
#define IBU_P1_CETUS_CH0_REG102_CSR_STRIDE 1
#define IBU_P1_CETUS_CH0_REG102_CSR_DEPTH  1

#define IBU_P1_CETUS_CH1_REG15_CSR_ADDR   0x0114010fL
#define IBU_P1_CETUS_CH1_REG15_CSR_STRIDE 1
#define IBU_P1_CETUS_CH1_REG15_CSR_DEPTH  1

#define IBU_P1_CETUS_CH1_REG102_CSR_ADDR   0x01140166L
#define IBU_P1_CETUS_CH1_REG102_CSR_STRIDE 1
#define IBU_P1_CETUS_CH1_REG102_CSR_DEPTH  1

#define IBU_P1_CETUS_PLLA_REG24_CSR_ADDR   0x01140218L
#define IBU_P1_CETUS_PLLA_REG24_CSR_STRIDE 1
#define IBU_P1_CETUS_PLLA_REG24_CSR_DEPTH  1

#define IBU_P1_CETUS_CH2_REG15_CSR_ADDR   0x0114030fL
#define IBU_P1_CETUS_CH2_REG15_CSR_STRIDE 1
#define IBU_P1_CETUS_CH2_REG15_CSR_DEPTH  1

#define IBU_P1_CETUS_CH2_REG102_CSR_ADDR   0x01140366L
#define IBU_P1_CETUS_CH2_REG102_CSR_STRIDE 1
#define IBU_P1_CETUS_CH2_REG102_CSR_DEPTH  1

#define IBU_P1_CETUS_CH3_REG15_CSR_ADDR   0x0114040fL
#define IBU_P1_CETUS_CH3_REG15_CSR_STRIDE 1
#define IBU_P1_CETUS_CH3_REG15_CSR_DEPTH  1

#define IBU_P1_CETUS_CH3_REG102_CSR_ADDR   0x01140466L
#define IBU_P1_CETUS_CH3_REG102_CSR_STRIDE 1
#define IBU_P1_CETUS_CH3_REG102_CSR_DEPTH  1

#define IBU_P1_CETUS_PLLB_REG24_CSR_ADDR   0x01140618L
#define IBU_P1_CETUS_PLLB_REG24_CSR_STRIDE 1
#define IBU_P1_CETUS_PLLB_REG24_CSR_DEPTH  1

#define IBU_P1_PMA_RESET_CSR_ADDR   0x01160000L
#define IBU_P1_PMA_RESET_CSR_STRIDE 1
#define IBU_P1_PMA_RESET_CSR_DEPTH  1

#define IBU_P1_PMA_PLLA_CSR_ADDR   0x01160001L
#define IBU_P1_PMA_PLLA_CSR_STRIDE 1
#define IBU_P1_PMA_PLLA_CSR_DEPTH  1

#define IBU_P1_PMA_PLLB_CSR_ADDR   0x01160002L
#define IBU_P1_PMA_PLLB_CSR_STRIDE 1
#define IBU_P1_PMA_PLLB_CSR_DEPTH  1

#define IBU_P1_PMA_CMODE_CSR_ADDR   0x01160003L
#define IBU_P1_PMA_CMODE_CSR_STRIDE 1
#define IBU_P1_PMA_CMODE_CSR_DEPTH  1

#define IBU_P1_PMA_LB_CSR_ADDR   0x01160004L
#define IBU_P1_PMA_LB_CSR_STRIDE 1
#define IBU_P1_PMA_LB_CSR_DEPTH  1

#define IBU_P1_PMA_PWR_CSR_ADDR   0x01160005L
#define IBU_P1_PMA_PWR_CSR_STRIDE 1
#define IBU_P1_PMA_PWR_CSR_DEPTH  1

#define IBU_P1_PMA_STATUS0_CSR_ADDR   0x01160006L
#define IBU_P1_PMA_STATUS0_CSR_STRIDE 1
#define IBU_P1_PMA_STATUS0_CSR_DEPTH  1

#define IBU_P1_PMA_STATUS1_CSR_ADDR   0x01160007L
#define IBU_P1_PMA_STATUS1_CSR_STRIDE 1
#define IBU_P1_PMA_STATUS1_CSR_DEPTH  1

#define IBU_P1_PMA_STATUS2_CSR_ADDR   0x01160008L
#define IBU_P1_PMA_STATUS2_CSR_STRIDE 1
#define IBU_P1_PMA_STATUS2_CSR_DEPTH  1

#define IBU_P1_PMA_TXWCLK0_CNT_CSR_ADDR   0x01160009L
#define IBU_P1_PMA_TXWCLK0_CNT_CSR_STRIDE 1
#define IBU_P1_PMA_TXWCLK0_CNT_CSR_DEPTH  1

#define IBU_P1_PMA_TXWCLK0_CNT_VAL_ADDR   0x0116000aL
#define IBU_P1_PMA_TXWCLK0_CNT_VAL_STRIDE 1
#define IBU_P1_PMA_TXWCLK0_CNT_VAL_DEPTH  1

#define IBU_P1_PMA_RXWCLK0_CNT_CSR_ADDR   0x0116000bL
#define IBU_P1_PMA_RXWCLK0_CNT_CSR_STRIDE 1
#define IBU_P1_PMA_RXWCLK0_CNT_CSR_DEPTH  1

#define IBU_P1_PMA_RXWCLK0_CNT_VAL_ADDR   0x0116000cL
#define IBU_P1_PMA_RXWCLK0_CNT_VAL_STRIDE 1
#define IBU_P1_PMA_RXWCLK0_CNT_VAL_DEPTH  1

#define IBU_P1_PMA_IRQ_STATUS_CSR_ADDR   0x0116000dL
#define IBU_P1_PMA_IRQ_STATUS_CSR_STRIDE 1
#define IBU_P1_PMA_IRQ_STATUS_CSR_DEPTH  1

#define IBU_P1_PMA_IRQ_MASK_CSR_ADDR   0x0116000eL
#define IBU_P1_PMA_IRQ_MASK_CSR_STRIDE 1
#define IBU_P1_PMA_IRQ_MASK_CSR_DEPTH  1

#define IBU_P1_PMA_BAD_CSR_ADDR   0x0116fbadL
#define IBU_P1_PMA_BAD_CSR_STRIDE 1
#define IBU_P1_PMA_BAD_CSR_DEPTH  1

#define IBU_P2_CNT1US_CNT124US_ADDR   0x01180001L
#define IBU_P2_CNT1US_CNT124US_STRIDE 1
#define IBU_P2_CNT1US_CNT124US_DEPTH  1

#define IBU_P2_CNT2MS_ADDR   0x01180002L
#define IBU_P2_CNT2MS_STRIDE 1
#define IBU_P2_CNT2MS_DEPTH  1

#define IBU_P2_CNT10MS_ADDR   0x01180003L
#define IBU_P2_CNT10MS_STRIDE 1
#define IBU_P2_CNT10MS_DEPTH  1

#define IBU_P2_CNT100MS_ADDR   0x01180004L
#define IBU_P2_CNT100MS_STRIDE 1
#define IBU_P2_CNT100MS_DEPTH  1

#define IBU_P2_CNT150MS_ADDR   0x01180005L
#define IBU_P2_CNT150MS_STRIDE 1
#define IBU_P2_CNT150MS_DEPTH  1

#define IBU_P2_CNT400MS_ADDR   0x01180006L
#define IBU_P2_CNT400MS_STRIDE 1
#define IBU_P2_CNT400MS_DEPTH  1

#define IBU_P2_SKP_TO_CNT_ADDR   0x01180007L
#define IBU_P2_SKP_TO_CNT_STRIDE 1
#define IBU_P2_SKP_TO_CNT_DEPTH  1

#define IBU_P2_TGT_VAL_ADDR   0x01180008L
#define IBU_P2_TGT_VAL_STRIDE 1
#define IBU_P2_TGT_VAL_DEPTH  1

#define IBU_P2_PHY_VCONFIG_ADDR   0x01180009L
#define IBU_P2_PHY_VCONFIG_STRIDE 1
#define IBU_P2_PHY_VCONFIG_DEPTH  1

#define IBU_P2_PHY_DISP_ERROR_CNT_ADDR   0x0118000aL
#define IBU_P2_PHY_DISP_ERROR_CNT_STRIDE 1
#define IBU_P2_PHY_DISP_ERROR_CNT_DEPTH  1

#define IBU_P2_PHY_CODE_ERROR_CNT_ADDR   0x0118000bL
#define IBU_P2_PHY_CODE_ERROR_CNT_STRIDE 1
#define IBU_P2_PHY_CODE_ERROR_CNT_DEPTH  1

#define IBU_P2_PHY_EVENT_LOG_ADDR   0x0118000cL
#define IBU_P2_PHY_EVENT_LOG_STRIDE 1
#define IBU_P2_PHY_EVENT_LOG_DEPTH  1

#define IBU_P2_PORT_TRAIN_FSM_ADDR   0x0118000dL
#define IBU_P2_PORT_TRAIN_FSM_STRIDE 1
#define IBU_P2_PORT_TRAIN_FSM_DEPTH  1

#define IBU_P2_PHY_TRAIN_SMTIMER_VS1_ADDR   0x0118000eL
#define IBU_P2_PHY_TRAIN_SMTIMER_VS1_STRIDE 1
#define IBU_P2_PHY_TRAIN_SMTIMER_VS1_DEPTH  1

#define IBU_P2_MASK_ADDR   0x0118000fL
#define IBU_P2_MASK_STRIDE 1
#define IBU_P2_MASK_DEPTH  1

#define IBU_P2_STATUS_ADDR   0x01180010L
#define IBU_P2_STATUS_STRIDE 1
#define IBU_P2_STATUS_DEPTH  1

#define IBU_P2_LINK_WIDTH_ENABLED_ADDR   0x01180011L
#define IBU_P2_LINK_WIDTH_ENABLED_STRIDE 1
#define IBU_P2_LINK_WIDTH_ENABLED_DEPTH  1

#define IBU_P2_LINK_WIDTH_SUPPORTED_ADDR   0x01180012L
#define IBU_P2_LINK_WIDTH_SUPPORTED_STRIDE 1
#define IBU_P2_LINK_WIDTH_SUPPORTED_DEPTH  1

#define IBU_P2_LINK_WIDTH_ACTIVE_ADDR   0x01180013L
#define IBU_P2_LINK_WIDTH_ACTIVE_STRIDE 1
#define IBU_P2_LINK_WIDTH_ACTIVE_DEPTH  1

#define IBU_P2_LINK_SPEED_SUPPORTED_ADDR   0x01180014L
#define IBU_P2_LINK_SPEED_SUPPORTED_STRIDE 1
#define IBU_P2_LINK_SPEED_SUPPORTED_DEPTH  1

#define IBU_P2_PORT_PHYSICAL_STATE_ADDR   0x01180015L
#define IBU_P2_PORT_PHYSICAL_STATE_STRIDE 1
#define IBU_P2_PORT_PHYSICAL_STATE_DEPTH  1

#define IBU_P2_LINK_DOWN_DEFAULT_STATE_ADDR   0x01180016L
#define IBU_P2_LINK_DOWN_DEFAULT_STATE_STRIDE 1
#define IBU_P2_LINK_DOWN_DEFAULT_STATE_DEPTH  1

#define IBU_P2_LINK_SPEED_ACTIVE_ADDR   0x01180017L
#define IBU_P2_LINK_SPEED_ACTIVE_STRIDE 1
#define IBU_P2_LINK_SPEED_ACTIVE_DEPTH  1

#define IBU_P2_LINK_SPEED_ENABLED_ADDR   0x01180018L
#define IBU_P2_LINK_SPEED_ENABLED_STRIDE 1
#define IBU_P2_LINK_SPEED_ENABLED_DEPTH  1

#define IBU_P2_PCPHY_CNT_RST_ADDR   0x01180019L
#define IBU_P2_PCPHY_CNT_RST_STRIDE 1
#define IBU_P2_PCPHY_CNT_RST_DEPTH  1

#define IBU_P2_PCPHY_CNT_LOAD_ADDR   0x0118001aL
#define IBU_P2_PCPHY_CNT_LOAD_STRIDE 1
#define IBU_P2_PCPHY_CNT_LOAD_DEPTH  1

#define IBU_P2_PCSYMB_ERR_CNT_ADDR   0x0118001bL
#define IBU_P2_PCSYMB_ERR_CNT_STRIDE 1
#define IBU_P2_PCSYMB_ERR_CNT_DEPTH  1

#define IBU_P2_PCLINK_ERR_REC_CNT_ADDR   0x0118001cL
#define IBU_P2_PCLINK_ERR_REC_CNT_STRIDE 1
#define IBU_P2_PCLINK_ERR_REC_CNT_DEPTH  1

#define IBU_P2_PCLINK_DOWNED_CNT_ADDR   0x0118001dL
#define IBU_P2_PCLINK_DOWNED_CNT_STRIDE 1
#define IBU_P2_PCLINK_DOWNED_CNT_DEPTH  1

#define IBU_P2_PCSYMB_ERR_CNT_LANE0_ADDR   0x0118001eL
#define IBU_P2_PCSYMB_ERR_CNT_LANE0_STRIDE 1
#define IBU_P2_PCSYMB_ERR_CNT_LANE0_DEPTH  1

#define IBU_P2_PCSYMB_ERR_CNT_LANE1_ADDR   0x0118001fL
#define IBU_P2_PCSYMB_ERR_CNT_LANE1_STRIDE 1
#define IBU_P2_PCSYMB_ERR_CNT_LANE1_DEPTH  1

#define IBU_P2_PCSYMB_ERR_CNT_LANE2_ADDR   0x01180020L
#define IBU_P2_PCSYMB_ERR_CNT_LANE2_STRIDE 1
#define IBU_P2_PCSYMB_ERR_CNT_LANE2_DEPTH  1

#define IBU_P2_PCSYMB_ERR_CNT_LANE3_ADDR   0x01180021L
#define IBU_P2_PCSYMB_ERR_CNT_LANE3_STRIDE 1
#define IBU_P2_PCSYMB_ERR_CNT_LANE3_DEPTH  1

#define IBU_P2_TS3_REV1_TT0_COUNTER_ADDR   0x01180022L
#define IBU_P2_TS3_REV1_TT0_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT0_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT1_COUNTER_ADDR   0x01180023L
#define IBU_P2_TS3_REV1_TT1_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT1_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT2_COUNTER_ADDR   0x01180024L
#define IBU_P2_TS3_REV1_TT2_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT2_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT3_COUNTER_ADDR   0x01180025L
#define IBU_P2_TS3_REV1_TT3_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT3_COUNTER_DEPTH  1

#define IBU_P2_PHY_ALIGN_ERROR_CNT_ADDR   0x01180026L
#define IBU_P2_PHY_ALIGN_ERROR_CNT_STRIDE 1
#define IBU_P2_PHY_ALIGN_ERROR_CNT_DEPTH  1

#define IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT_ADDR   0x01180027L
#define IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT_STRIDE 1
#define IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT_DEPTH  1

#define IBU_P2_PHY_PAD_ERROR_CNT_ADDR   0x01180028L
#define IBU_P2_PHY_PAD_ERROR_CNT_STRIDE 1
#define IBU_P2_PHY_PAD_ERROR_CNT_DEPTH  1

#define IBU_P2_PHY_EDR_FDR_CONFIG0_ADDR   0x01180029L
#define IBU_P2_PHY_EDR_FDR_CONFIG0_STRIDE 1
#define IBU_P2_PHY_EDR_FDR_CONFIG0_DEPTH  1

#define IBU_P2_PHY_EDR_FDR_CONFIG1_ADDR   0x0118002aL
#define IBU_P2_PHY_EDR_FDR_CONFIG1_STRIDE 1
#define IBU_P2_PHY_EDR_FDR_CONFIG1_DEPTH  1

#define IBU_P2_PHY_LEAKY_BKT_THRSH_ADDR   0x0118002bL
#define IBU_P2_PHY_LEAKY_BKT_THRSH_STRIDE 1
#define IBU_P2_PHY_LEAKY_BKT_THRSH_DEPTH  1

#define IBU_P2_RCV_TS3_STATUS_LOW_ADDR   0x0118002dL
#define IBU_P2_RCV_TS3_STATUS_LOW_STRIDE 1
#define IBU_P2_RCV_TS3_STATUS_LOW_DEPTH  1

#define IBU_P2_RCV_TS3_STATUS_HIGH_ADDR   0x0118002eL
#define IBU_P2_RCV_TS3_STATUS_HIGH_STRIDE 1
#define IBU_P2_RCV_TS3_STATUS_HIGH_DEPTH  1

#define IBU_P2_GUID0_ADDR   0x0118002fL
#define IBU_P2_GUID0_STRIDE 1
#define IBU_P2_GUID0_DEPTH  1

#define IBU_P2_GUID1_ADDR   0x01180030L
#define IBU_P2_GUID1_STRIDE 1
#define IBU_P2_GUID1_DEPTH  1

#define IBU_P2_PNUM_ADDR   0x01180031L
#define IBU_P2_PNUM_STRIDE 1
#define IBU_P2_PNUM_DEPTH  1

#define IBU_P2_CNT4MS_ADDR   0x01180032L
#define IBU_P2_CNT4MS_STRIDE 1
#define IBU_P2_CNT4MS_DEPTH  1

#define IBU_P2_CNT36MS_ADDR   0x01180033L
#define IBU_P2_CNT36MS_STRIDE 1
#define IBU_P2_CNT36MS_DEPTH  1

#define IBU_P2_PHY_TS3_CONFIG_ADDR   0x01180034L
#define IBU_P2_PHY_TS3_CONFIG_STRIDE 1
#define IBU_P2_PHY_TS3_CONFIG_DEPTH  1

#define IBU_P2_DDS_WINDOW_START_ADDR   0x01180035L
#define IBU_P2_DDS_WINDOW_START_STRIDE 1
#define IBU_P2_DDS_WINDOW_START_DEPTH  1

#define IBU_P2_DDS_WINDOW_END_ADDR   0x01180036L
#define IBU_P2_DDS_WINDOW_END_STRIDE 1
#define IBU_P2_DDS_WINDOW_END_DEPTH  1

#define IBU_P2_DDS_DEFAULT_WINDOW_END_ADDR   0x01180037L
#define IBU_P2_DDS_DEFAULT_WINDOW_END_STRIDE 1
#define IBU_P2_DDS_DEFAULT_WINDOW_END_DEPTH  1

#define IBU_P2_RX_TS3DDS_STATUS_ADDR   0x01180038L
#define IBU_P2_RX_TS3DDS_STATUS_STRIDE 1
#define IBU_P2_RX_TS3DDS_STATUS_DEPTH  1

#define IBU_P2_TX_TS3DDS_STATUS_ADDR   0x01180039L
#define IBU_P2_TX_TS3DDS_STATUS_STRIDE 1
#define IBU_P2_TX_TS3DDS_STATUS_DEPTH  1

#define IBU_P2_CNT16MS_ADDR   0x0118003aL
#define IBU_P2_CNT16MS_STRIDE 1
#define IBU_P2_CNT16MS_DEPTH  1

#define IBU_P2_CONF_TEST4MS_SCT_ADDR   0x0118003bL
#define IBU_P2_CONF_TEST4MS_SCT_STRIDE 1
#define IBU_P2_CONF_TEST4MS_SCT_DEPTH  1

#define IBU_P2_CONF_TEST16MS_SCT_ADDR   0x0118003cL
#define IBU_P2_CONF_TEST16MS_SCT_STRIDE 1
#define IBU_P2_CONF_TEST16MS_SCT_DEPTH  1

#define IBU_P2_LOCAL_ADDTEST_LIMIT_ADDR   0x0118003dL
#define IBU_P2_LOCAL_ADDTEST_LIMIT_STRIDE 1
#define IBU_P2_LOCAL_ADDTEST_LIMIT_DEPTH  1

#define IBU_P2_REMOTE_ADDTEST_LIMIT_ADDR   0x0118003eL
#define IBU_P2_REMOTE_ADDTEST_LIMIT_STRIDE 1
#define IBU_P2_REMOTE_ADDTEST_LIMIT_DEPTH  1

#define IBU_P2_TS3_REV1_TT4_COUNTER_ADDR   0x0118003fL
#define IBU_P2_TS3_REV1_TT4_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT4_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT5_COUNTER_ADDR   0x01180040L
#define IBU_P2_TS3_REV1_TT5_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT5_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT6_COUNTER_ADDR   0x01180041L
#define IBU_P2_TS3_REV1_TT6_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT6_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT7_COUNTER_ADDR   0x01180042L
#define IBU_P2_TS3_REV1_TT7_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT7_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT8_COUNTER_ADDR   0x01180043L
#define IBU_P2_TS3_REV1_TT8_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT8_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT9_COUNTER_ADDR   0x01180044L
#define IBU_P2_TS3_REV1_TT9_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT9_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT10_COUNTER_ADDR   0x01180045L
#define IBU_P2_TS3_REV1_TT10_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT10_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT11_COUNTER_ADDR   0x01180046L
#define IBU_P2_TS3_REV1_TT11_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT11_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT12_COUNTER_ADDR   0x01180047L
#define IBU_P2_TS3_REV1_TT12_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT12_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT13_COUNTER_ADDR   0x01180048L
#define IBU_P2_TS3_REV1_TT13_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT13_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT14_COUNTER_ADDR   0x01180049L
#define IBU_P2_TS3_REV1_TT14_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT14_COUNTER_DEPTH  1

#define IBU_P2_TS3_REV1_TT15_COUNTER_ADDR   0x0118004aL
#define IBU_P2_TS3_REV1_TT15_COUNTER_STRIDE 1
#define IBU_P2_TS3_REV1_TT15_COUNTER_DEPTH  1

#define IBU_P2_CONF_TEST_LANE_ERROR_LIMIT_ADDR   0x0118004bL
#define IBU_P2_CONF_TEST_LANE_ERROR_LIMIT_STRIDE 1
#define IBU_P2_CONF_TEST_LANE_ERROR_LIMIT_DEPTH  1

#define IBU_P2_CONF_TEST_IDLE_LIMIT_ADDR   0x0118004cL
#define IBU_P2_CONF_TEST_IDLE_LIMIT_STRIDE 1
#define IBU_P2_CONF_TEST_IDLE_LIMIT_DEPTH  1

#define IBU_P2_CONF_TEST2MS_SCT_ADDR   0x0118004dL
#define IBU_P2_CONF_TEST2MS_SCT_STRIDE 1
#define IBU_P2_CONF_TEST2MS_SCT_DEPTH  1

#define IBU_P2_CNT100_MS_HBR_ADDR   0x0118004eL
#define IBU_P2_CNT100_MS_HBR_STRIDE 1
#define IBU_P2_CNT100_MS_HBR_DEPTH  1

#define IBU_P2_PMAEQULANE0_STATUS_ADDR   0x0118004fL
#define IBU_P2_PMAEQULANE0_STATUS_STRIDE 1
#define IBU_P2_PMAEQULANE0_STATUS_DEPTH  1

#define IBU_P2_PMAEQULANE1_STATUS_ADDR   0x01180050L
#define IBU_P2_PMAEQULANE1_STATUS_STRIDE 1
#define IBU_P2_PMAEQULANE1_STATUS_DEPTH  1

#define IBU_P2_PMAEQULANE2_STATUS_ADDR   0x01180051L
#define IBU_P2_PMAEQULANE2_STATUS_STRIDE 1
#define IBU_P2_PMAEQULANE2_STATUS_DEPTH  1

#define IBU_P2_PMAEQULANE3_STATUS_ADDR   0x01180052L
#define IBU_P2_PMAEQULANE3_STATUS_STRIDE 1
#define IBU_P2_PMAEQULANE3_STATUS_DEPTH  1

#define IBU_P2_PMADDSLANE0_STATUS_ADDR   0x01180053L
#define IBU_P2_PMADDSLANE0_STATUS_STRIDE 1
#define IBU_P2_PMADDSLANE0_STATUS_DEPTH  1

#define IBU_P2_PMADDSLANE1_STATUS_ADDR   0x01180054L
#define IBU_P2_PMADDSLANE1_STATUS_STRIDE 1
#define IBU_P2_PMADDSLANE1_STATUS_DEPTH  1

#define IBU_P2_PMADDSLANE2_STATUS_ADDR   0x01180055L
#define IBU_P2_PMADDSLANE2_STATUS_STRIDE 1
#define IBU_P2_PMADDSLANE2_STATUS_DEPTH  1

#define IBU_P2_PMADDSLANE3_STATUS_ADDR   0x01180056L
#define IBU_P2_PMADDSLANE3_STATUS_STRIDE 1
#define IBU_P2_PMADDSLANE3_STATUS_DEPTH  1

#define IBU_P2_PHY_EDPL_ERR0_ADDR   0x01180057L
#define IBU_P2_PHY_EDPL_ERR0_STRIDE 1
#define IBU_P2_PHY_EDPL_ERR0_DEPTH  1

#define IBU_P2_PHY_EDPL_ERR1_ADDR   0x01180058L
#define IBU_P2_PHY_EDPL_ERR1_STRIDE 1
#define IBU_P2_PHY_EDPL_ERR1_DEPTH  1

#define IBU_P2_PHY_EDPL_ERR2_ADDR   0x01180059L
#define IBU_P2_PHY_EDPL_ERR2_STRIDE 1
#define IBU_P2_PHY_EDPL_ERR2_DEPTH  1

#define IBU_P2_PHY_EDPL_ERR3_ADDR   0x0118005aL
#define IBU_P2_PHY_EDPL_ERR3_STRIDE 1
#define IBU_P2_PHY_EDPL_ERR3_DEPTH  1

#define IBU_P2_PHY_BLK_TYPE_ERR_ADDR   0x0118005bL
#define IBU_P2_PHY_BLK_TYPE_ERR_STRIDE 1
#define IBU_P2_PHY_BLK_TYPE_ERR_DEPTH  1

#define IBU_P2_PHY_BLK_EOP_ERR_ADDR   0x0118005cL
#define IBU_P2_PHY_BLK_EOP_ERR_STRIDE 1
#define IBU_P2_PHY_BLK_EOP_ERR_DEPTH  1

#define IBU_P2_PHY_CIN_PKT_ERR_ADDR   0x0118005dL
#define IBU_P2_PHY_CIN_PKT_ERR_STRIDE 1
#define IBU_P2_PHY_CIN_PKT_ERR_DEPTH  1

#define IBU_P2_PHY_SYN_HDR_ERR_ADDR   0x0118005eL
#define IBU_P2_PHY_SYN_HDR_ERR_STRIDE 1
#define IBU_P2_PHY_SYN_HDR_ERR_DEPTH  1

#define IBU_P2_PHY_PRBS_ERR0_ADDR   0x0118005fL
#define IBU_P2_PHY_PRBS_ERR0_STRIDE 1
#define IBU_P2_PHY_PRBS_ERR0_DEPTH  1

#define IBU_P2_PHY_PRBS_ERR1_ADDR   0x01180060L
#define IBU_P2_PHY_PRBS_ERR1_STRIDE 1
#define IBU_P2_PHY_PRBS_ERR1_DEPTH  1

#define IBU_P2_PHY_PRBS_ERR2_ADDR   0x01180061L
#define IBU_P2_PHY_PRBS_ERR2_STRIDE 1
#define IBU_P2_PHY_PRBS_ERR2_DEPTH  1

#define IBU_P2_PHY_PRBS_ERR3_ADDR   0x01180062L
#define IBU_P2_PHY_PRBS_ERR3_STRIDE 1
#define IBU_P2_PHY_PRBS_ERR3_DEPTH  1

#define IBU_P2_PHY_DESKEW_STATUS_ADDR   0x01180063L
#define IBU_P2_PHY_DESKEW_STATUS_STRIDE 1
#define IBU_P2_PHY_DESKEW_STATUS_DEPTH  1

#define IBU_P2_PHY_FECUNC_ERR0_ADDR   0x01180064L
#define IBU_P2_PHY_FECUNC_ERR0_STRIDE 1
#define IBU_P2_PHY_FECUNC_ERR0_DEPTH  1

#define IBU_P2_PHY_FECUNC_ERR1_ADDR   0x01180065L
#define IBU_P2_PHY_FECUNC_ERR1_STRIDE 1
#define IBU_P2_PHY_FECUNC_ERR1_DEPTH  1

#define IBU_P2_PHY_FECUNC_ERR2_ADDR   0x01180066L
#define IBU_P2_PHY_FECUNC_ERR2_STRIDE 1
#define IBU_P2_PHY_FECUNC_ERR2_DEPTH  1

#define IBU_P2_PHY_FECUNC_ERR3_ADDR   0x01180067L
#define IBU_P2_PHY_FECUNC_ERR3_STRIDE 1
#define IBU_P2_PHY_FECUNC_ERR3_DEPTH  1

#define IBU_P2_PHY_FECCOR_ERR0_ADDR   0x01180068L
#define IBU_P2_PHY_FECCOR_ERR0_STRIDE 1
#define IBU_P2_PHY_FECCOR_ERR0_DEPTH  1

#define IBU_P2_PHY_FECCOR_ERR1_ADDR   0x01180069L
#define IBU_P2_PHY_FECCOR_ERR1_STRIDE 1
#define IBU_P2_PHY_FECCOR_ERR1_DEPTH  1

#define IBU_P2_PHY_FECCOR_ERR2_ADDR   0x0118006aL
#define IBU_P2_PHY_FECCOR_ERR2_STRIDE 1
#define IBU_P2_PHY_FECCOR_ERR2_DEPTH  1

#define IBU_P2_PHY_FECCOR_ERR3_ADDR   0x0118006bL
#define IBU_P2_PHY_FECCOR_ERR3_STRIDE 1
#define IBU_P2_PHY_FECCOR_ERR3_DEPTH  1

#define IBU_P2_PHY_SMSTATUS_ADDR   0x0118006cL
#define IBU_P2_PHY_SMSTATUS_STRIDE 1
#define IBU_P2_PHY_SMSTATUS_DEPTH  1

#define IBU_P2_PHY_TS3_NEGOTIATED_STATUS_ADDR   0x0118006dL
#define IBU_P2_PHY_TS3_NEGOTIATED_STATUS_STRIDE 1
#define IBU_P2_PHY_TS3_NEGOTIATED_STATUS_DEPTH  1

#define IBU_P2_PHY_TEST_ADDR   0x0118006eL
#define IBU_P2_PHY_TEST_STRIDE 1
#define IBU_P2_PHY_TEST_DEPTH  1

#define IBU_P2_EDR_FDR_RX_STATUS_REG0_ADDR   0x0118006fL
#define IBU_P2_EDR_FDR_RX_STATUS_REG0_STRIDE 1
#define IBU_P2_EDR_FDR_RX_STATUS_REG0_DEPTH  1

#define IBU_P2_EDR_FDR_RX_STATUS_REG1_ADDR   0x01180070L
#define IBU_P2_EDR_FDR_RX_STATUS_REG1_STRIDE 1
#define IBU_P2_EDR_FDR_RX_STATUS_REG1_DEPTH  1

#define IBU_P2_EDR_FDR_RX_STATUS_REG2_ADDR   0x01180071L
#define IBU_P2_EDR_FDR_RX_STATUS_REG2_STRIDE 1
#define IBU_P2_EDR_FDR_RX_STATUS_REG2_DEPTH  1

#define IBU_P2_EDR_FDR_TX_STATUS_REG0_ADDR   0x01180072L
#define IBU_P2_EDR_FDR_TX_STATUS_REG0_STRIDE 1
#define IBU_P2_EDR_FDR_TX_STATUS_REG0_DEPTH  1

#define IBU_P2_INT_PRIORITY_ADDR   0x01180073L
#define IBU_P2_INT_PRIORITY_STRIDE 1
#define IBU_P2_INT_PRIORITY_DEPTH  1

#define IBU_P2_INT_FATAL_ADDR   0x01180074L
#define IBU_P2_INT_FATAL_STRIDE 1
#define IBU_P2_INT_FATAL_DEPTH  1

#define IBU_P2_LINK_ROUND_TRIP_LATENCY_ADDR   0x01180075L
#define IBU_P2_LINK_ROUND_TRIP_LATENCY_STRIDE 1
#define IBU_P2_LINK_ROUND_TRIP_LATENCY_DEPTH  1

#define IBU_P2_PHY_FORCE_LEGACY_MODE_ADDR   0x01180076L
#define IBU_P2_PHY_FORCE_LEGACY_MODE_STRIDE 1
#define IBU_P2_PHY_FORCE_LEGACY_MODE_DEPTH  1

#define IBU_P2_LID_ADDR   0x01180100L
#define IBU_P2_LID_STRIDE 1
#define IBU_P2_LID_DEPTH  1

#define IBU_P2_LMC_ADDR   0x01180101L
#define IBU_P2_LMC_STRIDE 1
#define IBU_P2_LMC_DEPTH  1

#define IBU_P2_PORT_STATE_ADDR   0x01180102L
#define IBU_P2_PORT_STATE_STRIDE 1
#define IBU_P2_PORT_STATE_DEPTH  1

#define IBU_P2_VLCAP_ADDR   0x01180103L
#define IBU_P2_VLCAP_STRIDE 1
#define IBU_P2_VLCAP_DEPTH  1

#define IBU_P2_NEIGHBOR_MTU_ADDR   0x01180104L
#define IBU_P2_NEIGHBOR_MTU_STRIDE 1
#define IBU_P2_NEIGHBOR_MTU_DEPTH  1

#define IBU_P2_VLHIGH_LIMIT_ADDR   0x01180105L
#define IBU_P2_VLHIGH_LIMIT_STRIDE 1
#define IBU_P2_VLHIGH_LIMIT_DEPTH  1

#define IBU_P2_VLARBITRATION_HIGH_CAP_ADDR   0x01180106L
#define IBU_P2_VLARBITRATION_HIGH_CAP_STRIDE 1
#define IBU_P2_VLARBITRATION_HIGH_CAP_DEPTH  1

#define IBU_P2_VLARBITRATION_LOW_CAP_ADDR   0x01180107L
#define IBU_P2_VLARBITRATION_LOW_CAP_STRIDE 1
#define IBU_P2_VLARBITRATION_LOW_CAP_DEPTH  1

#define IBU_P2_MTUCAP_ADDR   0x01180108L
#define IBU_P2_MTUCAP_STRIDE 1
#define IBU_P2_MTUCAP_DEPTH  1

#define IBU_P2_OPERATIONAL_VLS_ADDR   0x01180109L
#define IBU_P2_OPERATIONAL_VLS_STRIDE 1
#define IBU_P2_OPERATIONAL_VLS_DEPTH  1

#define IBU_P2_PCPORT_RCV_ERROR_ADDR   0x0118010cL
#define IBU_P2_PCPORT_RCV_ERROR_STRIDE 1
#define IBU_P2_PCPORT_RCV_ERROR_DEPTH  1

#define IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_ADDR   0x0118010dL
#define IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_STRIDE 1
#define IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_DEPTH  1

#define IBU_P2_PCPORT_XMIT_DISCARDS_ADDR   0x0118010eL
#define IBU_P2_PCPORT_XMIT_DISCARDS_STRIDE 1
#define IBU_P2_PCPORT_XMIT_DISCARDS_DEPTH  1

#define IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS_ADDR   0x0118010fL
#define IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS_STRIDE 1
#define IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS_DEPTH  1

#define IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_ADDR   0x01180110L
#define IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_STRIDE 1
#define IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_DEPTH  1

#define IBU_P2_PCVL15_DROPPED_ADDR   0x01180111L
#define IBU_P2_PCVL15_DROPPED_STRIDE 1
#define IBU_P2_PCVL15_DROPPED_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_ADDR   0x01180112L
#define IBU_P2_PCPORT_XMIT_WAIT_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_DEPTH  1

#define IBU_P2_PCPORT_XMIT_DATA_LSQW_ADDR   0x01180113L
#define IBU_P2_PCPORT_XMIT_DATA_LSQW_STRIDE 1
#define IBU_P2_PCPORT_XMIT_DATA_LSQW_DEPTH  1

#define IBU_P2_LINK_ERROR_CHECK_ENABLE_ADDR   0x01180114L
#define IBU_P2_LINK_ERROR_CHECK_ENABLE_STRIDE 1
#define IBU_P2_LINK_ERROR_CHECK_ENABLE_DEPTH  1

#define IBU_P2_PCPORT_RCV_DATA_LSQW_ADDR   0x01180115L
#define IBU_P2_PCPORT_RCV_DATA_LSQW_STRIDE 1
#define IBU_P2_PCPORT_RCV_DATA_LSQW_DEPTH  1

#define IBU_P2_PCPORT_XMIT_PKTS_LSQW_ADDR   0x01180117L
#define IBU_P2_PCPORT_XMIT_PKTS_LSQW_STRIDE 1
#define IBU_P2_PCPORT_XMIT_PKTS_LSQW_DEPTH  1

#define IBU_P2_PCPORT_RCV_PKTS_LSQW_ADDR   0x01180119L
#define IBU_P2_PCPORT_RCV_PKTS_LSQW_STRIDE 1
#define IBU_P2_PCPORT_RCV_PKTS_LSQW_DEPTH  1

#define IBU_P2_PCPORT_UCXMIT_PKTS_LSQW_ADDR   0x0118011bL
#define IBU_P2_PCPORT_UCXMIT_PKTS_LSQW_STRIDE 1
#define IBU_P2_PCPORT_UCXMIT_PKTS_LSQW_DEPTH  1

#define IBU_P2_PCPORT_MCXMIT_PKTS_LSQW_ADDR   0x0118011dL
#define IBU_P2_PCPORT_MCXMIT_PKTS_LSQW_STRIDE 1
#define IBU_P2_PCPORT_MCXMIT_PKTS_LSQW_DEPTH  1

#define IBU_P2_PCPORT_UCRCV_PKTS_LSQW_ADDR   0x0118011fL
#define IBU_P2_PCPORT_UCRCV_PKTS_LSQW_STRIDE 1
#define IBU_P2_PCPORT_UCRCV_PKTS_LSQW_DEPTH  1

#define IBU_P2_PCPORT_MCRCV_PKTS_LSQW_ADDR   0x01180121L
#define IBU_P2_PCPORT_MCRCV_PKTS_LSQW_STRIDE 1
#define IBU_P2_PCPORT_MCRCV_PKTS_LSQW_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL0_ADDR   0x01180123L
#define IBU_P2_PCPORT_XMIT_WAIT_VL0_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL0_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL1_ADDR   0x01180124L
#define IBU_P2_PCPORT_XMIT_WAIT_VL1_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL1_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL2_ADDR   0x01180125L
#define IBU_P2_PCPORT_XMIT_WAIT_VL2_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL2_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL3_ADDR   0x01180126L
#define IBU_P2_PCPORT_XMIT_WAIT_VL3_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL3_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL4_ADDR   0x01180127L
#define IBU_P2_PCPORT_XMIT_WAIT_VL4_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL4_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL5_ADDR   0x01180128L
#define IBU_P2_PCPORT_XMIT_WAIT_VL5_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL5_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL6_ADDR   0x01180129L
#define IBU_P2_PCPORT_XMIT_WAIT_VL6_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL6_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL7_ADDR   0x0118012aL
#define IBU_P2_PCPORT_XMIT_WAIT_VL7_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL7_DEPTH  1

#define IBU_P2_PCPORT_XMIT_WAIT_VL15_ADDR   0x0118012bL
#define IBU_P2_PCPORT_XMIT_WAIT_VL15_STRIDE 1
#define IBU_P2_PCPORT_XMIT_WAIT_VL15_DEPTH  1

#define IBU_P2_PCRX_LINK_CNT_RST_ADDR   0x0118012cL
#define IBU_P2_PCRX_LINK_CNT_RST_STRIDE 1
#define IBU_P2_PCRX_LINK_CNT_RST_DEPTH  1

#define IBU_P2_PCRX_LINK_CNT_LOAD_ADDR   0x0118012dL
#define IBU_P2_PCRX_LINK_CNT_LOAD_STRIDE 1
#define IBU_P2_PCRX_LINK_CNT_LOAD_DEPTH  1

#define IBU_P2_LOCAL_PHY_ERRORS_ADDR   0x0118012eL
#define IBU_P2_LOCAL_PHY_ERRORS_STRIDE 1
#define IBU_P2_LOCAL_PHY_ERRORS_DEPTH  1

#define IBU_P2_OVERRUN_ERRORS_ADDR   0x0118012fL
#define IBU_P2_OVERRUN_ERRORS_STRIDE 1
#define IBU_P2_OVERRUN_ERRORS_DEPTH  1

#define IBU_P2_PSLINK_DLID_ADDR   0x01180130L
#define IBU_P2_PSLINK_DLID_STRIDE 1
#define IBU_P2_PSLINK_DLID_DEPTH  1

#define IBU_P2_PSTICK_ADDR   0x01180131L
#define IBU_P2_PSTICK_STRIDE 1
#define IBU_P2_PSTICK_DEPTH  1

#define IBU_P2_PSSTATUS_ADDR   0x01180132L
#define IBU_P2_PSSTATUS_STRIDE 1
#define IBU_P2_PSSTATUS_DEPTH  1

#define IBU_P2_PSSTART_DELAY_ADDR   0x01180133L
#define IBU_P2_PSSTART_DELAY_STRIDE 1
#define IBU_P2_PSSTART_DELAY_DEPTH  1

#define IBU_P2_PSINTERVAL_ADDR   0x01180134L
#define IBU_P2_PSINTERVAL_STRIDE 1
#define IBU_P2_PSINTERVAL_DEPTH  1

#define IBU_P2_PSCNT_SEL0_ADDR   0x01180135L
#define IBU_P2_PSCNT_SEL0_STRIDE 1
#define IBU_P2_PSCNT_SEL0_DEPTH  1

#define IBU_P2_PSCNT_SEL1_ADDR   0x01180136L
#define IBU_P2_PSCNT_SEL1_STRIDE 1
#define IBU_P2_PSCNT_SEL1_DEPTH  1

#define IBU_P2_PSCNT_SEL2_ADDR   0x01180137L
#define IBU_P2_PSCNT_SEL2_STRIDE 1
#define IBU_P2_PSCNT_SEL2_DEPTH  1

#define IBU_P2_PSCNT_SEL3_ADDR   0x01180138L
#define IBU_P2_PSCNT_SEL3_STRIDE 1
#define IBU_P2_PSCNT_SEL3_DEPTH  1

#define IBU_P2_PSCNT0_ADDR   0x01180139L
#define IBU_P2_PSCNT0_STRIDE 1
#define IBU_P2_PSCNT0_DEPTH  1

#define IBU_P2_PSCNT1_ADDR   0x0118013aL
#define IBU_P2_PSCNT1_STRIDE 1
#define IBU_P2_PSCNT1_DEPTH  1

#define IBU_P2_PSCNT2_ADDR   0x0118013bL
#define IBU_P2_PSCNT2_STRIDE 1
#define IBU_P2_PSCNT2_DEPTH  1

#define IBU_P2_PSCNT3_ADDR   0x0118013cL
#define IBU_P2_PSCNT3_STRIDE 1
#define IBU_P2_PSCNT3_DEPTH  1

#define IBU_P2_PSINIT_SAMPLING_ADDR   0x0118013dL
#define IBU_P2_PSINIT_SAMPLING_STRIDE 1
#define IBU_P2_PSINIT_SAMPLING_DEPTH  1

#define IBU_P2_PSCNT_LOAD_ADDR   0x0118013eL
#define IBU_P2_PSCNT_LOAD_STRIDE 1
#define IBU_P2_PSCNT_LOAD_DEPTH  1

#define IBU_P2_PORT_STATE_CHANGE_ADDR   0x0118013fL
#define IBU_P2_PORT_STATE_CHANGE_STRIDE 1
#define IBU_P2_PORT_STATE_CHANGE_DEPTH  1

#define IBU_P2_TRAP_REGISTER_ADDR   0x01180140L
#define IBU_P2_TRAP_REGISTER_STRIDE 1
#define IBU_P2_TRAP_REGISTER_DEPTH  1

#define IBU_P2_LINK_VCONFIG0_ADDR   0x01180141L
#define IBU_P2_LINK_VCONFIG0_STRIDE 1
#define IBU_P2_LINK_VCONFIG0_DEPTH  1

#define IBU_P2_LINK_VCONFIG1_ADDR   0x01180142L
#define IBU_P2_LINK_VCONFIG1_STRIDE 1
#define IBU_P2_LINK_VCONFIG1_DEPTH  1

#define IBU_P2_LINK_VCONFIG2_ADDR   0x01180143L
#define IBU_P2_LINK_VCONFIG2_STRIDE 1
#define IBU_P2_LINK_VCONFIG2_DEPTH  1

#define IBU_P2_LINK_RX_CREDIT_VL1_0_ADDR   0x01180144L
#define IBU_P2_LINK_RX_CREDIT_VL1_0_STRIDE 1
#define IBU_P2_LINK_RX_CREDIT_VL1_0_DEPTH  1

#define IBU_P2_LINK_RX_CREDIT_VL3_2_ADDR   0x01180145L
#define IBU_P2_LINK_RX_CREDIT_VL3_2_STRIDE 1
#define IBU_P2_LINK_RX_CREDIT_VL3_2_DEPTH  1

#define IBU_P2_LINK_RX_CREDIT_VL5_4_ADDR   0x01180146L
#define IBU_P2_LINK_RX_CREDIT_VL5_4_STRIDE 1
#define IBU_P2_LINK_RX_CREDIT_VL5_4_DEPTH  1

#define IBU_P2_LINK_RX_CREDIT_VL7_6_ADDR   0x01180147L
#define IBU_P2_LINK_RX_CREDIT_VL7_6_STRIDE 1
#define IBU_P2_LINK_RX_CREDIT_VL7_6_DEPTH  1

#define IBU_P2_LINK_TX_CREDIT_VL1_0_ADDR   0x01180148L
#define IBU_P2_LINK_TX_CREDIT_VL1_0_STRIDE 1
#define IBU_P2_LINK_TX_CREDIT_VL1_0_DEPTH  1

#define IBU_P2_LINK_TX_CREDIT_VL3_2_ADDR   0x01180149L
#define IBU_P2_LINK_TX_CREDIT_VL3_2_STRIDE 1
#define IBU_P2_LINK_TX_CREDIT_VL3_2_DEPTH  1

#define IBU_P2_LINK_TX_CREDIT_VL5_4_ADDR   0x0118014aL
#define IBU_P2_LINK_TX_CREDIT_VL5_4_STRIDE 1
#define IBU_P2_LINK_TX_CREDIT_VL5_4_DEPTH  1

#define IBU_P2_LINK_TX_CREDIT_VL7_6_ADDR   0x0118014bL
#define IBU_P2_LINK_TX_CREDIT_VL7_6_STRIDE 1
#define IBU_P2_LINK_TX_CREDIT_VL7_6_DEPTH  1

#define IBU_P2_PCTX_LINK_CNT_RST_ADDR   0x0118014cL
#define IBU_P2_PCTX_LINK_CNT_RST_STRIDE 1
#define IBU_P2_PCTX_LINK_CNT_RST_DEPTH  1

#define IBU_P2_PCTX_LINK_CNT_LOAD_ADDR   0x0118014dL
#define IBU_P2_PCTX_LINK_CNT_LOAD_STRIDE 1
#define IBU_P2_PCTX_LINK_CNT_LOAD_DEPTH  1

#define IBU_P2_PSCNT_WIDTH_ADDR   0x0118014fL
#define IBU_P2_PSCNT_WIDTH_STRIDE 1
#define IBU_P2_PSCNT_WIDTH_DEPTH  1

#define IBU_P2_PSCNT_MASK_ADDR   0x01180150L
#define IBU_P2_PSCNT_MASK_STRIDE 1
#define IBU_P2_PSCNT_MASK_DEPTH  1

#define IBU_P2_PCICRC_RCV_ERRORS_ADDR   0x01180151L
#define IBU_P2_PCICRC_RCV_ERRORS_STRIDE 1
#define IBU_P2_PCICRC_RCV_ERRORS_DEPTH  1

#define IBU_P2_PCVCRC_RCV_ERRORS_ADDR   0x01180152L
#define IBU_P2_PCVCRC_RCV_ERRORS_STRIDE 1
#define IBU_P2_PCVCRC_RCV_ERRORS_DEPTH  1

#define IBU_P2_PCLEN_RCV_ERRORS_ADDR   0x01180153L
#define IBU_P2_PCLEN_RCV_ERRORS_STRIDE 1
#define IBU_P2_PCLEN_RCV_ERRORS_DEPTH  1

#define IBU_P2_PCDLID_RCV_ERRORS_ADDR   0x01180154L
#define IBU_P2_PCDLID_RCV_ERRORS_STRIDE 1
#define IBU_P2_PCDLID_RCV_ERRORS_DEPTH  1

#define IBU_P2_PCRCV_FCLEN_ERRORS_ADDR   0x01180155L
#define IBU_P2_PCRCV_FCLEN_ERRORS_STRIDE 1
#define IBU_P2_PCRCV_FCLEN_ERRORS_DEPTH  1

#define IBU_P2_PCRCV_FCVL_ERRORS_ADDR   0x01180156L
#define IBU_P2_PCRCV_FCVL_ERRORS_STRIDE 1
#define IBU_P2_PCRCV_FCVL_ERRORS_DEPTH  1

#define IBU_P2_PCRCV_FCCRC_ERRORS_ADDR   0x01180157L
#define IBU_P2_PCRCV_FCCRC_ERRORS_STRIDE 1
#define IBU_P2_PCRCV_FCCRC_ERRORS_DEPTH  1

#define IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS_ADDR   0x01180158L
#define IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS_STRIDE 1
#define IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS_DEPTH  1

#define IBU_P2_PCMAL_FORMED_ERRORS_ADDR   0x01180159L
#define IBU_P2_PCMAL_FORMED_ERRORS_STRIDE 1
#define IBU_P2_PCMAL_FORMED_ERRORS_DEPTH  1

#define IBU_P2_PCBUF_OVER_ERRORS_ADDR   0x0118015aL
#define IBU_P2_PCBUF_OVER_ERRORS_STRIDE 1
#define IBU_P2_PCBUF_OVER_ERRORS_DEPTH  1

#define IBU_P2_PCVLMAP_ERRORS_ADDR   0x0118015bL
#define IBU_P2_PCVLMAP_ERRORS_STRIDE 1
#define IBU_P2_PCVLMAP_ERRORS_DEPTH  1

#define IBU_P2_PCVLINIT_CREDIT_VL1_VL0_ADDR   0x0118015cL
#define IBU_P2_PCVLINIT_CREDIT_VL1_VL0_STRIDE 1
#define IBU_P2_PCVLINIT_CREDIT_VL1_VL0_DEPTH  1

#define IBU_P2_PCVLINIT_CREDIT_VL3_VL2_ADDR   0x0118015dL
#define IBU_P2_PCVLINIT_CREDIT_VL3_VL2_STRIDE 1
#define IBU_P2_PCVLINIT_CREDIT_VL3_VL2_DEPTH  1

#define IBU_P2_PCVLINIT_CREDIT_VL5_VL4_ADDR   0x0118015eL
#define IBU_P2_PCVLINIT_CREDIT_VL5_VL4_STRIDE 1
#define IBU_P2_PCVLINIT_CREDIT_VL5_VL4_DEPTH  1

#define IBU_P2_PCVLINIT_CREDIT_VL7_VL6_ADDR   0x0118015fL
#define IBU_P2_PCVLINIT_CREDIT_VL7_VL6_STRIDE 1
#define IBU_P2_PCVLINIT_CREDIT_VL7_VL6_DEPTH  1

#define IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT_ADDR   0x01180160L
#define IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT_STRIDE 1
#define IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT_DEPTH  1

#define IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT_ADDR   0x01180161L
#define IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT_STRIDE 1
#define IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT_DEPTH  1

#define IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT_ADDR   0x01180162L
#define IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT_STRIDE 1
#define IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT_DEPTH  1

#define IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT_ADDR   0x01180163L
#define IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT_STRIDE 1
#define IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT_DEPTH  1

#define IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT_ADDR   0x01180164L
#define IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT_STRIDE 1
#define IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT_DEPTH  1

#define IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT_ADDR   0x01180165L
#define IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT_STRIDE 1
#define IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT_DEPTH  1

#define IBU_P2_PCECCENA_ERR_ADDR   0x01180166L
#define IBU_P2_PCECCENA_ERR_STRIDE 1
#define IBU_P2_PCECCENA_ERR_DEPTH  1

#define IBU_P2_PCTX_ECC_COR_ERR_CNT_ADDR   0x01180167L
#define IBU_P2_PCTX_ECC_COR_ERR_CNT_STRIDE 1
#define IBU_P2_PCTX_ECC_COR_ERR_CNT_DEPTH  1

#define IBU_P2_PCTX_ECC_UNC_ERR_CNT_ADDR   0x01180168L
#define IBU_P2_PCTX_ECC_UNC_ERR_CNT_STRIDE 1
#define IBU_P2_PCTX_ECC_UNC_ERR_CNT_DEPTH  1

#define IBU_P2_TX_SRAMSTATUS_ADDR   0x01180169L
#define IBU_P2_TX_SRAMSTATUS_STRIDE 1
#define IBU_P2_TX_SRAMSTATUS_DEPTH  1

#define IBU_P2_TX_CACHE_STATUS_ADDR   0x0118016aL
#define IBU_P2_TX_CACHE_STATUS_STRIDE 1
#define IBU_P2_TX_CACHE_STATUS_DEPTH  1

#define IBU_P2_TX_DEBUG_ADDR   0x0118016bL
#define IBU_P2_TX_DEBUG_STRIDE 1
#define IBU_P2_TX_DEBUG_DEPTH  1

#define IBU_P2_RX_VL07_SRAMSTATUS_ADDR   0x0118016cL
#define IBU_P2_RX_VL07_SRAMSTATUS_STRIDE 1
#define IBU_P2_RX_VL07_SRAMSTATUS_DEPTH  1

#define IBU_P2_RX_VL15_SRAMSTATUS_ADDR   0x0118016dL
#define IBU_P2_RX_VL15_SRAMSTATUS_STRIDE 1
#define IBU_P2_RX_VL15_SRAMSTATUS_DEPTH  1

#define IBU_P2_LOOPSRAMSTATUS_ADDR   0x0118016eL
#define IBU_P2_LOOPSRAMSTATUS_STRIDE 1
#define IBU_P2_LOOPSRAMSTATUS_DEPTH  1

#define IBU_P2_RX_DEBUG_ADDR   0x0118016fL
#define IBU_P2_RX_DEBUG_STRIDE 1
#define IBU_P2_RX_DEBUG_DEPTH  1

#define IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS_ADDR   0x01180170L
#define IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS_STRIDE 1
#define IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS_DEPTH  1

#define IBU_P2_VLARB_HI_PRI_TABLE_ADDR   0x01180180L
#define IBU_P2_VLARB_HI_PRI_TABLE_STRIDE 1
#define IBU_P2_VLARB_HI_PRI_TABLE_DEPTH  10

#define IBU_P2_VLARB_LO_PRI_TABLE_ADDR   0x011801c0L
#define IBU_P2_VLARB_LO_PRI_TABLE_STRIDE 1
#define IBU_P2_VLARB_LO_PRI_TABLE_DEPTH  10

#define IBU_P2_TX_TBSVL10_ADDR   0x011801d0L
#define IBU_P2_TX_TBSVL10_STRIDE 1
#define IBU_P2_TX_TBSVL10_DEPTH  1

#define IBU_P2_TX_TBSVL32_ADDR   0x011801d1L
#define IBU_P2_TX_TBSVL32_STRIDE 1
#define IBU_P2_TX_TBSVL32_DEPTH  1

#define IBU_P2_TX_TBSVL54_ADDR   0x011801d2L
#define IBU_P2_TX_TBSVL54_STRIDE 1
#define IBU_P2_TX_TBSVL54_DEPTH  1

#define IBU_P2_TX_TBSVL76_ADDR   0x011801d3L
#define IBU_P2_TX_TBSVL76_STRIDE 1
#define IBU_P2_TX_TBSVL76_DEPTH  1

#define IBU_P2_TX_TBSARB_VL10_ADDR   0x011801d4L
#define IBU_P2_TX_TBSARB_VL10_STRIDE 1
#define IBU_P2_TX_TBSARB_VL10_DEPTH  1

#define IBU_P2_TX_TBSARB_VL32_ADDR   0x011801d5L
#define IBU_P2_TX_TBSARB_VL32_STRIDE 1
#define IBU_P2_TX_TBSARB_VL32_DEPTH  1

#define IBU_P2_TX_TBSARB_VL54_ADDR   0x011801d6L
#define IBU_P2_TX_TBSARB_VL54_STRIDE 1
#define IBU_P2_TX_TBSARB_VL54_DEPTH  1

#define IBU_P2_TX_TBSARB_VL76_ADDR   0x011801d7L
#define IBU_P2_TX_TBSARB_VL76_STRIDE 1
#define IBU_P2_TX_TBSARB_VL76_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_ENABLE_ADDR   0x011801d8L
#define IBU_P2_RX_TRACE_CAPTURE_ENABLE_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_ENABLE_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_MODE_ADDR   0x011801d9L
#define IBU_P2_RX_TRACE_CAPTURE_MODE_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_MODE_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_RDY_ADDR   0x011801daL
#define IBU_P2_RX_TRACE_CAPTURE_RDY_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_RDY_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_TIMER_ADDR   0x011801dbL
#define IBU_P2_RX_TRACE_CAPTURE_TIMER_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_TIMER_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_START_ADDR   0x011801dcL
#define IBU_P2_RX_TRACE_CAPTURE_START_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_START_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA1_ADDR   0x011801e0L
#define IBU_P2_RX_TRACE_CAPTURE_DATA1_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA1_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA2_ADDR   0x011801e1L
#define IBU_P2_RX_TRACE_CAPTURE_DATA2_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA2_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA3_ADDR   0x011801e2L
#define IBU_P2_RX_TRACE_CAPTURE_DATA3_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA3_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA4_ADDR   0x011801e3L
#define IBU_P2_RX_TRACE_CAPTURE_DATA4_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA4_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA5_ADDR   0x011801e4L
#define IBU_P2_RX_TRACE_CAPTURE_DATA5_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA5_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA6_ADDR   0x011801e5L
#define IBU_P2_RX_TRACE_CAPTURE_DATA6_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA6_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA7_ADDR   0x011801e6L
#define IBU_P2_RX_TRACE_CAPTURE_DATA7_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA7_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA8_ADDR   0x011801e7L
#define IBU_P2_RX_TRACE_CAPTURE_DATA8_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA8_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA9_ADDR   0x011801e8L
#define IBU_P2_RX_TRACE_CAPTURE_DATA9_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA9_DEPTH  1

#define IBU_P2_RX_TRACE_CAPTURE_DATA10_ADDR   0x011801e9L
#define IBU_P2_RX_TRACE_CAPTURE_DATA10_STRIDE 1
#define IBU_P2_RX_TRACE_CAPTURE_DATA10_DEPTH  1

#define IBU_P2_LINK_RX_FCCL_VL1_0_ADDR   0x011801eaL
#define IBU_P2_LINK_RX_FCCL_VL1_0_STRIDE 1
#define IBU_P2_LINK_RX_FCCL_VL1_0_DEPTH  1

#define IBU_P2_LINK_RX_FCCL_VL3_2_ADDR   0x011801ebL
#define IBU_P2_LINK_RX_FCCL_VL3_2_STRIDE 1
#define IBU_P2_LINK_RX_FCCL_VL3_2_DEPTH  1

#define IBU_P2_LINK_RX_FCCL_VL5_4_ADDR   0x011801ecL
#define IBU_P2_LINK_RX_FCCL_VL5_4_STRIDE 1
#define IBU_P2_LINK_RX_FCCL_VL5_4_DEPTH  1

#define IBU_P2_LINK_RX_FCCL_VL7_6_ADDR   0x011801edL
#define IBU_P2_LINK_RX_FCCL_VL7_6_STRIDE 1
#define IBU_P2_LINK_RX_FCCL_VL7_6_DEPTH  1

#define IBU_P2_ADD_DEFAULT_LANE0_ADDR   0x01180210L
#define IBU_P2_ADD_DEFAULT_LANE0_STRIDE 1
#define IBU_P2_ADD_DEFAULT_LANE0_DEPTH  1

#define IBU_P2_ADD_DEFAULT_LANE1_ADDR   0x01180211L
#define IBU_P2_ADD_DEFAULT_LANE1_STRIDE 1
#define IBU_P2_ADD_DEFAULT_LANE1_DEPTH  1

#define IBU_P2_ADD_DEFAULT_LANE2_ADDR   0x01180212L
#define IBU_P2_ADD_DEFAULT_LANE2_STRIDE 1
#define IBU_P2_ADD_DEFAULT_LANE2_DEPTH  1

#define IBU_P2_ADD_DEFAULT_LANE3_ADDR   0x01180213L
#define IBU_P2_ADD_DEFAULT_LANE3_STRIDE 1
#define IBU_P2_ADD_DEFAULT_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD0_LANE0_ADDR   0x01180214L
#define IBU_P2_PHY_ADD0_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD0_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD0_LANE1_ADDR   0x01180215L
#define IBU_P2_PHY_ADD0_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD0_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD0_LANE2_ADDR   0x01180216L
#define IBU_P2_PHY_ADD0_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD0_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD0_LANE3_ADDR   0x01180217L
#define IBU_P2_PHY_ADD0_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD0_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD1_LANE0_ADDR   0x01180218L
#define IBU_P2_PHY_ADD1_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD1_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD1_LANE1_ADDR   0x01180219L
#define IBU_P2_PHY_ADD1_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD1_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD1_LANE2_ADDR   0x0118021aL
#define IBU_P2_PHY_ADD1_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD1_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD1_LANE3_ADDR   0x0118021bL
#define IBU_P2_PHY_ADD1_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD1_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD2_LANE0_ADDR   0x0118021cL
#define IBU_P2_PHY_ADD2_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD2_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD2_LANE1_ADDR   0x0118021dL
#define IBU_P2_PHY_ADD2_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD2_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD2_LANE2_ADDR   0x0118021eL
#define IBU_P2_PHY_ADD2_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD2_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD2_LANE3_ADDR   0x0118021fL
#define IBU_P2_PHY_ADD2_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD2_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD3_LANE0_ADDR   0x01180220L
#define IBU_P2_PHY_ADD3_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD3_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD3_LANE1_ADDR   0x01180221L
#define IBU_P2_PHY_ADD3_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD3_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD3_LANE2_ADDR   0x01180222L
#define IBU_P2_PHY_ADD3_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD3_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD3_LANE3_ADDR   0x01180223L
#define IBU_P2_PHY_ADD3_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD3_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD4_LANE0_ADDR   0x01180224L
#define IBU_P2_PHY_ADD4_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD4_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD4_LANE1_ADDR   0x01180225L
#define IBU_P2_PHY_ADD4_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD4_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD4_LANE2_ADDR   0x01180226L
#define IBU_P2_PHY_ADD4_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD4_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD4_LANE3_ADDR   0x01180227L
#define IBU_P2_PHY_ADD4_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD4_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD5_LANE0_ADDR   0x01180228L
#define IBU_P2_PHY_ADD5_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD5_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD5_LANE1_ADDR   0x01180229L
#define IBU_P2_PHY_ADD5_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD5_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD5_LANE2_ADDR   0x0118022aL
#define IBU_P2_PHY_ADD5_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD5_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD5_LANE3_ADDR   0x0118022bL
#define IBU_P2_PHY_ADD5_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD5_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD6_LANE0_ADDR   0x0118022cL
#define IBU_P2_PHY_ADD6_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD6_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD6_LANE1_ADDR   0x0118022dL
#define IBU_P2_PHY_ADD6_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD6_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD6_LANE2_ADDR   0x0118022eL
#define IBU_P2_PHY_ADD6_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD6_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD6_LANE3_ADDR   0x0118022fL
#define IBU_P2_PHY_ADD6_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD6_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD7_LANE0_ADDR   0x01180230L
#define IBU_P2_PHY_ADD7_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD7_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD7_LANE1_ADDR   0x01180231L
#define IBU_P2_PHY_ADD7_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD7_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD7_LANE2_ADDR   0x01180232L
#define IBU_P2_PHY_ADD7_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD7_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD7_LANE3_ADDR   0x01180233L
#define IBU_P2_PHY_ADD7_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD7_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD8_LANE0_ADDR   0x01180234L
#define IBU_P2_PHY_ADD8_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD8_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD8_LANE1_ADDR   0x01180235L
#define IBU_P2_PHY_ADD8_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD8_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD8_LANE2_ADDR   0x01180236L
#define IBU_P2_PHY_ADD8_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD8_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD8_LANE3_ADDR   0x01180237L
#define IBU_P2_PHY_ADD8_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD8_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD9_LANE0_ADDR   0x01180238L
#define IBU_P2_PHY_ADD9_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD9_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD9_LANE1_ADDR   0x01180239L
#define IBU_P2_PHY_ADD9_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD9_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD9_LANE2_ADDR   0x0118023aL
#define IBU_P2_PHY_ADD9_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD9_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD9_LANE3_ADDR   0x0118023bL
#define IBU_P2_PHY_ADD9_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD9_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD10_LANE0_ADDR   0x0118023cL
#define IBU_P2_PHY_ADD10_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD10_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD10_LANE1_ADDR   0x0118023dL
#define IBU_P2_PHY_ADD10_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD10_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD10_LANE2_ADDR   0x0118023eL
#define IBU_P2_PHY_ADD10_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD10_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD10_LANE3_ADDR   0x0118023fL
#define IBU_P2_PHY_ADD10_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD10_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD11_LANE0_ADDR   0x01180240L
#define IBU_P2_PHY_ADD11_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD11_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD11_LANE1_ADDR   0x01180241L
#define IBU_P2_PHY_ADD11_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD11_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD11_LANE2_ADDR   0x01180242L
#define IBU_P2_PHY_ADD11_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD11_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD11_LANE3_ADDR   0x01180243L
#define IBU_P2_PHY_ADD11_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD11_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD12_LANE0_ADDR   0x01180244L
#define IBU_P2_PHY_ADD12_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD12_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD12_LANE1_ADDR   0x01180245L
#define IBU_P2_PHY_ADD12_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD12_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD12_LANE2_ADDR   0x01180246L
#define IBU_P2_PHY_ADD12_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD12_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD12_LANE3_ADDR   0x01180247L
#define IBU_P2_PHY_ADD12_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD12_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD13_LANE0_ADDR   0x01180248L
#define IBU_P2_PHY_ADD13_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD13_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD13_LANE1_ADDR   0x01180249L
#define IBU_P2_PHY_ADD13_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD13_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD13_LANE2_ADDR   0x0118024aL
#define IBU_P2_PHY_ADD13_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD13_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD13_LANE3_ADDR   0x0118024bL
#define IBU_P2_PHY_ADD13_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD13_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD14_LANE0_ADDR   0x0118024cL
#define IBU_P2_PHY_ADD14_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD14_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD14_LANE1_ADDR   0x0118024dL
#define IBU_P2_PHY_ADD14_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD14_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD14_LANE2_ADDR   0x0118024eL
#define IBU_P2_PHY_ADD14_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD14_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD14_LANE3_ADDR   0x0118024fL
#define IBU_P2_PHY_ADD14_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD14_LANE3_DEPTH  1

#define IBU_P2_PHY_ADD15_LANE0_ADDR   0x01180250L
#define IBU_P2_PHY_ADD15_LANE0_STRIDE 1
#define IBU_P2_PHY_ADD15_LANE0_DEPTH  1

#define IBU_P2_PHY_ADD15_LANE1_ADDR   0x01180251L
#define IBU_P2_PHY_ADD15_LANE1_STRIDE 1
#define IBU_P2_PHY_ADD15_LANE1_DEPTH  1

#define IBU_P2_PHY_ADD15_LANE2_ADDR   0x01180252L
#define IBU_P2_PHY_ADD15_LANE2_STRIDE 1
#define IBU_P2_PHY_ADD15_LANE2_DEPTH  1

#define IBU_P2_PHY_ADD15_LANE3_ADDR   0x01180253L
#define IBU_P2_PHY_ADD15_LANE3_STRIDE 1
#define IBU_P2_PHY_ADD15_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD0_LANE0_ADDR   0x01180254L
#define IBU_P2_PHY_AMP1_ADD0_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD0_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD0_LANE1_ADDR   0x01180255L
#define IBU_P2_PHY_AMP1_ADD0_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD0_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD0_LANE2_ADDR   0x01180256L
#define IBU_P2_PHY_AMP1_ADD0_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD0_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD0_LANE3_ADDR   0x01180257L
#define IBU_P2_PHY_AMP1_ADD0_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD0_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD1_LANE0_ADDR   0x01180258L
#define IBU_P2_PHY_AMP1_ADD1_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD1_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD1_LANE1_ADDR   0x01180259L
#define IBU_P2_PHY_AMP1_ADD1_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD1_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD1_LANE2_ADDR   0x0118025aL
#define IBU_P2_PHY_AMP1_ADD1_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD1_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD1_LANE3_ADDR   0x0118025bL
#define IBU_P2_PHY_AMP1_ADD1_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD1_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD2_LANE0_ADDR   0x0118025cL
#define IBU_P2_PHY_AMP1_ADD2_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD2_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD2_LANE1_ADDR   0x0118025dL
#define IBU_P2_PHY_AMP1_ADD2_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD2_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD2_LANE2_ADDR   0x0118025eL
#define IBU_P2_PHY_AMP1_ADD2_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD2_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD2_LANE3_ADDR   0x0118025fL
#define IBU_P2_PHY_AMP1_ADD2_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD2_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD3_LANE0_ADDR   0x01180260L
#define IBU_P2_PHY_AMP1_ADD3_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD3_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD3_LANE1_ADDR   0x01180261L
#define IBU_P2_PHY_AMP1_ADD3_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD3_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD3_LANE2_ADDR   0x01180262L
#define IBU_P2_PHY_AMP1_ADD3_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD3_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD3_LANE3_ADDR   0x01180263L
#define IBU_P2_PHY_AMP1_ADD3_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD3_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD4_LANE0_ADDR   0x01180264L
#define IBU_P2_PHY_AMP1_ADD4_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD4_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD4_LANE1_ADDR   0x01180265L
#define IBU_P2_PHY_AMP1_ADD4_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD4_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD4_LANE2_ADDR   0x01180266L
#define IBU_P2_PHY_AMP1_ADD4_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD4_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD4_LANE3_ADDR   0x01180267L
#define IBU_P2_PHY_AMP1_ADD4_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD4_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD5_LANE0_ADDR   0x01180268L
#define IBU_P2_PHY_AMP1_ADD5_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD5_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD5_LANE1_ADDR   0x01180269L
#define IBU_P2_PHY_AMP1_ADD5_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD5_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD5_LANE2_ADDR   0x0118026aL
#define IBU_P2_PHY_AMP1_ADD5_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD5_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD5_LANE3_ADDR   0x0118026bL
#define IBU_P2_PHY_AMP1_ADD5_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD5_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD6_LANE0_ADDR   0x0118026cL
#define IBU_P2_PHY_AMP1_ADD6_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD6_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD6_LANE1_ADDR   0x0118026dL
#define IBU_P2_PHY_AMP1_ADD6_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD6_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD6_LANE2_ADDR   0x0118026eL
#define IBU_P2_PHY_AMP1_ADD6_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD6_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD6_LANE3_ADDR   0x0118026fL
#define IBU_P2_PHY_AMP1_ADD6_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD6_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD7_LANE0_ADDR   0x01180270L
#define IBU_P2_PHY_AMP1_ADD7_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD7_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD7_LANE1_ADDR   0x01180271L
#define IBU_P2_PHY_AMP1_ADD7_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD7_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD7_LANE2_ADDR   0x01180272L
#define IBU_P2_PHY_AMP1_ADD7_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD7_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD7_LANE3_ADDR   0x01180273L
#define IBU_P2_PHY_AMP1_ADD7_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD7_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD8_LANE0_ADDR   0x01180274L
#define IBU_P2_PHY_AMP1_ADD8_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD8_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD8_LANE1_ADDR   0x01180275L
#define IBU_P2_PHY_AMP1_ADD8_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD8_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD8_LANE2_ADDR   0x01180276L
#define IBU_P2_PHY_AMP1_ADD8_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD8_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD8_LANE3_ADDR   0x01180277L
#define IBU_P2_PHY_AMP1_ADD8_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD8_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD9_LANE0_ADDR   0x01180278L
#define IBU_P2_PHY_AMP1_ADD9_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD9_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD9_LANE1_ADDR   0x01180279L
#define IBU_P2_PHY_AMP1_ADD9_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD9_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD9_LANE2_ADDR   0x0118027aL
#define IBU_P2_PHY_AMP1_ADD9_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD9_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD9_LANE3_ADDR   0x0118027bL
#define IBU_P2_PHY_AMP1_ADD9_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD9_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD10_LANE0_ADDR   0x0118027cL
#define IBU_P2_PHY_AMP1_ADD10_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD10_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD10_LANE1_ADDR   0x0118027dL
#define IBU_P2_PHY_AMP1_ADD10_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD10_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD10_LANE2_ADDR   0x0118027eL
#define IBU_P2_PHY_AMP1_ADD10_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD10_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD10_LANE3_ADDR   0x0118027fL
#define IBU_P2_PHY_AMP1_ADD10_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD10_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD11_LANE0_ADDR   0x01180280L
#define IBU_P2_PHY_AMP1_ADD11_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD11_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD11_LANE1_ADDR   0x01180281L
#define IBU_P2_PHY_AMP1_ADD11_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD11_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD11_LANE2_ADDR   0x01180282L
#define IBU_P2_PHY_AMP1_ADD11_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD11_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD11_LANE3_ADDR   0x01180283L
#define IBU_P2_PHY_AMP1_ADD11_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD11_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD12_LANE0_ADDR   0x01180284L
#define IBU_P2_PHY_AMP1_ADD12_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD12_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD12_LANE1_ADDR   0x01180285L
#define IBU_P2_PHY_AMP1_ADD12_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD12_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD12_LANE2_ADDR   0x01180286L
#define IBU_P2_PHY_AMP1_ADD12_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD12_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD12_LANE3_ADDR   0x01180287L
#define IBU_P2_PHY_AMP1_ADD12_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD12_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD13_LANE0_ADDR   0x01180288L
#define IBU_P2_PHY_AMP1_ADD13_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD13_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD13_LANE1_ADDR   0x01180289L
#define IBU_P2_PHY_AMP1_ADD13_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD13_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD13_LANE2_ADDR   0x0118028aL
#define IBU_P2_PHY_AMP1_ADD13_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD13_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD13_LANE3_ADDR   0x0118028bL
#define IBU_P2_PHY_AMP1_ADD13_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD13_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD14_LANE0_ADDR   0x0118028cL
#define IBU_P2_PHY_AMP1_ADD14_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD14_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD14_LANE1_ADDR   0x0118028dL
#define IBU_P2_PHY_AMP1_ADD14_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD14_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD14_LANE2_ADDR   0x0118028eL
#define IBU_P2_PHY_AMP1_ADD14_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD14_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD14_LANE3_ADDR   0x0118028fL
#define IBU_P2_PHY_AMP1_ADD14_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD14_LANE3_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD15_LANE0_ADDR   0x01180290L
#define IBU_P2_PHY_AMP1_ADD15_LANE0_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD15_LANE0_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD15_LANE1_ADDR   0x01180291L
#define IBU_P2_PHY_AMP1_ADD15_LANE1_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD15_LANE1_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD15_LANE2_ADDR   0x01180292L
#define IBU_P2_PHY_AMP1_ADD15_LANE2_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD15_LANE2_DEPTH  1

#define IBU_P2_PHY_AMP1_ADD15_LANE3_ADDR   0x01180293L
#define IBU_P2_PHY_AMP1_ADD15_LANE3_STRIDE 1
#define IBU_P2_PHY_AMP1_ADD15_LANE3_DEPTH  1

#define IBU_P2_REMOTE_DDS0_ADDR   0x01180294L
#define IBU_P2_REMOTE_DDS0_STRIDE 1
#define IBU_P2_REMOTE_DDS0_DEPTH  1

#define IBU_P2_REMOTE_DDS1_ADDR   0x01180295L
#define IBU_P2_REMOTE_DDS1_STRIDE 1
#define IBU_P2_REMOTE_DDS1_DEPTH  1

#define IBU_P2_REMOTE_DDS2_ADDR   0x01180296L
#define IBU_P2_REMOTE_DDS2_STRIDE 1
#define IBU_P2_REMOTE_DDS2_DEPTH  1

#define IBU_P2_REMOTE_DDS3_ADDR   0x01180297L
#define IBU_P2_REMOTE_DDS3_STRIDE 1
#define IBU_P2_REMOTE_DDS3_DEPTH  1

#define IBU_P2_REMOTE_DDS4_ADDR   0x01180298L
#define IBU_P2_REMOTE_DDS4_STRIDE 1
#define IBU_P2_REMOTE_DDS4_DEPTH  1

#define IBU_P2_REMOTE_DDS5_ADDR   0x01180299L
#define IBU_P2_REMOTE_DDS5_STRIDE 1
#define IBU_P2_REMOTE_DDS5_DEPTH  1

#define IBU_P2_REMOTE_DDS6_ADDR   0x0118029aL
#define IBU_P2_REMOTE_DDS6_STRIDE 1
#define IBU_P2_REMOTE_DDS6_DEPTH  1

#define IBU_P2_REMOTE_DDS7_ADDR   0x0118029bL
#define IBU_P2_REMOTE_DDS7_STRIDE 1
#define IBU_P2_REMOTE_DDS7_DEPTH  1

#define IBU_P2_REMOTE_DDS8_ADDR   0x0118029cL
#define IBU_P2_REMOTE_DDS8_STRIDE 1
#define IBU_P2_REMOTE_DDS8_DEPTH  1

#define IBU_P2_REMOTE_DDS9_ADDR   0x0118029dL
#define IBU_P2_REMOTE_DDS9_STRIDE 1
#define IBU_P2_REMOTE_DDS9_DEPTH  1

#define IBU_P2_REMOTE_DDS10_ADDR   0x0118029eL
#define IBU_P2_REMOTE_DDS10_STRIDE 1
#define IBU_P2_REMOTE_DDS10_DEPTH  1

#define IBU_P2_REMOTE_DDS11_ADDR   0x0118029fL
#define IBU_P2_REMOTE_DDS11_STRIDE 1
#define IBU_P2_REMOTE_DDS11_DEPTH  1

#define IBU_P2_REMOTE_DDS12_ADDR   0x011802a0L
#define IBU_P2_REMOTE_DDS12_STRIDE 1
#define IBU_P2_REMOTE_DDS12_DEPTH  1

#define IBU_P2_REMOTE_DDS13_ADDR   0x011802a1L
#define IBU_P2_REMOTE_DDS13_STRIDE 1
#define IBU_P2_REMOTE_DDS13_DEPTH  1

#define IBU_P2_REMOTE_DDS14_ADDR   0x011802a2L
#define IBU_P2_REMOTE_DDS14_STRIDE 1
#define IBU_P2_REMOTE_DDS14_DEPTH  1

#define IBU_P2_REMOTE_DDS15_ADDR   0x011802a3L
#define IBU_P2_REMOTE_DDS15_STRIDE 1
#define IBU_P2_REMOTE_DDS15_DEPTH  1

#define IBU_P2_BAD_CSR_ADDR   0x01180badL
#define IBU_P2_BAD_CSR_STRIDE 1
#define IBU_P2_BAD_CSR_DEPTH  1

#define IBU_P2_CETUS_CH0_REG15_CSR_ADDR   0x011c000fL
#define IBU_P2_CETUS_CH0_REG15_CSR_STRIDE 1
#define IBU_P2_CETUS_CH0_REG15_CSR_DEPTH  1

#define IBU_P2_CETUS_CH0_REG102_CSR_ADDR   0x011c0066L
#define IBU_P2_CETUS_CH0_REG102_CSR_STRIDE 1
#define IBU_P2_CETUS_CH0_REG102_CSR_DEPTH  1

#define IBU_P2_CETUS_CH1_REG15_CSR_ADDR   0x011c010fL
#define IBU_P2_CETUS_CH1_REG15_CSR_STRIDE 1
#define IBU_P2_CETUS_CH1_REG15_CSR_DEPTH  1

#define IBU_P2_CETUS_CH1_REG102_CSR_ADDR   0x011c0166L
#define IBU_P2_CETUS_CH1_REG102_CSR_STRIDE 1
#define IBU_P2_CETUS_CH1_REG102_CSR_DEPTH  1

#define IBU_P2_CETUS_PLLA_REG24_CSR_ADDR   0x011c0218L
#define IBU_P2_CETUS_PLLA_REG24_CSR_STRIDE 1
#define IBU_P2_CETUS_PLLA_REG24_CSR_DEPTH  1

#define IBU_P2_CETUS_CH2_REG15_CSR_ADDR   0x011c030fL
#define IBU_P2_CETUS_CH2_REG15_CSR_STRIDE 1
#define IBU_P2_CETUS_CH2_REG15_CSR_DEPTH  1

#define IBU_P2_CETUS_CH2_REG102_CSR_ADDR   0x011c0366L
#define IBU_P2_CETUS_CH2_REG102_CSR_STRIDE 1
#define IBU_P2_CETUS_CH2_REG102_CSR_DEPTH  1

#define IBU_P2_CETUS_CH3_REG15_CSR_ADDR   0x011c040fL
#define IBU_P2_CETUS_CH3_REG15_CSR_STRIDE 1
#define IBU_P2_CETUS_CH3_REG15_CSR_DEPTH  1

#define IBU_P2_CETUS_CH3_REG102_CSR_ADDR   0x011c0466L
#define IBU_P2_CETUS_CH3_REG102_CSR_STRIDE 1
#define IBU_P2_CETUS_CH3_REG102_CSR_DEPTH  1

#define IBU_P2_CETUS_PLLB_REG24_CSR_ADDR   0x011c0618L
#define IBU_P2_CETUS_PLLB_REG24_CSR_STRIDE 1
#define IBU_P2_CETUS_PLLB_REG24_CSR_DEPTH  1

#define IBU_P2_PMA_RESET_CSR_ADDR   0x011e0000L
#define IBU_P2_PMA_RESET_CSR_STRIDE 1
#define IBU_P2_PMA_RESET_CSR_DEPTH  1

#define IBU_P2_PMA_PLLA_CSR_ADDR   0x011e0001L
#define IBU_P2_PMA_PLLA_CSR_STRIDE 1
#define IBU_P2_PMA_PLLA_CSR_DEPTH  1

#define IBU_P2_PMA_PLLB_CSR_ADDR   0x011e0002L
#define IBU_P2_PMA_PLLB_CSR_STRIDE 1
#define IBU_P2_PMA_PLLB_CSR_DEPTH  1

#define IBU_P2_PMA_CMODE_CSR_ADDR   0x011e0003L
#define IBU_P2_PMA_CMODE_CSR_STRIDE 1
#define IBU_P2_PMA_CMODE_CSR_DEPTH  1

#define IBU_P2_PMA_LB_CSR_ADDR   0x011e0004L
#define IBU_P2_PMA_LB_CSR_STRIDE 1
#define IBU_P2_PMA_LB_CSR_DEPTH  1

#define IBU_P2_PMA_PWR_CSR_ADDR   0x011e0005L
#define IBU_P2_PMA_PWR_CSR_STRIDE 1
#define IBU_P2_PMA_PWR_CSR_DEPTH  1

#define IBU_P2_PMA_STATUS0_CSR_ADDR   0x011e0006L
#define IBU_P2_PMA_STATUS0_CSR_STRIDE 1
#define IBU_P2_PMA_STATUS0_CSR_DEPTH  1

#define IBU_P2_PMA_STATUS1_CSR_ADDR   0x011e0007L
#define IBU_P2_PMA_STATUS1_CSR_STRIDE 1
#define IBU_P2_PMA_STATUS1_CSR_DEPTH  1

#define IBU_P2_PMA_STATUS2_CSR_ADDR   0x011e0008L
#define IBU_P2_PMA_STATUS2_CSR_STRIDE 1
#define IBU_P2_PMA_STATUS2_CSR_DEPTH  1

#define IBU_P2_PMA_TXWCLK0_CNT_CSR_ADDR   0x011e0009L
#define IBU_P2_PMA_TXWCLK0_CNT_CSR_STRIDE 1
#define IBU_P2_PMA_TXWCLK0_CNT_CSR_DEPTH  1

#define IBU_P2_PMA_TXWCLK0_CNT_VAL_ADDR   0x011e000aL
#define IBU_P2_PMA_TXWCLK0_CNT_VAL_STRIDE 1
#define IBU_P2_PMA_TXWCLK0_CNT_VAL_DEPTH  1

#define IBU_P2_PMA_RXWCLK0_CNT_CSR_ADDR   0x011e000bL
#define IBU_P2_PMA_RXWCLK0_CNT_CSR_STRIDE 1
#define IBU_P2_PMA_RXWCLK0_CNT_CSR_DEPTH  1

#define IBU_P2_PMA_RXWCLK0_CNT_VAL_ADDR   0x011e000cL
#define IBU_P2_PMA_RXWCLK0_CNT_VAL_STRIDE 1
#define IBU_P2_PMA_RXWCLK0_CNT_VAL_DEPTH  1

#define IBU_P2_PMA_IRQ_STATUS_CSR_ADDR   0x011e000dL
#define IBU_P2_PMA_IRQ_STATUS_CSR_STRIDE 1
#define IBU_P2_PMA_IRQ_STATUS_CSR_DEPTH  1

#define IBU_P2_PMA_IRQ_MASK_CSR_ADDR   0x011e000eL
#define IBU_P2_PMA_IRQ_MASK_CSR_STRIDE 1
#define IBU_P2_PMA_IRQ_MASK_CSR_DEPTH  1

#define IBU_P2_PMA_BAD_CSR_ADDR   0x011efbadL
#define IBU_P2_PMA_BAD_CSR_STRIDE 1
#define IBU_P2_PMA_BAD_CSR_DEPTH  1

#define PEU_P_REQ_CREDIT_REG0_ADDR   0x01200000L
#define PEU_P_REQ_CREDIT_REG0_STRIDE 1
#define PEU_P_REQ_CREDIT_REG0_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG0_ADDR   0x01200001L
#define PEU_NP_REQ_CREDIT_REG0_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG0_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG0_ADDR   0x01200002L
#define PEU_P_RETURN_CREDIT_REG0_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG0_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG0_ADDR   0x01200003L
#define PEU_NP_RETURN_CREDIT_REG0_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG0_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG0_ADDR   0x01200004L
#define PEU_P_RETURN_INTERVAL_REG0_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG0_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG0_ADDR   0x01200005L
#define PEU_NP_RETURN_INTERVAL_REG0_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG0_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD0_ADDR   0x01200006L
#define PEU_Q_NP_TAG_CNT_THLD0_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD0_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD0_ADDR   0x01200007L
#define PEU_XADM_PH_CDTS_THLD0_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD0_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD0_ADDR   0x01200008L
#define PEU_XADM_PD_CDTS_THLD0_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD0_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD0_ADDR   0x01200009L
#define PEU_XADM_NPH_CDTS_THLD0_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD0_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD0_ADDR   0x0120000aL
#define PEU_XADM_NPD_CDTS_THLD0_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD0_DEPTH  1

#define PEU_P_REQ_CREDIT_REG1_ADDR   0x0120000bL
#define PEU_P_REQ_CREDIT_REG1_STRIDE 1
#define PEU_P_REQ_CREDIT_REG1_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG1_ADDR   0x0120000cL
#define PEU_NP_REQ_CREDIT_REG1_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG1_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG1_ADDR   0x0120000dL
#define PEU_P_RETURN_CREDIT_REG1_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG1_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG1_ADDR   0x0120000eL
#define PEU_NP_RETURN_CREDIT_REG1_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG1_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG1_ADDR   0x0120000fL
#define PEU_P_RETURN_INTERVAL_REG1_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG1_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG1_ADDR   0x01200010L
#define PEU_NP_RETURN_INTERVAL_REG1_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG1_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD1_ADDR   0x01200011L
#define PEU_Q_NP_TAG_CNT_THLD1_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD1_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD1_ADDR   0x01200012L
#define PEU_XADM_PH_CDTS_THLD1_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD1_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD1_ADDR   0x01200013L
#define PEU_XADM_PD_CDTS_THLD1_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD1_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD1_ADDR   0x01200014L
#define PEU_XADM_NPH_CDTS_THLD1_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD1_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD1_ADDR   0x01200015L
#define PEU_XADM_NPD_CDTS_THLD1_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD1_DEPTH  1

#define PEU_P_REQ_CREDIT_REG2_ADDR   0x01200016L
#define PEU_P_REQ_CREDIT_REG2_STRIDE 1
#define PEU_P_REQ_CREDIT_REG2_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG2_ADDR   0x01200017L
#define PEU_NP_REQ_CREDIT_REG2_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG2_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG2_ADDR   0x01200018L
#define PEU_P_RETURN_CREDIT_REG2_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG2_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG2_ADDR   0x01200019L
#define PEU_NP_RETURN_CREDIT_REG2_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG2_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG2_ADDR   0x0120001aL
#define PEU_P_RETURN_INTERVAL_REG2_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG2_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG2_ADDR   0x0120001bL
#define PEU_NP_RETURN_INTERVAL_REG2_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG2_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD2_ADDR   0x0120001cL
#define PEU_Q_NP_TAG_CNT_THLD2_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD2_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD2_ADDR   0x0120001dL
#define PEU_XADM_PH_CDTS_THLD2_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD2_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD2_ADDR   0x0120001eL
#define PEU_XADM_PD_CDTS_THLD2_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD2_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD2_ADDR   0x0120001fL
#define PEU_XADM_NPH_CDTS_THLD2_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD2_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD2_ADDR   0x01200020L
#define PEU_XADM_NPD_CDTS_THLD2_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD2_DEPTH  1

#define PEU_P_REQ_CREDIT_REG3_ADDR   0x01200021L
#define PEU_P_REQ_CREDIT_REG3_STRIDE 1
#define PEU_P_REQ_CREDIT_REG3_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG3_ADDR   0x01200022L
#define PEU_NP_REQ_CREDIT_REG3_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG3_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG3_ADDR   0x01200023L
#define PEU_P_RETURN_CREDIT_REG3_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG3_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG3_ADDR   0x01200024L
#define PEU_NP_RETURN_CREDIT_REG3_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG3_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG3_ADDR   0x01200025L
#define PEU_P_RETURN_INTERVAL_REG3_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG3_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG3_ADDR   0x01200026L
#define PEU_NP_RETURN_INTERVAL_REG3_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG3_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD3_ADDR   0x01200027L
#define PEU_Q_NP_TAG_CNT_THLD3_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD3_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD3_ADDR   0x01200028L
#define PEU_XADM_PH_CDTS_THLD3_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD3_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD3_ADDR   0x01200029L
#define PEU_XADM_PD_CDTS_THLD3_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD3_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD3_ADDR   0x0120002aL
#define PEU_XADM_NPH_CDTS_THLD3_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD3_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD3_ADDR   0x0120002bL
#define PEU_XADM_NPD_CDTS_THLD3_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD3_DEPTH  1

#define PEU_P_REQ_CREDIT_REG4_ADDR   0x0120002cL
#define PEU_P_REQ_CREDIT_REG4_STRIDE 1
#define PEU_P_REQ_CREDIT_REG4_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG4_ADDR   0x0120002dL
#define PEU_NP_REQ_CREDIT_REG4_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG4_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG4_ADDR   0x0120002eL
#define PEU_P_RETURN_CREDIT_REG4_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG4_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG4_ADDR   0x0120002fL
#define PEU_NP_RETURN_CREDIT_REG4_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG4_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG4_ADDR   0x01200030L
#define PEU_P_RETURN_INTERVAL_REG4_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG4_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG4_ADDR   0x01200031L
#define PEU_NP_RETURN_INTERVAL_REG4_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG4_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD4_ADDR   0x01200032L
#define PEU_Q_NP_TAG_CNT_THLD4_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD4_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD4_ADDR   0x01200033L
#define PEU_XADM_PH_CDTS_THLD4_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD4_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD4_ADDR   0x01200034L
#define PEU_XADM_PD_CDTS_THLD4_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD4_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD4_ADDR   0x01200035L
#define PEU_XADM_NPH_CDTS_THLD4_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD4_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD4_ADDR   0x01200036L
#define PEU_XADM_NPD_CDTS_THLD4_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD4_DEPTH  1

#define PEU_P_REQ_CREDIT_REG5_ADDR   0x01200037L
#define PEU_P_REQ_CREDIT_REG5_STRIDE 1
#define PEU_P_REQ_CREDIT_REG5_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG5_ADDR   0x01200038L
#define PEU_NP_REQ_CREDIT_REG5_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG5_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG5_ADDR   0x01200039L
#define PEU_P_RETURN_CREDIT_REG5_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG5_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG5_ADDR   0x0120003aL
#define PEU_NP_RETURN_CREDIT_REG5_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG5_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG5_ADDR   0x0120003bL
#define PEU_P_RETURN_INTERVAL_REG5_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG5_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG5_ADDR   0x0120003cL
#define PEU_NP_RETURN_INTERVAL_REG5_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG5_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD5_ADDR   0x0120003dL
#define PEU_Q_NP_TAG_CNT_THLD5_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD5_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD5_ADDR   0x0120003eL
#define PEU_XADM_PH_CDTS_THLD5_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD5_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD5_ADDR   0x0120003fL
#define PEU_XADM_PD_CDTS_THLD5_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD5_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD5_ADDR   0x01200040L
#define PEU_XADM_NPH_CDTS_THLD5_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD5_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD5_ADDR   0x01200041L
#define PEU_XADM_NPD_CDTS_THLD5_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD5_DEPTH  1

#define PEU_P_REQ_CREDIT_REG6_ADDR   0x01200042L
#define PEU_P_REQ_CREDIT_REG6_STRIDE 1
#define PEU_P_REQ_CREDIT_REG6_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG6_ADDR   0x01200043L
#define PEU_NP_REQ_CREDIT_REG6_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG6_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG6_ADDR   0x01200044L
#define PEU_P_RETURN_CREDIT_REG6_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG6_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG6_ADDR   0x01200045L
#define PEU_NP_RETURN_CREDIT_REG6_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG6_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG6_ADDR   0x01200046L
#define PEU_P_RETURN_INTERVAL_REG6_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG6_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG6_ADDR   0x01200047L
#define PEU_NP_RETURN_INTERVAL_REG6_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG6_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD6_ADDR   0x01200048L
#define PEU_Q_NP_TAG_CNT_THLD6_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD6_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD6_ADDR   0x01200049L
#define PEU_XADM_PH_CDTS_THLD6_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD6_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD6_ADDR   0x0120004aL
#define PEU_XADM_PD_CDTS_THLD6_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD6_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD6_ADDR   0x0120004bL
#define PEU_XADM_NPH_CDTS_THLD6_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD6_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD6_ADDR   0x0120004cL
#define PEU_XADM_NPD_CDTS_THLD6_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD6_DEPTH  1

#define PEU_P_REQ_CREDIT_REG7_ADDR   0x0120004dL
#define PEU_P_REQ_CREDIT_REG7_STRIDE 1
#define PEU_P_REQ_CREDIT_REG7_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG7_ADDR   0x0120004eL
#define PEU_NP_REQ_CREDIT_REG7_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG7_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG7_ADDR   0x0120004fL
#define PEU_P_RETURN_CREDIT_REG7_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG7_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG7_ADDR   0x01200050L
#define PEU_NP_RETURN_CREDIT_REG7_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG7_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG7_ADDR   0x01200051L
#define PEU_P_RETURN_INTERVAL_REG7_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG7_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG7_ADDR   0x01200052L
#define PEU_NP_RETURN_INTERVAL_REG7_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG7_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD7_ADDR   0x01200053L
#define PEU_Q_NP_TAG_CNT_THLD7_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD7_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD7_ADDR   0x01200054L
#define PEU_XADM_PH_CDTS_THLD7_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD7_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD7_ADDR   0x01200055L
#define PEU_XADM_PD_CDTS_THLD7_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD7_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD7_ADDR   0x01200056L
#define PEU_XADM_NPH_CDTS_THLD7_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD7_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD7_ADDR   0x01200057L
#define PEU_XADM_NPD_CDTS_THLD7_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD7_DEPTH  1

#define PEU_P_REQ_CREDIT_REG8_ADDR   0x01200058L
#define PEU_P_REQ_CREDIT_REG8_STRIDE 1
#define PEU_P_REQ_CREDIT_REG8_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG8_ADDR   0x01200059L
#define PEU_NP_REQ_CREDIT_REG8_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG8_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG8_ADDR   0x0120005aL
#define PEU_P_RETURN_CREDIT_REG8_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG8_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG8_ADDR   0x0120005bL
#define PEU_NP_RETURN_CREDIT_REG8_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG8_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG8_ADDR   0x0120005cL
#define PEU_P_RETURN_INTERVAL_REG8_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG8_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG8_ADDR   0x0120005dL
#define PEU_NP_RETURN_INTERVAL_REG8_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG8_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD8_ADDR   0x0120005eL
#define PEU_Q_NP_TAG_CNT_THLD8_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD8_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD8_ADDR   0x0120005fL
#define PEU_XADM_PH_CDTS_THLD8_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD8_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD8_ADDR   0x01200060L
#define PEU_XADM_PD_CDTS_THLD8_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD8_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD8_ADDR   0x01200061L
#define PEU_XADM_NPH_CDTS_THLD8_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD8_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD8_ADDR   0x01200062L
#define PEU_XADM_NPD_CDTS_THLD8_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD8_DEPTH  1

#define PEU_P_REQ_CREDIT_REG9_ADDR   0x01200063L
#define PEU_P_REQ_CREDIT_REG9_STRIDE 1
#define PEU_P_REQ_CREDIT_REG9_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG9_ADDR   0x01200064L
#define PEU_NP_REQ_CREDIT_REG9_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG9_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG9_ADDR   0x01200065L
#define PEU_P_RETURN_CREDIT_REG9_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG9_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG9_ADDR   0x01200066L
#define PEU_NP_RETURN_CREDIT_REG9_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG9_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG9_ADDR   0x01200067L
#define PEU_P_RETURN_INTERVAL_REG9_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG9_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG9_ADDR   0x01200068L
#define PEU_NP_RETURN_INTERVAL_REG9_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG9_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD9_ADDR   0x01200069L
#define PEU_Q_NP_TAG_CNT_THLD9_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD9_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD9_ADDR   0x0120006aL
#define PEU_XADM_PH_CDTS_THLD9_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD9_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD9_ADDR   0x0120006bL
#define PEU_XADM_PD_CDTS_THLD9_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD9_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD9_ADDR   0x0120006cL
#define PEU_XADM_NPH_CDTS_THLD9_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD9_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD9_ADDR   0x0120006dL
#define PEU_XADM_NPD_CDTS_THLD9_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD9_DEPTH  1

#define PEU_P_REQ_CREDIT_REG10_ADDR   0x0120006eL
#define PEU_P_REQ_CREDIT_REG10_STRIDE 1
#define PEU_P_REQ_CREDIT_REG10_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG10_ADDR   0x0120006fL
#define PEU_NP_REQ_CREDIT_REG10_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG10_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG10_ADDR   0x01200070L
#define PEU_P_RETURN_CREDIT_REG10_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG10_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG10_ADDR   0x01200071L
#define PEU_NP_RETURN_CREDIT_REG10_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG10_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG10_ADDR   0x01200072L
#define PEU_P_RETURN_INTERVAL_REG10_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG10_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG10_ADDR   0x01200073L
#define PEU_NP_RETURN_INTERVAL_REG10_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG10_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD10_ADDR   0x01200074L
#define PEU_Q_NP_TAG_CNT_THLD10_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD10_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD10_ADDR   0x01200075L
#define PEU_XADM_PH_CDTS_THLD10_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD10_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD10_ADDR   0x01200076L
#define PEU_XADM_PD_CDTS_THLD10_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD10_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD10_ADDR   0x01200077L
#define PEU_XADM_NPH_CDTS_THLD10_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD10_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD10_ADDR   0x01200078L
#define PEU_XADM_NPD_CDTS_THLD10_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD10_DEPTH  1

#define PEU_P_REQ_CREDIT_REG11_ADDR   0x01200079L
#define PEU_P_REQ_CREDIT_REG11_STRIDE 1
#define PEU_P_REQ_CREDIT_REG11_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG11_ADDR   0x0120007aL
#define PEU_NP_REQ_CREDIT_REG11_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG11_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG11_ADDR   0x0120007bL
#define PEU_P_RETURN_CREDIT_REG11_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG11_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG11_ADDR   0x0120007cL
#define PEU_NP_RETURN_CREDIT_REG11_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG11_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG11_ADDR   0x0120007dL
#define PEU_P_RETURN_INTERVAL_REG11_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG11_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG11_ADDR   0x0120007eL
#define PEU_NP_RETURN_INTERVAL_REG11_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG11_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD11_ADDR   0x0120007fL
#define PEU_Q_NP_TAG_CNT_THLD11_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD11_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD11_ADDR   0x01200080L
#define PEU_XADM_PH_CDTS_THLD11_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD11_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD11_ADDR   0x01200081L
#define PEU_XADM_PD_CDTS_THLD11_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD11_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD11_ADDR   0x01200082L
#define PEU_XADM_NPH_CDTS_THLD11_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD11_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD11_ADDR   0x01200083L
#define PEU_XADM_NPD_CDTS_THLD11_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD11_DEPTH  1

#define PEU_P_REQ_CREDIT_REG12_ADDR   0x01200084L
#define PEU_P_REQ_CREDIT_REG12_STRIDE 1
#define PEU_P_REQ_CREDIT_REG12_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG12_ADDR   0x01200085L
#define PEU_NP_REQ_CREDIT_REG12_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG12_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG12_ADDR   0x01200086L
#define PEU_P_RETURN_CREDIT_REG12_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG12_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG12_ADDR   0x01200087L
#define PEU_NP_RETURN_CREDIT_REG12_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG12_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG12_ADDR   0x01200088L
#define PEU_P_RETURN_INTERVAL_REG12_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG12_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG12_ADDR   0x01200089L
#define PEU_NP_RETURN_INTERVAL_REG12_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG12_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD12_ADDR   0x0120008aL
#define PEU_Q_NP_TAG_CNT_THLD12_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD12_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD12_ADDR   0x0120008bL
#define PEU_XADM_PH_CDTS_THLD12_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD12_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD12_ADDR   0x0120008cL
#define PEU_XADM_PD_CDTS_THLD12_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD12_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD12_ADDR   0x0120008dL
#define PEU_XADM_NPH_CDTS_THLD12_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD12_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD12_ADDR   0x0120008eL
#define PEU_XADM_NPD_CDTS_THLD12_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD12_DEPTH  1

#define PEU_P_REQ_CREDIT_REG13_ADDR   0x0120008fL
#define PEU_P_REQ_CREDIT_REG13_STRIDE 1
#define PEU_P_REQ_CREDIT_REG13_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG13_ADDR   0x01200090L
#define PEU_NP_REQ_CREDIT_REG13_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG13_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG13_ADDR   0x01200091L
#define PEU_P_RETURN_CREDIT_REG13_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG13_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG13_ADDR   0x01200092L
#define PEU_NP_RETURN_CREDIT_REG13_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG13_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG13_ADDR   0x01200093L
#define PEU_P_RETURN_INTERVAL_REG13_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG13_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG13_ADDR   0x01200094L
#define PEU_NP_RETURN_INTERVAL_REG13_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG13_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD13_ADDR   0x01200095L
#define PEU_Q_NP_TAG_CNT_THLD13_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD13_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD13_ADDR   0x01200096L
#define PEU_XADM_PH_CDTS_THLD13_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD13_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD13_ADDR   0x01200097L
#define PEU_XADM_PD_CDTS_THLD13_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD13_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD13_ADDR   0x01200098L
#define PEU_XADM_NPH_CDTS_THLD13_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD13_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD13_ADDR   0x01200099L
#define PEU_XADM_NPD_CDTS_THLD13_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD13_DEPTH  1

#define PEU_P_REQ_CREDIT_REG14_ADDR   0x0120009aL
#define PEU_P_REQ_CREDIT_REG14_STRIDE 1
#define PEU_P_REQ_CREDIT_REG14_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG14_ADDR   0x0120009bL
#define PEU_NP_REQ_CREDIT_REG14_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG14_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG14_ADDR   0x0120009cL
#define PEU_P_RETURN_CREDIT_REG14_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG14_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG14_ADDR   0x0120009dL
#define PEU_NP_RETURN_CREDIT_REG14_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG14_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG14_ADDR   0x0120009eL
#define PEU_P_RETURN_INTERVAL_REG14_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG14_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG14_ADDR   0x0120009fL
#define PEU_NP_RETURN_INTERVAL_REG14_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG14_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD14_ADDR   0x012000a0L
#define PEU_Q_NP_TAG_CNT_THLD14_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD14_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD14_ADDR   0x012000a1L
#define PEU_XADM_PH_CDTS_THLD14_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD14_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD14_ADDR   0x012000a2L
#define PEU_XADM_PD_CDTS_THLD14_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD14_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD14_ADDR   0x012000a3L
#define PEU_XADM_NPH_CDTS_THLD14_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD14_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD14_ADDR   0x012000a4L
#define PEU_XADM_NPD_CDTS_THLD14_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD14_DEPTH  1

#define PEU_P_REQ_CREDIT_REG15_ADDR   0x012000a5L
#define PEU_P_REQ_CREDIT_REG15_STRIDE 1
#define PEU_P_REQ_CREDIT_REG15_DEPTH  1

#define PEU_NP_REQ_CREDIT_REG15_ADDR   0x012000a6L
#define PEU_NP_REQ_CREDIT_REG15_STRIDE 1
#define PEU_NP_REQ_CREDIT_REG15_DEPTH  1

#define PEU_P_RETURN_CREDIT_REG15_ADDR   0x012000a7L
#define PEU_P_RETURN_CREDIT_REG15_STRIDE 1
#define PEU_P_RETURN_CREDIT_REG15_DEPTH  1

#define PEU_NP_RETURN_CREDIT_REG15_ADDR   0x012000a8L
#define PEU_NP_RETURN_CREDIT_REG15_STRIDE 1
#define PEU_NP_RETURN_CREDIT_REG15_DEPTH  1

#define PEU_P_RETURN_INTERVAL_REG15_ADDR   0x012000a9L
#define PEU_P_RETURN_INTERVAL_REG15_STRIDE 1
#define PEU_P_RETURN_INTERVAL_REG15_DEPTH  1

#define PEU_NP_RETURN_INTERVAL_REG15_ADDR   0x012000aaL
#define PEU_NP_RETURN_INTERVAL_REG15_STRIDE 1
#define PEU_NP_RETURN_INTERVAL_REG15_DEPTH  1

#define PEU_Q_NP_TAG_CNT_THLD15_ADDR   0x012000abL
#define PEU_Q_NP_TAG_CNT_THLD15_STRIDE 1
#define PEU_Q_NP_TAG_CNT_THLD15_DEPTH  1

#define PEU_XADM_PH_CDTS_THLD15_ADDR   0x012000acL
#define PEU_XADM_PH_CDTS_THLD15_STRIDE 1
#define PEU_XADM_PH_CDTS_THLD15_DEPTH  1

#define PEU_XADM_PD_CDTS_THLD15_ADDR   0x012000adL
#define PEU_XADM_PD_CDTS_THLD15_STRIDE 1
#define PEU_XADM_PD_CDTS_THLD15_DEPTH  1

#define PEU_XADM_NPH_CDTS_THLD15_ADDR   0x012000aeL
#define PEU_XADM_NPH_CDTS_THLD15_STRIDE 1
#define PEU_XADM_NPH_CDTS_THLD15_DEPTH  1

#define PEU_XADM_NPD_CDTS_THLD15_ADDR   0x012000afL
#define PEU_XADM_NPD_CDTS_THLD15_STRIDE 1
#define PEU_XADM_NPD_CDTS_THLD15_DEPTH  1

#define PEU_HPRI_Q_REG_ADDR   0x012000b0L
#define PEU_HPRI_Q_REG_STRIDE 1
#define PEU_HPRI_Q_REG_DEPTH  1

#define PEU_HPRI_RR_WEIGHT_REG_ADDR   0x012000b1L
#define PEU_HPRI_RR_WEIGHT_REG_STRIDE 1
#define PEU_HPRI_RR_WEIGHT_REG_DEPTH  1

#define PEU_MAX_RD_REQ_SIZE_REG_ADDR   0x012000b2L
#define PEU_MAX_RD_REQ_SIZE_REG_STRIDE 1
#define PEU_MAX_RD_REQ_SIZE_REG_DEPTH  1

#define PEU_DIRTY_PCI_TAG_CTL_REG_ADDR   0x012000b3L
#define PEU_DIRTY_PCI_TAG_CTL_REG_STRIDE 1
#define PEU_DIRTY_PCI_TAG_CTL_REG_DEPTH  1

#define PEU_MASTER_VEC_ST_REG_ADDR   0x012000b4L
#define PEU_MASTER_VEC_ST_REG_STRIDE 1
#define PEU_MASTER_VEC_ST_REG_DEPTH  1

#define PEU_MASTER_VEC_MSK_REG_ADDR   0x012000b5L
#define PEU_MASTER_VEC_MSK_REG_STRIDE 1
#define PEU_MASTER_VEC_MSK_REG_DEPTH  1

#define PEU_FLR_REQ_DBG_REG_ADDR   0x012000b6L
#define PEU_FLR_REQ_DBG_REG_STRIDE 1
#define PEU_FLR_REQ_DBG_REG_DEPTH  1

#define PEU_FLR_DONE_DBG_REG_ADDR   0x012000b7L
#define PEU_FLR_DONE_DBG_REG_STRIDE 1
#define PEU_FLR_DONE_DBG_REG_DEPTH  1

#define PEU_FLR_REQ_VEC_ST_REG_ADDR   0x012000b8L
#define PEU_FLR_REQ_VEC_ST_REG_STRIDE 1
#define PEU_FLR_REQ_VEC_ST_REG_DEPTH  1

#define PEU_FLR_DONE_VEC_ST_REG_ADDR   0x012000b9L
#define PEU_FLR_DONE_VEC_ST_REG_STRIDE 1
#define PEU_FLR_DONE_VEC_ST_REG_DEPTH  1

#define PEU_TAG_POOL_DBG_REG_ADDR   0x012000baL
#define PEU_TAG_POOL_DBG_REG_STRIDE 1
#define PEU_TAG_POOL_DBG_REG_DEPTH  1

#define PEU_LTSSM_DBG_REG_ADDR   0x012000bbL
#define PEU_LTSSM_DBG_REG_STRIDE 1
#define PEU_LTSSM_DBG_REG_DEPTH  1

#define PEU_TSU_REQ_DBG_REG_ADDR   0x012000bcL
#define PEU_TSU_REQ_DBG_REG_STRIDE 1
#define PEU_TSU_REQ_DBG_REG_DEPTH  1

#define PEU_EPS_REQ_DBG_REG_ADDR   0x012000bdL
#define PEU_EPS_REQ_DBG_REG_STRIDE 1
#define PEU_EPS_REQ_DBG_REG_DEPTH  1

#define PEU_P_REQ_DBG_REG_ADDR   0x012000beL
#define PEU_P_REQ_DBG_REG_STRIDE 1
#define PEU_P_REQ_DBG_REG_DEPTH  1

#define PEU_NP_REQ_DBG_REG_ADDR   0x012000bfL
#define PEU_NP_REQ_DBG_REG_STRIDE 1
#define PEU_NP_REQ_DBG_REG_DEPTH  1

#define PEU_DBI_CSR_WDAT_REG_ADDR   0x012000c0L
#define PEU_DBI_CSR_WDAT_REG_STRIDE 1
#define PEU_DBI_CSR_WDAT_REG_DEPTH  1

#define PEU_DBI_CSR_CMD_REG_ADDR   0x012000c1L
#define PEU_DBI_CSR_CMD_REG_STRIDE 1
#define PEU_DBI_CSR_CMD_REG_DEPTH  1

#define PEU_DBI_CSR_STATUS_REG_ADDR   0x012000c2L
#define PEU_DBI_CSR_STATUS_REG_STRIDE 1
#define PEU_DBI_CSR_STATUS_REG_DEPTH  1

#define PEU_DBI_CSR_RDAT_REG_ADDR   0x012000c3L
#define PEU_DBI_CSR_RDAT_REG_STRIDE 1
#define PEU_DBI_CSR_RDAT_REG_DEPTH  1

#define PEU_CPL_BUF_WATER_MARK_REG_ADDR   0x012000c4L
#define PEU_CPL_BUF_WATER_MARK_REG_STRIDE 1
#define PEU_CPL_BUF_WATER_MARK_REG_DEPTH  1

#define PEU_ARB_CPL_BUF_THLD_REG_ADDR   0x012000c5L
#define PEU_ARB_CPL_BUF_THLD_REG_STRIDE 1
#define PEU_ARB_CPL_BUF_THLD_REG_DEPTH  1

#define PEU_CPL_BUF_CREDIT_REG_ADDR   0x012000c6L
#define PEU_CPL_BUF_CREDIT_REG_STRIDE 1
#define PEU_CPL_BUF_CREDIT_REG_DEPTH  1

#define PEU_CPL_MAX_CREDIT_REG_ADDR   0x012000c7L
#define PEU_CPL_MAX_CREDIT_REG_STRIDE 1
#define PEU_CPL_MAX_CREDIT_REG_DEPTH  1

#define PEU_PCIE_PHY_CTL_REG_ADDR   0x012000c8L
#define PEU_PCIE_PHY_CTL_REG_STRIDE 1
#define PEU_PCIE_PHY_CTL_REG_DEPTH  1

#define PEU_FORCE_ERR_REG_ADDR   0x012000c9L
#define PEU_FORCE_ERR_REG_STRIDE 1
#define PEU_FORCE_ERR_REG_DEPTH  1

#define PEU_MSG_GEN_QW0_REG_ADDR   0x012000caL
#define PEU_MSG_GEN_QW0_REG_STRIDE 1
#define PEU_MSG_GEN_QW0_REG_DEPTH  1

#define PEU_MSG_GEN_QW1_REG_ADDR   0x012000cbL
#define PEU_MSG_GEN_QW1_REG_STRIDE 1
#define PEU_MSG_GEN_QW1_REG_DEPTH  1

#define PEU_MSG_STATUS_REG_ADDR   0x012000ccL
#define PEU_MSG_STATUS_REG_STRIDE 1
#define PEU_MSG_STATUS_REG_DEPTH  1

#define PEU_ATS_MSG_QW0_REG_ADDR   0x012000cdL
#define PEU_ATS_MSG_QW0_REG_STRIDE 1
#define PEU_ATS_MSG_QW0_REG_DEPTH  1

#define PEU_ATS_MSG_QW1_REG_ADDR   0x012000ceL
#define PEU_ATS_MSG_QW1_REG_STRIDE 1
#define PEU_ATS_MSG_QW1_REG_DEPTH  1

#define PEU_SRAM_CORR_ERR_STATUS_REG_ADDR   0x012000cfL
#define PEU_SRAM_CORR_ERR_STATUS_REG_STRIDE 1
#define PEU_SRAM_CORR_ERR_STATUS_REG_DEPTH  1

#define PEU_HI_PRI_MSK_REG_ADDR   0x012000d0L
#define PEU_HI_PRI_MSK_REG_STRIDE 1
#define PEU_HI_PRI_MSK_REG_DEPTH  1

#define PEU_HI_PRI_INTR_VEC_REG_ADDR   0x012000d1L
#define PEU_HI_PRI_INTR_VEC_REG_STRIDE 1
#define PEU_HI_PRI_INTR_VEC_REG_DEPTH  1

#define PEU_FATAL_INTR_MSK_REG_ADDR   0x012000d2L
#define PEU_FATAL_INTR_MSK_REG_STRIDE 1
#define PEU_FATAL_INTR_MSK_REG_DEPTH  1

#define PEU_FATAL_INTR_VEC_REG_ADDR   0x012000d3L
#define PEU_FATAL_INTR_VEC_REG_STRIDE 1
#define PEU_FATAL_INTR_VEC_REG_DEPTH  1

#define PEU_INTR_REQ_DBG_REG_ADDR   0x012000d4L
#define PEU_INTR_REQ_DBG_REG_STRIDE 1
#define PEU_INTR_REQ_DBG_REG_DEPTH  1

#define PEU_TSU_PIO_REQ_DBG_REG_ADDR   0x012000d5L
#define PEU_TSU_PIO_REQ_DBG_REG_STRIDE 1
#define PEU_TSU_PIO_REQ_DBG_REG_DEPTH  1

#define PEU_EPRM_PIO_REQ_DBG_REG_ADDR   0x012000d6L
#define PEU_EPRM_PIO_REQ_DBG_REG_STRIDE 1
#define PEU_EPRM_PIO_REQ_DBG_REG_DEPTH  1

#define PEU_INTR_PIO_REQ_DBG_REG_ADDR   0x012000d7L
#define PEU_INTR_PIO_REQ_DBG_REG_STRIDE 1
#define PEU_INTR_PIO_REQ_DBG_REG_DEPTH  1

#define PEU_CPL_FLUSH_DBG_REG_ADDR   0x012000d8L
#define PEU_CPL_FLUSH_DBG_REG_STRIDE 1
#define PEU_CPL_FLUSH_DBG_REG_DEPTH  1

#define PEU_EP_DIAG_DBG_REG_ADDR   0x012000d9L
#define PEU_EP_DIAG_DBG_REG_STRIDE 1
#define PEU_EP_DIAG_DBG_REG_DEPTH  1

#define PEU_CXPL_EI_DBG_REG_ADDR   0x012000daL
#define PEU_CXPL_EI_DBG_REG_STRIDE 1
#define PEU_CXPL_EI_DBG_REG_DEPTH  1

#define PEU_CXPL_DBG_REG_ADDR   0x012000dbL
#define PEU_CXPL_DBG_REG_STRIDE 1
#define PEU_CXPL_DBG_REG_DEPTH  1

#define PEU_FF_DC_1_DBG_REG_ADDR   0x012000dcL
#define PEU_FF_DC_1_DBG_REG_STRIDE 1
#define PEU_FF_DC_1_DBG_REG_DEPTH  1

#define PEU_FF_DC_2_DBG_REG_ADDR   0x012000ddL
#define PEU_FF_DC_2_DBG_REG_STRIDE 1
#define PEU_FF_DC_2_DBG_REG_DEPTH  1

#define PEU_FORCE_FLR_REG_ADDR   0x012000deL
#define PEU_FORCE_FLR_REG_STRIDE 1
#define PEU_FORCE_FLR_REG_DEPTH  1

#define PEU_CSR_PEU_CTL_ST_REG_ADDR   0x01200100L
#define PEU_CSR_PEU_CTL_ST_REG_STRIDE 1
#define PEU_CSR_PEU_CTL_ST_REG_DEPTH  1

#define PEU_CSR_PEU_INT_ST_REG_ADDR   0x01200101L
#define PEU_CSR_PEU_INT_ST_REG_STRIDE 1
#define PEU_CSR_PEU_INT_ST_REG_DEPTH  1

#define PEU_CSR_PEU_INT_MSK_REG_ADDR   0x01200102L
#define PEU_CSR_PEU_INT_MSK_REG_STRIDE 1
#define PEU_CSR_PEU_INT_MSK_REG_DEPTH  1

#define PEU_CSR_LP_INTR_VEC_REG_ADDR   0x01200103L
#define PEU_CSR_LP_INTR_VEC_REG_STRIDE 1
#define PEU_CSR_LP_INTR_VEC_REG_DEPTH  1

#define PEU_CSR_LPRI_INT_MSK_REG_ADDR   0x01200104L
#define PEU_CSR_LPRI_INT_MSK_REG_STRIDE 1
#define PEU_CSR_LPRI_INT_MSK_REG_DEPTH  1

#define PEU_CSR_SER_INT_ST_REG_ADDR   0x01200105L
#define PEU_CSR_SER_INT_ST_REG_STRIDE 1
#define PEU_CSR_SER_INT_ST_REG_DEPTH  1

#define PEU_TSU_FLR_REQ_DBG_REG_ADDR   0x012001b0L
#define PEU_TSU_FLR_REQ_DBG_REG_STRIDE 1
#define PEU_TSU_FLR_REQ_DBG_REG_DEPTH  1

#define PEU_TSU_FLR_DONE_DBG_REG_ADDR   0x012001b1L
#define PEU_TSU_FLR_DONE_DBG_REG_STRIDE 1
#define PEU_TSU_FLR_DONE_DBG_REG_DEPTH  1

#define PEU_EPS_FLR_REQ_DBG_REG_ADDR   0x012001b2L
#define PEU_EPS_FLR_REQ_DBG_REG_STRIDE 1
#define PEU_EPS_FLR_REQ_DBG_REG_DEPTH  1

#define PEU_EPS_FLR_DONE_DBG_REG_ADDR   0x012001b3L
#define PEU_EPS_FLR_DONE_DBG_REG_STRIDE 1
#define PEU_EPS_FLR_DONE_DBG_REG_DEPTH  1

#define PEU_PIPE_CSR_WDAT_REG_ADDR   0x012001b4L
#define PEU_PIPE_CSR_WDAT_REG_STRIDE 1
#define PEU_PIPE_CSR_WDAT_REG_DEPTH  1

#define PEU_PIPE_CSR_CMD_REG_ADDR   0x012001b5L
#define PEU_PIPE_CSR_CMD_REG_STRIDE 1
#define PEU_PIPE_CSR_CMD_REG_DEPTH  1

#define PEU_PIPE_CSR_STATUS_REG_ADDR   0x012001b6L
#define PEU_PIPE_CSR_STATUS_REG_STRIDE 1
#define PEU_PIPE_CSR_STATUS_REG_DEPTH  1

#define PEU_PIPE_CSR_RDAT_REG_ADDR   0x012001b7L
#define PEU_PIPE_CSR_RDAT_REG_STRIDE 1
#define PEU_PIPE_CSR_RDAT_REG_DEPTH  1

#define PEU_SER_CSR_WDAT_REG_ADDR   0x012001b8L
#define PEU_SER_CSR_WDAT_REG_STRIDE 1
#define PEU_SER_CSR_WDAT_REG_DEPTH  1

#define PEU_SER_CSR_CMD_REG_ADDR   0x012001b9L
#define PEU_SER_CSR_CMD_REG_STRIDE 1
#define PEU_SER_CSR_CMD_REG_DEPTH  1

#define PEU_SER_CSR_STATUS_REG_ADDR   0x012001baL
#define PEU_SER_CSR_STATUS_REG_STRIDE 1
#define PEU_SER_CSR_STATUS_REG_DEPTH  1

#define PEU_SER_CSR_RDAT_REG_ADDR   0x012001bbL
#define PEU_SER_CSR_RDAT_REG_STRIDE 1
#define PEU_SER_CSR_RDAT_REG_DEPTH  1

#define PEU_SER_1_CSR_WDAT_REG_ADDR   0x012001bcL
#define PEU_SER_1_CSR_WDAT_REG_STRIDE 1
#define PEU_SER_1_CSR_WDAT_REG_DEPTH  1

#define PEU_SER_1_CSR_CMD_REG_ADDR   0x012001bdL
#define PEU_SER_1_CSR_CMD_REG_STRIDE 1
#define PEU_SER_1_CSR_CMD_REG_DEPTH  1

#define PEU_SER_1_CSR_STATUS_REG_ADDR   0x012001beL
#define PEU_SER_1_CSR_STATUS_REG_STRIDE 1
#define PEU_SER_1_CSR_STATUS_REG_DEPTH  1

#define PEU_SER_1_CSR_RDAT_REG_ADDR   0x012001bfL
#define PEU_SER_1_CSR_RDAT_REG_STRIDE 1
#define PEU_SER_1_CSR_RDAT_REG_DEPTH  1

#define PEU_SER_DFE_ST_SEL_REG_ADDR   0x012001c0L
#define PEU_SER_DFE_ST_SEL_REG_STRIDE 1
#define PEU_SER_DFE_ST_SEL_REG_DEPTH  1

#define PEU_SER_DFE_ST_0_REG_ADDR   0x012001c1L
#define PEU_SER_DFE_ST_0_REG_STRIDE 1
#define PEU_SER_DFE_ST_0_REG_DEPTH  1

#define PEU_SER_DFE_ST_1_REG_ADDR   0x012001c2L
#define PEU_SER_DFE_ST_1_REG_STRIDE 1
#define PEU_SER_DFE_ST_1_REG_DEPTH  1

#define PEU_SER_DFE_ST_2_REG_ADDR   0x012001c3L
#define PEU_SER_DFE_ST_2_REG_STRIDE 1
#define PEU_SER_DFE_ST_2_REG_DEPTH  1

#define PEU_SER_DFE_ST_3_REG_ADDR   0x012001c4L
#define PEU_SER_DFE_ST_3_REG_STRIDE 1
#define PEU_SER_DFE_ST_3_REG_DEPTH  1

#define PEU_SER_POWERDOWN_CTL_REG_ADDR   0x012001f0L
#define PEU_SER_POWERDOWN_CTL_REG_STRIDE 1
#define PEU_SER_POWERDOWN_CTL_REG_DEPTH  1

#define PEU_SER_CFG0_REG_ADDR   0x012001f1L
#define PEU_SER_CFG0_REG_STRIDE 1
#define PEU_SER_CFG0_REG_DEPTH  1

#define PEU_SER_CFG1_REG_ADDR   0x012001f2L
#define PEU_SER_CFG1_REG_STRIDE 1
#define PEU_SER_CFG1_REG_DEPTH  1

#define PEU_SER_CFG2_REG_ADDR   0x012001f3L
#define PEU_SER_CFG2_REG_STRIDE 1
#define PEU_SER_CFG2_REG_DEPTH  1

#define PEU_SER_CFG3_REG_ADDR   0x012001f4L
#define PEU_SER_CFG3_REG_STRIDE 1
#define PEU_SER_CFG3_REG_DEPTH  1

#define PEU_CSR_SER_CTL_REG_ADDR   0x012001f5L
#define PEU_CSR_SER_CTL_REG_STRIDE 1
#define PEU_CSR_SER_CTL_REG_DEPTH  1

#define PEU_CSR_SER_ST_REG_ADDR   0x012001f6L
#define PEU_CSR_SER_ST_REG_STRIDE 1
#define PEU_CSR_SER_ST_REG_DEPTH  1


/* */
enum psif_csr_map {
	/*
	 * TSU VL mapping table for requests. Inputs/addressing to this table are
	 * {UF(35 UFs), tsu_qosl (High/Low BAR), tsu_sl, port}.
	 */
	PSIF_CSR_ADDR_HOST_TVL_TABLE                 = 000000,
	/* Per TVL register.Maximum global credits a particular TVL can get. */
	PSIF_CSR_ADDR_HOST_MAX_GLOBAL_TVL_CRDTS      = 0x4600,
	/*
	 * Per TVL register.Maximum private credits a particular TVL can get. The
	 * amount of credits dedicated to this TVL.
	 */
	PSIF_CSR_ADDR_HOST_PRIVATE_TVL_CRDTS         = 0x4a00,
	/* Total number of global credits assign to TVLs. */
	PSIF_CSR_ADDR_HOST_TOTAL_GLOBAL_TVL_CRDTS    = 0x4e00,
	/* weight given for round robin arbitration for xiu commands. */
	PSIF_CSR_ADDR_HOST_XIU_ARBITER               = 0x4e08,
	/* weight given for round robin arbitration for eps commands. */
	PSIF_CSR_ADDR_HOST_EPS_ARBITER               = 0x4e10,
	/* Number of error credits reserved in the tsu_host llq. */
	PSIF_CSR_ADDR_HOST_ERROR_CRDTS               = 0x4e18,
	/* Data Latency skew from all clients to tsu_host. */
	PSIF_CSR_ADDR_HOST_DATA_LATENCY              = 0x4e20,
	/*
	 * Per TVL register. The amount of private and global credits used to this
	 * TVL.
	 */
	PSIF_CSR_ADDR_HOST_TVL_CRDTS_USED            = 0x4e28,
	/* Amount of global credits used shared among all TVLs. */
	PSIF_CSR_ADDR_HOST_GLOBAL_CRDTS_USED         = 0x5228,
	/* when set puts the tsu_host in hca mode for Atomics. */
	PSIF_CSR_ADDR_HOST_HCA_MODE                  = 0x5230,
	/*
	 * when set flips the compare and swap field in xiu meta_data bus in PCIe
	 * mode.
	 */
	PSIF_CSR_ADDR_HOST_ENABLE_PCIE_SWAP          = 0x5238,
	/* Handling Endianess of host Processor. */
	PSIF_CSR_ADDR_HOST_LITTLE_ENDIAN_MODE        = 0x5240,
	/* allocating global credits to llq in XIU */
	PSIF_CSR_ADDR_HOST_XIU_LLQ_GLOBAL_CREDITS    = 0x5248,
	PSIF_CSR_ADDR_BASE_ADDR_QP                   = 0x5250,
	PSIF_CSR_ADDR_BASE_ADDR_QP_1                 = 0x5258,
	PSIF_CSR_ADDR_BASE_ADDR_QP_2                 = 0x5260,
	/* MRS credit debug counter. */
	PSIF_CSR_ADDR_HOST_MRS_CREDIT_CNT            = 0x5268,
	/* ERR credit debug counter. */
	PSIF_CSR_ADDR_HOST_ERR_CREDIT_CNT            = 0x5270,
	/* LLQ debug counter. */
	PSIF_CSR_ADDR_HOST_LLQ_CNT                   = 0x5278,
	/*
	 * EPS Address Error Interrupt status register. 1b per source (1=int
	 * triggered).
	 */
	PSIF_CSR_ADDR_HOST_INT_STATUS                = 0x5280,
	/* EPS Address Error Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_HOST_INT_MASK                  = 0x5288,
	/*
	 * EPS Address Error Interrupt priority register. 1b per source (1=high,
	 * 0=low).
	 */
	PSIF_CSR_ADDR_HOST_INT_PRI                   = 0x5290,
	/*
	 * EPS Address Error Interrupt status clear register. 1b per source (1=source
	 * will be cleared from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_HOST_INT_STATUS_CLEAR          = 0x5298,
	/* Trigger the EPS Address Error int_status clear operation. */
	PSIF_CSR_ADDR_HOST_INT_STATUS_CLEAR_KICK     = 0x52a0,
	/*
	 * EPS address which caused the int_status.eps_address_invalid to get set.
	 */
	PSIF_CSR_ADDR_HOST_EPS_ADDRESS               = 0x52a8,
	/* ECC and Parity Errors status register. */
	PSIF_CSR_ADDR_HOST_ECC_PARITY_ERRS           = 0x52b8,
	/*
	 * Fatal Interrupt and Stop Mask register. 1b per source (interrupt masks:
	 * 1=masked, stop-masks: 1=error does not cause host to stop processing) ECC,
	 * or CAM Parity error if enabled, will cause a fatal interrupt. Decide
	 * whether or not to stop all host processing when this error occurs.
	 */
	PSIF_CSR_ADDR_HOST_FATAL_INT_MASK            = 0x52c8,
	/* Interrupt Total Moderation */
	PSIF_CSR_ADDR_HOST_INT_CTRL                  = 0x52d0,
	/* Interrupt Channel Control 0 */
	PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_0           = 0x52d8,
	/* Interrupt Channel Control 1 */
	PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_1           = 0x54e8,
	/* Interrupt Channel Control 2 */
	PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_2           = 0x56f8,
	/* MMU Static-Configuration and Status */
	PSIF_CSR_ADDR_MMU_CONFIG                     = 0x5908,
	/* MMU Credit Configuration */
	PSIF_CSR_ADDR_MMU_CREDIT_CONFIG              = 0x5910,
	/* PA Address Size Configuration */
	PSIF_CSR_ADDR_MMU_PA_MASK                    = 0x5918,
	/* Flush MMU and-or PTW Caches. */
	PSIF_CSR_ADDR_MMU_FLUSH_CACHES               = 0x5920,
	/* Statistic Counters. */
	PSIF_CSR_ADDR_MMU_STAT_COUNTERS              = 0x5928,
	/* ECC and Parity Errors. */
	PSIF_CSR_ADDR_MMU_ECC_PARITY_ERRS            = 0x5930,
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	PSIF_CSR_ADDR_MMU_UF_CONTROL                 = 0x5940,
	/* Starts operation defined in uf_control. */
	PSIF_CSR_ADDR_MMU_UF_CONTROL_KICK            = 0x5948,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_MMU_INT_STATUS                 = 0x5950,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_MMU_INT_MASK                   = 0x5958,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_MMU_INT_PRI                    = 0x5960,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_MMU_INT_STATUS_CLEAR           = 0x5968,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_MMU_INT_STATUS_CLEAR_KICK      = 0x5970,
	/* Uncorrectable-Fatal Error Mask */
	PSIF_CSR_ADDR_MMU_UNCOR_ERR_MASK             = 0x5978,
	/*
	 * TSU VL mapping table for requests. Inputs/addressing to this table are
	 * {UF, tsu_qosl (High/Low BAR), tsu_sl}.
	 */
	PSIF_CSR_ADDR_TVL_TABLE                      = 0x5980,
	/*
	 * Below dcb_bar address is a write to the VCB, else write to the DCB.
	 * dcb_bar = 0 applies no VCB. Below this qosl_bar address is low BAR, else
	 * is high BAR. Inputs/addressing to this table is UF.
	 */
	PSIF_CSR_ADDR_SUB_BAR_ADDR                   = 0x7c80,
	/*
	 * Virtual collect buffer start offset. VCB#=vcb_start_offset + pio
	 * address[25:12]. Inputs/addressing to this table is UF.
	 */
	PSIF_CSR_ADDR_VCB_START                      = 0x7c88,
	/*
	 * How many physical collect buffers are allocated to the high BAR.
	 * Inputs/addressing to this table is UF.
	 */
	PSIF_CSR_ADDR_PCB_ALLOC_HIGH                 = 0x7c90,
	/*
	 * How many physical collect buffers are allocated to the low BAR.
	 * Inputs/addressing to this table is UF.
	 */
	PSIF_CSR_ADDR_PCB_ALLOC_LOW                  = 0x7c98,
	/*
	 * How many physical collect buffers are available. Inputs/addressing to this
	 * table is UF.
	 */
	PSIF_CSR_ADDR_PCB_AVAILABLE                  = 0x7ca0,
	/*
	 * How many physical collect buffers are used in high BAR. Inputs/addressing
	 * to this table is UF.
	 */
	PSIF_CSR_ADDR_PCB_USED_HIGH                  = 0x7ca8,
	/*
	 * How many physical collect buffers are used in low BAR. Inputs/addressing
	 * to this table is UF.
	 */
	PSIF_CSR_ADDR_PCB_USED_LOW                   = 0x7cb0,
	/* scoreboard init. */
	PSIF_CSR_ADDR_SCBD_INIT                      = 0x7cb8,
	/* scoreboard init done status. */
	PSIF_CSR_ADDR_SCBD_FINI                      = 0x7cc0,
	/* Start offset of dedicated collect buffers number for the host driver. */
	PSIF_CSR_ADDR_DCB_START_OFFSET_HOST          = 0x7cc8,
	/* Start offset of dedicated collect buffers number for the eps. */
	PSIF_CSR_ADDR_DCB_START_OFFSET_EPS           = 0x7cd0,
	/*
	 * Start offset of dedicated collect buffers number for the send queue
	 * scheduler.
	 */
	PSIF_CSR_ADDR_DCB_START_OFFSET_SQS           = 0x7cd8,
	/* Collect length round up to 64B for scoreboard. */
	PSIF_CSR_ADDR_CBU_COLLECT_LEN_ROUNDUP        = 0x7ce0,
	/* ECC error control */
	PSIF_CSR_ADDR_CBU_ECC_ERR_CTRL               = 0x7ce8,
	/* ECC status */
	PSIF_CSR_ADDR_CBU_ECC_ERR_STATUS             = 0x7cf0,
	/* ECC status */
	PSIF_CSR_ADDR_CBU_ECC_ERR_STATUS_CLEAR       = 0x7cf8,
	/* Per UF to drop PIO. Inputs/addressing to this table is UF. */
	PSIF_CSR_ADDR_CBU_CHOKE                      = 0x7d00,
	/* UF choke status. Inputs/addressing to this table is UF. */
	PSIF_CSR_ADDR_CBU_UF_STATUS                  = 0x7d08,
	/* vcb clear CB number. Inputs/addressing to this table is scoreboard table. */
	PSIF_CSR_ADDR_CBU_VCB_CLEAR_NUM              = 0x7d10,
	/*
	 * vcb clear. Inputs/addressing to this table is scoreboard table. Write to
	 * clear VCB, Read to get the scoreboard status
	 */
	PSIF_CSR_ADDR_CBU_VCB_CLEAR                  = 0x7d18,
	/* PIO DCB start_offset. Inputs/addressing to this table is UF. */
	PSIF_CSR_ADDR_CBU_DCB_START_OFFSET           = 0x7d20,
	/*
	 * Table to contain UF number for each DCB. EPS/Host drive has to write UF #
	 * to this table before it writes to the DCB. Inputs/addressing to this table
	 * is DCB#
	 */
	PSIF_CSR_ADDR_DCB_UF_TABLE                   = 0x7d28,
	/*
	 * Status state of each DCB. The EPS/Host drive has to read this table to
	 * claim a DCB. Inputs/addressing to this table is DCB#
	 */
	PSIF_CSR_ADDR_CBU_DCB_STATUS_HW_LOCK         = 0x8528,
	/* Status state of each DCB. Inputs/addressing to this table is DCB# */
	PSIF_CSR_ADDR_DCB_STATUS                     = 0x8d28,
	/* dcb clear. Inputs/addressing to this table is scoreboard table. */
	PSIF_CSR_ADDR_CBU_DCB_CLEAR                  = 0x9528,
	/*
	 * DCB doorbell header/payload memory from EPS-C. Address[13:6] = DCB number
	 * and Address[5:0] = 8 bytes offset into the DCB.
	 */
	PSIF_CSR_ADDR_CBU_DCB_DOORBELL               = 0x9d28,
	/*
	 * Initial completion credit per TVL. This is private credit for the
	 * particular TVL and can only be used by this TVL. The private completion
	 * credit indicates how many entries in tsu_cmpl are reserved for requests on
	 * this TVL.
	 */
	PSIF_CSR_ADDR_CMPL_CREDIT_PRIVATE            = 0x29d28,
	/*
	 * Current completion credits used per TVL. This is credit currently used by
	 * a particular TVL. This register is updated by hardware and can be read by
	 * software.
	 */
	PSIF_CSR_ADDR_CMPL_CREDIT_TVL_CONSUMED       = 0x2a128,
	/*
	 * Initial completion credit for the free pool. The free pool can be used by
	 * anyone being set up to use common credits. This is additional credits
	 * which can be used in addition to the private TVL completion credit. The
	 * common completion credit indicates how many entries in tsu_cmpl can be
	 * used by any TVL. It is a restriction that the TVL is set up to use common
	 * credit.
	 */
	PSIF_CSR_ADDR_CMPL_CREDIT_COMMON             = 0x2a528,
	/*
	 * This is register contain the number of currently consumed common
	 * completion credits. This register is updated by hardware and can be read
	 * from software.
	 */
	PSIF_CSR_ADDR_CMPL_CREDIT_COMMON_CONSUMED    = 0x2a530,
	PSIF_CSR_ADDR_RQS_COMMON_CMPL_CREDIT_ENABLE_0 = 0x2a538,
	PSIF_CSR_ADDR_RQS_COMMON_CMPL_CREDIT_ENABLE_1 = 0x2a540,
	/*
	 * Initial execution credit per TVL. This is private credit for the
	 * particular TVL and can only be used by this TVL. The credit indicates how
	 * many DMA contexts are reserved for this particular TVL
	 */
	PSIF_CSR_ADDR_EXEC_CREDIT_PRIVATE            = 0x2a548,
	/*
	 * Current execution credit used per TVL. This is credit used by a particular
	 * TVL. This register is updated by hardware and can be read by software.
	 */
	PSIF_CSR_ADDR_EXEC_CREDIT_TVL_CONSUMED       = 0x2a948,
	/*
	 * Initial execution credit for the free pool. The free pool can be used by
	 * anyone being set up to use common credits. This is additional credits
	 * which can be used in addition to the private TVL execution credit. The
	 * common execution credit indicates how many DMA contexts can be used by any
	 * TVL. It is a restriction that the TVL is set up to use common credit.
	 */
	PSIF_CSR_ADDR_EXEC_CREDIT_COMMON             = 0x2ad48,
	/*
	 * This register contain the number of currently consumed common execution
	 * credits. The register is updated by hardware and can be read from
	 * software.
	 */
	PSIF_CSR_ADDR_EXEC_CREDIT_COMMON_CONSUMED    = 0x2ad50,
	PSIF_CSR_ADDR_RQS_COMMON_EXEC_CREDIT_ENABLE_0 = 0x2ad58,
	PSIF_CSR_ADDR_RQS_COMMON_EXEC_CREDIT_ENABLE_1 = 0x2ad60,
	/*
	 * Port1 SL to VL mapping tables. One entry in this table is the SL to VL
	 * mapping table for one UF.
	 */
	PSIF_CSR_ADDR_P1_SL2VL                       = 0x2ad68,
	/*
	 * Port2 SL to VL mapping tables. There is one table per UF. The table is
	 * implemented as one register.
	 */
	PSIF_CSR_ADDR_P2_SL2VL                       = 0x2ad70,
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	PSIF_CSR_ADDR_P1_OWN_LID_BASE                = 0x2ad78,
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	PSIF_CSR_ADDR_P2_OWN_LID_BASE                = 0x2ad80,
	/*
	 * Port1 enable bits per UF. If bit is set, the corresponding GID and LID
	 * table entries are valid.
	 */
	PSIF_CSR_ADDR_P1_PORT_ENABLE                 = 0x2ad88,
	/*
	 * Port2 enable bits per UF. If bit is set, the corresponding GID and LID
	 * table entries are valid.
	 */
	PSIF_CSR_ADDR_P2_PORT_ENABLE                 = 0x2ad90,
	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
	PSIF_CSR_ADDR_RQS_P1_SMP_ALLOWED             = 0x2ad98,
	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
	PSIF_CSR_ADDR_RQS_P2_SMP_ALLOWED             = 0x2ada0,
	/* Kick FIFO entries in use per UF */
	PSIF_CSR_ADDR_RQS_KICK_FIFO_UF_INUSE         = 0x2ada8,
	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
	PSIF_CSR_ADDR_RQS_P1_GID_FORWARDING_TABLE    = 0x2adb0,
	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
	PSIF_CSR_ADDR_RQS_P2_GID_FORWARDING_TABLE    = 0x2afc8,
	/*
	 * Per VL register (0-7: Port 0 VL0-7, 8: Port 0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). Maximum global buffer a particular VL can get.
	 */
	PSIF_CSR_ADDR_VL_BUFF_MAX_ALLOC              = 0x2b1e0,
	/*
	 * Per VL register (0-7: Port0 VL0-7, 8: Port0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). The amount of buffer dedicated to this VL.
	 */
	PSIF_CSR_ADDR_VL_BUFF_PRIVATE                = 0x2b280,
	/*
	 * Per VL register (0-7: Port0 VL0-7, 8: Port0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). The amount of dedicated and global buffer used to this VL.
	 */
	PSIF_CSR_ADDR_VL_BUFF_USED                   = 0x2b320,
	/* Amount of global buffer used shared among all VLs. */
	PSIF_CSR_ADDR_GLOBAL_BUFF_USED               = 0x2b3c0,
	/* Num of 256B block DMA buffer check-out */
	PSIF_CSR_ADDR_NUM_OF_DMA_BUF_CO              = 0x2b3c8,
	/* Num of 256B block DMA buffer check-in */
	PSIF_CSR_ADDR_NUM_OF_DMA_BUF_CI              = 0x2b3d0,
	/* Number of RQS command to DMA */
	PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_INBUN      = 0x2b3d8,
	/* Number of Context LLQ pop */
	PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_POP        = 0x2b3e0,
	/* Number of Context LLQ ready to go set */
	PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_R2G        = 0x2b3e8,
	/* Number of IBPB command from DMA */
	PSIF_CSR_ADDR_NUM_OF_DMA_IBPB_CMD            = 0x2b3f0,
	/* Number of CMPL command from DMA */
	PSIF_CSR_ADDR_NUM_OF_DMA_CMPL_CMD            = 0x2b3f8,
	/* Number of QPS RD command from DMA */
	PSIF_CSR_ADDR_NUM_OF_DMA_QPS_RD_CMD          = 0x2b400,
	/* Number of QPS RD response from QPS */
	PSIF_CSR_ADDR_NUM_OF_DMA_QPS_RD_RSP          = 0x2b408,
	/* Number of QPS WR command from DMA */
	PSIF_CSR_ADDR_NUM_OF_DMA_QPS_WR_CMD          = 0x2b410,
	/* Number of QPS WR response from QPS */
	PSIF_CSR_ADDR_NUM_OF_DMA_QPS_WR_RSP          = 0x2b418,
	/* Number of packet in the packet LLQ */
	PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_INBUN        = 0x2b420,
	/* Number of Packet LLQ pop */
	PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_POP          = 0x2b428,
	/* Number of Packet LLQ ready to go set */
	PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_R2G          = 0x2b430,
	/* Num of payload DMA command */
	PSIF_CSR_ADDR_NUM_OF_DMA_PYLD_CMD            = 0x2b438,
	/* Num of payload DMA response */
	PSIF_CSR_ADDR_NUM_OF_DMA_PYLD_RSP            = 0x2b440,
	/* Num of sge DMA command */
	PSIF_CSR_ADDR_NUM_OF_DMA_SGE_CMD             = 0x2b448,
	/* Num of sge DMA response */
	PSIF_CSR_ADDR_NUM_OF_DMA_SGE_RSP             = 0x2b450,
	/* Num of LSO buffer used */
	PSIF_CSR_ADDR_DMA_LSO_BUF_USED               = 0x2b458,
	/* ECC error control */
	PSIF_CSR_ADDR_DMA_ECC_ERR_CTRL               = 0x2b460,
	/* ECC status */
	PSIF_CSR_ADDR_DMA_ECC_ERR_STATUS             = 0x2b468,
	/* ECC status */
	PSIF_CSR_ADDR_DMA_ECC_ERR_STATUS_CLEAR       = 0x2b470,
	/*
	 * IB link speed per port. 0=EDR, 1=QDR, 2=DDR, 3=SDR. Address to the
	 * Register Table: {uf, port}
	 */
	PSIF_CSR_ADDR_LINK_SPEED                     = 0x2b478,
	/*
	 * IB link width per port. 0=X4 and 1=X1. Address to the Register Table: {uf,
	 * port}
	 */
	PSIF_CSR_ADDR_LINK_WIDTH                     = 0x2b6a8,
	/*
	 * Maximum number of payload read 256B buffer per UF. Address to the Register
	 * Table:uf
	 */
	PSIF_CSR_ADDR_DMA_UF_TRANS_MAX               = 0x2b8d8,
	/* Number of payload read transaction per UF. Address to the Register Table:uf */
	PSIF_CSR_ADDR_DMA_UF_TRANS_USED              = 0x2b8e0,
	/*
	 * MAC address #0 table for uf 0-33. Inputs/addressing to this table are {UF,
	 * port}.
	 */
	PSIF_CSR_ADDR_DMA_MAC_ADDR0_TABLE            = 0x2b8e8,
	/*
	 * MAC address #1 table for uf 0-33. Inputs/addressing to this table are {UF,
	 * port}.
	 */
	PSIF_CSR_ADDR_DMA_MAC_ADDR1_TABLE            = 0x2bb08,
	/*
	 * VID table for uf 0-33. Inputs/addressing to this table are {UF, port,
	 * index}.
	 */
	PSIF_CSR_ADDR_DMA_VID_TABLE                  = 0x2bd28,
	/* MAC control per port per UF 0-33. Address to the Register Table: {uf port} */
	PSIF_CSR_ADDR_DMA_MAC_CTRL                   = 0x2c5a8,
	/* Size of the EoIB and IPoIB header */
	PSIF_CSR_ADDR_DMA_PPTY_HDR_LENGTH            = 0x2c7c8,
	/* Mask bit to the TCP flags for the LSO segments */
	PSIF_CSR_ADDR_DMA_TCP_FLAGS_MASK             = 0x2c7d0,
	/* Control for ip checksum tcp checksum udp checksum and ethernet padding */
	PSIF_CSR_ADDR_DMA_OFFLOAD_CTRL               = 0x2c7d8,
	/*
	 * VLAN membership table per UF 0-33. Inputs/addressing to this table is {UF,
	 * vid[11:6}}.
	 */
	PSIF_CSR_ADDR_DMA_VLAN_MEMBER_TABLE          = 0x2c7e0,
	/* Outer VLAN Ethernet type */
	PSIF_CSR_ADDR_DMA_OUTER_VLAN_TYPE            = 0x30be0,
	/* Outer VLAN Ethernet type */
	PSIF_CSR_ADDR_DMA_INNER_VLAN_TYPE            = 0x30be8,
	/* Shared P-Key table for all UFs on this port. */
	PSIF_CSR_ADDR_P1_SND_PKEY_TABLE              = 0x30bf0,
	/*
	 * Upper 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	PSIF_CSR_ADDR_IBPB_P1_GID_UPPER              = 0x31470,
	/*
	 * Lower 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	PSIF_CSR_ADDR_IBPB_P1_GID_LOWER              = 0x31688,
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	PSIF_CSR_ADDR_P1_SND_LID                     = 0x318a0,
	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
	PSIF_CSR_ADDR_P1_SND_PKEY_UF_STRIDE          = 0x318a8,
	/* Shared P-Key table for all UFs on this port. */
	PSIF_CSR_ADDR_P2_SND_PKEY_TABLE              = 0x318b0,
	/*
	 * Upper 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	PSIF_CSR_ADDR_IBPB_P2_GID_UPPER              = 0x32130,
	/* Lower 64 bits of GID for port2. The table is per UF. */
	PSIF_CSR_ADDR_IBPB_P2_GID_LOWER              = 0x32348,
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	PSIF_CSR_ADDR_P2_SND_LID                     = 0x32560,
	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
	PSIF_CSR_ADDR_P2_SND_PKEY_UF_STRIDE          = 0x32568,
	PSIF_CSR_ADDR_BASE_ADDR_AH                   = 0x32570,
	PSIF_CSR_ADDR_BASE_ADDR_AH_1                 = 0x32578,
	PSIF_CSR_ADDR_BASE_ADDR_AH_2                 = 0x32580,
	PSIF_CSR_ADDR_BASE_ADDR_QP_QPS               = 0x32588,
	PSIF_CSR_ADDR_BASE_ADDR_QP_QPS_1             = 0x32590,
	PSIF_CSR_ADDR_BASE_ADDR_QP_QPS_2             = 0x32598,
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	PSIF_CSR_ADDR_QPS_UF_CONTROL                 = 0x325a0,
	/* Starts operation defined in uf_control. */
	PSIF_CSR_ADDR_QPS_UF_CONTROL_KICK            = 0x325a8,
	/*
	 * Bitvector indicating (one bit per UF) if a UF has entries in tsu_qps or
	 * not. This could be used to verify that a UF flush has happened. XXX:
	 * Should there be multiple registers or one register per UF?
	 */
	PSIF_CSR_ADDR_UF_EMPTY                       = 0x325b0,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_QPS_INT_STATUS                 = 0x325b8,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_QPS_INT_MASK                   = 0x325c0,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_QPS_INT_PRI                    = 0x325c8,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_QPS_INT_STATUS_CLEAR           = 0x325d0,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_QPS_INT_STATUS_CLEAR_KICK      = 0x325d8,
	/*
	 * Stops timeout checking for UF in the uf_control register. This register
	 * must be kicked in order to make sure refcounts are not incremented for the
	 * UF to be flushed/invalidated.
	 */
	PSIF_CSR_ADDR_QPS_UF_STOP_TIMEOUT_KICK       = 0x325e0,
	/*
	 * Per UF modify/query QP command/attribute register. Only one register is
	 * implemented in hardware - one at a time. EPS implements one register per
	 * UF. When one is written, the modify data is written to modify_qp_data
	 * register before this register is written. The Modify or Query QP command
	 * is autmatically kicked when this register is written. Is one outstanding
	 * modify/query QP per UF ok, or do we need more?
	 */
	PSIF_CSR_ADDR_MODIFY_QP_CTRL                 = 0x325e8,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_0           = 0x325f0,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_1           = 0x325f8,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_2           = 0x32600,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_3           = 0x32608,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_4           = 0x32610,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_5           = 0x32618,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_6           = 0x32620,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_7           = 0x32628,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_8           = 0x32630,
	PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_9           = 0x32638,
	/*
	 * Kick register to start a new modify or query command. This register is
	 * written by EPS.
	 */
	PSIF_CSR_ADDR_MODIFY_QP_KICK                 = 0x32640,
	/*
	 * Status register indicating status of modify QP and query QP commands. This
	 * register is read by the EPS only.
	 */
	PSIF_CSR_ADDR_QPS_MODIFY_QP_STATUS           = 0x32648,
	/*
	 * Data register containing data for the query QP command. This is read by
	 * the EPS only. The register is laid out to contain QP, primary_path and
	 * alternate path - same as it is in host memory. This is only a data bus,
	 * not using the structure psif_verbs_pkg::query_qp_t. When data is queried,
	 * and written to this register the psif_verbs_pkg::query_qp_t is cast to
	 * this structure. Please look at psif_verbs_pkg::query_qp_t for details.
	 */
	PSIF_CSR_ADDR_QPS_QUERY_QP_DATA              = 0x32650,
	/*
	 * QP data register - see psif_verbs_pkg::qp_t for details on layout. This
	 * register contain the QP data information to write to QP index (HW cache
	 * index) given by the wr_qp_index CSR. This register is used to initialize
	 * QP 0/1, and is not accessible from user space. It could also be used for
	 * diagnostics.
	 */
	PSIF_CSR_ADDR_QPS_WR_QP_DATA                 = 0x32710,
	/*
	 * QP data register - see psif_verbs_pkg::path_info_t for details on layout.
	 * This register contain the path data to write to QP index (HW cache index)
	 * given by the wr_qp_index CSR. This register is used to initialize QP 0/1,
	 * and is not accessible from user space.
	 */
	PSIF_CSR_ADDR_QPS_WR_QP_PATH                 = 0x32790,
	/*
	 * QP index register. This register contain the QP index where the QP
	 * information is written to. This register is used to initialize QP 0/1, and
	 * is not accessible from user space. Set this to 0 for QP0 and 1 for QP1.
	 */
	PSIF_CSR_ADDR_QPS_WR_QP_INDEX                = 0x327b0,
	/*
	 * Kick register to start a new writing the QP information in wr_qp_data and
	 * wr_qp_path to QP index given in wr_qp_index CSR. This register is .
	 */
	PSIF_CSR_ADDR_QPS_WR_QP_KICK                 = 0x327b8,
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition INIT to RTR.
	 */
	PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_INIT_RTR  = 0x327c0,
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition RTR to RTS.
	 */
	PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_RTR_RTS   = 0x327d0,
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition RTS to RTS.
	 */
	PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_RTS_RTS   = 0x327e0,
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition from any state to RESET or ERROR.
	 */
	PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET = 0x327f0,
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. Legal attribute masks for QP modification for
	 * state transition from SQERR to RTS.
	 */
	PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_SQERR_RTS = 0x32800,
	/* Per UF refcount register. This is used for UF flushing. */
	PSIF_CSR_ADDR_QPS_REF_COUNT                  = 0x32810,
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	PSIF_CSR_ADDR_CMPL_UF_CONTROL                = 0x32818,
	/* Starts operation defined in uf_control. */
	PSIF_CSR_ADDR_CMPL_UF_CONTROL_KICK           = 0x32820,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_CMPL_INT_STATUS                = 0x32828,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_CMPL_INT_MASK                  = 0x32830,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_CMPL_INT_PRI                   = 0x32838,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_CMPL_INT_STATUS_CLEAR          = 0x32840,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_CMPL_INT_STATUS_CLEAR_KICK     = 0x32848,
	/* Base address. */
	PSIF_CSR_ADDR_BASE_ADDR_SQ_CMPL              = 0x32850,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_CMPL_1            = 0x32858,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_CMPL_2            = 0x32860,
	PSIF_CSR_ADDR_BASE_ADDR_KEY                  = 0x32868,
	PSIF_CSR_ADDR_BASE_ADDR_KEY_1                = 0x32870,
	PSIF_CSR_ADDR_BASE_ADDR_KEY_2                = 0x32878,
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	PSIF_CSR_ADDR_VAL_UF_CONTROL                 = 0x32880,
	/* Starts operation defined in uf_control. */
	PSIF_CSR_ADDR_VAL_UF_CONTROL_KICK            = 0x32888,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_VAL_INT_STATUS                 = 0x32890,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_VAL_INT_MASK                   = 0x32898,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_VAL_INT_PRI                    = 0x328a0,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_VAL_INT_STATUS_CLEAR           = 0x328a8,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_VAL_INT_STATUS_CLEAR_KICK      = 0x328b0,
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	PSIF_CSR_ADDR_RQH_UF_CONTROL                 = 0x328b8,
	/* Starts operation defined in uf_control. */
	PSIF_CSR_ADDR_RQH_UF_CONTROL_KICK            = 0x328c0,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_RQH_INT_STATUS                 = 0x328c8,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_RQH_INT_MASK                   = 0x328d0,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_RQH_INT_PRI                    = 0x328d8,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_RQH_INT_STATUS_CLEAR           = 0x328e0,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_RQH_INT_STATUS_CLEAR_KICK      = 0x328e8,
	PSIF_CSR_ADDR_BASE_ADDR_QP_RQH               = 0x328f0,
	PSIF_CSR_ADDR_BASE_ADDR_QP_RQH_1             = 0x328f8,
	PSIF_CSR_ADDR_BASE_ADDR_QP_RQH_2             = 0x32900,
	/*
	 * Head index register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_EQ_SW_INDEX_WR    = 0x32908,
	/*
	 * Tail index register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_EQ_HW_INDEX_WR    = 0x32910,
	/*
	 * MMU context and descriptor control register. Indirect register to write in
	 * order to get a consistent view of the complete descriptor. This is used
	 * along with the address and write register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_EQ_CTRL_WR        = 0x32918,
	/*
	 * Base address register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_EQ_BASE_ADDR_WR   = 0x32920,
	/*
	 * Max number of entries and sequence number register. Indirect register to
	 * write in order to get a consistent view of the complete descriptor. This
	 * is used along with the address and write register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_MMU_CONTEXT_WR    = 0x32928,
	/*
	 * This register must be set prior to kicking a write of the indirect event
	 * queue registers.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECTION_ADDR_WR        = 0x32930,
	/*
	 * When this register is written to, the content of indirect_eq_sw_index_wr,
	 * indirect_eq_hw_index_wr, indirect_eq_ctrl_wr, indirect_eq_base_addr_wr,
	 * indirect_eq_size_wr is written to event queue entry number defined by the
	 * value in the indirect_addr.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_WR_KICK           = 0x32938,
	/*
	 * Head index register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_EQ_SW_INDEX_RD    = 0x32940,
	/*
	 * Tail index register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_EQ_HW_INDEX_RD    = 0x32948,
	/*
	 * MMU context and descriptor control register. Indirect register to read in
	 * order to get a consistent view of the complete descriptor. This is used
	 * along with the address and write register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_EQ_CTRL_RD        = 0x32950,
	/*
	 * Base address register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_EQ_BASE_ADDR_RD   = 0x32958,
	/*
	 * Max number of entries and sequence number register. Indirect register to
	 * read in order to get a consistent view of the complete descriptor. This is
	 * used along with the address and read register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_MMU_CONTEXT_RD    = 0x32960,
	/*
	 * This register must be set prior to kicking a read of the indirect event
	 * queue registers.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECTION_ADDR_RD        = 0x32968,
	/*
	 * When this register is written to, the content of event queue entry in
	 * indirect_addr is written to indirect_eq_sw_index_rd,
	 * indirect_eq_hw_index_rd, indirect_eq_ctrl_rd, indirect_eq_base_addr_rd,
	 * indirect_eq_size_rd. These registers can now be read as one consistent
	 * register.
	 */
	PSIF_CSR_ADDR_RQH_INDIRECT_RD_KICK           = 0x32970,
	/*
	 * Directly accessible software index. Software can update this directly
	 * without having to go through a staging read/write register.
	 */
	PSIF_CSR_ADDR_RQH_EQ_SW_INDEX                = 0x32978,
	/*
	 * Directly accessible software index. Software can update this directly
	 * without having to go through a staging read/write register.
	 */
	PSIF_CSR_ADDR_RQH_EQ_HW_INDEX                = 0x32d78,
	/*
	 * Used for translating each vHCA's EQ number to the physical EQ number.
	 */
	PSIF_CSR_ADDR_RQH_EQ_MAPPING_TABLE           = 0x33178,
	/* EQ Overflow Status 0 EQs 0-63 */
	PSIF_CSR_ADDR_RQH_EQ_OVERFLOW_STATUS_0       = 0x33180,
	/* EQ Overflow Status 1 EQs 64-127 */
	PSIF_CSR_ADDR_RQH_EQ_OVERFLOW_STATUS_1       = 0x33188,
	/* EQ Invavlid Status 0 EQs 0-63 */
	PSIF_CSR_ADDR_RQH_EQ_INVALID_STATUS_0        = 0x33190,
	/* EQ Overflow Status 1 EQs 64-127 */
	PSIF_CSR_ADDR_RQH_EQ_INVALID_STATUS_1        = 0x33198,
	/* EQ out of range status */
	PSIF_CSR_ADDR_RQH_EQ_OUT_OF_RANGE_STATUS     = 0x331a0,
	/* Clear EQ Status 0 EQs 0-63 */
	PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_0          = 0x331a8,
	/* Clear EQ Status 1 EQs 64-127 */
	PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_1          = 0x331b0,
	/* Initiates clear of EQ status bits as indicated in Clear EQ Status 0/1. */
	PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_KICK       = 0x331b8,
	/* Clear per UF EQ out of range Status */
	PSIF_CSR_ADDR_RQH_CLEAR_EQ_UF_STATUS         = 0x331c0,
	/* Initiates clear of per UF out of range EQ status bits */
	PSIF_CSR_ADDR_RQH_CLEAR_EQ_UF_STATUS_KICK    = 0x331c8,
	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * completion queue descriptors.
	 */
	PSIF_CSR_ADDR_BASE_ADDR_CQ_SW                = 0x331d0,
	PSIF_CSR_ADDR_BASE_ADDR_CQ_SW_1              = 0x331d8,
	PSIF_CSR_ADDR_BASE_ADDR_CQ_SW_2              = 0x331e0,
	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * completion queue descriptors.
	 */
	PSIF_CSR_ADDR_BASE_ADDR_CQ_HW                = 0x331e8,
	PSIF_CSR_ADDR_BASE_ADDR_CQ_HW_1              = 0x331f0,
	PSIF_CSR_ADDR_BASE_ADDR_CQ_HW_2              = 0x331f8,
	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * ring buffer descriptors.
	 */
	PSIF_CSR_ADDR_BASE_ADDR_RB_SW                = 0x33200,
	PSIF_CSR_ADDR_BASE_ADDR_RB_SW_1              = 0x33208,
	PSIF_CSR_ADDR_BASE_ADDR_RB_SW_2              = 0x33210,
	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * ring buffer descriptors.
	 */
	PSIF_CSR_ADDR_BASE_ADDR_RB_HW                = 0x33218,
	PSIF_CSR_ADDR_BASE_ADDR_RB_HW_1              = 0x33220,
	PSIF_CSR_ADDR_BASE_ADDR_RB_HW_2              = 0x33228,
	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * receive queue descriptors.
	 */
	PSIF_CSR_ADDR_BASE_ADDR_RQ_SW                = 0x33230,
	PSIF_CSR_ADDR_BASE_ADDR_RQ_SW_1              = 0x33238,
	PSIF_CSR_ADDR_BASE_ADDR_RQ_SW_2              = 0x33240,
	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * receive queue descriptors.
	 */
	PSIF_CSR_ADDR_BASE_ADDR_RQ_HW                = 0x33248,
	PSIF_CSR_ADDR_BASE_ADDR_RQ_HW_1              = 0x33250,
	PSIF_CSR_ADDR_BASE_ADDR_RQ_HW_2              = 0x33258,
	/*
	 * Base address registers per UF for software owned descriptor portion of XRC
	 * SRQ descriptors.
	 */
	PSIF_CSR_ADDR_BASE_ADDR_XRQ_SW               = 0x33260,
	PSIF_CSR_ADDR_BASE_ADDR_XRQ_SW_1             = 0x33268,
	PSIF_CSR_ADDR_BASE_ADDR_XRQ_SW_2             = 0x33270,
	/*
	 * Base address registers per UF for hardware owned descriptor portion of XRC
	 * SRQ descriptors.
	 */
	PSIF_CSR_ADDR_BASE_ADDR_XRQ_HW               = 0x33278,
	PSIF_CSR_ADDR_BASE_ADDR_XRQ_HW_1             = 0x33280,
	PSIF_CSR_ADDR_BASE_ADDR_XRQ_HW_2             = 0x33288,
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	PSIF_CSR_ADDR_DSCR_UF_CONTROL                = 0x33290,
	/* Starts operation defined in uf_control. */
	PSIF_CSR_ADDR_DSCR_UF_CONTROL_KICK           = 0x33298,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_DSCR_INT_STATUS                = 0x332a0,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_DSCR_INT_MASK                  = 0x332a8,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_DSCR_INT_PRI                   = 0x332b0,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_DSCR_INT_STATUS_CLEAR          = 0x332b8,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_DSCR_INT_STATUS_CLEAR_KICK     = 0x332c0,
	/* Async event FIFO - status portion. */
	PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_STATUS        = 0x332c8,
	/* Async event FIFO - affiliated data portion. */
	PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_AFFILIATED    = 0x332d0,
	/* This pop register is written after async event register is read. */
	PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_POP           = 0x332d8,
	/* Various diagnostic control bits */
	PSIF_CSR_ADDR_DSCR_DIAGNOSTIC                = 0x332e0,
	/* Fatal interrupt bits */
	PSIF_CSR_ADDR_DSCR_FATAL_INTERRUPT           = 0x332e8,
	/* Clear fatal interrupt status. */
	PSIF_CSR_ADDR_DSCR_FATAL_INTERRUPT_CLEAR     = 0x332f0,
	/* RSS table containing CQ and RQ. This table is used for EoIB RSS. */
	PSIF_CSR_ADDR_RCV_RSS_EOIB_TABLE             = 0x332f8,
	/*
	 * Control register for RSS per vHCA (UF0-UF32). Containing the bit masks to
	 * use when masking hashes.
	 */
	PSIF_CSR_ADDR_RCV_RSS_CTRL_EOIB_TABLE        = 0x336f8,
	/* RSS table containing CQ and RQ. This table is used for IPoIB RSS. */
	PSIF_CSR_ADDR_RCV_RSS_IPOIB_TABLE            = 0x33700,
	/*
	 * Control register for RSS per vHCA (UF0-UF32). Containing the bit masks to
	 * use when masking hashes.
	 */
	PSIF_CSR_ADDR_RCV_RSS_CTRL_IPOIB_TABLE       = 0x33b00,
	/*
	 * Control register for EPS-A offloading per vHCA (UF0-UF32). It is
	 * containing the size which is the limit for sending packets to EPS-A.
	 */
	PSIF_CSR_ADDR_RCV_PROXY_SIZE                 = 0x33b08,
	/* Maximum MAD packet size supported. */
	PSIF_CSR_ADDR_RCV_MAD_SIZE                   = 0x33b10,
	/*
	 * Error counter for multicast rejects. There is one register per vHCA port.
	 */
	PSIF_CSR_ADDR_RCV_EOIB_MCAST_REJECT          = 0x33b18,
	/*
	 * Error counter for broadcast rejects. There is one register per vHCA port.
	 */
	PSIF_CSR_ADDR_RCV_EOIB_BCAST_REJECT          = 0x33d28,
	/*
	 * Error counter for unicast rejects. There is one register per vHCA port.
	 */
	PSIF_CSR_ADDR_RCV_EOIB_UCAST_REJECT          = 0x33f38,
	/*
	 * Error counter for fragment rejects. There is one register per vHCA port.
	 */
	PSIF_CSR_ADDR_RCV_EIOB_FRAGMENT_REJECT       = 0x34148,
	/*
	 * Error counter for runt rejects. There is one register per vHCA port.
	 */
	PSIF_CSR_ADDR_RCV_EIOB_RUNTS_REJECT          = 0x34358,
	/*
	 * Error counter for outer VLAN rejects. There is one register per vHCA port.
	 */
	PSIF_CSR_ADDR_RCV_EIOB_OUTER_VLAN_REJECT     = 0x34568,
	/*
	 * Error counter for VALN tag rejects. There is one register per vHCA port.
	 */
	PSIF_CSR_ADDR_RCV_EIOB_VLAN_TAG_REJECT       = 0x34778,
	/*
	 * Error counter for VID rejects. There is one register per vHCA port.
	 */
	PSIF_CSR_ADDR_RCV_EIOB_VID_REJECT            = 0x34988,
	/*
	 * Control if multicast packets should be forwarded to yourself or not when
	 * the QP is a IPoIB or EoIB QP.
	 */
	PSIF_CSR_ADDR_RCV_NO_MCAST_DUPLICATION       = 0x34b98,
	/* Trap register for P-Key and Q-Key traps. */
	PSIF_CSR_ADDR_RCV_KEY_TRAP_SGID_UPPER        = 0x34ba0,
	/* Trap register for P-Key and Q-Key traps. */
	PSIF_CSR_ADDR_RCV_KEY_TRAP_SGID_LOWER        = 0x34ba8,
	/* Trap register for P-Key and Q-Key traps. */
	PSIF_CSR_ADDR_RCV_KEY_TRAP_DGID_UPPER        = 0x34bb0,
	/* Trap register for P-Key and Q-Key traps. */
	PSIF_CSR_ADDR_RCV_KEY_TRAP_DGID_LOWER        = 0x34bb8,
	/* Trap register for P-Key and Q-Key traps. */
	PSIF_CSR_ADDR_RCV_KEY_TRAP_QP                = 0x34bc0,
	/* Trap register for P-Key and Q-Key traps. */
	PSIF_CSR_ADDR_RCV_KEY_TRAP_LID_KEY           = 0x34bc8,
	/* Pop register for P-Key and Q-Key trap FIFO. */
	PSIF_CSR_ADDR_RCV_KEY_TRAP_POP               = 0x34bd0,
	/* Register indicating what to do if the trap FIFO is full. */
	PSIF_CSR_ADDR_RCV_KEY_TRAP_BACKPRESSURE      = 0x34bd8,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_RCV_INT_STATUS                 = 0x34be0,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_RCV_INT_MASK                   = 0x34be8,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_RCV_INT_PRI                    = 0x34bf0,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_RCV_INT_STATUS_CLEAR           = 0x34bf8,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_RCV_INT_STATUS_CLEAR_KICK      = 0x34c00,
	/* Shared P-Key table for all UFs on this port. */
	PSIF_CSR_ADDR_P1_RCV_PKEY_TABLE              = 0x34c08,
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	PSIF_CSR_ADDR_P1_RCV_LID                     = 0x35488,
	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
	PSIF_CSR_ADDR_P1_RCV_PKEY_UF_STRIDE          = 0x35490,
	/* Default vSwitch port for vSwitch1. */
	PSIF_CSR_ADDR_IBPR_P1_DEFAULT_VSWITCH_PORT   = 0x35498,
	/* Default SM HCA. Indicating which vHCA to send SM packets to. */
	PSIF_CSR_ADDR_IBPR_P1_DEFAULT_SM_HCA         = 0x354a0,
	/*
	 * When a bit is set, the TSU will forward the particular management class to
	 * EPS-C. Per UF0-UF32.
	 */
	PSIF_CSR_ADDR_IBPR_P1_GSI_FORWARDING_TABLE   = 0x354a8,
	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
	PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED            = 0x354b0,
	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet drop status is cleared.
	 */
	PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR = 0x354b8,
	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet is dropped.
	 */
	PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED_DROP_STATUS = 0x354c0,
	/* Shared P-Key table for all UFs on this port. */
	PSIF_CSR_ADDR_P2_RCV_PKEY_TABLE              = 0x354c8,
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	PSIF_CSR_ADDR_P2_RCV_LID                     = 0x35d48,
	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
	PSIF_CSR_ADDR_P2_RCV_PKEY_UF_STRIDE          = 0x35d50,
	/* Default vSwitch port for vSwitch2. */
	PSIF_CSR_ADDR_IBPR_P2_DEFAULT_VSWITCH_PORT   = 0x35d58,
	/* Default SM HCA. Indicating which vHCA to send SM packets to. */
	PSIF_CSR_ADDR_IBPR_P2_DEFAULT_SM_HCA         = 0x35d60,
	/*
	 * When a bit is set, the TSU will forward the particular management class to
	 * EPS-C. Per UF0-UF32.
	 */
	PSIF_CSR_ADDR_IBPR_P2_GSI_FORWARDING_TABLE   = 0x35d68,
	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
	PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED            = 0x35d70,
	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet drop status is cleared.
	 */
	PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR = 0x35d78,
	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet is dropped.
	 */
	PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED_DROP_STATUS = 0x35d80,
	/* Sample interval register. */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_INTERVAL  = 0x35d88,
	/* Sample start delay register. */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_START     = 0x35d90,
	/* Sample count register. This register contain the counted values. */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_COUNT     = 0x35d98,
	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_PORT      = 0x35da0,
	/* Start port Sampling. */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTSAMPLE_START = 0x35da8,
	/* Sample status register. */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_STATUS    = 0x35db0,
	/* Sample interval register. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_INTERVAL   = 0x35db8,
	/* Sample start delay register. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_START      = 0x35dc0,
	/* Sample count register. This register contain the counted values. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_COUNT      = 0x35dc8,
	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_PORT       = 0x35dd0,
	/* Start port Sampling. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_PORTSAMPLE_START  = 0x35dd8,
	/* Sample status register. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_STATUS     = 0x35de0,
	/* Sample interval register. */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_INTERVAL  = 0x35de8,
	/* Sample start delay register. */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_START     = 0x35df0,
	/* Sample count register. This register contain the counted values. */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_COUNT     = 0x35df8,
	/*
	 * Sample UF register. Indicating which UF this entry is counting for and
	 * what type it is counting.
	 */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_PORT      = 0x35e00,
	/* Start port Sampling. */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTSAMPLE_START = 0x35e08,
	/* Sample status register. */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_STATUS    = 0x35e10,
	/* Sample interval register. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_INTERVAL   = 0x35e18,
	/* Sample start delay register. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_START      = 0x35e20,
	/* Sample count register. This register contain the counted values. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_COUNT      = 0x35e28,
	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_PORT       = 0x35e30,
	/* Start port Sampling. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_PORTSAMPLE_START  = 0x35e38,
	/* Sample status register. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_STATUS     = 0x35e40,
	/* Set link state for the vHCA or the vSwitch. */
	PSIF_CSR_ADDR_IBPR_SET_VLINK_STATE           = 0x35e48,
	/* link state for the vHCA or the vSwitch. */
	PSIF_CSR_ADDR_IBPR_VLINK_STATE_REGISTER      = 0x35e50,
	/*
	 * Get vlink state for the vHCA and the vSwitch. It is up to the firmware to
	 * report correct physical link states when one side is set to disabled and
	 * the other side is down.
	 */
	PSIF_CSR_ADDR_IBPR_P1_VLINK_STATE            = 0x35e58,
	/*
	 * Get vlink state for the vHCA and the vSwitch. It is up to the firmware to
	 * report correct physical link states when one side is set to disabled and
	 * the other side is down.
	 */
	PSIF_CSR_ADDR_IBPR_P2_VLINK_STATE            = 0x35e60,
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
	PSIF_CSR_ADDR_IBPR_P1_MCAST_GID_UPPER        = 0x35e68,
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
	PSIF_CSR_ADDR_IBPR_P1_MCAST_GID_LOWER        = 0x35e70,
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
	PSIF_CSR_ADDR_IBPR_P1_MCAST_GIDHASH_LID      = 0x35e78,
	/*
	 * This pop register is written after data in p1_mcast_gid_upper,
	 * p1_mcast_gid_lower and p1_mcast_lid is read. Writing this register will
	 * pop the FIFO.
	 */
	PSIF_CSR_ADDR_IBPR_P1_MCAST_POP              = 0x35e80,
	/*
	 * This registers indicate how many multicast packets this port can hold
	 * before starting drop packets.
	 */
	PSIF_CSR_ADDR_IBPR_P1_MCAST_MAX_PKTS         = 0x35e88,
	/*
	 * This register contain the credit for writing to the CSR FIFO for multicast
	 * packets.
	 */
	PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_CREDIT        = 0x35e90,
	/* Write to multicast FIFO. */
	PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_FIFO          = 0x35e98,
	/* Kick multicast FIFO - data is valid in the multicast FIFO. */
	PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_FIFO_KICK     = 0x35ea0,
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
	PSIF_CSR_ADDR_IBPR_P2_MCAST_GID_UPPER        = 0x35ea8,
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
	PSIF_CSR_ADDR_IBPR_P2_MCAST_GID_LOWER        = 0x35eb0,
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
	PSIF_CSR_ADDR_IBPR_P2_MCAST_GIDHASH_LID      = 0x35eb8,
	/*
	 * This pop register is written after data in p2_mcast_gid_upper,
	 * p2_mcast_gid_lower and p2_mcast_lid is read. Writing this register will
	 * pop the FIFO.
	 */
	PSIF_CSR_ADDR_IBPR_P2_MCAST_POP              = 0x35ec0,
	/*
	 * This registers indicate how many multicast packets this port can hold
	 * before starting drop packets.
	 */
	PSIF_CSR_ADDR_IBPR_P2_MCAST_MAX_PKTS         = 0x35ec8,
	/*
	 * This register contain the credit for writing to the CSR FIFO for multicast
	 * packets.
	 */
	PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_CREDIT        = 0x35ed0,
	/* Write to multicast FIFO. */
	PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_FIFO          = 0x35ed8,
	/* Kick multicast FIFO - data is valid in the multicast FIFO. */
	PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_FIFO_KICK     = 0x35ee0,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_IBPR_INT_STATUS                = 0x35ee8,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_IBPR_INT_MASK                  = 0x35ef0,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_IBPR_INT_PRI                   = 0x35ef8,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_IBPR_INT_STATUS_CLEAR          = 0x35f00,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_IBPR_INT_STATUS_CLEAR_KICK     = 0x35f08,
	/* Rx choke register */
	PSIF_CSR_ADDR_IBPR_P1_RX_CHOKE               = 0x35f10,
	/* Rx choke register */
	PSIF_CSR_ADDR_IBPR_P2_RX_CHOKE               = 0x35f18,
	/* Port counter PortXmitDiscards. This is per vSwitch port [32:0]. */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_XMIT_DISCARDS    = 0x35f20,
	/*
	 * Port counter PortRcvSwitchRelayErrors. This register entry is associated
	 * with the corresponding register entry in all other sample register per
	 * port.
	 */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS = 0x35f28,
	/* Vendor Port counter receive packets drop. This is per vSwitch. */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_RCV_PKTS_DROP    = 0x35f30,
	/*
	 * Clear portcounter according to setting in portcounter_clear registers
	 */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTCOUNTER_CLEAR = 0x35f38,
	/* Clear register for the the PortXmitDiscard */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER = 0x35f40,
	/* Clear register for portcounters (single instance) */
	PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER = 0x35f48,
	/* Port counter PortXmitDiscards. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DISCARDS     = 0x35f50,
	/* Port counter Port Receive data. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_DATA          = 0x35f58,
	/* Port counter Port Receive Packets. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_PKTS          = 0x35f60,
	/* Port counter Port Xmit data. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DATA         = 0x35f68,
	/* Port counter Port Xmit Packets. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS         = 0x35f70,
	/*
	 * Port counter counting packets dropped (marked p_error) in Xmit path.
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_DROP    = 0x35f78,
	/*
	 * Clear vhca portcounters according to vhca port counter clear registers.
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_PORTCOUNTER_CLEAR = 0x35f80,
	/*
	 * Register specifying clear on the the PortXmitDiscards counter. This is per
	 * vSwitch port.
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER = 0x35f88,
	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER = 0x35f90,
	/*
	 * Register specifying clear on the the PortRcvPkts counter. This is per vHCA
	 * port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER = 0x35f98,
	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER = 0x35fa0,
	/*
	 * Register specifying clear on the the PortXmitPkts counter. This is per
	 * vHCA port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER = 0x35fa8,
	/*
	 * Register specifying clear on the the PortXmitPkts drop counter. This is
	 * per vHCA port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER = 0x35fb0,
	/* Port counter PortXmitDiscards. This is per vSwitch port [32:0]. */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_XMIT_DISCARDS    = 0x35fb8,
	/*
	 * Port counter PortRcvSwitchRelayErrors. This register entry is associated
	 * with the corresponding register entry in all other sample register per
	 * port.
	 */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS = 0x35fc0,
	/* Vendor Port counter receive packets drop. This is per vSwitch. */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_RCV_PKTS_DROP    = 0x35fc8,
	/*
	 * Clear portcounter according to setting in portcounter_clear registers
	 */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTCOUNTER_CLEAR = 0x35fd0,
	/* Clear register for the the PortXmitDiscard */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER = 0x35fd8,
	/* Clear register for portcounters (single instance) */
	PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER = 0x35fe0,
	/* Port counter PortXmitDiscards. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DISCARDS     = 0x35fe8,
	/* Port counter Port Receive data. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_DATA          = 0x35ff0,
	/* Port counter Port Receive Packets. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_PKTS          = 0x35ff8,
	/* Port counter Port Xmit data. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DATA         = 0x36000,
	/* Port counter Port Xmit Packets. This is per vSwitch port. */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS         = 0x36008,
	/*
	 * Port counter counting packets dropped (marked p_error) in Xmit path.
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_DROP    = 0x36010,
	/*
	 * Clear vhca portcounters according to vhca port counter clear registers.
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_PORTCOUNTER_CLEAR = 0x36018,
	/*
	 * Register specifying clear on the the PortXmitDiscards counter. This is per
	 * vSwitch port.
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER = 0x36020,
	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER = 0x36028,
	/*
	 * Register specifying clear on the the PortRcvPkts counter. This is per vHCA
	 * port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER = 0x36030,
	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER = 0x36038,
	/*
	 * Register specifying clear on the the PortXmitPkts counter. This is per
	 * vHCA port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER = 0x36040,
	/*
	 * Register specifying clear on the the PortXmitPkts drop counter. This is
	 * per vHCA port[32:0].
	 */
	PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER = 0x36048,
	/*
	 * Per vHCA (UF0-32) register. This table contain valid RSS combinations to
	 * calculate for this UF.
	 */
	PSIF_CSR_ADDR_IBPR_RSS_CONTROL               = 0x36050,
	/* 16B Secret key for RSS generation for IPv4. */
	PSIF_CSR_ADDR_IBPR_RSS_IPV4_SECRET_KEY       = 0x36058,
	/* 40B Secret key for RSS generation for IPv6. */
	PSIF_CSR_ADDR_IBPR_RSS_IPV6_SECRET_KEY       = 0x36068,
	/*
	 * Upper 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	PSIF_CSR_ADDR_P1_RCV_GID_UPPER               = 0x36090,
	/*
	 * Lower 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	PSIF_CSR_ADDR_P1_RCV_GID_LOWER               = 0x362a8,
	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
	PSIF_CSR_ADDR_IBPR_P1_GID_FORWARDING_TABLE   = 0x364c0,
	/*
	 * Upper 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	PSIF_CSR_ADDR_P2_RCV_GID_UPPER               = 0x366d8,
	/*
	 * Lower 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	PSIF_CSR_ADDR_P2_RCV_GID_LOWER               = 0x368f0,
	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
	PSIF_CSR_ADDR_IBPR_P2_GID_FORWARDING_TABLE   = 0x36b08,
	/* Per vHCA + EPS-C ethernet MAC address register. */
	PSIF_CSR_ADDR_IBPR_P1_EOIB_MAC1              = 0x36d20,
	/* Per vHCA + EPS-C ethernet MAC address register. */
	PSIF_CSR_ADDR_IBPR_P1_EOIB_MAC2              = 0x36d28,
	/* Per vHCA + EPS-C ethernet MAC address register. */
	PSIF_CSR_ADDR_IBPR_P2_EOIB_MAC1              = 0x36d30,
	/* Per vHCA + EPS-C ethernet MAC address register. */
	PSIF_CSR_ADDR_IBPR_P2_EOIB_MAC2              = 0x36d38,
	/* Per vHCA + EPS-C ethernet control register. */
	PSIF_CSR_ADDR_IBPR_EOIB_CONTROL              = 0x36d40,
	/* Per vHCA + EPS-C DMAC seed register. */
	PSIF_CSR_ADDR_IBPR_DMAC_SEED                 = 0x36d48,
	/* Per vHCA + EPS-C VLAN EtherTypes register. */
	PSIF_CSR_ADDR_IBPR_EOIB_VLAN_ETHERTYPES      = 0x36d50,
	/* Per vHCA PF control register. */
	PSIF_CSR_ADDR_IBPR_EOIB_PF_CONTROL           = 0x36d58,
	/* Common unicast overflow table for all vHCAs. */
	PSIF_CSR_ADDR_IBPR_EOIB_UNICAST_OVERFLOW_TABLE = 0x36d60,
	/* Common multicast table for all VHCAs. */
	PSIF_CSR_ADDR_IBPR_EOIB_MULTICAST_TABLE      = 0x36f60,
	/*
	 * Header split register indicating what EoIB headers to try splitting at.
	 */
	PSIF_CSR_ADDR_IBPR_HDR_SPLIT_EOIB            = 0x37160,
	/*
	 * Header split register indicating what IPoIB headers to try splitting at
	 * for UD transport.
	 */
	PSIF_CSR_ADDR_IBPR_HDR_SPLIT_IPOIB_UD        = 0x37168,
	/* Trace buffer setup */
	PSIF_CSR_ADDR_IBPR_TRACE_BUFFER_SETUP        = 0x37170,
	/* Trace buffer Store qualifier1 */
	PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER1    = 0x37178,
	/* Trace buffer Store qualifier2 */
	PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER2    = 0x37180,
	/* Trace buffer Store qualifier1 mask */
	PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER1_MASK = 0x37188,
	/* Trace buffer Store qualifier2 mask */
	PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER2_MASK = 0x37190,
	/* Trace buffer trigger1 */
	PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER1            = 0x37198,
	/* Trace buffer trigger2 */
	PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER2            = 0x371a0,
	/* Trace buffer trigger1 mask */
	PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER1_MASK       = 0x371a8,
	/* Trace buffer trigger2 mask */
	PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER2_MASK       = 0x371b0,
	/* Start trace buffer */
	PSIF_CSR_ADDR_IBPR_TRACE_START               = 0x371b8,
	/* Stop trace buffer */
	PSIF_CSR_ADDR_IBPR_TRACE_STOP                = 0x371c0,
	/* Trace buffer status */
	PSIF_CSR_ADDR_IBPR_TRACE_BUFFER_STATUS       = 0x371c8,
	/*
	 * Per vHCA + EPS-C VID table. There are 64 entries per UF. 4096b * 34 (64x34
	 * entries).
	 */
	PSIF_CSR_ADDR_IBPR_EOIB_VID_TABLE            = 0x371d0,
	/* Trace buffer */
	PSIF_CSR_ADDR_IBPR_TRACE_BUFFER              = 0x3b5d0,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_SW                = 0x7b5d0,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_SW_1              = 0x7b5d8,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_SW_2              = 0x7b5e0,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_HW                = 0x7b5e8,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_HW_1              = 0x7b5f0,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_HW_2              = 0x7b5f8,
	/*
	 * SQS list table is used to program the list number to associate with UF.
	 * Address is list number and data is UF. A single UF can allocate multiple
	 * lists.
	 */
	PSIF_CSR_ADDR_SQS_SQS_LIST_TABLE             = 0x7b600,
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	PSIF_CSR_ADDR_SQS_UF_CONTROL                 = 0x7b830,
	/* Starts operation defined in uf_control. */
	PSIF_CSR_ADDR_SQS_UF_CONTROL_KICK            = 0x7b838,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_SQS_INT_STATUS                 = 0x7b840,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_SQS_INT_MASK                   = 0x7b848,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_SQS_INT_PRI                    = 0x7b850,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_SQS_INT_STATUS_CLEAR           = 0x7b858,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_SQS_INT_STATUS_CLEAR_KICK      = 0x7b860,
	/* Address: SQS list number. Flush status. */
	PSIF_CSR_ADDR_SQS_SQS_LIST_STATUS0           = 0x7b868,
	/*
	 * Address: SQS list number. Set when the PCIe response has error on the
	 * descriptor read.
	 */
	PSIF_CSR_ADDR_SQS_SQS_LIST_STATUS1           = 0x7ba98,
	/*
	 * Hash mask and shift control. XOR width is based on the log 2 of number of
	 * list for that UF.
	 */
	PSIF_CSR_ADDR_SQS_HASH_CTRL                  = 0x7bcc8,
	/*
	 * Disble Atomic cmp and swap for the QP next pointer null check. If set,
	 * hardware generates read-then-write to update the QP next pointer.
	 */
	PSIF_CSR_ADDR_SQS_ATOMIC_DISABLE             = 0x7bce8,
	/* Number of burst read for the send queue element per QP. */
	PSIF_CSR_ADDR_SQS_SQ_BURST_READ_SIZE         = 0x7bcf0,
	/* Number of DB count from CBU. */
	PSIF_CSR_ADDR_SQS_CBU_DB_CNT                 = 0x7bcf8,
	/* Number of DB count from ERR. */
	PSIF_CSR_ADDR_SQS_ERR_DB_CNT                 = 0x7bd00,
	/* Number of LLQ push. */
	PSIF_CSR_ADDR_SQS_LLQ_PUSH_CNT               = 0x7bd08,
	/* Number of LLQ pop. */
	PSIF_CSR_ADDR_SQS_LLQ_POP_CNT                = 0x7bd10,
	/* Number of LLQ peek. */
	PSIF_CSR_ADDR_SQS_LLQ_PEEK_CNT               = 0x7bd18,
	/* Number of Send Queue read. */
	PSIF_CSR_ADDR_SQS_SQ_RD_CNT                  = 0x7bd20,
	/* Number of Descriptor read. */
	PSIF_CSR_ADDR_SQS_DSCR_REQ_CNT               = 0x7bd28,
	/* Number of Descriptor read response. */
	PSIF_CSR_ADDR_SQS_DSCR_RSP_CNT               = 0x7bd30,
	/* Number of Atomic request. */
	PSIF_CSR_ADDR_SQS_ATM_REQ_CNT                = 0x7bd38,
	/* Number of Atomic response. */
	PSIF_CSR_ADDR_SQS_ATM_RSP_CNT                = 0x7bd40,
	/* Number of QP insert to the SQS list. */
	PSIF_CSR_ADDR_SQS_PUSH_SQS_LIST_CNT          = 0x7bd48,
	/* Number of clock to wait before writting to the ring. */
	PSIF_CSR_ADDR_SQS_RING_TIMER                 = 0x7bd50,
	/* Set to write 64B for the send queue hardware descriptor. */
	PSIF_CSR_ADDR_SQS_PADDED_SQ_DSCR_HW          = 0x7bd58,
	/* Set to write 64B for the PIO ring buffer. */
	PSIF_CSR_ADDR_SQS_PADDED_RING_BUFFER         = 0x7bd60,
	/* ECC error control */
	PSIF_CSR_ADDR_SQS_ECC_ERR_CTRL               = 0x7bd68,
	/* ECC status */
	PSIF_CSR_ADDR_SQS_ECC_ERR_STATUS             = 0x7bd70,
	/* ECC status */
	PSIF_CSR_ADDR_SQS_ECC_ERR_STATUS_CLEAR       = 0x7bd78,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_RING              = 0x7bd80,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_RING_1            = 0x7bd88,
	PSIF_CSR_ADDR_BASE_ADDR_SQ_RING_2            = 0x7bd90,
	/* Read/Write for the PIO ring buffer write pointer */
	PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_WR_PTR     = 0x7bd98,
	/*
	 * Address: SQS list number. Set when the PCIe response has error on the
	 * descriptor read.
	 */
	PSIF_CSR_ADDR_SQS_SQS_LIST_ERR_STATUS        = 0x7bda0,
	/* Read/Write for the PIO ring buffer read pointer */
	PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_RD_PTR     = 0x7bfd0,
	/* Read/Write for the PIO ring buffer pending count */
	PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_PENDING_CNT = 0x7bfd8,
	/* Interrupt status register. 1b per source (1 = int triggered). */
	PSIF_CSR_ADDR_ERR_INT_STATUS                 = 0x7bfe0,
	/* Interrupt mask register. 1b per source (1 = masked). */
	PSIF_CSR_ADDR_ERR_INT_MASK                   = 0x7bfe8,
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	PSIF_CSR_ADDR_ERR_INT_PRI                    = 0x7bff0,
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	PSIF_CSR_ADDR_ERR_INT_STATUS_CLEAR           = 0x7bff8,
	/* Trigger the int_status clear operation. */
	PSIF_CSR_ADDR_ERR_INT_STATUS_CLEAR_KICK      = 0x7c000,
	/* Async event FIFO - status portion. */
	PSIF_CSR_ADDR_ERR_ASYNC_EVENT_STATUS         = 0x7c008,
	/* Async event FIFO - affiliated data portion. */
	PSIF_CSR_ADDR_ERR_ASYNC_EVENT_AFFILIATED     = 0x7c010,
	/* This pop register is written after async event register is read. */
	PSIF_CSR_ADDR_ERR_ASYNC_EVENT_POP            = 0x7c018,
	/* Error type the host_counter is counting. */
	PSIF_CSR_ADDR_ERR_HOST_ERROR_TYPE            = 0x7c020,
	/*
	 * Counts how many times error type defined in host_error_type register is
	 * received by tsu_err. Sticky at max value and then needs to be cleared.
	 */
	PSIF_CSR_ADDR_ERR_HOST_COUNTER               = 0x7c028,
	/* Clears host_counter. */
	PSIF_CSR_ADDR_ERR_CLEAR_HOST_COUNTER         = 0x7c030,
	/* Error type the cmpl_counter is counting. */
	PSIF_CSR_ADDR_ERR_CMPL_ERROR_TYPE            = 0x7c038,
	/*
	 * Counts how many times error type defined in cmpl_error_type register is
	 * received by tsu_err. Sticky at max value and then needs to be cleared.
	 */
	PSIF_CSR_ADDR_ERR_CMPL_COUNTER               = 0x7c040,
	/* Clears. */
	PSIF_CSR_ADDR_ERR_CLEAR_CMPL_COUNTER         = 0x7c048,
	/* Clears the diag RAM for the UF specified. */
	PSIF_CSR_ADDR_ERR_CLEAR_DIAG_RAM             = 0x7c050,
	/* Clears the diag RAM - per UF. */
	PSIF_CSR_ADDR_ERR_CLEAR_DIAG_RAM_KICK        = 0x7c058,
	/* Read the address for the UF. */
	PSIF_CSR_ADDR_ERR_DIAG_RAM_ADDR              = 0x7c060,
	/* Set up which RAM entry to read. */
	PSIF_CSR_ADDR_ERR_DIAG_RAM_READ_ADDR         = 0x7c068,
	/*
	 * Kick - reads the data from the RAM entry specified in diag_ram_read_addr
	 * and adds it to registers which can be read.
	 */
	PSIF_CSR_ADDR_ERR_DIAG_RAM_READ_KICK         = 0x7c070,
	/* Time to wait before starting send queue mode. */
	PSIF_CSR_ADDR_ERR_FENCE_TIME_TO_WAIT         = 0x7c078,
	/* Data from the diagnostic RAM. */
	PSIF_CSR_ADDR_ERR_DIAG_RAM_DATA              = 0x7c080,
	/* Clear all counters having the bit set in the mask. */
	PSIF_CSR_ADDR_ERR_CLEAR_ERROR_COUNTERS       = 0x7c0b0,
	/* Clear all counters having the bit set in the mask. */
	PSIF_CSR_ADDR_ERR_CLEAR_ERROR_COUNTERS_KICK  = 0x7c0b8,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_0            = 0x7c0c0,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_1            = 0x7c0c8,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_2            = 0x7c0d0,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_3            = 0x7c0d8,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_4            = 0x7c0e0,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_5            = 0x7c0e8,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_6            = 0x7c0f0,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_7            = 0x7c0f8,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_8            = 0x7c100,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_9            = 0x7c108,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_10           = 0x7c110,
	/* Error counters. */
	PSIF_CSR_ADDR_ERR_ERROR_COUNTER_11           = 0x7c118,
	PSIF_CSR_ADDR_IBU_P1_CNT1US_CNT124US         = 0x7c120,
	PSIF_CSR_ADDR_IBU_P1_CNT2MS                  = 0x7c128,
	PSIF_CSR_ADDR_IBU_P1_CNT10MS                 = 0x7c130,
	PSIF_CSR_ADDR_IBU_P1_CNT100MS                = 0x7c138,
	PSIF_CSR_ADDR_IBU_P1_CNT150MS                = 0x7c140,
	PSIF_CSR_ADDR_IBU_P1_CNT400MS                = 0x7c148,
	PSIF_CSR_ADDR_IBU_P1_SKP_TO_CNT              = 0x7c150,
	PSIF_CSR_ADDR_IBU_P1_TGT_VAL                 = 0x7c158,
	PSIF_CSR_ADDR_IBU_P1_PHY_VCONFIG             = 0x7c160,
	PSIF_CSR_ADDR_IBU_P1_PHY_DISP_ERROR_CNT      = 0x7c168,
	PSIF_CSR_ADDR_IBU_P1_PHY_CODE_ERROR_CNT      = 0x7c170,
	PSIF_CSR_ADDR_IBU_P1_PHY_EVENT_LOG           = 0x7c178,
	PSIF_CSR_ADDR_IBU_P1_PORT_TRAIN_FSM          = 0x7c180,
	PSIF_CSR_ADDR_IBU_P1_PHY_TRAIN_SMTIMER_VS1   = 0x7c188,
	PSIF_CSR_ADDR_IBU_P1_MASK                    = 0x7c190,
	PSIF_CSR_ADDR_IBU_P1_STATUS                  = 0x7c198,
	PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_ENABLED      = 0x7c1a0,
	PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_SUPPORTED    = 0x7c1a8,
	PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_ACTIVE       = 0x7c1b0,
	PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_SUPPORTED    = 0x7c1b8,
	PSIF_CSR_ADDR_IBU_P1_PORT_PHYSICAL_STATE     = 0x7c1c0,
	PSIF_CSR_ADDR_IBU_P1_LINK_DOWN_DEFAULT_STATE = 0x7c1c8,
	PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_ACTIVE       = 0x7c1d0,
	PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_ENABLED      = 0x7c1d8,
	PSIF_CSR_ADDR_IBU_P1_PCPHY_CNT_RST           = 0x7c1e0,
	PSIF_CSR_ADDR_IBU_P1_PCPHY_CNT_LOAD          = 0x7c1e8,
	PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT          = 0x7c1f0,
	PSIF_CSR_ADDR_IBU_P1_PCLINK_ERR_REC_CNT      = 0x7c1f8,
	PSIF_CSR_ADDR_IBU_P1_PCLINK_DOWNED_CNT       = 0x7c200,
	PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE0    = 0x7c208,
	PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE1    = 0x7c210,
	PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE2    = 0x7c218,
	PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE3    = 0x7c220,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT0_COUNTER    = 0x7c228,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT1_COUNTER    = 0x7c230,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT2_COUNTER    = 0x7c238,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT3_COUNTER    = 0x7c240,
	PSIF_CSR_ADDR_IBU_P1_PHY_ALIGN_ERROR_CNT     = 0x7c248,
	PSIF_CSR_ADDR_IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT = 0x7c250,
	PSIF_CSR_ADDR_IBU_P1_PHY_PAD_ERROR_CNT       = 0x7c258,
	PSIF_CSR_ADDR_IBU_P1_PHY_EDR_FDR_CONFIG0     = 0x7c260,
	PSIF_CSR_ADDR_IBU_P1_PHY_EDR_FDR_CONFIG1     = 0x7c268,
	PSIF_CSR_ADDR_IBU_P1_PHY_LEAKY_BKT_THRSH     = 0x7c270,
	PSIF_CSR_ADDR_IBU_P1_RCV_TS3_STATUS_LOW      = 0x7c278,
	PSIF_CSR_ADDR_IBU_P1_RCV_TS3_STATUS_HIGH     = 0x7c280,
	PSIF_CSR_ADDR_IBU_P1_GUID0                   = 0x7c288,
	PSIF_CSR_ADDR_IBU_P1_GUID1                   = 0x7c290,
	PSIF_CSR_ADDR_IBU_P1_PNUM                    = 0x7c298,
	PSIF_CSR_ADDR_IBU_P1_CNT4MS                  = 0x7c2a0,
	PSIF_CSR_ADDR_IBU_P1_CNT36MS                 = 0x7c2a8,
	PSIF_CSR_ADDR_IBU_P1_PHY_TS3_CONFIG          = 0x7c2b0,
	PSIF_CSR_ADDR_IBU_P1_DDS_WINDOW_START        = 0x7c2b8,
	PSIF_CSR_ADDR_IBU_P1_DDS_WINDOW_END          = 0x7c2c0,
	PSIF_CSR_ADDR_IBU_P1_DDS_DEFAULT_WINDOW_END  = 0x7c2c8,
	PSIF_CSR_ADDR_IBU_P1_RX_TS3DDS_STATUS        = 0x7c2d0,
	PSIF_CSR_ADDR_IBU_P1_TX_TS3DDS_STATUS        = 0x7c2d8,
	PSIF_CSR_ADDR_IBU_P1_CNT16MS                 = 0x7c2e0,
	PSIF_CSR_ADDR_IBU_P1_CONF_TEST4MS_SCT        = 0x7c2e8,
	PSIF_CSR_ADDR_IBU_P1_CONF_TEST16MS_SCT       = 0x7c2f0,
	PSIF_CSR_ADDR_IBU_P1_LOCAL_ADDTEST_LIMIT     = 0x7c2f8,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_ADDTEST_LIMIT    = 0x7c300,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT4_COUNTER    = 0x7c308,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT5_COUNTER    = 0x7c310,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT6_COUNTER    = 0x7c318,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT7_COUNTER    = 0x7c320,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT8_COUNTER    = 0x7c328,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT9_COUNTER    = 0x7c330,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT10_COUNTER   = 0x7c338,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT11_COUNTER   = 0x7c340,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT12_COUNTER   = 0x7c348,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT13_COUNTER   = 0x7c350,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT14_COUNTER   = 0x7c358,
	PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT15_COUNTER   = 0x7c360,
	PSIF_CSR_ADDR_IBU_P1_CONF_TEST_LANE_ERROR_LIMIT = 0x7c368,
	PSIF_CSR_ADDR_IBU_P1_CONF_TEST_IDLE_LIMIT    = 0x7c370,
	PSIF_CSR_ADDR_IBU_P1_CONF_TEST2MS_SCT        = 0x7c378,
	PSIF_CSR_ADDR_IBU_P1_CNT100_MS_HBR           = 0x7c380,
	PSIF_CSR_ADDR_IBU_P1_PMAEQULANE0_STATUS      = 0x7c388,
	PSIF_CSR_ADDR_IBU_P1_PMAEQULANE1_STATUS      = 0x7c390,
	PSIF_CSR_ADDR_IBU_P1_PMAEQULANE2_STATUS      = 0x7c398,
	PSIF_CSR_ADDR_IBU_P1_PMAEQULANE3_STATUS      = 0x7c3a0,
	PSIF_CSR_ADDR_IBU_P1_PMADDSLANE0_STATUS      = 0x7c3a8,
	PSIF_CSR_ADDR_IBU_P1_PMADDSLANE1_STATUS      = 0x7c3b0,
	PSIF_CSR_ADDR_IBU_P1_PMADDSLANE2_STATUS      = 0x7c3b8,
	PSIF_CSR_ADDR_IBU_P1_PMADDSLANE3_STATUS      = 0x7c3c0,
	PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR0           = 0x7c3c8,
	PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR1           = 0x7c3d0,
	PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR2           = 0x7c3d8,
	PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR3           = 0x7c3e0,
	PSIF_CSR_ADDR_IBU_P1_PHY_BLK_TYPE_ERR        = 0x7c3e8,
	PSIF_CSR_ADDR_IBU_P1_PHY_BLK_EOP_ERR         = 0x7c3f0,
	PSIF_CSR_ADDR_IBU_P1_PHY_CIN_PKT_ERR         = 0x7c3f8,
	PSIF_CSR_ADDR_IBU_P1_PHY_SYN_HDR_ERR         = 0x7c400,
	PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR0           = 0x7c408,
	PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR1           = 0x7c410,
	PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR2           = 0x7c418,
	PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR3           = 0x7c420,
	PSIF_CSR_ADDR_IBU_P1_PHY_DESKEW_STATUS       = 0x7c428,
	PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR0         = 0x7c430,
	PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR1         = 0x7c438,
	PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR2         = 0x7c440,
	PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR3         = 0x7c448,
	PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR0         = 0x7c450,
	PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR1         = 0x7c458,
	PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR2         = 0x7c460,
	PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR3         = 0x7c468,
	PSIF_CSR_ADDR_IBU_P1_PHY_SMSTATUS            = 0x7c470,
	PSIF_CSR_ADDR_IBU_P1_PHY_TS3_NEGOTIATED_STATUS = 0x7c478,
	PSIF_CSR_ADDR_IBU_P1_PHY_TEST                = 0x7c480,
	PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG0  = 0x7c488,
	PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG1  = 0x7c490,
	PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG2  = 0x7c498,
	PSIF_CSR_ADDR_IBU_P1_EDR_FDR_TX_STATUS_REG0  = 0x7c4a0,
	PSIF_CSR_ADDR_IBU_P1_INT_PRIORITY            = 0x7c4a8,
	PSIF_CSR_ADDR_IBU_P1_INT_FATAL               = 0x7c4b0,
	PSIF_CSR_ADDR_IBU_P1_LINK_ROUND_TRIP_LATENCY = 0x7c4b8,
	PSIF_CSR_ADDR_IBU_P1_PHY_FORCE_LEGACY_MODE   = 0x7c4c0,
	PSIF_CSR_ADDR_IBU_P1_LID                     = 0x7c4c8,
	PSIF_CSR_ADDR_IBU_P1_LMC                     = 0x7c4d0,
	PSIF_CSR_ADDR_IBU_P1_PORT_STATE              = 0x7c4d8,
	PSIF_CSR_ADDR_IBU_P1_VLCAP                   = 0x7c4e0,
	PSIF_CSR_ADDR_IBU_P1_NEIGHBOR_MTU            = 0x7c4e8,
	PSIF_CSR_ADDR_IBU_P1_VLHIGH_LIMIT            = 0x7c4f0,
	PSIF_CSR_ADDR_IBU_P1_VLARBITRATION_HIGH_CAP  = 0x7c4f8,
	PSIF_CSR_ADDR_IBU_P1_VLARBITRATION_LOW_CAP   = 0x7c500,
	PSIF_CSR_ADDR_IBU_P1_MTUCAP                  = 0x7c508,
	PSIF_CSR_ADDR_IBU_P1_OPERATIONAL_VLS         = 0x7c510,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_ERROR        = 0x7c518,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS = 0x7c520,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_DISCARDS    = 0x7c528,
	PSIF_CSR_ADDR_IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS = 0x7c530,
	PSIF_CSR_ADDR_IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS = 0x7c538,
	PSIF_CSR_ADDR_IBU_P1_PCVL15_DROPPED          = 0x7c540,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT        = 0x7c548,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_DATA_LSQW   = 0x7c550,
	PSIF_CSR_ADDR_IBU_P1_LINK_ERROR_CHECK_ENABLE = 0x7c558,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_DATA_LSQW    = 0x7c560,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_PKTS_LSQW   = 0x7c568,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_PKTS_LSQW    = 0x7c570,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_UCXMIT_PKTS_LSQW = 0x7c578,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_MCXMIT_PKTS_LSQW = 0x7c580,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_UCRCV_PKTS_LSQW  = 0x7c588,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_MCRCV_PKTS_LSQW  = 0x7c590,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL0    = 0x7c598,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL1    = 0x7c5a0,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL2    = 0x7c5a8,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL3    = 0x7c5b0,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL4    = 0x7c5b8,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL5    = 0x7c5c0,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL6    = 0x7c5c8,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL7    = 0x7c5d0,
	PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL15   = 0x7c5d8,
	PSIF_CSR_ADDR_IBU_P1_PCRX_LINK_CNT_RST       = 0x7c5e0,
	PSIF_CSR_ADDR_IBU_P1_PCRX_LINK_CNT_LOAD      = 0x7c5e8,
	PSIF_CSR_ADDR_IBU_P1_LOCAL_PHY_ERRORS        = 0x7c5f0,
	PSIF_CSR_ADDR_IBU_P1_OVERRUN_ERRORS          = 0x7c5f8,
	PSIF_CSR_ADDR_IBU_P1_PSLINK_DLID             = 0x7c600,
	PSIF_CSR_ADDR_IBU_P1_PSTICK                  = 0x7c608,
	PSIF_CSR_ADDR_IBU_P1_PSSTATUS                = 0x7c610,
	PSIF_CSR_ADDR_IBU_P1_PSSTART_DELAY           = 0x7c618,
	PSIF_CSR_ADDR_IBU_P1_PSINTERVAL              = 0x7c620,
	PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL0              = 0x7c628,
	PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL1              = 0x7c630,
	PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL2              = 0x7c638,
	PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL3              = 0x7c640,
	PSIF_CSR_ADDR_IBU_P1_PSCNT0                  = 0x7c648,
	PSIF_CSR_ADDR_IBU_P1_PSCNT1                  = 0x7c650,
	PSIF_CSR_ADDR_IBU_P1_PSCNT2                  = 0x7c658,
	PSIF_CSR_ADDR_IBU_P1_PSCNT3                  = 0x7c660,
	PSIF_CSR_ADDR_IBU_P1_PSINIT_SAMPLING         = 0x7c668,
	PSIF_CSR_ADDR_IBU_P1_PSCNT_LOAD              = 0x7c670,
	PSIF_CSR_ADDR_IBU_P1_PORT_STATE_CHANGE       = 0x7c678,
	PSIF_CSR_ADDR_IBU_P1_TRAP_REGISTER           = 0x7c680,
	PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG0           = 0x7c688,
	PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG1           = 0x7c690,
	PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG2           = 0x7c698,
	PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL1_0    = 0x7c6a0,
	PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL3_2    = 0x7c6a8,
	PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL5_4    = 0x7c6b0,
	PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL7_6    = 0x7c6b8,
	PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL1_0    = 0x7c6c0,
	PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL3_2    = 0x7c6c8,
	PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL5_4    = 0x7c6d0,
	PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL7_6    = 0x7c6d8,
	PSIF_CSR_ADDR_IBU_P1_PCTX_LINK_CNT_RST       = 0x7c6e0,
	PSIF_CSR_ADDR_IBU_P1_PCTX_LINK_CNT_LOAD      = 0x7c6e8,
	PSIF_CSR_ADDR_IBU_P1_PSCNT_WIDTH             = 0x7c6f0,
	PSIF_CSR_ADDR_IBU_P1_PSCNT_MASK              = 0x7c6f8,
	PSIF_CSR_ADDR_IBU_P1_PCICRC_RCV_ERRORS       = 0x7c700,
	PSIF_CSR_ADDR_IBU_P1_PCVCRC_RCV_ERRORS       = 0x7c708,
	PSIF_CSR_ADDR_IBU_P1_PCLEN_RCV_ERRORS        = 0x7c710,
	PSIF_CSR_ADDR_IBU_P1_PCDLID_RCV_ERRORS       = 0x7c718,
	PSIF_CSR_ADDR_IBU_P1_PCRCV_FCLEN_ERRORS      = 0x7c720,
	PSIF_CSR_ADDR_IBU_P1_PCRCV_FCVL_ERRORS       = 0x7c728,
	PSIF_CSR_ADDR_IBU_P1_PCRCV_FCCRC_ERRORS      = 0x7c730,
	PSIF_CSR_ADDR_IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS = 0x7c738,
	PSIF_CSR_ADDR_IBU_P1_PCMAL_FORMED_ERRORS     = 0x7c740,
	PSIF_CSR_ADDR_IBU_P1_PCBUF_OVER_ERRORS       = 0x7c748,
	PSIF_CSR_ADDR_IBU_P1_PCVLMAP_ERRORS          = 0x7c750,
	PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL1_VL0 = 0x7c758,
	PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL3_VL2 = 0x7c760,
	PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL5_VL4 = 0x7c768,
	PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL7_VL6 = 0x7c770,
	PSIF_CSR_ADDR_IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT = 0x7c778,
	PSIF_CSR_ADDR_IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT = 0x7c780,
	PSIF_CSR_ADDR_IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT = 0x7c788,
	PSIF_CSR_ADDR_IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT = 0x7c790,
	PSIF_CSR_ADDR_IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT = 0x7c798,
	PSIF_CSR_ADDR_IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT = 0x7c7a0,
	PSIF_CSR_ADDR_IBU_P1_PCECCENA_ERR            = 0x7c7a8,
	PSIF_CSR_ADDR_IBU_P1_PCTX_ECC_COR_ERR_CNT    = 0x7c7b0,
	PSIF_CSR_ADDR_IBU_P1_PCTX_ECC_UNC_ERR_CNT    = 0x7c7b8,
	PSIF_CSR_ADDR_IBU_P1_TX_SRAMSTATUS           = 0x7c7c0,
	PSIF_CSR_ADDR_IBU_P1_TX_CACHE_STATUS         = 0x7c7c8,
	PSIF_CSR_ADDR_IBU_P1_TX_DEBUG                = 0x7c7d0,
	PSIF_CSR_ADDR_IBU_P1_RX_VL07_SRAMSTATUS      = 0x7c7d8,
	PSIF_CSR_ADDR_IBU_P1_RX_VL15_SRAMSTATUS      = 0x7c7e0,
	PSIF_CSR_ADDR_IBU_P1_LOOPSRAMSTATUS          = 0x7c7e8,
	PSIF_CSR_ADDR_IBU_P1_RX_DEBUG                = 0x7c7f0,
	PSIF_CSR_ADDR_IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS = 0x7c7f8,
	PSIF_CSR_ADDR_IBU_P1_VLARB_HI_PRI_TABLE      = 0x7c800,
	PSIF_CSR_ADDR_IBU_P1_VLARB_LO_PRI_TABLE      = 0x7c850,
	PSIF_CSR_ADDR_IBU_P1_TX_TBSVL10              = 0x7c8a0,
	PSIF_CSR_ADDR_IBU_P1_TX_TBSVL32              = 0x7c8a8,
	PSIF_CSR_ADDR_IBU_P1_TX_TBSVL54              = 0x7c8b0,
	PSIF_CSR_ADDR_IBU_P1_TX_TBSVL76              = 0x7c8b8,
	PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL10          = 0x7c8c0,
	PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL32          = 0x7c8c8,
	PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL54          = 0x7c8d0,
	PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL76          = 0x7c8d8,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_ENABLE = 0x7c8e0,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_MODE   = 0x7c8e8,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_RDY    = 0x7c8f0,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_TIMER  = 0x7c8f8,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_START  = 0x7c900,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA1  = 0x7c908,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA2  = 0x7c910,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA3  = 0x7c918,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA4  = 0x7c920,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA5  = 0x7c928,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA6  = 0x7c930,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA7  = 0x7c938,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA8  = 0x7c940,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA9  = 0x7c948,
	PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA10 = 0x7c950,
	PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL1_0      = 0x7c958,
	PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL3_2      = 0x7c960,
	PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL5_4      = 0x7c968,
	PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL7_6      = 0x7c970,
	PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE0       = 0x7c978,
	PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE1       = 0x7c980,
	PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE2       = 0x7c988,
	PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE3       = 0x7c990,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE0          = 0x7c998,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE1          = 0x7c9a0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE2          = 0x7c9a8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE3          = 0x7c9b0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE0          = 0x7c9b8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE1          = 0x7c9c0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE2          = 0x7c9c8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE3          = 0x7c9d0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE0          = 0x7c9d8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE1          = 0x7c9e0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE2          = 0x7c9e8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE3          = 0x7c9f0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE0          = 0x7c9f8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE1          = 0x7ca00,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE2          = 0x7ca08,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE3          = 0x7ca10,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE0          = 0x7ca18,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE1          = 0x7ca20,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE2          = 0x7ca28,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE3          = 0x7ca30,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE0          = 0x7ca38,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE1          = 0x7ca40,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE2          = 0x7ca48,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE3          = 0x7ca50,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE0          = 0x7ca58,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE1          = 0x7ca60,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE2          = 0x7ca68,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE3          = 0x7ca70,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE0          = 0x7ca78,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE1          = 0x7ca80,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE2          = 0x7ca88,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE3          = 0x7ca90,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE0          = 0x7ca98,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE1          = 0x7caa0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE2          = 0x7caa8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE3          = 0x7cab0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE0          = 0x7cab8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE1          = 0x7cac0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE2          = 0x7cac8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE3          = 0x7cad0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE0         = 0x7cad8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE1         = 0x7cae0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE2         = 0x7cae8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE3         = 0x7caf0,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE0         = 0x7caf8,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE1         = 0x7cb00,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE2         = 0x7cb08,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE3         = 0x7cb10,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE0         = 0x7cb18,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE1         = 0x7cb20,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE2         = 0x7cb28,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE3         = 0x7cb30,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE0         = 0x7cb38,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE1         = 0x7cb40,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE2         = 0x7cb48,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE3         = 0x7cb50,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE0         = 0x7cb58,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE1         = 0x7cb60,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE2         = 0x7cb68,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE3         = 0x7cb70,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE0         = 0x7cb78,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE1         = 0x7cb80,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE2         = 0x7cb88,
	PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE3         = 0x7cb90,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE0     = 0x7cb98,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE1     = 0x7cba0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE2     = 0x7cba8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE3     = 0x7cbb0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE0     = 0x7cbb8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE1     = 0x7cbc0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE2     = 0x7cbc8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE3     = 0x7cbd0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE0     = 0x7cbd8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE1     = 0x7cbe0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE2     = 0x7cbe8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE3     = 0x7cbf0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE0     = 0x7cbf8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE1     = 0x7cc00,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE2     = 0x7cc08,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE3     = 0x7cc10,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE0     = 0x7cc18,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE1     = 0x7cc20,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE2     = 0x7cc28,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE3     = 0x7cc30,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE0     = 0x7cc38,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE1     = 0x7cc40,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE2     = 0x7cc48,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE3     = 0x7cc50,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE0     = 0x7cc58,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE1     = 0x7cc60,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE2     = 0x7cc68,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE3     = 0x7cc70,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE0     = 0x7cc78,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE1     = 0x7cc80,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE2     = 0x7cc88,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE3     = 0x7cc90,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE0     = 0x7cc98,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE1     = 0x7cca0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE2     = 0x7cca8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE3     = 0x7ccb0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE0     = 0x7ccb8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE1     = 0x7ccc0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE2     = 0x7ccc8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE3     = 0x7ccd0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE0    = 0x7ccd8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE1    = 0x7cce0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE2    = 0x7cce8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE3    = 0x7ccf0,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE0    = 0x7ccf8,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE1    = 0x7cd00,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE2    = 0x7cd08,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE3    = 0x7cd10,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE0    = 0x7cd18,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE1    = 0x7cd20,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE2    = 0x7cd28,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE3    = 0x7cd30,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE0    = 0x7cd38,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE1    = 0x7cd40,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE2    = 0x7cd48,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE3    = 0x7cd50,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE0    = 0x7cd58,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE1    = 0x7cd60,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE2    = 0x7cd68,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE3    = 0x7cd70,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE0    = 0x7cd78,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE1    = 0x7cd80,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE2    = 0x7cd88,
	PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE3    = 0x7cd90,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS0             = 0x7cd98,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS1             = 0x7cda0,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS2             = 0x7cda8,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS3             = 0x7cdb0,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS4             = 0x7cdb8,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS5             = 0x7cdc0,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS6             = 0x7cdc8,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS7             = 0x7cdd0,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS8             = 0x7cdd8,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS9             = 0x7cde0,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS10            = 0x7cde8,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS11            = 0x7cdf0,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS12            = 0x7cdf8,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS13            = 0x7ce00,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS14            = 0x7ce08,
	PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS15            = 0x7ce10,
	PSIF_CSR_ADDR_IBU_P1_BAD_CSR                 = 0x7ce18,
	PSIF_CSR_ADDR_IBU_P1_CETUS_CH0_REG15_CSR     = 0x7ce20,
	PSIF_CSR_ADDR_IBU_P1_CETUS_CH0_REG102_CSR    = 0x7ce28,
	PSIF_CSR_ADDR_IBU_P1_CETUS_CH1_REG15_CSR     = 0x7ce30,
	PSIF_CSR_ADDR_IBU_P1_CETUS_CH1_REG102_CSR    = 0x7ce38,
	PSIF_CSR_ADDR_IBU_P1_CETUS_PLLA_REG24_CSR    = 0x7ce40,
	PSIF_CSR_ADDR_IBU_P1_CETUS_CH2_REG15_CSR     = 0x7ce48,
	PSIF_CSR_ADDR_IBU_P1_CETUS_CH2_REG102_CSR    = 0x7ce50,
	PSIF_CSR_ADDR_IBU_P1_CETUS_CH3_REG15_CSR     = 0x7ce58,
	PSIF_CSR_ADDR_IBU_P1_CETUS_CH3_REG102_CSR    = 0x7ce60,
	PSIF_CSR_ADDR_IBU_P1_CETUS_PLLB_REG24_CSR    = 0x7ce68,
	PSIF_CSR_ADDR_IBU_P1_PMA_RESET_CSR           = 0x7ce70,
	PSIF_CSR_ADDR_IBU_P1_PMA_PLLA_CSR            = 0x7ce78,
	PSIF_CSR_ADDR_IBU_P1_PMA_PLLB_CSR            = 0x7ce80,
	PSIF_CSR_ADDR_IBU_P1_PMA_CMODE_CSR           = 0x7ce88,
	PSIF_CSR_ADDR_IBU_P1_PMA_LB_CSR              = 0x7ce90,
	PSIF_CSR_ADDR_IBU_P1_PMA_PWR_CSR             = 0x7ce98,
	PSIF_CSR_ADDR_IBU_P1_PMA_STATUS0_CSR         = 0x7cea0,
	PSIF_CSR_ADDR_IBU_P1_PMA_STATUS1_CSR         = 0x7cea8,
	PSIF_CSR_ADDR_IBU_P1_PMA_STATUS2_CSR         = 0x7ceb0,
	PSIF_CSR_ADDR_IBU_P1_PMA_TXWCLK0_CNT_CSR     = 0x7ceb8,
	PSIF_CSR_ADDR_IBU_P1_PMA_TXWCLK0_CNT_VAL     = 0x7cec0,
	PSIF_CSR_ADDR_IBU_P1_PMA_RXWCLK0_CNT_CSR     = 0x7cec8,
	PSIF_CSR_ADDR_IBU_P1_PMA_RXWCLK0_CNT_VAL     = 0x7ced0,
	PSIF_CSR_ADDR_IBU_P1_PMA_IRQ_STATUS_CSR      = 0x7ced8,
	PSIF_CSR_ADDR_IBU_P1_PMA_IRQ_MASK_CSR        = 0x7cee0,
	PSIF_CSR_ADDR_IBU_P1_PMA_BAD_CSR             = 0x7cee8,
	PSIF_CSR_ADDR_IBU_P2_CNT1US_CNT124US         = 0x7cef0,
	PSIF_CSR_ADDR_IBU_P2_CNT2MS                  = 0x7cef8,
	PSIF_CSR_ADDR_IBU_P2_CNT10MS                 = 0x7cf00,
	PSIF_CSR_ADDR_IBU_P2_CNT100MS                = 0x7cf08,
	PSIF_CSR_ADDR_IBU_P2_CNT150MS                = 0x7cf10,
	PSIF_CSR_ADDR_IBU_P2_CNT400MS                = 0x7cf18,
	PSIF_CSR_ADDR_IBU_P2_SKP_TO_CNT              = 0x7cf20,
	PSIF_CSR_ADDR_IBU_P2_TGT_VAL                 = 0x7cf28,
	PSIF_CSR_ADDR_IBU_P2_PHY_VCONFIG             = 0x7cf30,
	PSIF_CSR_ADDR_IBU_P2_PHY_DISP_ERROR_CNT      = 0x7cf38,
	PSIF_CSR_ADDR_IBU_P2_PHY_CODE_ERROR_CNT      = 0x7cf40,
	PSIF_CSR_ADDR_IBU_P2_PHY_EVENT_LOG           = 0x7cf48,
	PSIF_CSR_ADDR_IBU_P2_PORT_TRAIN_FSM          = 0x7cf50,
	PSIF_CSR_ADDR_IBU_P2_PHY_TRAIN_SMTIMER_VS1   = 0x7cf58,
	PSIF_CSR_ADDR_IBU_P2_MASK                    = 0x7cf60,
	PSIF_CSR_ADDR_IBU_P2_STATUS                  = 0x7cf68,
	PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_ENABLED      = 0x7cf70,
	PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_SUPPORTED    = 0x7cf78,
	PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_ACTIVE       = 0x7cf80,
	PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_SUPPORTED    = 0x7cf88,
	PSIF_CSR_ADDR_IBU_P2_PORT_PHYSICAL_STATE     = 0x7cf90,
	PSIF_CSR_ADDR_IBU_P2_LINK_DOWN_DEFAULT_STATE = 0x7cf98,
	PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_ACTIVE       = 0x7cfa0,
	PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_ENABLED      = 0x7cfa8,
	PSIF_CSR_ADDR_IBU_P2_PCPHY_CNT_RST           = 0x7cfb0,
	PSIF_CSR_ADDR_IBU_P2_PCPHY_CNT_LOAD          = 0x7cfb8,
	PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT          = 0x7cfc0,
	PSIF_CSR_ADDR_IBU_P2_PCLINK_ERR_REC_CNT      = 0x7cfc8,
	PSIF_CSR_ADDR_IBU_P2_PCLINK_DOWNED_CNT       = 0x7cfd0,
	PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE0    = 0x7cfd8,
	PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE1    = 0x7cfe0,
	PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE2    = 0x7cfe8,
	PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE3    = 0x7cff0,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT0_COUNTER    = 0x7cff8,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT1_COUNTER    = 0x7d000,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT2_COUNTER    = 0x7d008,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT3_COUNTER    = 0x7d010,
	PSIF_CSR_ADDR_IBU_P2_PHY_ALIGN_ERROR_CNT     = 0x7d018,
	PSIF_CSR_ADDR_IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT = 0x7d020,
	PSIF_CSR_ADDR_IBU_P2_PHY_PAD_ERROR_CNT       = 0x7d028,
	PSIF_CSR_ADDR_IBU_P2_PHY_EDR_FDR_CONFIG0     = 0x7d030,
	PSIF_CSR_ADDR_IBU_P2_PHY_EDR_FDR_CONFIG1     = 0x7d038,
	PSIF_CSR_ADDR_IBU_P2_PHY_LEAKY_BKT_THRSH     = 0x7d040,
	PSIF_CSR_ADDR_IBU_P2_RCV_TS3_STATUS_LOW      = 0x7d048,
	PSIF_CSR_ADDR_IBU_P2_RCV_TS3_STATUS_HIGH     = 0x7d050,
	PSIF_CSR_ADDR_IBU_P2_GUID0                   = 0x7d058,
	PSIF_CSR_ADDR_IBU_P2_GUID1                   = 0x7d060,
	PSIF_CSR_ADDR_IBU_P2_PNUM                    = 0x7d068,
	PSIF_CSR_ADDR_IBU_P2_CNT4MS                  = 0x7d070,
	PSIF_CSR_ADDR_IBU_P2_CNT36MS                 = 0x7d078,
	PSIF_CSR_ADDR_IBU_P2_PHY_TS3_CONFIG          = 0x7d080,
	PSIF_CSR_ADDR_IBU_P2_DDS_WINDOW_START        = 0x7d088,
	PSIF_CSR_ADDR_IBU_P2_DDS_WINDOW_END          = 0x7d090,
	PSIF_CSR_ADDR_IBU_P2_DDS_DEFAULT_WINDOW_END  = 0x7d098,
	PSIF_CSR_ADDR_IBU_P2_RX_TS3DDS_STATUS        = 0x7d0a0,
	PSIF_CSR_ADDR_IBU_P2_TX_TS3DDS_STATUS        = 0x7d0a8,
	PSIF_CSR_ADDR_IBU_P2_CNT16MS                 = 0x7d0b0,
	PSIF_CSR_ADDR_IBU_P2_CONF_TEST4MS_SCT        = 0x7d0b8,
	PSIF_CSR_ADDR_IBU_P2_CONF_TEST16MS_SCT       = 0x7d0c0,
	PSIF_CSR_ADDR_IBU_P2_LOCAL_ADDTEST_LIMIT     = 0x7d0c8,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_ADDTEST_LIMIT    = 0x7d0d0,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT4_COUNTER    = 0x7d0d8,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT5_COUNTER    = 0x7d0e0,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT6_COUNTER    = 0x7d0e8,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT7_COUNTER    = 0x7d0f0,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT8_COUNTER    = 0x7d0f8,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT9_COUNTER    = 0x7d100,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT10_COUNTER   = 0x7d108,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT11_COUNTER   = 0x7d110,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT12_COUNTER   = 0x7d118,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT13_COUNTER   = 0x7d120,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT14_COUNTER   = 0x7d128,
	PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT15_COUNTER   = 0x7d130,
	PSIF_CSR_ADDR_IBU_P2_CONF_TEST_LANE_ERROR_LIMIT = 0x7d138,
	PSIF_CSR_ADDR_IBU_P2_CONF_TEST_IDLE_LIMIT    = 0x7d140,
	PSIF_CSR_ADDR_IBU_P2_CONF_TEST2MS_SCT        = 0x7d148,
	PSIF_CSR_ADDR_IBU_P2_CNT100_MS_HBR           = 0x7d150,
	PSIF_CSR_ADDR_IBU_P2_PMAEQULANE0_STATUS      = 0x7d158,
	PSIF_CSR_ADDR_IBU_P2_PMAEQULANE1_STATUS      = 0x7d160,
	PSIF_CSR_ADDR_IBU_P2_PMAEQULANE2_STATUS      = 0x7d168,
	PSIF_CSR_ADDR_IBU_P2_PMAEQULANE3_STATUS      = 0x7d170,
	PSIF_CSR_ADDR_IBU_P2_PMADDSLANE0_STATUS      = 0x7d178,
	PSIF_CSR_ADDR_IBU_P2_PMADDSLANE1_STATUS      = 0x7d180,
	PSIF_CSR_ADDR_IBU_P2_PMADDSLANE2_STATUS      = 0x7d188,
	PSIF_CSR_ADDR_IBU_P2_PMADDSLANE3_STATUS      = 0x7d190,
	PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR0           = 0x7d198,
	PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR1           = 0x7d1a0,
	PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR2           = 0x7d1a8,
	PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR3           = 0x7d1b0,
	PSIF_CSR_ADDR_IBU_P2_PHY_BLK_TYPE_ERR        = 0x7d1b8,
	PSIF_CSR_ADDR_IBU_P2_PHY_BLK_EOP_ERR         = 0x7d1c0,
	PSIF_CSR_ADDR_IBU_P2_PHY_CIN_PKT_ERR         = 0x7d1c8,
	PSIF_CSR_ADDR_IBU_P2_PHY_SYN_HDR_ERR         = 0x7d1d0,
	PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR0           = 0x7d1d8,
	PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR1           = 0x7d1e0,
	PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR2           = 0x7d1e8,
	PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR3           = 0x7d1f0,
	PSIF_CSR_ADDR_IBU_P2_PHY_DESKEW_STATUS       = 0x7d1f8,
	PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR0         = 0x7d200,
	PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR1         = 0x7d208,
	PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR2         = 0x7d210,
	PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR3         = 0x7d218,
	PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR0         = 0x7d220,
	PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR1         = 0x7d228,
	PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR2         = 0x7d230,
	PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR3         = 0x7d238,
	PSIF_CSR_ADDR_IBU_P2_PHY_SMSTATUS            = 0x7d240,
	PSIF_CSR_ADDR_IBU_P2_PHY_TS3_NEGOTIATED_STATUS = 0x7d248,
	PSIF_CSR_ADDR_IBU_P2_PHY_TEST                = 0x7d250,
	PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG0  = 0x7d258,
	PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG1  = 0x7d260,
	PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG2  = 0x7d268,
	PSIF_CSR_ADDR_IBU_P2_EDR_FDR_TX_STATUS_REG0  = 0x7d270,
	PSIF_CSR_ADDR_IBU_P2_INT_PRIORITY            = 0x7d278,
	PSIF_CSR_ADDR_IBU_P2_INT_FATAL               = 0x7d280,
	PSIF_CSR_ADDR_IBU_P2_LINK_ROUND_TRIP_LATENCY = 0x7d288,
	PSIF_CSR_ADDR_IBU_P2_PHY_FORCE_LEGACY_MODE   = 0x7d290,
	PSIF_CSR_ADDR_IBU_P2_LID                     = 0x7d298,
	PSIF_CSR_ADDR_IBU_P2_LMC                     = 0x7d2a0,
	PSIF_CSR_ADDR_IBU_P2_PORT_STATE              = 0x7d2a8,
	PSIF_CSR_ADDR_IBU_P2_VLCAP                   = 0x7d2b0,
	PSIF_CSR_ADDR_IBU_P2_NEIGHBOR_MTU            = 0x7d2b8,
	PSIF_CSR_ADDR_IBU_P2_VLHIGH_LIMIT            = 0x7d2c0,
	PSIF_CSR_ADDR_IBU_P2_VLARBITRATION_HIGH_CAP  = 0x7d2c8,
	PSIF_CSR_ADDR_IBU_P2_VLARBITRATION_LOW_CAP   = 0x7d2d0,
	PSIF_CSR_ADDR_IBU_P2_MTUCAP                  = 0x7d2d8,
	PSIF_CSR_ADDR_IBU_P2_OPERATIONAL_VLS         = 0x7d2e0,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_ERROR        = 0x7d2e8,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS = 0x7d2f0,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_DISCARDS    = 0x7d2f8,
	PSIF_CSR_ADDR_IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS = 0x7d300,
	PSIF_CSR_ADDR_IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS = 0x7d308,
	PSIF_CSR_ADDR_IBU_P2_PCVL15_DROPPED          = 0x7d310,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT        = 0x7d318,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_DATA_LSQW   = 0x7d320,
	PSIF_CSR_ADDR_IBU_P2_LINK_ERROR_CHECK_ENABLE = 0x7d328,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_DATA_LSQW    = 0x7d330,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_PKTS_LSQW   = 0x7d338,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_PKTS_LSQW    = 0x7d340,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_UCXMIT_PKTS_LSQW = 0x7d348,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_MCXMIT_PKTS_LSQW = 0x7d350,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_UCRCV_PKTS_LSQW  = 0x7d358,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_MCRCV_PKTS_LSQW  = 0x7d360,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL0    = 0x7d368,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL1    = 0x7d370,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL2    = 0x7d378,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL3    = 0x7d380,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL4    = 0x7d388,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL5    = 0x7d390,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL6    = 0x7d398,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL7    = 0x7d3a0,
	PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL15   = 0x7d3a8,
	PSIF_CSR_ADDR_IBU_P2_PCRX_LINK_CNT_RST       = 0x7d3b0,
	PSIF_CSR_ADDR_IBU_P2_PCRX_LINK_CNT_LOAD      = 0x7d3b8,
	PSIF_CSR_ADDR_IBU_P2_LOCAL_PHY_ERRORS        = 0x7d3c0,
	PSIF_CSR_ADDR_IBU_P2_OVERRUN_ERRORS          = 0x7d3c8,
	PSIF_CSR_ADDR_IBU_P2_PSLINK_DLID             = 0x7d3d0,
	PSIF_CSR_ADDR_IBU_P2_PSTICK                  = 0x7d3d8,
	PSIF_CSR_ADDR_IBU_P2_PSSTATUS                = 0x7d3e0,
	PSIF_CSR_ADDR_IBU_P2_PSSTART_DELAY           = 0x7d3e8,
	PSIF_CSR_ADDR_IBU_P2_PSINTERVAL              = 0x7d3f0,
	PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL0              = 0x7d3f8,
	PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL1              = 0x7d400,
	PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL2              = 0x7d408,
	PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL3              = 0x7d410,
	PSIF_CSR_ADDR_IBU_P2_PSCNT0                  = 0x7d418,
	PSIF_CSR_ADDR_IBU_P2_PSCNT1                  = 0x7d420,
	PSIF_CSR_ADDR_IBU_P2_PSCNT2                  = 0x7d428,
	PSIF_CSR_ADDR_IBU_P2_PSCNT3                  = 0x7d430,
	PSIF_CSR_ADDR_IBU_P2_PSINIT_SAMPLING         = 0x7d438,
	PSIF_CSR_ADDR_IBU_P2_PSCNT_LOAD              = 0x7d440,
	PSIF_CSR_ADDR_IBU_P2_PORT_STATE_CHANGE       = 0x7d448,
	PSIF_CSR_ADDR_IBU_P2_TRAP_REGISTER           = 0x7d450,
	PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG0           = 0x7d458,
	PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG1           = 0x7d460,
	PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG2           = 0x7d468,
	PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL1_0    = 0x7d470,
	PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL3_2    = 0x7d478,
	PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL5_4    = 0x7d480,
	PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL7_6    = 0x7d488,
	PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL1_0    = 0x7d490,
	PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL3_2    = 0x7d498,
	PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL5_4    = 0x7d4a0,
	PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL7_6    = 0x7d4a8,
	PSIF_CSR_ADDR_IBU_P2_PCTX_LINK_CNT_RST       = 0x7d4b0,
	PSIF_CSR_ADDR_IBU_P2_PCTX_LINK_CNT_LOAD      = 0x7d4b8,
	PSIF_CSR_ADDR_IBU_P2_PSCNT_WIDTH             = 0x7d4c0,
	PSIF_CSR_ADDR_IBU_P2_PSCNT_MASK              = 0x7d4c8,
	PSIF_CSR_ADDR_IBU_P2_PCICRC_RCV_ERRORS       = 0x7d4d0,
	PSIF_CSR_ADDR_IBU_P2_PCVCRC_RCV_ERRORS       = 0x7d4d8,
	PSIF_CSR_ADDR_IBU_P2_PCLEN_RCV_ERRORS        = 0x7d4e0,
	PSIF_CSR_ADDR_IBU_P2_PCDLID_RCV_ERRORS       = 0x7d4e8,
	PSIF_CSR_ADDR_IBU_P2_PCRCV_FCLEN_ERRORS      = 0x7d4f0,
	PSIF_CSR_ADDR_IBU_P2_PCRCV_FCVL_ERRORS       = 0x7d4f8,
	PSIF_CSR_ADDR_IBU_P2_PCRCV_FCCRC_ERRORS      = 0x7d500,
	PSIF_CSR_ADDR_IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS = 0x7d508,
	PSIF_CSR_ADDR_IBU_P2_PCMAL_FORMED_ERRORS     = 0x7d510,
	PSIF_CSR_ADDR_IBU_P2_PCBUF_OVER_ERRORS       = 0x7d518,
	PSIF_CSR_ADDR_IBU_P2_PCVLMAP_ERRORS          = 0x7d520,
	PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL1_VL0 = 0x7d528,
	PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL3_VL2 = 0x7d530,
	PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL5_VL4 = 0x7d538,
	PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL7_VL6 = 0x7d540,
	PSIF_CSR_ADDR_IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT = 0x7d548,
	PSIF_CSR_ADDR_IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT = 0x7d550,
	PSIF_CSR_ADDR_IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT = 0x7d558,
	PSIF_CSR_ADDR_IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT = 0x7d560,
	PSIF_CSR_ADDR_IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT = 0x7d568,
	PSIF_CSR_ADDR_IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT = 0x7d570,
	PSIF_CSR_ADDR_IBU_P2_PCECCENA_ERR            = 0x7d578,
	PSIF_CSR_ADDR_IBU_P2_PCTX_ECC_COR_ERR_CNT    = 0x7d580,
	PSIF_CSR_ADDR_IBU_P2_PCTX_ECC_UNC_ERR_CNT    = 0x7d588,
	PSIF_CSR_ADDR_IBU_P2_TX_SRAMSTATUS           = 0x7d590,
	PSIF_CSR_ADDR_IBU_P2_TX_CACHE_STATUS         = 0x7d598,
	PSIF_CSR_ADDR_IBU_P2_TX_DEBUG                = 0x7d5a0,
	PSIF_CSR_ADDR_IBU_P2_RX_VL07_SRAMSTATUS      = 0x7d5a8,
	PSIF_CSR_ADDR_IBU_P2_RX_VL15_SRAMSTATUS      = 0x7d5b0,
	PSIF_CSR_ADDR_IBU_P2_LOOPSRAMSTATUS          = 0x7d5b8,
	PSIF_CSR_ADDR_IBU_P2_RX_DEBUG                = 0x7d5c0,
	PSIF_CSR_ADDR_IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS = 0x7d5c8,
	PSIF_CSR_ADDR_IBU_P2_VLARB_HI_PRI_TABLE      = 0x7d5d0,
	PSIF_CSR_ADDR_IBU_P2_VLARB_LO_PRI_TABLE      = 0x7d620,
	PSIF_CSR_ADDR_IBU_P2_TX_TBSVL10              = 0x7d670,
	PSIF_CSR_ADDR_IBU_P2_TX_TBSVL32              = 0x7d678,
	PSIF_CSR_ADDR_IBU_P2_TX_TBSVL54              = 0x7d680,
	PSIF_CSR_ADDR_IBU_P2_TX_TBSVL76              = 0x7d688,
	PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL10          = 0x7d690,
	PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL32          = 0x7d698,
	PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL54          = 0x7d6a0,
	PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL76          = 0x7d6a8,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_ENABLE = 0x7d6b0,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_MODE   = 0x7d6b8,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_RDY    = 0x7d6c0,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_TIMER  = 0x7d6c8,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_START  = 0x7d6d0,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA1  = 0x7d6d8,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA2  = 0x7d6e0,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA3  = 0x7d6e8,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA4  = 0x7d6f0,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA5  = 0x7d6f8,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA6  = 0x7d700,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA7  = 0x7d708,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA8  = 0x7d710,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA9  = 0x7d718,
	PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA10 = 0x7d720,
	PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL1_0      = 0x7d728,
	PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL3_2      = 0x7d730,
	PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL5_4      = 0x7d738,
	PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL7_6      = 0x7d740,
	PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE0       = 0x7d748,
	PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE1       = 0x7d750,
	PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE2       = 0x7d758,
	PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE3       = 0x7d760,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE0          = 0x7d768,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE1          = 0x7d770,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE2          = 0x7d778,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE3          = 0x7d780,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE0          = 0x7d788,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE1          = 0x7d790,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE2          = 0x7d798,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE3          = 0x7d7a0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE0          = 0x7d7a8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE1          = 0x7d7b0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE2          = 0x7d7b8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE3          = 0x7d7c0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE0          = 0x7d7c8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE1          = 0x7d7d0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE2          = 0x7d7d8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE3          = 0x7d7e0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE0          = 0x7d7e8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE1          = 0x7d7f0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE2          = 0x7d7f8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE3          = 0x7d800,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE0          = 0x7d808,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE1          = 0x7d810,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE2          = 0x7d818,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE3          = 0x7d820,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE0          = 0x7d828,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE1          = 0x7d830,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE2          = 0x7d838,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE3          = 0x7d840,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE0          = 0x7d848,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE1          = 0x7d850,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE2          = 0x7d858,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE3          = 0x7d860,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE0          = 0x7d868,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE1          = 0x7d870,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE2          = 0x7d878,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE3          = 0x7d880,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE0          = 0x7d888,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE1          = 0x7d890,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE2          = 0x7d898,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE3          = 0x7d8a0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE0         = 0x7d8a8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE1         = 0x7d8b0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE2         = 0x7d8b8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE3         = 0x7d8c0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE0         = 0x7d8c8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE1         = 0x7d8d0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE2         = 0x7d8d8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE3         = 0x7d8e0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE0         = 0x7d8e8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE1         = 0x7d8f0,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE2         = 0x7d8f8,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE3         = 0x7d900,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE0         = 0x7d908,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE1         = 0x7d910,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE2         = 0x7d918,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE3         = 0x7d920,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE0         = 0x7d928,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE1         = 0x7d930,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE2         = 0x7d938,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE3         = 0x7d940,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE0         = 0x7d948,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE1         = 0x7d950,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE2         = 0x7d958,
	PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE3         = 0x7d960,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE0     = 0x7d968,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE1     = 0x7d970,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE2     = 0x7d978,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE3     = 0x7d980,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE0     = 0x7d988,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE1     = 0x7d990,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE2     = 0x7d998,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE3     = 0x7d9a0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE0     = 0x7d9a8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE1     = 0x7d9b0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE2     = 0x7d9b8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE3     = 0x7d9c0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE0     = 0x7d9c8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE1     = 0x7d9d0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE2     = 0x7d9d8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE3     = 0x7d9e0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE0     = 0x7d9e8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE1     = 0x7d9f0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE2     = 0x7d9f8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE3     = 0x7da00,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE0     = 0x7da08,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE1     = 0x7da10,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE2     = 0x7da18,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE3     = 0x7da20,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE0     = 0x7da28,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE1     = 0x7da30,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE2     = 0x7da38,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE3     = 0x7da40,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE0     = 0x7da48,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE1     = 0x7da50,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE2     = 0x7da58,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE3     = 0x7da60,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE0     = 0x7da68,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE1     = 0x7da70,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE2     = 0x7da78,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE3     = 0x7da80,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE0     = 0x7da88,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE1     = 0x7da90,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE2     = 0x7da98,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE3     = 0x7daa0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE0    = 0x7daa8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE1    = 0x7dab0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE2    = 0x7dab8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE3    = 0x7dac0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE0    = 0x7dac8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE1    = 0x7dad0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE2    = 0x7dad8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE3    = 0x7dae0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE0    = 0x7dae8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE1    = 0x7daf0,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE2    = 0x7daf8,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE3    = 0x7db00,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE0    = 0x7db08,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE1    = 0x7db10,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE2    = 0x7db18,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE3    = 0x7db20,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE0    = 0x7db28,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE1    = 0x7db30,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE2    = 0x7db38,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE3    = 0x7db40,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE0    = 0x7db48,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE1    = 0x7db50,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE2    = 0x7db58,
	PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE3    = 0x7db60,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS0             = 0x7db68,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS1             = 0x7db70,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS2             = 0x7db78,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS3             = 0x7db80,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS4             = 0x7db88,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS5             = 0x7db90,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS6             = 0x7db98,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS7             = 0x7dba0,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS8             = 0x7dba8,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS9             = 0x7dbb0,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS10            = 0x7dbb8,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS11            = 0x7dbc0,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS12            = 0x7dbc8,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS13            = 0x7dbd0,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS14            = 0x7dbd8,
	PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS15            = 0x7dbe0,
	PSIF_CSR_ADDR_IBU_P2_BAD_CSR                 = 0x7dbe8,
	PSIF_CSR_ADDR_IBU_P2_CETUS_CH0_REG15_CSR     = 0x7dbf0,
	PSIF_CSR_ADDR_IBU_P2_CETUS_CH0_REG102_CSR    = 0x7dbf8,
	PSIF_CSR_ADDR_IBU_P2_CETUS_CH1_REG15_CSR     = 0x7dc00,
	PSIF_CSR_ADDR_IBU_P2_CETUS_CH1_REG102_CSR    = 0x7dc08,
	PSIF_CSR_ADDR_IBU_P2_CETUS_PLLA_REG24_CSR    = 0x7dc10,
	PSIF_CSR_ADDR_IBU_P2_CETUS_CH2_REG15_CSR     = 0x7dc18,
	PSIF_CSR_ADDR_IBU_P2_CETUS_CH2_REG102_CSR    = 0x7dc20,
	PSIF_CSR_ADDR_IBU_P2_CETUS_CH3_REG15_CSR     = 0x7dc28,
	PSIF_CSR_ADDR_IBU_P2_CETUS_CH3_REG102_CSR    = 0x7dc30,
	PSIF_CSR_ADDR_IBU_P2_CETUS_PLLB_REG24_CSR    = 0x7dc38,
	PSIF_CSR_ADDR_IBU_P2_PMA_RESET_CSR           = 0x7dc40,
	PSIF_CSR_ADDR_IBU_P2_PMA_PLLA_CSR            = 0x7dc48,
	PSIF_CSR_ADDR_IBU_P2_PMA_PLLB_CSR            = 0x7dc50,
	PSIF_CSR_ADDR_IBU_P2_PMA_CMODE_CSR           = 0x7dc58,
	PSIF_CSR_ADDR_IBU_P2_PMA_LB_CSR              = 0x7dc60,
	PSIF_CSR_ADDR_IBU_P2_PMA_PWR_CSR             = 0x7dc68,
	PSIF_CSR_ADDR_IBU_P2_PMA_STATUS0_CSR         = 0x7dc70,
	PSIF_CSR_ADDR_IBU_P2_PMA_STATUS1_CSR         = 0x7dc78,
	PSIF_CSR_ADDR_IBU_P2_PMA_STATUS2_CSR         = 0x7dc80,
	PSIF_CSR_ADDR_IBU_P2_PMA_TXWCLK0_CNT_CSR     = 0x7dc88,
	PSIF_CSR_ADDR_IBU_P2_PMA_TXWCLK0_CNT_VAL     = 0x7dc90,
	PSIF_CSR_ADDR_IBU_P2_PMA_RXWCLK0_CNT_CSR     = 0x7dc98,
	PSIF_CSR_ADDR_IBU_P2_PMA_RXWCLK0_CNT_VAL     = 0x7dca0,
	PSIF_CSR_ADDR_IBU_P2_PMA_IRQ_STATUS_CSR      = 0x7dca8,
	PSIF_CSR_ADDR_IBU_P2_PMA_IRQ_MASK_CSR        = 0x7dcb0,
	PSIF_CSR_ADDR_IBU_P2_PMA_BAD_CSR             = 0x7dcb8,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG0          = 0x7dcc0,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG0         = 0x7dcc8,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG0       = 0x7dcd0,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG0      = 0x7dcd8,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG0     = 0x7dce0,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG0    = 0x7dce8,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD0         = 0x7dcf0,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD0         = 0x7dcf8,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD0         = 0x7dd00,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD0        = 0x7dd08,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD0        = 0x7dd10,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG1          = 0x7dd18,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG1         = 0x7dd20,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG1       = 0x7dd28,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG1      = 0x7dd30,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG1     = 0x7dd38,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG1    = 0x7dd40,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD1         = 0x7dd48,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD1         = 0x7dd50,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD1         = 0x7dd58,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD1        = 0x7dd60,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD1        = 0x7dd68,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG2          = 0x7dd70,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG2         = 0x7dd78,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG2       = 0x7dd80,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG2      = 0x7dd88,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG2     = 0x7dd90,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG2    = 0x7dd98,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD2         = 0x7dda0,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD2         = 0x7dda8,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD2         = 0x7ddb0,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD2        = 0x7ddb8,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD2        = 0x7ddc0,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG3          = 0x7ddc8,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG3         = 0x7ddd0,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG3       = 0x7ddd8,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG3      = 0x7dde0,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG3     = 0x7dde8,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG3    = 0x7ddf0,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD3         = 0x7ddf8,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD3         = 0x7de00,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD3         = 0x7de08,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD3        = 0x7de10,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD3        = 0x7de18,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG4          = 0x7de20,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG4         = 0x7de28,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG4       = 0x7de30,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG4      = 0x7de38,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG4     = 0x7de40,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG4    = 0x7de48,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD4         = 0x7de50,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD4         = 0x7de58,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD4         = 0x7de60,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD4        = 0x7de68,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD4        = 0x7de70,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG5          = 0x7de78,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG5         = 0x7de80,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG5       = 0x7de88,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG5      = 0x7de90,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG5     = 0x7de98,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG5    = 0x7dea0,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD5         = 0x7dea8,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD5         = 0x7deb0,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD5         = 0x7deb8,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD5        = 0x7dec0,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD5        = 0x7dec8,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG6          = 0x7ded0,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG6         = 0x7ded8,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG6       = 0x7dee0,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG6      = 0x7dee8,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG6     = 0x7def0,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG6    = 0x7def8,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD6         = 0x7df00,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD6         = 0x7df08,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD6         = 0x7df10,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD6        = 0x7df18,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD6        = 0x7df20,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG7          = 0x7df28,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG7         = 0x7df30,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG7       = 0x7df38,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG7      = 0x7df40,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG7     = 0x7df48,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG7    = 0x7df50,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD7         = 0x7df58,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD7         = 0x7df60,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD7         = 0x7df68,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD7        = 0x7df70,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD7        = 0x7df78,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG8          = 0x7df80,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG8         = 0x7df88,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG8       = 0x7df90,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG8      = 0x7df98,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG8     = 0x7dfa0,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG8    = 0x7dfa8,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD8         = 0x7dfb0,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD8         = 0x7dfb8,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD8         = 0x7dfc0,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD8        = 0x7dfc8,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD8        = 0x7dfd0,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG9          = 0x7dfd8,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG9         = 0x7dfe0,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG9       = 0x7dfe8,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG9      = 0x7dff0,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG9     = 0x7dff8,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG9    = 0x7e000,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD9         = 0x7e008,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD9         = 0x7e010,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD9         = 0x7e018,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD9        = 0x7e020,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD9        = 0x7e028,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG10         = 0x7e030,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG10        = 0x7e038,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG10      = 0x7e040,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG10     = 0x7e048,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG10    = 0x7e050,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG10   = 0x7e058,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD10        = 0x7e060,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD10        = 0x7e068,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD10        = 0x7e070,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD10       = 0x7e078,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD10       = 0x7e080,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG11         = 0x7e088,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG11        = 0x7e090,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG11      = 0x7e098,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG11     = 0x7e0a0,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG11    = 0x7e0a8,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG11   = 0x7e0b0,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD11        = 0x7e0b8,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD11        = 0x7e0c0,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD11        = 0x7e0c8,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD11       = 0x7e0d0,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD11       = 0x7e0d8,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG12         = 0x7e0e0,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG12        = 0x7e0e8,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG12      = 0x7e0f0,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG12     = 0x7e0f8,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG12    = 0x7e100,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG12   = 0x7e108,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD12        = 0x7e110,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD12        = 0x7e118,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD12        = 0x7e120,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD12       = 0x7e128,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD12       = 0x7e130,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG13         = 0x7e138,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG13        = 0x7e140,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG13      = 0x7e148,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG13     = 0x7e150,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG13    = 0x7e158,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG13   = 0x7e160,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD13        = 0x7e168,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD13        = 0x7e170,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD13        = 0x7e178,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD13       = 0x7e180,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD13       = 0x7e188,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG14         = 0x7e190,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG14        = 0x7e198,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG14      = 0x7e1a0,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG14     = 0x7e1a8,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG14    = 0x7e1b0,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG14   = 0x7e1b8,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD14        = 0x7e1c0,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD14        = 0x7e1c8,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD14        = 0x7e1d0,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD14       = 0x7e1d8,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD14       = 0x7e1e0,
	PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG15         = 0x7e1e8,
	PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG15        = 0x7e1f0,
	PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG15      = 0x7e1f8,
	PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG15     = 0x7e200,
	PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG15    = 0x7e208,
	PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG15   = 0x7e210,
	PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD15        = 0x7e218,
	PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD15        = 0x7e220,
	PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD15        = 0x7e228,
	PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD15       = 0x7e230,
	PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD15       = 0x7e238,
	PSIF_CSR_ADDR_PEU_HPRI_Q_REG                 = 0x7e240,
	PSIF_CSR_ADDR_PEU_HPRI_RR_WEIGHT_REG         = 0x7e248,
	PSIF_CSR_ADDR_PEU_MAX_RD_REQ_SIZE_REG        = 0x7e250,
	PSIF_CSR_ADDR_PEU_DIRTY_PCI_TAG_CTL_REG      = 0x7e258,
	PSIF_CSR_ADDR_PEU_MASTER_VEC_ST_REG          = 0x7e260,
	PSIF_CSR_ADDR_PEU_MASTER_VEC_MSK_REG         = 0x7e268,
	PSIF_CSR_ADDR_PEU_FLR_REQ_DBG_REG            = 0x7e270,
	PSIF_CSR_ADDR_PEU_FLR_DONE_DBG_REG           = 0x7e278,
	PSIF_CSR_ADDR_PEU_FLR_REQ_VEC_ST_REG         = 0x7e280,
	PSIF_CSR_ADDR_PEU_FLR_DONE_VEC_ST_REG        = 0x7e288,
	PSIF_CSR_ADDR_PEU_TAG_POOL_DBG_REG           = 0x7e290,
	PSIF_CSR_ADDR_PEU_LTSSM_DBG_REG              = 0x7e298,
	PSIF_CSR_ADDR_PEU_TSU_REQ_DBG_REG            = 0x7e2a0,
	PSIF_CSR_ADDR_PEU_EPS_REQ_DBG_REG            = 0x7e2a8,
	PSIF_CSR_ADDR_PEU_P_REQ_DBG_REG              = 0x7e2b0,
	PSIF_CSR_ADDR_PEU_NP_REQ_DBG_REG             = 0x7e2b8,
	PSIF_CSR_ADDR_PEU_DBI_CSR_WDAT_REG           = 0x7e2c0,
	PSIF_CSR_ADDR_PEU_DBI_CSR_CMD_REG            = 0x7e2c8,
	PSIF_CSR_ADDR_PEU_DBI_CSR_STATUS_REG         = 0x7e2d0,
	PSIF_CSR_ADDR_PEU_DBI_CSR_RDAT_REG           = 0x7e2d8,
	PSIF_CSR_ADDR_PEU_CPL_BUF_WATER_MARK_REG     = 0x7e2e0,
	PSIF_CSR_ADDR_PEU_ARB_CPL_BUF_THLD_REG       = 0x7e2e8,
	PSIF_CSR_ADDR_PEU_CPL_BUF_CREDIT_REG         = 0x7e2f0,
	PSIF_CSR_ADDR_PEU_CPL_MAX_CREDIT_REG         = 0x7e2f8,
	PSIF_CSR_ADDR_PEU_PCIE_PHY_CTL_REG           = 0x7e300,
	PSIF_CSR_ADDR_PEU_FORCE_ERR_REG              = 0x7e308,
	PSIF_CSR_ADDR_PEU_MSG_GEN_QW0_REG            = 0x7e310,
	PSIF_CSR_ADDR_PEU_MSG_GEN_QW1_REG            = 0x7e318,
	PSIF_CSR_ADDR_PEU_MSG_STATUS_REG             = 0x7e320,
	PSIF_CSR_ADDR_PEU_ATS_MSG_QW0_REG            = 0x7e328,
	PSIF_CSR_ADDR_PEU_ATS_MSG_QW1_REG            = 0x7e330,
	PSIF_CSR_ADDR_PEU_SRAM_CORR_ERR_STATUS_REG   = 0x7e338,
	PSIF_CSR_ADDR_PEU_HI_PRI_MSK_REG             = 0x7e340,
	PSIF_CSR_ADDR_PEU_HI_PRI_INTR_VEC_REG        = 0x7e348,
	PSIF_CSR_ADDR_PEU_FATAL_INTR_MSK_REG         = 0x7e350,
	PSIF_CSR_ADDR_PEU_FATAL_INTR_VEC_REG         = 0x7e358,
	PSIF_CSR_ADDR_PEU_INTR_REQ_DBG_REG           = 0x7e360,
	PSIF_CSR_ADDR_PEU_TSU_PIO_REQ_DBG_REG        = 0x7e368,
	PSIF_CSR_ADDR_PEU_EPRM_PIO_REQ_DBG_REG       = 0x7e370,
	PSIF_CSR_ADDR_PEU_INTR_PIO_REQ_DBG_REG       = 0x7e378,
	PSIF_CSR_ADDR_PEU_CPL_FLUSH_DBG_REG          = 0x7e380,
	PSIF_CSR_ADDR_PEU_EP_DIAG_DBG_REG            = 0x7e388,
	PSIF_CSR_ADDR_PEU_CXPL_EI_DBG_REG            = 0x7e390,
	PSIF_CSR_ADDR_PEU_CXPL_DBG_REG               = 0x7e398,
	PSIF_CSR_ADDR_PEU_FF_DC_1_DBG_REG            = 0x7e3a0,
	PSIF_CSR_ADDR_PEU_FF_DC_2_DBG_REG            = 0x7e3a8,
	PSIF_CSR_ADDR_PEU_FORCE_FLR_REG              = 0x7e3b0,
	PSIF_CSR_ADDR_PEU_CSR_PEU_CTL_ST_REG         = 0x7e3b8,
	PSIF_CSR_ADDR_PEU_CSR_PEU_INT_ST_REG         = 0x7e3c0,
	PSIF_CSR_ADDR_PEU_CSR_PEU_INT_MSK_REG        = 0x7e3c8,
	PSIF_CSR_ADDR_PEU_CSR_LP_INTR_VEC_REG        = 0x7e3d0,
	PSIF_CSR_ADDR_PEU_CSR_LPRI_INT_MSK_REG       = 0x7e3d8,
	PSIF_CSR_ADDR_PEU_CSR_SER_INT_ST_REG         = 0x7e3e0,
	PSIF_CSR_ADDR_PEU_TSU_FLR_REQ_DBG_REG        = 0x7e3e8,
	PSIF_CSR_ADDR_PEU_TSU_FLR_DONE_DBG_REG       = 0x7e3f0,
	PSIF_CSR_ADDR_PEU_EPS_FLR_REQ_DBG_REG        = 0x7e3f8,
	PSIF_CSR_ADDR_PEU_EPS_FLR_DONE_DBG_REG       = 0x7e400,
	PSIF_CSR_ADDR_PEU_PIPE_CSR_WDAT_REG          = 0x7e408,
	PSIF_CSR_ADDR_PEU_PIPE_CSR_CMD_REG           = 0x7e410,
	PSIF_CSR_ADDR_PEU_PIPE_CSR_STATUS_REG        = 0x7e418,
	PSIF_CSR_ADDR_PEU_PIPE_CSR_RDAT_REG          = 0x7e420,
	PSIF_CSR_ADDR_PEU_SER_CSR_WDAT_REG           = 0x7e428,
	PSIF_CSR_ADDR_PEU_SER_CSR_CMD_REG            = 0x7e430,
	PSIF_CSR_ADDR_PEU_SER_CSR_STATUS_REG         = 0x7e438,
	PSIF_CSR_ADDR_PEU_SER_CSR_RDAT_REG           = 0x7e440,
	PSIF_CSR_ADDR_PEU_SER_1_CSR_WDAT_REG         = 0x7e448,
	PSIF_CSR_ADDR_PEU_SER_1_CSR_CMD_REG          = 0x7e450,
	PSIF_CSR_ADDR_PEU_SER_1_CSR_STATUS_REG       = 0x7e458,
	PSIF_CSR_ADDR_PEU_SER_1_CSR_RDAT_REG         = 0x7e460,
	PSIF_CSR_ADDR_PEU_SER_DFE_ST_SEL_REG         = 0x7e468,
	PSIF_CSR_ADDR_PEU_SER_DFE_ST_0_REG           = 0x7e470,
	PSIF_CSR_ADDR_PEU_SER_DFE_ST_1_REG           = 0x7e478,
	PSIF_CSR_ADDR_PEU_SER_DFE_ST_2_REG           = 0x7e480,
	PSIF_CSR_ADDR_PEU_SER_DFE_ST_3_REG           = 0x7e488,
	PSIF_CSR_ADDR_PEU_SER_POWERDOWN_CTL_REG      = 0x7e490,
	PSIF_CSR_ADDR_PEU_SER_CFG0_REG               = 0x7e498,
	PSIF_CSR_ADDR_PEU_SER_CFG1_REG               = 0x7e4a0,
	PSIF_CSR_ADDR_PEU_SER_CFG2_REG               = 0x7e4a8,
	PSIF_CSR_ADDR_PEU_SER_CFG3_REG               = 0x7e4b0,
	PSIF_CSR_ADDR_PEU_CSR_SER_CTL_REG            = 0x7e4b8,
	PSIF_CSR_ADDR_PEU_CSR_SER_ST_REG             = 0x7e4c0,
	PSIF_CSR_ADDR_END                            = 0x7e4c8
}; /* enum psif_csr_map */

#ifdef __GNUC__
#define VARIABLE_IS_NOT_USED __attribute__ ((unused))
#else
#define VARIABLE_IS_NOT_USED
#endif

static struct psif_csr_host_to_addr { /* Mapping between host and HW csr */
	unsigned int hw_addr:28;        /* CSR buss xxx bits wide */
	unsigned int host_id:24;        /* Input from host */
	unsigned int length:20;         /* Extent of CSR entry */
	unsigned int shared:1;          /* One global entry or entry per UF */
	unsigned int ufs:7;             /* UF range */
} psif_csr_mapping[] VARIABLE_IS_NOT_USED = { /* Actual translation table */
{             TSU_HOST_TVL_TABLE_ADDR /* 0x100000 */, PSIF_CSR_ADDR_HOST_TVL_TABLE                 /* 00000000 */, 17920, 1,  1 }, /* Index   0 */
{  TSU_HOST_MAX_GLOBAL_TVL_CRDTS_ADDR /* 0x101000 */, PSIF_CSR_ADDR_HOST_MAX_GLOBAL_TVL_CRDTS      /* 0x004600 */,  1024, 1,  1 }, /* Index   1 */
{     TSU_HOST_PRIVATE_TVL_CRDTS_ADDR /* 0x101080 */, PSIF_CSR_ADDR_HOST_PRIVATE_TVL_CRDTS         /* 0x004a00 */,  1024, 1,  1 }, /* Index   2 */
{ TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS_ADDR /* 0x101100 */, PSIF_CSR_ADDR_HOST_TOTAL_GLOBAL_TVL_CRDTS    /* 0x004e00 */,     8, 1,  1 }, /* Index   3 */
{           TSU_HOST_XIU_ARBITER_ADDR /* 0x101101 */, PSIF_CSR_ADDR_HOST_XIU_ARBITER               /* 0x004e08 */,     8, 1,  1 }, /* Index   4 */
{           TSU_HOST_EPS_ARBITER_ADDR /* 0x101102 */, PSIF_CSR_ADDR_HOST_EPS_ARBITER               /* 0x004e10 */,     8, 1,  1 }, /* Index   5 */
{           TSU_HOST_ERROR_CRDTS_ADDR /* 0x101103 */, PSIF_CSR_ADDR_HOST_ERROR_CRDTS               /* 0x004e18 */,     8, 1,  1 }, /* Index   6 */
{          TSU_HOST_DATA_LATENCY_ADDR /* 0x101104 */, PSIF_CSR_ADDR_HOST_DATA_LATENCY              /* 0x004e20 */,     8, 1,  1 }, /* Index   7 */
{        TSU_HOST_TVL_CRDTS_USED_ADDR /* 0x101108 */, PSIF_CSR_ADDR_HOST_TVL_CRDTS_USED            /* 0x004e28 */,  1024, 1,  1 }, /* Index   8 */
{     TSU_HOST_GLOBAL_CRDTS_USED_ADDR /* 0x101188 */, PSIF_CSR_ADDR_HOST_GLOBAL_CRDTS_USED         /* 0x005228 */,     8, 1,  1 }, /* Index   9 */
{              TSU_HOST_HCA_MODE_ADDR /* 0x10118a */, PSIF_CSR_ADDR_HOST_HCA_MODE                  /* 0x005230 */,     8, 1,  1 }, /* Index  10 */
{      TSU_HOST_ENABLE_PCIE_SWAP_ADDR /* 0x10118b */, PSIF_CSR_ADDR_HOST_ENABLE_PCIE_SWAP          /* 0x005238 */,     8, 1,  1 }, /* Index  11 */
{    TSU_HOST_LITTLE_ENDIAN_MODE_ADDR /* 0x10118c */, PSIF_CSR_ADDR_HOST_LITTLE_ENDIAN_MODE        /* 0x005240 */,     8, 1,  1 }, /* Index  12 */
{ TSU_HOST_XIU_LLQ_GLOBAL_CREDITS_ADDR /* 0x10118d */, PSIF_CSR_ADDR_HOST_XIU_LLQ_GLOBAL_CREDITS    /* 0x005248 */,     8, 1,  1 }, /* Index  13 */
{        TSU_HOST_QP_BASE_ADDR_0_ADDR /* 0x101194 */, PSIF_CSR_ADDR_BASE_ADDR_QP                   /* 0x005250 */,     8, 0, 35 }, /* Index  14 */
{        TSU_HOST_QP_BASE_ADDR_1_ADDR /* 0x1011d4 */, PSIF_CSR_ADDR_BASE_ADDR_QP_1                 /* 0x005258 */,     8, 0, 35 }, /* Index  15 */
{        TSU_HOST_QP_BASE_ADDR_2_ADDR /* 0x101214 */, PSIF_CSR_ADDR_BASE_ADDR_QP_2                 /* 0x005260 */,     8, 0, 35 }, /* Index  16 */
{        TSU_HOST_MRS_CREDIT_CNT_ADDR /* 0x101256 */, PSIF_CSR_ADDR_HOST_MRS_CREDIT_CNT            /* 0x005268 */,     8, 1,  1 }, /* Index  17 */
{        TSU_HOST_ERR_CREDIT_CNT_ADDR /* 0x101257 */, PSIF_CSR_ADDR_HOST_ERR_CREDIT_CNT            /* 0x005270 */,     8, 1,  1 }, /* Index  18 */
{               TSU_HOST_LLQ_CNT_ADDR /* 0x101258 */, PSIF_CSR_ADDR_HOST_LLQ_CNT                   /* 0x005278 */,     8, 1,  1 }, /* Index  19 */
{            TSU_HOST_INT_STATUS_ADDR /* 0x101259 */, PSIF_CSR_ADDR_HOST_INT_STATUS                /* 0x005280 */,     8, 1,  1 }, /* Index  20 */
{              TSU_HOST_INT_MASK_ADDR /* 0x10125a */, PSIF_CSR_ADDR_HOST_INT_MASK                  /* 0x005288 */,     8, 1,  1 }, /* Index  21 */
{               TSU_HOST_INT_PRI_ADDR /* 0x10125b */, PSIF_CSR_ADDR_HOST_INT_PRI                   /* 0x005290 */,     8, 1,  1 }, /* Index  22 */
{      TSU_HOST_INT_STATUS_CLEAR_ADDR /* 0x10125c */, PSIF_CSR_ADDR_HOST_INT_STATUS_CLEAR          /* 0x005298 */,     8, 1,  1 }, /* Index  23 */
{ TSU_HOST_INT_STATUS_CLEAR_KICK_ADDR /* 0x10125d */, PSIF_CSR_ADDR_HOST_INT_STATUS_CLEAR_KICK     /* 0x0052a0 */,     8, 1,  1 }, /* Index  24 */
{           TSU_HOST_EPS_ADDRESS_ADDR /* 0x101400 */, PSIF_CSR_ADDR_HOST_EPS_ADDRESS               /* 0x0052a8 */,    16, 1,  1 }, /* Index  25 */
{       TSU_HOST_ECC_PARITY_ERRS_ADDR /* 0x101440 */, PSIF_CSR_ADDR_HOST_ECC_PARITY_ERRS           /* 0x0052b8 */,    16, 1,  1 }, /* Index  26 */
{        TSU_HOST_FATAL_INT_MASK_ADDR /* 0x101480 */, PSIF_CSR_ADDR_HOST_FATAL_INT_MASK            /* 0x0052c8 */,     8, 1,  1 }, /* Index  27 */
{              TSU_HOST_INT_CTRL_ADDR /* 0x102000 */, PSIF_CSR_ADDR_HOST_INT_CTRL                  /* 0x0052d0 */,     8, 1,  1 }, /* Index  28 */
{       TSU_HOST_INT_CHAN_CTRL_0_ADDR /* 0x102100 */, PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_0           /* 0x0052d8 */,   528, 1,  1 }, /* Index  29 */
{       TSU_HOST_INT_CHAN_CTRL_1_ADDR /* 0x102180 */, PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_1           /* 0x0054e8 */,   528, 1,  1 }, /* Index  30 */
{       TSU_HOST_INT_CHAN_CTRL_2_ADDR /* 0x102200 */, PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_2           /* 0x0056f8 */,   528, 1,  1 }, /* Index  31 */
{             TSU_MMU_MMU_CONFIG_ADDR /* 0x200000 */, PSIF_CSR_ADDR_MMU_CONFIG                     /* 0x005908 */,     8, 1,  1 }, /* Index  32 */
{          TSU_MMU_CREDIT_CONFIG_ADDR /* 0x200001 */, PSIF_CSR_ADDR_MMU_CREDIT_CONFIG              /* 0x005910 */,     8, 1,  1 }, /* Index  33 */
{                TSU_MMU_PA_MASK_ADDR /* 0x200002 */, PSIF_CSR_ADDR_MMU_PA_MASK                    /* 0x005918 */,     8, 1,  1 }, /* Index  34 */
{           TSU_MMU_FLUSH_CACHES_ADDR /* 0x200003 */, PSIF_CSR_ADDR_MMU_FLUSH_CACHES               /* 0x005920 */,     8, 1,  1 }, /* Index  35 */
{          TSU_MMU_STAT_COUNTERS_ADDR /* 0x200004 */, PSIF_CSR_ADDR_MMU_STAT_COUNTERS              /* 0x005928 */,     8, 1,  1 }, /* Index  36 */
{        TSU_MMU_ECC_PARITY_ERRS_ADDR /* 0x200008 */, PSIF_CSR_ADDR_MMU_ECC_PARITY_ERRS            /* 0x005930 */,    16, 1,  1 }, /* Index  37 */
{             TSU_MMU_UF_CONTROL_ADDR /* 0x200040 */, PSIF_CSR_ADDR_MMU_UF_CONTROL                 /* 0x005940 */,     8, 1,  1 }, /* Index  38 */
{        TSU_MMU_UF_CONTROL_KICK_ADDR /* 0x200041 */, PSIF_CSR_ADDR_MMU_UF_CONTROL_KICK            /* 0x005948 */,     8, 1,  1 }, /* Index  39 */
{             TSU_MMU_INT_STATUS_ADDR /* 0x200042 */, PSIF_CSR_ADDR_MMU_INT_STATUS                 /* 0x005950 */,     8, 1,  1 }, /* Index  40 */
{               TSU_MMU_INT_MASK_ADDR /* 0x200043 */, PSIF_CSR_ADDR_MMU_INT_MASK                   /* 0x005958 */,     8, 1,  1 }, /* Index  41 */
{                TSU_MMU_INT_PRI_ADDR /* 0x200044 */, PSIF_CSR_ADDR_MMU_INT_PRI                    /* 0x005960 */,     8, 1,  1 }, /* Index  42 */
{       TSU_MMU_INT_STATUS_CLEAR_ADDR /* 0x200045 */, PSIF_CSR_ADDR_MMU_INT_STATUS_CLEAR           /* 0x005968 */,     8, 1,  1 }, /* Index  43 */
{  TSU_MMU_INT_STATUS_CLEAR_KICK_ADDR /* 0x200046 */, PSIF_CSR_ADDR_MMU_INT_STATUS_CLEAR_KICK      /* 0x005970 */,     8, 1,  1 }, /* Index  44 */
{         TSU_MMU_UNCOR_ERR_MASK_ADDR /* 0x200047 */, PSIF_CSR_ADDR_MMU_UNCOR_ERR_MASK             /* 0x005978 */,     8, 1,  1 }, /* Index  45 */
{              TSU_CBU_TVL_TABLE_ADDR /* 0x300000 */, PSIF_CSR_ADDR_TVL_TABLE                      /* 0x005980 */,  8960, 1,  1 }, /* Index  46 */
{           TSU_CBU_SUB_BAR_ADDR_ADDR /* 0x300800 */, PSIF_CSR_ADDR_SUB_BAR_ADDR                   /* 0x007c80 */,     8, 0, 33 }, /* Index  47 */
{       TSU_CBU_VCB_START_OFFSET_ADDR /* 0x300840 */, PSIF_CSR_ADDR_VCB_START                      /* 0x007c88 */,     8, 0, 33 }, /* Index  48 */
{         TSU_CBU_PCB_ALLOC_HIGH_ADDR /* 0x300880 */, PSIF_CSR_ADDR_PCB_ALLOC_HIGH                 /* 0x007c90 */,     8, 0, 33 }, /* Index  49 */
{          TSU_CBU_PCB_ALLOC_LOW_ADDR /* 0x3008c0 */, PSIF_CSR_ADDR_PCB_ALLOC_LOW                  /* 0x007c98 */,     8, 0, 33 }, /* Index  50 */
{          TSU_CBU_PCB_AVAILABLE_ADDR /* 0x300900 */, PSIF_CSR_ADDR_PCB_AVAILABLE                  /* 0x007ca0 */,     8, 0, 33 }, /* Index  51 */
{          TSU_CBU_PCB_HIGH_USED_ADDR /* 0x300940 */, PSIF_CSR_ADDR_PCB_USED_HIGH                  /* 0x007ca8 */,     8, 0, 33 }, /* Index  52 */
{           TSU_CBU_PCB_LOW_USED_ADDR /* 0x300980 */, PSIF_CSR_ADDR_PCB_USED_LOW                   /* 0x007cb0 */,     8, 0, 33 }, /* Index  53 */
{              TSU_CBU_SCBD_INIT_ADDR /* 0x3009c0 */, PSIF_CSR_ADDR_SCBD_INIT                      /* 0x007cb8 */,     8, 1,  1 }, /* Index  54 */
{         TSU_CBU_SCBD_INIT_DONE_ADDR /* 0x3009c1 */, PSIF_CSR_ADDR_SCBD_FINI                      /* 0x007cc0 */,     8, 1,  1 }, /* Index  55 */
{  TSU_CBU_DCB_START_OFFSET_HOST_ADDR /* 0x3009c2 */, PSIF_CSR_ADDR_DCB_START_OFFSET_HOST          /* 0x007cc8 */,     8, 1,  1 }, /* Index  56 */
{   TSU_CBU_DCB_START_OFFSET_EPS_ADDR /* 0x3009c3 */, PSIF_CSR_ADDR_DCB_START_OFFSET_EPS           /* 0x007cd0 */,     8, 1,  1 }, /* Index  57 */
{   TSU_CBU_DCB_START_OFFSET_SQS_ADDR /* 0x3009c4 */, PSIF_CSR_ADDR_DCB_START_OFFSET_SQS           /* 0x007cd8 */,     8, 1,  1 }, /* Index  58 */
{    TSU_CBU_COLLECT_LEN_ROUNDUP_ADDR /* 0x3009c5 */, PSIF_CSR_ADDR_CBU_COLLECT_LEN_ROUNDUP        /* 0x007ce0 */,     8, 1,  1 }, /* Index  59 */
{           TSU_CBU_ECC_ERR_CTRL_ADDR /* 0x3009c6 */, PSIF_CSR_ADDR_CBU_ECC_ERR_CTRL               /* 0x007ce8 */,     8, 1,  1 }, /* Index  60 */
{         TSU_CBU_ECC_ERR_STATUS_ADDR /* 0x3009c7 */, PSIF_CSR_ADDR_CBU_ECC_ERR_STATUS             /* 0x007cf0 */,     8, 1,  1 }, /* Index  61 */
{   TSU_CBU_ECC_ERR_STATUS_CLEAR_ADDR /* 0x3009c8 */, PSIF_CSR_ADDR_CBU_ECC_ERR_STATUS_CLEAR       /* 0x007cf8 */,     8, 1,  1 }, /* Index  62 */
{                  TSU_CBU_CHOKE_ADDR /* 0x300a00 */, PSIF_CSR_ADDR_CBU_CHOKE                      /* 0x007d00 */,     8, 0, 33 }, /* Index  63 */
{              TSU_CBU_UF_STATUS_ADDR /* 0x300a40 */, PSIF_CSR_ADDR_CBU_UF_STATUS                  /* 0x007d08 */,     8, 0, 33 }, /* Index  64 */
{          TSU_CBU_VCB_CLEAR_NUM_ADDR /* 0x300a80 */, PSIF_CSR_ADDR_CBU_VCB_CLEAR_NUM              /* 0x007d10 */,     8, 0, 33 }, /* Index  65 */
{              TSU_CBU_VCB_CLEAR_ADDR /* 0x300ac0 */, PSIF_CSR_ADDR_CBU_VCB_CLEAR                  /* 0x007d18 */,     8, 0, 33 }, /* Index  66 */
{       TSU_CBU_DCB_START_OFFSET_ADDR /* 0x300b00 */, PSIF_CSR_ADDR_CBU_DCB_START_OFFSET           /* 0x007d20 */,     8, 0, 33 }, /* Index  67 */
{           TSU_CBU_DCB_UF_TABLE_ADDR /* 0x301000 */, PSIF_CSR_ADDR_DCB_UF_TABLE                   /* 0x007d28 */,  2048, 1,  1 }, /* Index  68 */
{     TSU_CBU_DCB_STATUS_HW_LOCK_ADDR /* 0x301100 */, PSIF_CSR_ADDR_CBU_DCB_STATUS_HW_LOCK         /* 0x008528 */,  2048, 1,  1 }, /* Index  69 */
{             TSU_CBU_DCB_STATUS_ADDR /* 0x301200 */, PSIF_CSR_ADDR_DCB_STATUS                     /* 0x008d28 */,  2048, 1,  1 }, /* Index  70 */
{              TSU_CBU_DCB_CLEAR_ADDR /* 0x301300 */, PSIF_CSR_ADDR_CBU_DCB_CLEAR                  /* 0x009528 */,  2048, 1,  1 }, /* Index  71 */
{           TSU_CBU_DCB_DOORBELL_ADDR /* 0x304000 */, PSIF_CSR_ADDR_CBU_DCB_DOORBELL               /* 0x009d28 */, 131072, 1,  1 }, /* Index  72 */
{    TSU_RQS_PRIVATE_CMPL_CREDIT_ADDR /* 0x400000 */, PSIF_CSR_ADDR_CMPL_CREDIT_PRIVATE            /* 0x029d28 */,  1024, 1,  1 }, /* Index  73 */
{ TSU_RQS_TVL_CMPL_CREDIT_CONSUMED_ADDR /* 0x400080 */, PSIF_CSR_ADDR_CMPL_CREDIT_TVL_CONSUMED       /* 0x02a128 */,  1024, 1,  1 }, /* Index  74 */
{     TSU_RQS_COMMON_CMPL_CREDIT_ADDR /* 0x400100 */, PSIF_CSR_ADDR_CMPL_CREDIT_COMMON             /* 0x02a528 */,     8, 1,  1 }, /* Index  75 */
{ TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED_ADDR /* 0x400101 */, PSIF_CSR_ADDR_CMPL_CREDIT_COMMON_CONSUMED    /* 0x02a530 */,     8, 1,  1 }, /* Index  76 */
{ TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0_ADDR /* 0x400102 */, PSIF_CSR_ADDR_RQS_COMMON_CMPL_CREDIT_ENABLE_0 /* 0x02a538 */,     8, 1,  1 }, /* Index  77 */
{ TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1_ADDR /* 0x400103 */, PSIF_CSR_ADDR_RQS_COMMON_CMPL_CREDIT_ENABLE_1 /* 0x02a540 */,     8, 1,  1 }, /* Index  78 */
{    TSU_RQS_PRIVATE_EXEC_CREDIT_ADDR /* 0x400200 */, PSIF_CSR_ADDR_EXEC_CREDIT_PRIVATE            /* 0x02a548 */,  1024, 1,  1 }, /* Index  79 */
{ TSU_RQS_TVL_EXEC_CREDIT_CONSUMED_ADDR /* 0x400280 */, PSIF_CSR_ADDR_EXEC_CREDIT_TVL_CONSUMED       /* 0x02a948 */,  1024, 1,  1 }, /* Index  80 */
{     TSU_RQS_COMMON_EXEC_CREDIT_ADDR /* 0x400300 */, PSIF_CSR_ADDR_EXEC_CREDIT_COMMON             /* 0x02ad48 */,     8, 1,  1 }, /* Index  81 */
{ TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED_ADDR /* 0x400301 */, PSIF_CSR_ADDR_EXEC_CREDIT_COMMON_CONSUMED    /* 0x02ad50 */,     8, 1,  1 }, /* Index  82 */
{ TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0_ADDR /* 0x400302 */, PSIF_CSR_ADDR_RQS_COMMON_EXEC_CREDIT_ENABLE_0 /* 0x02ad58 */,     8, 1,  1 }, /* Index  83 */
{ TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1_ADDR /* 0x400303 */, PSIF_CSR_ADDR_RQS_COMMON_EXEC_CREDIT_ENABLE_1 /* 0x02ad60 */,     8, 1,  1 }, /* Index  84 */
{               TSU_RQS_P1_SL2VL_ADDR /* 0x400400 */, PSIF_CSR_ADDR_P1_SL2VL                       /* 0x02ad68 */,     8, 0, 35 }, /* Index  85 */
{               TSU_RQS_P2_SL2VL_ADDR /* 0x400440 */, PSIF_CSR_ADDR_P2_SL2VL                       /* 0x02ad70 */,     8, 0, 35 }, /* Index  86 */
{        TSU_RQS_P1_OWN_LID_BASE_ADDR /* 0x400800 */, PSIF_CSR_ADDR_P1_OWN_LID_BASE                /* 0x02ad78 */,     8, 0, 35 }, /* Index  87 */
{        TSU_RQS_P2_OWN_LID_BASE_ADDR /* 0x400840 */, PSIF_CSR_ADDR_P2_OWN_LID_BASE                /* 0x02ad80 */,     8, 0, 35 }, /* Index  88 */
{         TSU_RQS_P1_PORT_ENABLE_ADDR /* 0x400880 */, PSIF_CSR_ADDR_P1_PORT_ENABLE                 /* 0x02ad88 */,     8, 1,  1 }, /* Index  89 */
{         TSU_RQS_P2_PORT_ENABLE_ADDR /* 0x400881 */, PSIF_CSR_ADDR_P2_PORT_ENABLE                 /* 0x02ad90 */,     8, 1,  1 }, /* Index  90 */
{         TSU_RQS_P1_SMP_ALLOWED_ADDR /* 0x400882 */, PSIF_CSR_ADDR_RQS_P1_SMP_ALLOWED             /* 0x02ad98 */,     8, 1,  1 }, /* Index  91 */
{         TSU_RQS_P2_SMP_ALLOWED_ADDR /* 0x400883 */, PSIF_CSR_ADDR_RQS_P2_SMP_ALLOWED             /* 0x02ada0 */,     8, 1,  1 }, /* Index  92 */
{     TSU_RQS_KICK_FIFO_UF_INUSE_ADDR /* 0x400884 */, PSIF_CSR_ADDR_RQS_KICK_FIFO_UF_INUSE         /* 0x02ada8 */,     8, 0, 35 }, /* Index  93 */
{ TSU_RQS_P1_GID_FORWARDING_TABLE_ADDR /* 0x402000 */, PSIF_CSR_ADDR_RQS_P1_GID_FORWARDING_TABLE    /* 0x02adb0 */,   536, 1,  1 }, /* Index  94 */
{ TSU_RQS_P2_GID_FORWARDING_TABLE_ADDR /* 0x402400 */, PSIF_CSR_ADDR_RQS_P2_GID_FORWARDING_TABLE    /* 0x02afc8 */,   536, 1,  1 }, /* Index  95 */
{      TSU_DMA_MAX_ALLOC_VL_BUFF_ADDR /* 0x500000 */, PSIF_CSR_ADDR_VL_BUFF_MAX_ALLOC              /* 0x02b1e0 */,   160, 1,  1 }, /* Index  96 */
{        TSU_DMA_PRIVATE_VL_BUFF_ADDR /* 0x500020 */, PSIF_CSR_ADDR_VL_BUFF_PRIVATE                /* 0x02b280 */,   160, 1,  1 }, /* Index  97 */
{           TSU_DMA_VL_BUFF_USED_ADDR /* 0x500040 */, PSIF_CSR_ADDR_VL_BUFF_USED                   /* 0x02b320 */,   160, 1,  1 }, /* Index  98 */
{       TSU_DMA_GLOBAL_BUFF_USED_ADDR /* 0x500054 */, PSIF_CSR_ADDR_GLOBAL_BUFF_USED               /* 0x02b3c0 */,     8, 1,  1 }, /* Index  99 */
{          TSU_DMA_NUM_OF_BUF_CO_ADDR /* 0x500055 */, PSIF_CSR_ADDR_NUM_OF_DMA_BUF_CO              /* 0x02b3c8 */,     8, 1,  1 }, /* Index 100 */
{          TSU_DMA_NUM_OF_BUF_CI_ADDR /* 0x500056 */, PSIF_CSR_ADDR_NUM_OF_DMA_BUF_CI              /* 0x02b3d0 */,     8, 1,  1 }, /* Index 101 */
{  TSU_DMA_NUM_OF_CNTXTLLQ_INBUN_ADDR /* 0x500057 */, PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_INBUN      /* 0x02b3d8 */,     8, 1,  1 }, /* Index 102 */
{    TSU_DMA_NUM_OF_CNTXTLLQ_POP_ADDR /* 0x500058 */, PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_POP        /* 0x02b3e0 */,     8, 1,  1 }, /* Index 103 */
{    TSU_DMA_NUM_OF_CNTXTLLQ_R2G_ADDR /* 0x500059 */, PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_R2G        /* 0x02b3e8 */,     8, 1,  1 }, /* Index 104 */
{        TSU_DMA_NUM_OF_IBPB_CMD_ADDR /* 0x50005a */, PSIF_CSR_ADDR_NUM_OF_DMA_IBPB_CMD            /* 0x02b3f0 */,     8, 1,  1 }, /* Index 105 */
{        TSU_DMA_NUM_OF_CMPL_CMD_ADDR /* 0x50005b */, PSIF_CSR_ADDR_NUM_OF_DMA_CMPL_CMD            /* 0x02b3f8 */,     8, 1,  1 }, /* Index 106 */
{      TSU_DMA_NUM_OF_QPS_RD_CMD_ADDR /* 0x50005c */, PSIF_CSR_ADDR_NUM_OF_DMA_QPS_RD_CMD          /* 0x02b400 */,     8, 1,  1 }, /* Index 107 */
{      TSU_DMA_NUM_OF_QPS_RD_RSP_ADDR /* 0x50005d */, PSIF_CSR_ADDR_NUM_OF_DMA_QPS_RD_RSP          /* 0x02b408 */,     8, 1,  1 }, /* Index 108 */
{      TSU_DMA_NUM_OF_QPS_WR_CMD_ADDR /* 0x50005e */, PSIF_CSR_ADDR_NUM_OF_DMA_QPS_WR_CMD          /* 0x02b410 */,     8, 1,  1 }, /* Index 109 */
{      TSU_DMA_NUM_OF_QPS_WR_RSP_ADDR /* 0x50005f */, PSIF_CSR_ADDR_NUM_OF_DMA_QPS_WR_RSP          /* 0x02b418 */,     8, 1,  1 }, /* Index 110 */
{    TSU_DMA_NUM_OF_PKTLLQ_INBUN_ADDR /* 0x500060 */, PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_INBUN        /* 0x02b420 */,     8, 1,  1 }, /* Index 111 */
{      TSU_DMA_NUM_OF_PKTLLQ_POP_ADDR /* 0x500061 */, PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_POP          /* 0x02b428 */,     8, 1,  1 }, /* Index 112 */
{      TSU_DMA_NUM_OF_PKTLLQ_R2G_ADDR /* 0x500062 */, PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_R2G          /* 0x02b430 */,     8, 1,  1 }, /* Index 113 */
{        TSU_DMA_NUM_OF_PYLD_CMD_ADDR /* 0x500063 */, PSIF_CSR_ADDR_NUM_OF_DMA_PYLD_CMD            /* 0x02b438 */,     8, 1,  1 }, /* Index 114 */
{        TSU_DMA_NUM_OF_PYLD_RSP_ADDR /* 0x500064 */, PSIF_CSR_ADDR_NUM_OF_DMA_PYLD_RSP            /* 0x02b440 */,     8, 1,  1 }, /* Index 115 */
{         TSU_DMA_NUM_OF_SGE_CMD_ADDR /* 0x500065 */, PSIF_CSR_ADDR_NUM_OF_DMA_SGE_CMD             /* 0x02b448 */,     8, 1,  1 }, /* Index 116 */
{         TSU_DMA_NUM_OF_SGE_RSP_ADDR /* 0x500066 */, PSIF_CSR_ADDR_NUM_OF_DMA_SGE_RSP             /* 0x02b450 */,     8, 1,  1 }, /* Index 117 */
{           TSU_DMA_LSO_BUF_USED_ADDR /* 0x500067 */, PSIF_CSR_ADDR_DMA_LSO_BUF_USED               /* 0x02b458 */,     8, 1,  1 }, /* Index 118 */
{           TSU_DMA_ECC_ERR_CTRL_ADDR /* 0x500068 */, PSIF_CSR_ADDR_DMA_ECC_ERR_CTRL               /* 0x02b460 */,     8, 1,  1 }, /* Index 119 */
{         TSU_DMA_ECC_ERR_STATUS_ADDR /* 0x500069 */, PSIF_CSR_ADDR_DMA_ECC_ERR_STATUS             /* 0x02b468 */,     8, 1,  1 }, /* Index 120 */
{   TSU_DMA_ECC_ERR_STATUS_CLEAR_ADDR /* 0x50006a */, PSIF_CSR_ADDR_DMA_ECC_ERR_STATUS_CLEAR       /* 0x02b470 */,     8, 1,  1 }, /* Index 121 */
{             TSU_DMA_LINK_SPEED_ADDR /* 0x500080 */, PSIF_CSR_ADDR_LINK_SPEED                     /* 0x02b478 */,   560, 1,  1 }, /* Index 122 */
{             TSU_DMA_LINK_WIDTH_ADDR /* 0x500100 */, PSIF_CSR_ADDR_LINK_WIDTH                     /* 0x02b6a8 */,   560, 1,  1 }, /* Index 123 */
{           TSU_DMA_UF_TRANS_MAX_ADDR /* 0x500180 */, PSIF_CSR_ADDR_DMA_UF_TRANS_MAX               /* 0x02b8d8 */,     8, 0, 35 }, /* Index 124 */
{          TSU_DMA_UF_TRANS_USED_ADDR /* 0x5001c0 */, PSIF_CSR_ADDR_DMA_UF_TRANS_USED              /* 0x02b8e0 */,     8, 0, 35 }, /* Index 125 */
{        TSU_DMA_MAC_ADDR0_TABLE_ADDR /* 0x500200 */, PSIF_CSR_ADDR_DMA_MAC_ADDR0_TABLE            /* 0x02b8e8 */,   544, 1,  1 }, /* Index 126 */
{        TSU_DMA_MAC_ADDR1_TABLE_ADDR /* 0x500280 */, PSIF_CSR_ADDR_DMA_MAC_ADDR1_TABLE            /* 0x02bb08 */,   544, 1,  1 }, /* Index 127 */
{              TSU_DMA_VID_TABLE_ADDR /* 0x500400 */, PSIF_CSR_ADDR_DMA_VID_TABLE                  /* 0x02bd28 */,  2176, 1,  1 }, /* Index 128 */
{               TSU_DMA_MAC_CTRL_ADDR /* 0x500600 */, PSIF_CSR_ADDR_DMA_MAC_CTRL                   /* 0x02c5a8 */,   544, 1,  1 }, /* Index 129 */
{        TSU_DMA_PPTY_HDR_LENGTH_ADDR /* 0x500680 */, PSIF_CSR_ADDR_DMA_PPTY_HDR_LENGTH            /* 0x02c7c8 */,     8, 1,  1 }, /* Index 130 */
{         TSU_DMA_TCP_FLAGS_MASK_ADDR /* 0x500682 */, PSIF_CSR_ADDR_DMA_TCP_FLAGS_MASK             /* 0x02c7d0 */,     8, 1,  1 }, /* Index 131 */
{           TSU_DMA_OFFLOAD_CTRL_ADDR /* 0x500683 */, PSIF_CSR_ADDR_DMA_OFFLOAD_CTRL               /* 0x02c7d8 */,     8, 1,  1 }, /* Index 132 */
{      TSU_DMA_VLAN_MEMBER_TABLE_ADDR /* 0x501000 */, PSIF_CSR_ADDR_DMA_VLAN_MEMBER_TABLE          /* 0x02c7e0 */, 17408, 1,  1 }, /* Index 133 */
{        TSU_DMA_OUTER_VLAN_TYPE_ADDR /* 0x502000 */, PSIF_CSR_ADDR_DMA_OUTER_VLAN_TYPE            /* 0x030be0 */,     8, 0, 34 }, /* Index 134 */
{        TSU_DMA_INNER_VLAN_TYPE_ADDR /* 0x502040 */, PSIF_CSR_ADDR_DMA_INNER_VLAN_TYPE            /* 0x030be8 */,     8, 0, 34 }, /* Index 135 */
{         TSU_IBPB_P1_PKEY_TABLE_ADDR /* 0x600000 */, PSIF_CSR_ADDR_P1_SND_PKEY_TABLE              /* 0x030bf0 */,  2176, 1,  1 }, /* Index 136 */
{          TSU_IBPB_P1_GID_UPPER_ADDR /* 0x600200 */, PSIF_CSR_ADDR_IBPB_P1_GID_UPPER              /* 0x031470 */,   536, 1,  1 }, /* Index 137 */
{          TSU_IBPB_P1_GID_LOWER_ADDR /* 0x600300 */, PSIF_CSR_ADDR_IBPB_P1_GID_LOWER              /* 0x031688 */,   536, 1,  1 }, /* Index 138 */
{       TSU_IBPB_P1_OWN_LID_BASE_ADDR /* 0x600400 */, PSIF_CSR_ADDR_P1_SND_LID                     /* 0x0318a0 */,     8, 0, 35 }, /* Index 139 */
{     TSU_IBPB_P1_PKEY_UF_STRIDE_ADDR /* 0x600440 */, PSIF_CSR_ADDR_P1_SND_PKEY_UF_STRIDE          /* 0x0318a8 */,     8, 1,  1 }, /* Index 140 */
{         TSU_IBPB_P2_PKEY_TABLE_ADDR /* 0x600800 */, PSIF_CSR_ADDR_P2_SND_PKEY_TABLE              /* 0x0318b0 */,  2176, 1,  1 }, /* Index 141 */
{          TSU_IBPB_P2_GID_UPPER_ADDR /* 0x600a00 */, PSIF_CSR_ADDR_IBPB_P2_GID_UPPER              /* 0x032130 */,   536, 1,  1 }, /* Index 142 */
{          TSU_IBPB_P2_GID_LOWER_ADDR /* 0x600b00 */, PSIF_CSR_ADDR_IBPB_P2_GID_LOWER              /* 0x032348 */,   536, 1,  1 }, /* Index 143 */
{       TSU_IBPB_P2_OWN_LID_BASE_ADDR /* 0x600c00 */, PSIF_CSR_ADDR_P2_SND_LID                     /* 0x032560 */,     8, 0, 35 }, /* Index 144 */
{     TSU_IBPB_P2_PKEY_UF_STRIDE_ADDR /* 0x600c40 */, PSIF_CSR_ADDR_P2_SND_PKEY_UF_STRIDE          /* 0x032568 */,     8, 1,  1 }, /* Index 145 */
{        TSU_QPS_AHA_BASE_ADDR_0_ADDR /* 0x700000 */, PSIF_CSR_ADDR_BASE_ADDR_AH                   /* 0x032570 */,     8, 0, 35 }, /* Index 146 */
{        TSU_QPS_AHA_BASE_ADDR_1_ADDR /* 0x700040 */, PSIF_CSR_ADDR_BASE_ADDR_AH_1                 /* 0x032578 */,     8, 0, 35 }, /* Index 147 */
{        TSU_QPS_AHA_BASE_ADDR_2_ADDR /* 0x700080 */, PSIF_CSR_ADDR_BASE_ADDR_AH_2                 /* 0x032580 */,     8, 0, 35 }, /* Index 148 */
{         TSU_QPS_QP_BASE_ADDR_0_ADDR /* 0x700100 */, PSIF_CSR_ADDR_BASE_ADDR_QP_QPS               /* 0x032588 */,     8, 0, 35 }, /* Index 149 */
{         TSU_QPS_QP_BASE_ADDR_1_ADDR /* 0x700140 */, PSIF_CSR_ADDR_BASE_ADDR_QP_QPS_1             /* 0x032590 */,     8, 0, 35 }, /* Index 150 */
{         TSU_QPS_QP_BASE_ADDR_2_ADDR /* 0x700180 */, PSIF_CSR_ADDR_BASE_ADDR_QP_QPS_2             /* 0x032598 */,     8, 0, 35 }, /* Index 151 */
{             TSU_QPS_UF_CONTROL_ADDR /* 0x700200 */, PSIF_CSR_ADDR_QPS_UF_CONTROL                 /* 0x0325a0 */,     8, 1,  1 }, /* Index 152 */
{        TSU_QPS_UF_CONTROL_KICK_ADDR /* 0x700201 */, PSIF_CSR_ADDR_QPS_UF_CONTROL_KICK            /* 0x0325a8 */,     8, 1,  1 }, /* Index 153 */
{               TSU_QPS_UF_EMPTY_ADDR /* 0x700202 */, PSIF_CSR_ADDR_UF_EMPTY                       /* 0x0325b0 */,     8, 1,  1 }, /* Index 154 */
{             TSU_QPS_INT_STATUS_ADDR /* 0x700203 */, PSIF_CSR_ADDR_QPS_INT_STATUS                 /* 0x0325b8 */,     8, 1,  1 }, /* Index 155 */
{               TSU_QPS_INT_MASK_ADDR /* 0x700204 */, PSIF_CSR_ADDR_QPS_INT_MASK                   /* 0x0325c0 */,     8, 1,  1 }, /* Index 156 */
{                TSU_QPS_INT_PRI_ADDR /* 0x700205 */, PSIF_CSR_ADDR_QPS_INT_PRI                    /* 0x0325c8 */,     8, 1,  1 }, /* Index 157 */
{       TSU_QPS_INT_STATUS_CLEAR_ADDR /* 0x700206 */, PSIF_CSR_ADDR_QPS_INT_STATUS_CLEAR           /* 0x0325d0 */,     8, 1,  1 }, /* Index 158 */
{  TSU_QPS_INT_STATUS_CLEAR_KICK_ADDR /* 0x700207 */, PSIF_CSR_ADDR_QPS_INT_STATUS_CLEAR_KICK      /* 0x0325d8 */,     8, 1,  1 }, /* Index 159 */
{   TSU_QPS_UF_STOP_TIMEOUT_KICK_ADDR /* 0x700240 */, PSIF_CSR_ADDR_QPS_UF_STOP_TIMEOUT_KICK       /* 0x0325e0 */,     8, 1,  1 }, /* Index 160 */
{         TSU_QPS_MODIFY_QP_CTRL_ADDR /* 0x700400 */, PSIF_CSR_ADDR_MODIFY_QP_CTRL                 /* 0x0325e8 */,     8, 1,  1 }, /* Index 161 */
{       TSU_QPS_MODIFY_QP_DATA_0_ADDR /* 0x700440 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_0           /* 0x0325f0 */,     8, 1,  1 }, /* Index 162 */
{       TSU_QPS_MODIFY_QP_DATA_1_ADDR /* 0x700441 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_1           /* 0x0325f8 */,     8, 1,  1 }, /* Index 163 */
{       TSU_QPS_MODIFY_QP_DATA_2_ADDR /* 0x700442 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_2           /* 0x032600 */,     8, 1,  1 }, /* Index 164 */
{       TSU_QPS_MODIFY_QP_DATA_3_ADDR /* 0x700443 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_3           /* 0x032608 */,     8, 1,  1 }, /* Index 165 */
{       TSU_QPS_MODIFY_QP_DATA_4_ADDR /* 0x700444 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_4           /* 0x032610 */,     8, 1,  1 }, /* Index 166 */
{       TSU_QPS_MODIFY_QP_DATA_5_ADDR /* 0x700445 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_5           /* 0x032618 */,     8, 1,  1 }, /* Index 167 */
{       TSU_QPS_MODIFY_QP_DATA_6_ADDR /* 0x700446 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_6           /* 0x032620 */,     8, 1,  1 }, /* Index 168 */
{       TSU_QPS_MODIFY_QP_DATA_7_ADDR /* 0x700447 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_7           /* 0x032628 */,     8, 1,  1 }, /* Index 169 */
{       TSU_QPS_MODIFY_QP_DATA_8_ADDR /* 0x700448 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_8           /* 0x032630 */,     8, 1,  1 }, /* Index 170 */
{       TSU_QPS_MODIFY_QP_DATA_9_ADDR /* 0x700449 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_9           /* 0x032638 */,     8, 1,  1 }, /* Index 171 */
{         TSU_QPS_MODIFY_QP_KICK_ADDR /* 0x700480 */, PSIF_CSR_ADDR_MODIFY_QP_KICK                 /* 0x032640 */,     8, 1,  1 }, /* Index 172 */
{       TSU_QPS_MODIFY_QP_STATUS_ADDR /* 0x700481 */, PSIF_CSR_ADDR_QPS_MODIFY_QP_STATUS           /* 0x032648 */,     8, 1,  1 }, /* Index 173 */
{          TSU_QPS_QUERY_QP_DATA_ADDR /* 0x700482 */, PSIF_CSR_ADDR_QPS_QUERY_QP_DATA              /* 0x032650 */,   192, 1,  1 }, /* Index 174 */
{             TSU_QPS_WR_QP_DATA_ADDR /* 0x700500 */, PSIF_CSR_ADDR_QPS_WR_QP_DATA                 /* 0x032710 */,   128, 1,  1 }, /* Index 175 */
{             TSU_QPS_WR_QP_PATH_ADDR /* 0x700514 */, PSIF_CSR_ADDR_QPS_WR_QP_PATH                 /* 0x032790 */,    32, 1,  1 }, /* Index 176 */
{            TSU_QPS_WR_QP_INDEX_ADDR /* 0x700540 */, PSIF_CSR_ADDR_QPS_WR_QP_INDEX                /* 0x0327b0 */,     8, 1,  1 }, /* Index 177 */
{             TSU_QPS_WR_QP_KICK_ADDR /* 0x700541 */, PSIF_CSR_ADDR_QPS_WR_QP_KICK                 /* 0x0327b8 */,     8, 1,  1 }, /* Index 178 */
{ TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR_ADDR /* 0x700800 */, PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_INIT_RTR  /* 0x0327c0 */,    16, 1,  1 }, /* Index 179 */
{ TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS_ADDR /* 0x700802 */, PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_RTR_RTS   /* 0x0327d0 */,    16, 1,  1 }, /* Index 180 */
{ TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS_ADDR /* 0x700804 */, PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_RTS_RTS   /* 0x0327e0 */,    16, 1,  1 }, /* Index 181 */
{ TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET_ADDR /* 0x700806 */, PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET /* 0x0327f0 */,    16, 1,  1 }, /* Index 182 */
{ TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS_ADDR /* 0x700808 */, PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_SQERR_RTS /* 0x032800 */,    16, 1,  1 }, /* Index 183 */
{              TSU_QPS_REF_COUNT_ADDR /* 0x702000 */, PSIF_CSR_ADDR_QPS_REF_COUNT                  /* 0x032810 */,     8, 0, 33 }, /* Index 184 */
{            TSU_CMPL_UF_CONTROL_ADDR /* 0x800000 */, PSIF_CSR_ADDR_CMPL_UF_CONTROL                /* 0x032818 */,     8, 1,  1 }, /* Index 185 */
{       TSU_CMPL_UF_CONTROL_KICK_ADDR /* 0x800001 */, PSIF_CSR_ADDR_CMPL_UF_CONTROL_KICK           /* 0x032820 */,     8, 1,  1 }, /* Index 186 */
{            TSU_CMPL_INT_STATUS_ADDR /* 0x800002 */, PSIF_CSR_ADDR_CMPL_INT_STATUS                /* 0x032828 */,     8, 1,  1 }, /* Index 187 */
{              TSU_CMPL_INT_MASK_ADDR /* 0x800003 */, PSIF_CSR_ADDR_CMPL_INT_MASK                  /* 0x032830 */,     8, 1,  1 }, /* Index 188 */
{               TSU_CMPL_INT_PRI_ADDR /* 0x800004 */, PSIF_CSR_ADDR_CMPL_INT_PRI                   /* 0x032838 */,     8, 1,  1 }, /* Index 189 */
{      TSU_CMPL_INT_STATUS_CLEAR_ADDR /* 0x800005 */, PSIF_CSR_ADDR_CMPL_INT_STATUS_CLEAR          /* 0x032840 */,     8, 1,  1 }, /* Index 190 */
{ TSU_CMPL_INT_STATUS_CLEAR_KICK_ADDR /* 0x800006 */, PSIF_CSR_ADDR_CMPL_INT_STATUS_CLEAR_KICK     /* 0x032848 */,     8, 1,  1 }, /* Index 191 */
{        TSU_CMPL_SQ_BASE_ADDR_0_ADDR /* 0x800040 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_CMPL              /* 0x032850 */,     8, 0, 35 }, /* Index 192 */
{        TSU_CMPL_SQ_BASE_ADDR_1_ADDR /* 0x800080 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_CMPL_1            /* 0x032858 */,     8, 0, 35 }, /* Index 193 */
{        TSU_CMPL_SQ_BASE_ADDR_2_ADDR /* 0x8000c0 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_CMPL_2            /* 0x032860 */,     8, 0, 35 }, /* Index 194 */
{        TSU_VAL_KEY_BASE_ADDR_0_ADDR /* 0x900000 */, PSIF_CSR_ADDR_BASE_ADDR_KEY                  /* 0x032868 */,     8, 0, 35 }, /* Index 195 */
{        TSU_VAL_KEY_BASE_ADDR_1_ADDR /* 0x900040 */, PSIF_CSR_ADDR_BASE_ADDR_KEY_1                /* 0x032870 */,     8, 0, 35 }, /* Index 196 */
{        TSU_VAL_KEY_BASE_ADDR_2_ADDR /* 0x900080 */, PSIF_CSR_ADDR_BASE_ADDR_KEY_2                /* 0x032878 */,     8, 0, 35 }, /* Index 197 */
{             TSU_VAL_UF_CONTROL_ADDR /* 0x900100 */, PSIF_CSR_ADDR_VAL_UF_CONTROL                 /* 0x032880 */,     8, 1,  1 }, /* Index 198 */
{        TSU_VAL_UF_CONTROL_KICK_ADDR /* 0x900101 */, PSIF_CSR_ADDR_VAL_UF_CONTROL_KICK            /* 0x032888 */,     8, 1,  1 }, /* Index 199 */
{             TSU_VAL_INT_STATUS_ADDR /* 0x900102 */, PSIF_CSR_ADDR_VAL_INT_STATUS                 /* 0x032890 */,     8, 1,  1 }, /* Index 200 */
{               TSU_VAL_INT_MASK_ADDR /* 0x900103 */, PSIF_CSR_ADDR_VAL_INT_MASK                   /* 0x032898 */,     8, 1,  1 }, /* Index 201 */
{                TSU_VAL_INT_PRI_ADDR /* 0x900104 */, PSIF_CSR_ADDR_VAL_INT_PRI                    /* 0x0328a0 */,     8, 1,  1 }, /* Index 202 */
{       TSU_VAL_INT_STATUS_CLEAR_ADDR /* 0x900105 */, PSIF_CSR_ADDR_VAL_INT_STATUS_CLEAR           /* 0x0328a8 */,     8, 1,  1 }, /* Index 203 */
{  TSU_VAL_INT_STATUS_CLEAR_KICK_ADDR /* 0x900106 */, PSIF_CSR_ADDR_VAL_INT_STATUS_CLEAR_KICK      /* 0x0328b0 */,     8, 1,  1 }, /* Index 204 */
{             TSU_RQH_UF_CONTROL_ADDR /* 0xa00000 */, PSIF_CSR_ADDR_RQH_UF_CONTROL                 /* 0x0328b8 */,     8, 1,  1 }, /* Index 205 */
{        TSU_RQH_UF_CONTROL_KICK_ADDR /* 0xa00001 */, PSIF_CSR_ADDR_RQH_UF_CONTROL_KICK            /* 0x0328c0 */,     8, 1,  1 }, /* Index 206 */
{             TSU_RQH_INT_STATUS_ADDR /* 0xa00002 */, PSIF_CSR_ADDR_RQH_INT_STATUS                 /* 0x0328c8 */,     8, 1,  1 }, /* Index 207 */
{               TSU_RQH_INT_MASK_ADDR /* 0xa00003 */, PSIF_CSR_ADDR_RQH_INT_MASK                   /* 0x0328d0 */,     8, 1,  1 }, /* Index 208 */
{                TSU_RQH_INT_PRI_ADDR /* 0xa00004 */, PSIF_CSR_ADDR_RQH_INT_PRI                    /* 0x0328d8 */,     8, 1,  1 }, /* Index 209 */
{       TSU_RQH_INT_STATUS_CLEAR_ADDR /* 0xa00005 */, PSIF_CSR_ADDR_RQH_INT_STATUS_CLEAR           /* 0x0328e0 */,     8, 1,  1 }, /* Index 210 */
{  TSU_RQH_INT_STATUS_CLEAR_KICK_ADDR /* 0xa00006 */, PSIF_CSR_ADDR_RQH_INT_STATUS_CLEAR_KICK      /* 0x0328e8 */,     8, 1,  1 }, /* Index 211 */
{         TSU_RQH_QP_BASE_ADDR_0_ADDR /* 0xa00080 */, PSIF_CSR_ADDR_BASE_ADDR_QP_RQH               /* 0x0328f0 */,     8, 0, 35 }, /* Index 212 */
{         TSU_RQH_QP_BASE_ADDR_1_ADDR /* 0xa000c0 */, PSIF_CSR_ADDR_BASE_ADDR_QP_RQH_1             /* 0x0328f8 */,     8, 0, 35 }, /* Index 213 */
{         TSU_RQH_QP_BASE_ADDR_2_ADDR /* 0xa00100 */, PSIF_CSR_ADDR_BASE_ADDR_QP_RQH_2             /* 0x032900 */,     8, 0, 35 }, /* Index 214 */
{ TSU_RQH_INDIRECT_EQ_SW_INDEX_WR_ADDR /* 0xa00200 */, PSIF_CSR_ADDR_RQH_INDIRECT_EQ_SW_INDEX_WR    /* 0x032908 */,     8, 1,  1 }, /* Index 215 */
{ TSU_RQH_INDIRECT_EQ_HW_INDEX_WR_ADDR /* 0xa00201 */, PSIF_CSR_ADDR_RQH_INDIRECT_EQ_HW_INDEX_WR    /* 0x032910 */,     8, 1,  1 }, /* Index 216 */
{    TSU_RQH_INDIRECT_EQ_CTRL_WR_ADDR /* 0xa00202 */, PSIF_CSR_ADDR_RQH_INDIRECT_EQ_CTRL_WR        /* 0x032918 */,     8, 1,  1 }, /* Index 217 */
{ TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR_ADDR /* 0xa00203 */, PSIF_CSR_ADDR_RQH_INDIRECT_EQ_BASE_ADDR_WR   /* 0x032920 */,     8, 1,  1 }, /* Index 218 */
{ TSU_RQH_INDIRECT_MMU_CONTEXT_WR_ADDR /* 0xa00204 */, PSIF_CSR_ADDR_RQH_INDIRECT_MMU_CONTEXT_WR    /* 0x032928 */,     8, 1,  1 }, /* Index 219 */
{    TSU_RQH_INDIRECTION_ADDR_WR_ADDR /* 0xa00205 */, PSIF_CSR_ADDR_RQH_INDIRECTION_ADDR_WR        /* 0x032930 */,     8, 1,  1 }, /* Index 220 */
{       TSU_RQH_INDIRECT_WR_KICK_ADDR /* 0xa00206 */, PSIF_CSR_ADDR_RQH_INDIRECT_WR_KICK           /* 0x032938 */,     8, 1,  1 }, /* Index 221 */
{ TSU_RQH_INDIRECT_EQ_SW_INDEX_RD_ADDR /* 0xa00240 */, PSIF_CSR_ADDR_RQH_INDIRECT_EQ_SW_INDEX_RD    /* 0x032940 */,     8, 1,  1 }, /* Index 222 */
{ TSU_RQH_INDIRECT_EQ_HW_INDEX_RD_ADDR /* 0xa00241 */, PSIF_CSR_ADDR_RQH_INDIRECT_EQ_HW_INDEX_RD    /* 0x032948 */,     8, 1,  1 }, /* Index 223 */
{    TSU_RQH_INDIRECT_EQ_CTRL_RD_ADDR /* 0xa00242 */, PSIF_CSR_ADDR_RQH_INDIRECT_EQ_CTRL_RD        /* 0x032950 */,     8, 1,  1 }, /* Index 224 */
{ TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD_ADDR /* 0xa00243 */, PSIF_CSR_ADDR_RQH_INDIRECT_EQ_BASE_ADDR_RD   /* 0x032958 */,     8, 1,  1 }, /* Index 225 */
{ TSU_RQH_INDIRECT_MMU_CONTEXT_RD_ADDR /* 0xa00244 */, PSIF_CSR_ADDR_RQH_INDIRECT_MMU_CONTEXT_RD    /* 0x032960 */,     8, 1,  1 }, /* Index 226 */
{    TSU_RQH_INDIRECTION_ADDR_RD_ADDR /* 0xa00245 */, PSIF_CSR_ADDR_RQH_INDIRECTION_ADDR_RD        /* 0x032968 */,     8, 1,  1 }, /* Index 227 */
{       TSU_RQH_INDIRECT_RD_KICK_ADDR /* 0xa00246 */, PSIF_CSR_ADDR_RQH_INDIRECT_RD_KICK           /* 0x032970 */,     8, 1,  1 }, /* Index 228 */
{            TSU_RQH_EQ_SW_INDEX_ADDR /* 0xa01000 */, PSIF_CSR_ADDR_RQH_EQ_SW_INDEX                /* 0x032978 */,  1024, 1,  1 }, /* Index 229 */
{            TSU_RQH_EQ_HW_INDEX_ADDR /* 0xa01100 */, PSIF_CSR_ADDR_RQH_EQ_HW_INDEX                /* 0x032d78 */,  1024, 1,  1 }, /* Index 230 */
{       TSU_RQH_EQ_MAPPING_TABLE_ADDR /* 0xa01200 */, PSIF_CSR_ADDR_RQH_EQ_MAPPING_TABLE           /* 0x033178 */,     8, 0, 34 }, /* Index 231 */
{   TSU_RQH_EQ_OVERFLOW_STATUS_0_ADDR /* 0xa01400 */, PSIF_CSR_ADDR_RQH_EQ_OVERFLOW_STATUS_0       /* 0x033180 */,     8, 1,  1 }, /* Index 232 */
{   TSU_RQH_EQ_OVERFLOW_STATUS_1_ADDR /* 0xa01401 */, PSIF_CSR_ADDR_RQH_EQ_OVERFLOW_STATUS_1       /* 0x033188 */,     8, 1,  1 }, /* Index 233 */
{    TSU_RQH_EQ_INVALID_STATUS_0_ADDR /* 0xa01402 */, PSIF_CSR_ADDR_RQH_EQ_INVALID_STATUS_0        /* 0x033190 */,     8, 1,  1 }, /* Index 234 */
{    TSU_RQH_EQ_INVALID_STATUS_1_ADDR /* 0xa01403 */, PSIF_CSR_ADDR_RQH_EQ_INVALID_STATUS_1        /* 0x033198 */,     8, 1,  1 }, /* Index 235 */
{ TSU_RQH_EQ_OUT_OF_RANGE_STATUS_ADDR /* 0xa01404 */, PSIF_CSR_ADDR_RQH_EQ_OUT_OF_RANGE_STATUS     /* 0x0331a0 */,     8, 1,  1 }, /* Index 236 */
{      TSU_RQH_CLEAR_EQ_STATUS_0_ADDR /* 0xa01405 */, PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_0          /* 0x0331a8 */,     8, 1,  1 }, /* Index 237 */
{      TSU_RQH_CLEAR_EQ_STATUS_1_ADDR /* 0xa01406 */, PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_1          /* 0x0331b0 */,     8, 1,  1 }, /* Index 238 */
{   TSU_RQH_CLEAR_EQ_STATUS_KICK_ADDR /* 0xa01407 */, PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_KICK       /* 0x0331b8 */,     8, 1,  1 }, /* Index 239 */
{     TSU_RQH_CLEAR_EQ_UF_STATUS_ADDR /* 0xa01408 */, PSIF_CSR_ADDR_RQH_CLEAR_EQ_UF_STATUS         /* 0x0331c0 */,     8, 1,  1 }, /* Index 240 */
{ TSU_RQH_CLEAR_EQ_UF_STATUS_KICK_ADDR /* 0xa01409 */, PSIF_CSR_ADDR_RQH_CLEAR_EQ_UF_STATUS_KICK    /* 0x0331c8 */,     8, 1,  1 }, /* Index 241 */
{     TSU_DSCR_CQ_BASE_ADDR_SW_0_ADDR /* 0xb00000 */, PSIF_CSR_ADDR_BASE_ADDR_CQ_SW                /* 0x0331d0 */,     8, 0, 35 }, /* Index 242 */
{     TSU_DSCR_CQ_BASE_ADDR_SW_1_ADDR /* 0xb00040 */, PSIF_CSR_ADDR_BASE_ADDR_CQ_SW_1              /* 0x0331d8 */,     8, 0, 35 }, /* Index 243 */
{     TSU_DSCR_CQ_BASE_ADDR_SW_2_ADDR /* 0xb00080 */, PSIF_CSR_ADDR_BASE_ADDR_CQ_SW_2              /* 0x0331e0 */,     8, 0, 35 }, /* Index 244 */
{     TSU_DSCR_CQ_BASE_ADDR_HW_0_ADDR /* 0xb000c0 */, PSIF_CSR_ADDR_BASE_ADDR_CQ_HW                /* 0x0331e8 */,     8, 0, 35 }, /* Index 245 */
{     TSU_DSCR_CQ_BASE_ADDR_HW_1_ADDR /* 0xb00100 */, PSIF_CSR_ADDR_BASE_ADDR_CQ_HW_1              /* 0x0331f0 */,     8, 0, 35 }, /* Index 246 */
{     TSU_DSCR_CQ_BASE_ADDR_HW_2_ADDR /* 0xb00140 */, PSIF_CSR_ADDR_BASE_ADDR_CQ_HW_2              /* 0x0331f8 */,     8, 0, 35 }, /* Index 247 */
{     TSU_DSCR_RB_BASE_ADDR_SW_0_ADDR /* 0xb00180 */, PSIF_CSR_ADDR_BASE_ADDR_RB_SW                /* 0x033200 */,     8, 0, 35 }, /* Index 248 */
{     TSU_DSCR_RB_BASE_ADDR_SW_1_ADDR /* 0xb001c0 */, PSIF_CSR_ADDR_BASE_ADDR_RB_SW_1              /* 0x033208 */,     8, 0, 35 }, /* Index 249 */
{     TSU_DSCR_RB_BASE_ADDR_SW_2_ADDR /* 0xb00200 */, PSIF_CSR_ADDR_BASE_ADDR_RB_SW_2              /* 0x033210 */,     8, 0, 35 }, /* Index 250 */
{     TSU_DSCR_RB_BASE_ADDR_HW_0_ADDR /* 0xb00240 */, PSIF_CSR_ADDR_BASE_ADDR_RB_HW                /* 0x033218 */,     8, 0, 35 }, /* Index 251 */
{     TSU_DSCR_RB_BASE_ADDR_HW_1_ADDR /* 0xb00280 */, PSIF_CSR_ADDR_BASE_ADDR_RB_HW_1              /* 0x033220 */,     8, 0, 35 }, /* Index 252 */
{     TSU_DSCR_RB_BASE_ADDR_HW_2_ADDR /* 0xb002c0 */, PSIF_CSR_ADDR_BASE_ADDR_RB_HW_2              /* 0x033228 */,     8, 0, 35 }, /* Index 253 */
{     TSU_DSCR_RQ_BASE_ADDR_SW_0_ADDR /* 0xb00300 */, PSIF_CSR_ADDR_BASE_ADDR_RQ_SW                /* 0x033230 */,     8, 0, 35 }, /* Index 254 */
{     TSU_DSCR_RQ_BASE_ADDR_SW_1_ADDR /* 0xb00340 */, PSIF_CSR_ADDR_BASE_ADDR_RQ_SW_1              /* 0x033238 */,     8, 0, 35 }, /* Index 255 */
{     TSU_DSCR_RQ_BASE_ADDR_SW_2_ADDR /* 0xb00380 */, PSIF_CSR_ADDR_BASE_ADDR_RQ_SW_2              /* 0x033240 */,     8, 0, 35 }, /* Index 256 */
{     TSU_DSCR_RQ_BASE_ADDR_HW_0_ADDR /* 0xb003c0 */, PSIF_CSR_ADDR_BASE_ADDR_RQ_HW                /* 0x033248 */,     8, 0, 35 }, /* Index 257 */
{     TSU_DSCR_RQ_BASE_ADDR_HW_1_ADDR /* 0xb00400 */, PSIF_CSR_ADDR_BASE_ADDR_RQ_HW_1              /* 0x033250 */,     8, 0, 35 }, /* Index 258 */
{     TSU_DSCR_RQ_BASE_ADDR_HW_2_ADDR /* 0xb00440 */, PSIF_CSR_ADDR_BASE_ADDR_RQ_HW_2              /* 0x033258 */,     8, 0, 35 }, /* Index 259 */
{    TSU_DSCR_XRQ_BASE_ADDR_SW_0_ADDR /* 0xb00480 */, PSIF_CSR_ADDR_BASE_ADDR_XRQ_SW               /* 0x033260 */,     8, 0, 35 }, /* Index 260 */
{    TSU_DSCR_XRQ_BASE_ADDR_SW_1_ADDR /* 0xb004c0 */, PSIF_CSR_ADDR_BASE_ADDR_XRQ_SW_1             /* 0x033268 */,     8, 0, 35 }, /* Index 261 */
{    TSU_DSCR_XRQ_BASE_ADDR_SW_2_ADDR /* 0xb00500 */, PSIF_CSR_ADDR_BASE_ADDR_XRQ_SW_2             /* 0x033270 */,     8, 0, 35 }, /* Index 262 */
{    TSU_DSCR_XRQ_BASE_ADDR_HW_0_ADDR /* 0xb00540 */, PSIF_CSR_ADDR_BASE_ADDR_XRQ_HW               /* 0x033278 */,     8, 0, 35 }, /* Index 263 */
{    TSU_DSCR_XRQ_BASE_ADDR_HW_1_ADDR /* 0xb00580 */, PSIF_CSR_ADDR_BASE_ADDR_XRQ_HW_1             /* 0x033280 */,     8, 0, 35 }, /* Index 264 */
{    TSU_DSCR_XRQ_BASE_ADDR_HW_2_ADDR /* 0xb005c0 */, PSIF_CSR_ADDR_BASE_ADDR_XRQ_HW_2             /* 0x033288 */,     8, 0, 35 }, /* Index 265 */
{            TSU_DSCR_UF_CONTROL_ADDR /* 0xb00700 */, PSIF_CSR_ADDR_DSCR_UF_CONTROL                /* 0x033290 */,     8, 1,  1 }, /* Index 266 */
{       TSU_DSCR_UF_CONTROL_KICK_ADDR /* 0xb00701 */, PSIF_CSR_ADDR_DSCR_UF_CONTROL_KICK           /* 0x033298 */,     8, 1,  1 }, /* Index 267 */
{            TSU_DSCR_INT_STATUS_ADDR /* 0xb00702 */, PSIF_CSR_ADDR_DSCR_INT_STATUS                /* 0x0332a0 */,     8, 1,  1 }, /* Index 268 */
{              TSU_DSCR_INT_MASK_ADDR /* 0xb00703 */, PSIF_CSR_ADDR_DSCR_INT_MASK                  /* 0x0332a8 */,     8, 1,  1 }, /* Index 269 */
{               TSU_DSCR_INT_PRI_ADDR /* 0xb00704 */, PSIF_CSR_ADDR_DSCR_INT_PRI                   /* 0x0332b0 */,     8, 1,  1 }, /* Index 270 */
{      TSU_DSCR_INT_STATUS_CLEAR_ADDR /* 0xb00705 */, PSIF_CSR_ADDR_DSCR_INT_STATUS_CLEAR          /* 0x0332b8 */,     8, 1,  1 }, /* Index 271 */
{ TSU_DSCR_INT_STATUS_CLEAR_KICK_ADDR /* 0xb00706 */, PSIF_CSR_ADDR_DSCR_INT_STATUS_CLEAR_KICK     /* 0x0332c0 */,     8, 1,  1 }, /* Index 272 */
{    TSU_DSCR_ASYNC_EVENT_STATUS_ADDR /* 0xb00780 */, PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_STATUS        /* 0x0332c8 */,     8, 1,  1 }, /* Index 273 */
{ TSU_DSCR_ASYNC_EVENT_AFFILIATED_ADDR /* 0xb00781 */, PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_AFFILIATED    /* 0x0332d0 */,     8, 1,  1 }, /* Index 274 */
{       TSU_DSCR_ASYNC_EVENT_POP_ADDR /* 0xb00782 */, PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_POP           /* 0x0332d8 */,     8, 1,  1 }, /* Index 275 */
{            TSU_DSCR_DIAGNOSTIC_ADDR /* 0xb00800 */, PSIF_CSR_ADDR_DSCR_DIAGNOSTIC                /* 0x0332e0 */,     8, 1,  1 }, /* Index 276 */
{       TSU_DSCR_FATAL_INTERRUPT_ADDR /* 0xb01000 */, PSIF_CSR_ADDR_DSCR_FATAL_INTERRUPT           /* 0x0332e8 */,     8, 1,  1 }, /* Index 277 */
{ TSU_DSCR_FATAL_INTERRUPT_CLEAR_ADDR /* 0xb01001 */, PSIF_CSR_ADDR_DSCR_FATAL_INTERRUPT_CLEAR     /* 0x0332f0 */,     8, 1,  1 }, /* Index 278 */
{         TSU_RCV_RSS_EOIB_TABLE_ADDR /* 0xc00000 */, PSIF_CSR_ADDR_RCV_RSS_EOIB_TABLE             /* 0x0332f8 */,  1024, 1,  1 }, /* Index 279 */
{    TSU_RCV_RSS_CTRL_EOIB_TABLE_ADDR /* 0xc00080 */, PSIF_CSR_ADDR_RCV_RSS_CTRL_EOIB_TABLE        /* 0x0336f8 */,     8, 0, 33 }, /* Index 280 */
{        TSU_RCV_RSS_IPOIB_TABLE_ADDR /* 0xc00100 */, PSIF_CSR_ADDR_RCV_RSS_IPOIB_TABLE            /* 0x033700 */,  1024, 1,  1 }, /* Index 281 */
{   TSU_RCV_RSS_CTRL_IPOIB_TABLE_ADDR /* 0xc00180 */, PSIF_CSR_ADDR_RCV_RSS_CTRL_IPOIB_TABLE       /* 0x033b00 */,     8, 0, 33 }, /* Index 282 */
{             TSU_RCV_PROXY_SIZE_ADDR /* 0xc00200 */, PSIF_CSR_ADDR_RCV_PROXY_SIZE                 /* 0x033b08 */,     8, 0, 33 }, /* Index 283 */
{               TSU_RCV_MAD_SIZE_ADDR /* 0xc00300 */, PSIF_CSR_ADDR_RCV_MAD_SIZE                   /* 0x033b10 */,     8, 1,  1 }, /* Index 284 */
{      TSU_RCV_EOIB_MCAST_REJECT_ADDR /* 0xc02000 */, PSIF_CSR_ADDR_RCV_EOIB_MCAST_REJECT          /* 0x033b18 */,   528, 1,  1 }, /* Index 285 */
{      TSU_RCV_EOIB_BCAST_REJECT_ADDR /* 0xc02080 */, PSIF_CSR_ADDR_RCV_EOIB_BCAST_REJECT          /* 0x033d28 */,   528, 1,  1 }, /* Index 286 */
{      TSU_RCV_EOIB_UCAST_REJECT_ADDR /* 0xc02100 */, PSIF_CSR_ADDR_RCV_EOIB_UCAST_REJECT          /* 0x033f38 */,   528, 1,  1 }, /* Index 287 */
{   TSU_RCV_EIOB_FRAGMENT_REJECT_ADDR /* 0xc02180 */, PSIF_CSR_ADDR_RCV_EIOB_FRAGMENT_REJECT       /* 0x034148 */,   528, 1,  1 }, /* Index 288 */
{      TSU_RCV_EIOB_RUNTS_REJECT_ADDR /* 0xc02200 */, PSIF_CSR_ADDR_RCV_EIOB_RUNTS_REJECT          /* 0x034358 */,   528, 1,  1 }, /* Index 289 */
{ TSU_RCV_EIOB_OUTER_VLAN_REJECT_ADDR /* 0xc02280 */, PSIF_CSR_ADDR_RCV_EIOB_OUTER_VLAN_REJECT     /* 0x034568 */,   528, 1,  1 }, /* Index 290 */
{   TSU_RCV_EIOB_VLAN_TAG_REJECT_ADDR /* 0xc02300 */, PSIF_CSR_ADDR_RCV_EIOB_VLAN_TAG_REJECT       /* 0x034778 */,   528, 1,  1 }, /* Index 291 */
{        TSU_RCV_EIOB_VID_REJECT_ADDR /* 0xc02380 */, PSIF_CSR_ADDR_RCV_EIOB_VID_REJECT            /* 0x034988 */,   528, 1,  1 }, /* Index 292 */
{   TSU_RCV_NO_MCAST_DUPLICATION_ADDR /* 0xc02800 */, PSIF_CSR_ADDR_RCV_NO_MCAST_DUPLICATION       /* 0x034b98 */,     8, 1,  1 }, /* Index 293 */
{    TSU_RCV_KEY_TRAP_SGID_UPPER_ADDR /* 0xc04000 */, PSIF_CSR_ADDR_RCV_KEY_TRAP_SGID_UPPER        /* 0x034ba0 */,     8, 1,  1 }, /* Index 294 */
{    TSU_RCV_KEY_TRAP_SGID_LOWER_ADDR /* 0xc04001 */, PSIF_CSR_ADDR_RCV_KEY_TRAP_SGID_LOWER        /* 0x034ba8 */,     8, 1,  1 }, /* Index 295 */
{    TSU_RCV_KEY_TRAP_DGID_UPPER_ADDR /* 0xc04002 */, PSIF_CSR_ADDR_RCV_KEY_TRAP_DGID_UPPER        /* 0x034bb0 */,     8, 1,  1 }, /* Index 296 */
{    TSU_RCV_KEY_TRAP_DGID_LOWER_ADDR /* 0xc04003 */, PSIF_CSR_ADDR_RCV_KEY_TRAP_DGID_LOWER        /* 0x034bb8 */,     8, 1,  1 }, /* Index 297 */
{            TSU_RCV_KEY_TRAP_QP_ADDR /* 0xc04004 */, PSIF_CSR_ADDR_RCV_KEY_TRAP_QP                /* 0x034bc0 */,     8, 1,  1 }, /* Index 298 */
{       TSU_RCV_KEY_TRAP_LID_KEY_ADDR /* 0xc04005 */, PSIF_CSR_ADDR_RCV_KEY_TRAP_LID_KEY           /* 0x034bc8 */,     8, 1,  1 }, /* Index 299 */
{           TSU_RCV_KEY_TRAP_POP_ADDR /* 0xc04008 */, PSIF_CSR_ADDR_RCV_KEY_TRAP_POP               /* 0x034bd0 */,     8, 1,  1 }, /* Index 300 */
{  TSU_RCV_KEY_TRAP_BACKPRESSURE_ADDR /* 0xc04010 */, PSIF_CSR_ADDR_RCV_KEY_TRAP_BACKPRESSURE      /* 0x034bd8 */,     8, 1,  1 }, /* Index 301 */
{             TSU_RCV_INT_STATUS_ADDR /* 0xc04400 */, PSIF_CSR_ADDR_RCV_INT_STATUS                 /* 0x034be0 */,     8, 1,  1 }, /* Index 302 */
{               TSU_RCV_INT_MASK_ADDR /* 0xc04401 */, PSIF_CSR_ADDR_RCV_INT_MASK                   /* 0x034be8 */,     8, 1,  1 }, /* Index 303 */
{                TSU_RCV_INT_PRI_ADDR /* 0xc04402 */, PSIF_CSR_ADDR_RCV_INT_PRI                    /* 0x034bf0 */,     8, 1,  1 }, /* Index 304 */
{       TSU_RCV_INT_STATUS_CLEAR_ADDR /* 0xc04403 */, PSIF_CSR_ADDR_RCV_INT_STATUS_CLEAR           /* 0x034bf8 */,     8, 1,  1 }, /* Index 305 */
{  TSU_RCV_INT_STATUS_CLEAR_KICK_ADDR /* 0xc04404 */, PSIF_CSR_ADDR_RCV_INT_STATUS_CLEAR_KICK      /* 0x034c00 */,     8, 1,  1 }, /* Index 306 */
{         TSU_IBPR_P1_PKEY_TABLE_ADDR /* 0xd00000 */, PSIF_CSR_ADDR_P1_RCV_PKEY_TABLE              /* 0x034c08 */,  2176, 1,  1 }, /* Index 307 */
{       TSU_IBPR_P1_OWN_LID_BASE_ADDR /* 0xd00280 */, PSIF_CSR_ADDR_P1_RCV_LID                     /* 0x035488 */,     8, 0, 35 }, /* Index 308 */
{     TSU_IBPR_P1_PKEY_UF_STRIDE_ADDR /* 0xd00400 */, PSIF_CSR_ADDR_P1_RCV_PKEY_UF_STRIDE          /* 0x035490 */,     8, 1,  1 }, /* Index 309 */
{ TSU_IBPR_P1_DEFAULT_VSWITCH_PORT_ADDR /* 0xd00402 */, PSIF_CSR_ADDR_IBPR_P1_DEFAULT_VSWITCH_PORT   /* 0x035498 */,     8, 1,  1 }, /* Index 310 */
{     TSU_IBPR_P1_DEFAULT_SM_HCA_ADDR /* 0xd00403 */, PSIF_CSR_ADDR_IBPR_P1_DEFAULT_SM_HCA         /* 0x0354a0 */,     8, 1,  1 }, /* Index 311 */
{ TSU_IBPR_P1_GSI_FORWARDING_TABLE_ADDR /* 0xd00440 */, PSIF_CSR_ADDR_IBPR_P1_GSI_FORWARDING_TABLE   /* 0x0354a8 */,     8, 0, 33 }, /* Index 312 */
{        TSU_IBPR_P1_SMP_ALLOWED_ADDR /* 0xd00600 */, PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED            /* 0x0354b0 */,     8, 1,  1 }, /* Index 313 */
{ TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR_ADDR /* 0xd00602 */, PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR /* 0x0354b8 */,     8, 1,  1 }, /* Index 314 */
{ TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_ADDR /* 0xd00604 */, PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED_DROP_STATUS /* 0x0354c0 */,     8, 1,  1 }, /* Index 315 */
{         TSU_IBPR_P2_PKEY_TABLE_ADDR /* 0xd00800 */, PSIF_CSR_ADDR_P2_RCV_PKEY_TABLE              /* 0x0354c8 */,  2176, 1,  1 }, /* Index 316 */
{       TSU_IBPR_P2_OWN_LID_BASE_ADDR /* 0xd00a80 */, PSIF_CSR_ADDR_P2_RCV_LID                     /* 0x035d48 */,     8, 0, 35 }, /* Index 317 */
{     TSU_IBPR_P2_PKEY_UF_STRIDE_ADDR /* 0xd00c00 */, PSIF_CSR_ADDR_P2_RCV_PKEY_UF_STRIDE          /* 0x035d50 */,     8, 1,  1 }, /* Index 318 */
{ TSU_IBPR_P2_DEFAULT_VSWITCH_PORT_ADDR /* 0xd00c02 */, PSIF_CSR_ADDR_IBPR_P2_DEFAULT_VSWITCH_PORT   /* 0x035d58 */,     8, 1,  1 }, /* Index 319 */
{     TSU_IBPR_P2_DEFAULT_SM_HCA_ADDR /* 0xd00c03 */, PSIF_CSR_ADDR_IBPR_P2_DEFAULT_SM_HCA         /* 0x035d60 */,     8, 1,  1 }, /* Index 320 */
{ TSU_IBPR_P2_GSI_FORWARDING_TABLE_ADDR /* 0xd00c40 */, PSIF_CSR_ADDR_IBPR_P2_GSI_FORWARDING_TABLE   /* 0x035d68 */,     8, 0, 33 }, /* Index 321 */
{        TSU_IBPR_P2_SMP_ALLOWED_ADDR /* 0xd00e00 */, PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED            /* 0x035d70 */,     8, 1,  1 }, /* Index 322 */
{ TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR_ADDR /* 0xd00e02 */, PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR /* 0x035d78 */,     8, 1,  1 }, /* Index 323 */
{ TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_ADDR /* 0xd00e04 */, PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED_DROP_STATUS /* 0x035d80 */,     8, 1,  1 }, /* Index 324 */
{ TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL_ADDR /* 0xd01000 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_INTERVAL  /* 0x035d88 */,     8, 1,  1 }, /* Index 325 */
{ TSU_IBPR_VSWITCH1_SAMPLE_START_ADDR /* 0xd01040 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_START     /* 0x035d90 */,     8, 1,  1 }, /* Index 326 */
{ TSU_IBPR_VSWITCH1_SAMPLE_COUNT_ADDR /* 0xd01080 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_COUNT     /* 0x035d98 */,     8, 1,  1 }, /* Index 327 */
{  TSU_IBPR_VSWITCH1_SAMPLE_PORT_ADDR /* 0xd010c0 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_PORT      /* 0x035da0 */,     8, 1,  1 }, /* Index 328 */
{ TSU_IBPR_VSWITCH1_PORTSAMPLE_START_ADDR /* 0xd010c2 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTSAMPLE_START /* 0x035da8 */,     8, 1,  1 }, /* Index 329 */
{ TSU_IBPR_VSWITCH1_SAMPLE_STATUS_ADDR /* 0xd01100 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_STATUS    /* 0x035db0 */,     8, 1,  1 }, /* Index 330 */
{ TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL_ADDR /* 0xd01140 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_INTERVAL   /* 0x035db8 */,     8, 1,  1 }, /* Index 331 */
{  TSU_IBPR_VHCA_P1_SAMPLE_START_ADDR /* 0xd01180 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_START      /* 0x035dc0 */,     8, 1,  1 }, /* Index 332 */
{  TSU_IBPR_VHCA_P1_SAMPLE_COUNT_ADDR /* 0xd011c0 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_COUNT      /* 0x035dc8 */,     8, 1,  1 }, /* Index 333 */
{   TSU_IBPR_VHCA_P1_SAMPLE_PORT_ADDR /* 0xd01200 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_PORT       /* 0x035dd0 */,     8, 1,  1 }, /* Index 334 */
{ TSU_IBPR_VHCA_P1_PORTSAMPLE_START_ADDR /* 0xd01202 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_PORTSAMPLE_START  /* 0x035dd8 */,     8, 1,  1 }, /* Index 335 */
{ TSU_IBPR_VHCA_P1_SAMPLE_STATUS_ADDR /* 0xd01240 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_STATUS     /* 0x035de0 */,     8, 1,  1 }, /* Index 336 */
{ TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL_ADDR /* 0xd01300 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_INTERVAL  /* 0x035de8 */,     8, 1,  1 }, /* Index 337 */
{ TSU_IBPR_VSWITCH2_SAMPLE_START_ADDR /* 0xd01340 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_START     /* 0x035df0 */,     8, 1,  1 }, /* Index 338 */
{ TSU_IBPR_VSWITCH2_SAMPLE_COUNT_ADDR /* 0xd01380 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_COUNT     /* 0x035df8 */,     8, 1,  1 }, /* Index 339 */
{  TSU_IBPR_VSWITCH2_SAMPLE_PORT_ADDR /* 0xd013c0 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_PORT      /* 0x035e00 */,     8, 1,  1 }, /* Index 340 */
{ TSU_IBPR_VSWITCH2_PORTSAMPLE_START_ADDR /* 0xd013c2 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTSAMPLE_START /* 0x035e08 */,     8, 1,  1 }, /* Index 341 */
{ TSU_IBPR_VSWITCH2_SAMPLE_STATUS_ADDR /* 0xd01400 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_STATUS    /* 0x035e10 */,     8, 1,  1 }, /* Index 342 */
{ TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL_ADDR /* 0xd01440 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_INTERVAL   /* 0x035e18 */,     8, 1,  1 }, /* Index 343 */
{  TSU_IBPR_VHCA_P2_SAMPLE_START_ADDR /* 0xd01480 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_START      /* 0x035e20 */,     8, 1,  1 }, /* Index 344 */
{  TSU_IBPR_VHCA_P2_SAMPLE_COUNT_ADDR /* 0xd014c0 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_COUNT      /* 0x035e28 */,     8, 1,  1 }, /* Index 345 */
{   TSU_IBPR_VHCA_P2_SAMPLE_PORT_ADDR /* 0xd01500 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_PORT       /* 0x035e30 */,     8, 1,  1 }, /* Index 346 */
{ TSU_IBPR_VHCA_P2_PORTSAMPLE_START_ADDR /* 0xd01502 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_PORTSAMPLE_START  /* 0x035e38 */,     8, 1,  1 }, /* Index 347 */
{ TSU_IBPR_VHCA_P2_SAMPLE_STATUS_ADDR /* 0xd01540 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_STATUS     /* 0x035e40 */,     8, 1,  1 }, /* Index 348 */
{       TSU_IBPR_SET_VLINK_STATE_ADDR /* 0xd01800 */, PSIF_CSR_ADDR_IBPR_SET_VLINK_STATE           /* 0x035e48 */,     8, 1,  1 }, /* Index 349 */
{  TSU_IBPR_VLINK_STATE_REGISTER_ADDR /* 0xd01802 */, PSIF_CSR_ADDR_IBPR_VLINK_STATE_REGISTER      /* 0x035e50 */,     8, 1,  1 }, /* Index 350 */
{        TSU_IBPR_P1_VLINK_STATE_ADDR /* 0xd01840 */, PSIF_CSR_ADDR_IBPR_P1_VLINK_STATE            /* 0x035e58 */,     8, 0, 33 }, /* Index 351 */
{        TSU_IBPR_P2_VLINK_STATE_ADDR /* 0xd018c0 */, PSIF_CSR_ADDR_IBPR_P2_VLINK_STATE            /* 0x035e60 */,     8, 0, 33 }, /* Index 352 */
{    TSU_IBPR_P1_MCAST_GID_UPPER_ADDR /* 0xd01c01 */, PSIF_CSR_ADDR_IBPR_P1_MCAST_GID_UPPER        /* 0x035e68 */,     8, 1,  1 }, /* Index 353 */
{    TSU_IBPR_P1_MCAST_GID_LOWER_ADDR /* 0xd01c02 */, PSIF_CSR_ADDR_IBPR_P1_MCAST_GID_LOWER        /* 0x035e70 */,     8, 1,  1 }, /* Index 354 */
{  TSU_IBPR_P1_MCAST_GIDHASH_LID_ADDR /* 0xd01c03 */, PSIF_CSR_ADDR_IBPR_P1_MCAST_GIDHASH_LID      /* 0x035e78 */,     8, 1,  1 }, /* Index 355 */
{          TSU_IBPR_P1_MCAST_POP_ADDR /* 0xd01c04 */, PSIF_CSR_ADDR_IBPR_P1_MCAST_POP              /* 0x035e80 */,     8, 1,  1 }, /* Index 356 */
{     TSU_IBPR_P1_MCAST_MAX_PKTS_ADDR /* 0xd01c05 */, PSIF_CSR_ADDR_IBPR_P1_MCAST_MAX_PKTS         /* 0x035e88 */,     8, 1,  1 }, /* Index 357 */
{    TSU_IBPR_P1_MCAST_WR_CREDIT_ADDR /* 0xd01c06 */, PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_CREDIT        /* 0x035e90 */,     8, 1,  1 }, /* Index 358 */
{      TSU_IBPR_P1_MCAST_WR_FIFO_ADDR /* 0xd01c07 */, PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_FIFO          /* 0x035e98 */,     8, 1,  1 }, /* Index 359 */
{ TSU_IBPR_P1_MCAST_WR_FIFO_KICK_ADDR /* 0xd01c08 */, PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_FIFO_KICK     /* 0x035ea0 */,     8, 1,  1 }, /* Index 360 */
{    TSU_IBPR_P2_MCAST_GID_UPPER_ADDR /* 0xd01c41 */, PSIF_CSR_ADDR_IBPR_P2_MCAST_GID_UPPER        /* 0x035ea8 */,     8, 1,  1 }, /* Index 361 */
{    TSU_IBPR_P2_MCAST_GID_LOWER_ADDR /* 0xd01c42 */, PSIF_CSR_ADDR_IBPR_P2_MCAST_GID_LOWER        /* 0x035eb0 */,     8, 1,  1 }, /* Index 362 */
{  TSU_IBPR_P2_MCAST_GIDHASH_LID_ADDR /* 0xd01c43 */, PSIF_CSR_ADDR_IBPR_P2_MCAST_GIDHASH_LID      /* 0x035eb8 */,     8, 1,  1 }, /* Index 363 */
{          TSU_IBPR_P2_MCAST_POP_ADDR /* 0xd01c44 */, PSIF_CSR_ADDR_IBPR_P2_MCAST_POP              /* 0x035ec0 */,     8, 1,  1 }, /* Index 364 */
{     TSU_IBPR_P2_MCAST_MAX_PKTS_ADDR /* 0xd01c45 */, PSIF_CSR_ADDR_IBPR_P2_MCAST_MAX_PKTS         /* 0x035ec8 */,     8, 1,  1 }, /* Index 365 */
{    TSU_IBPR_P2_MCAST_WR_CREDIT_ADDR /* 0xd01c46 */, PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_CREDIT        /* 0x035ed0 */,     8, 1,  1 }, /* Index 366 */
{      TSU_IBPR_P2_MCAST_WR_FIFO_ADDR /* 0xd01c47 */, PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_FIFO          /* 0x035ed8 */,     8, 1,  1 }, /* Index 367 */
{ TSU_IBPR_P2_MCAST_WR_FIFO_KICK_ADDR /* 0xd01c48 */, PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_FIFO_KICK     /* 0x035ee0 */,     8, 1,  1 }, /* Index 368 */
{            TSU_IBPR_INT_STATUS_ADDR /* 0xd01c4a */, PSIF_CSR_ADDR_IBPR_INT_STATUS                /* 0x035ee8 */,     8, 1,  1 }, /* Index 369 */
{              TSU_IBPR_INT_MASK_ADDR /* 0xd01c4b */, PSIF_CSR_ADDR_IBPR_INT_MASK                  /* 0x035ef0 */,     8, 1,  1 }, /* Index 370 */
{               TSU_IBPR_INT_PRI_ADDR /* 0xd01c4c */, PSIF_CSR_ADDR_IBPR_INT_PRI                   /* 0x035ef8 */,     8, 1,  1 }, /* Index 371 */
{      TSU_IBPR_INT_STATUS_CLEAR_ADDR /* 0xd01c4d */, PSIF_CSR_ADDR_IBPR_INT_STATUS_CLEAR          /* 0x035f00 */,     8, 1,  1 }, /* Index 372 */
{ TSU_IBPR_INT_STATUS_CLEAR_KICK_ADDR /* 0xd01c4e */, PSIF_CSR_ADDR_IBPR_INT_STATUS_CLEAR_KICK     /* 0x035f08 */,     8, 1,  1 }, /* Index 373 */
{           TSU_IBPR_P1_RX_CHOKE_ADDR /* 0xd01c56 */, PSIF_CSR_ADDR_IBPR_P1_RX_CHOKE               /* 0x035f10 */,     8, 1,  1 }, /* Index 374 */
{           TSU_IBPR_P2_RX_CHOKE_ADDR /* 0xd01c58 */, PSIF_CSR_ADDR_IBPR_P2_RX_CHOKE               /* 0x035f18 */,     8, 1,  1 }, /* Index 375 */
{ TSU_IBPR_VSWITCH1_XMIT_DISCARDS_ADDR /* 0xd04000 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_XMIT_DISCARDS    /* 0x035f20 */,     8, 0, 33 }, /* Index 376 */
{ TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS_ADDR /* 0xd04040 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS /* 0x035f28 */,     8, 1,  1 }, /* Index 377 */
{ TSU_IBPR_VSWITCH1_RCV_PKTS_DROP_ADDR /* 0xd04042 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_RCV_PKTS_DROP    /* 0x035f30 */,     8, 1,  1 }, /* Index 378 */
{ TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_ADDR /* 0xd04044 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTCOUNTER_CLEAR /* 0x035f38 */,     8, 1,  1 }, /* Index 379 */
{ TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER_ADDR /* 0xd04046 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER /* 0x035f40 */,     8, 1,  1 }, /* Index 380 */
{ TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER_ADDR /* 0xd04048 */, PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER /* 0x035f48 */,     8, 1,  1 }, /* Index 381 */
{ TSU_IBPR_VHCA_P1_XMIT_DISCARDS_ADDR /* 0xd04800 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DISCARDS     /* 0x035f50 */,     8, 0, 33 }, /* Index 382 */
{      TSU_IBPR_VHCA_P1_RCV_DATA_ADDR /* 0xd04840 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_DATA          /* 0x035f58 */,     8, 0, 33 }, /* Index 383 */
{      TSU_IBPR_VHCA_P1_RCV_PKTS_ADDR /* 0xd04880 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_PKTS          /* 0x035f60 */,     8, 0, 33 }, /* Index 384 */
{     TSU_IBPR_VHCA_P1_XMIT_DATA_ADDR /* 0xd048c0 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DATA         /* 0x035f68 */,     8, 0, 33 }, /* Index 385 */
{     TSU_IBPR_VHCA_P1_XMIT_PKTS_ADDR /* 0xd04900 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS         /* 0x035f70 */,     8, 0, 33 }, /* Index 386 */
{ TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_ADDR /* 0xd04940 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_DROP    /* 0x035f78 */,     8, 1,  1 }, /* Index 387 */
{ TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR_ADDR /* 0xd04942 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_PORTCOUNTER_CLEAR /* 0x035f80 */,     8, 1,  1 }, /* Index 388 */
{ TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER_ADDR /* 0xd04944 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER /* 0x035f88 */,     8, 1,  1 }, /* Index 389 */
{ TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER_ADDR /* 0xd04946 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER /* 0x035f90 */,     8, 1,  1 }, /* Index 390 */
{ TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER_ADDR /* 0xd04948 */, PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER /* 0x035f98 */,     8, 1,  1 }, /* Index 391 */
{ TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER_ADDR /* 0xd0494a */, PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER /* 0x035fa0 */,     8, 1,  1 }, /* Index 392 */
{ TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER_ADDR /* 0xd0494c */, PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER /* 0x035fa8 */,     8, 1,  1 }, /* Index 393 */
{ TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER_ADDR /* 0xd0494e */, PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER /* 0x035fb0 */,     8, 1,  1 }, /* Index 394 */
{ TSU_IBPR_VSWITCH2_XMIT_DISCARDS_ADDR /* 0xd05000 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_XMIT_DISCARDS    /* 0x035fb8 */,     8, 0, 33 }, /* Index 395 */
{ TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS_ADDR /* 0xd05040 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS /* 0x035fc0 */,     8, 1,  1 }, /* Index 396 */
{ TSU_IBPR_VSWITCH2_RCV_PKTS_DROP_ADDR /* 0xd05042 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_RCV_PKTS_DROP    /* 0x035fc8 */,     8, 1,  1 }, /* Index 397 */
{ TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_ADDR /* 0xd05044 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTCOUNTER_CLEAR /* 0x035fd0 */,     8, 1,  1 }, /* Index 398 */
{ TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER_ADDR /* 0xd05046 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER /* 0x035fd8 */,     8, 1,  1 }, /* Index 399 */
{ TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER_ADDR /* 0xd05048 */, PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER /* 0x035fe0 */,     8, 1,  1 }, /* Index 400 */
{ TSU_IBPR_VHCA_P2_XMIT_DISCARDS_ADDR /* 0xd05840 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DISCARDS     /* 0x035fe8 */,     8, 0, 33 }, /* Index 401 */
{      TSU_IBPR_VHCA_P2_RCV_DATA_ADDR /* 0xd05880 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_DATA          /* 0x035ff0 */,     8, 0, 33 }, /* Index 402 */
{      TSU_IBPR_VHCA_P2_RCV_PKTS_ADDR /* 0xd058c0 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_PKTS          /* 0x035ff8 */,     8, 0, 33 }, /* Index 403 */
{     TSU_IBPR_VHCA_P2_XMIT_DATA_ADDR /* 0xd05900 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DATA         /* 0x036000 */,     8, 0, 33 }, /* Index 404 */
{     TSU_IBPR_VHCA_P2_XMIT_PKTS_ADDR /* 0xd05940 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS         /* 0x036008 */,     8, 0, 33 }, /* Index 405 */
{ TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_ADDR /* 0xd05980 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_DROP    /* 0x036010 */,     8, 1,  1 }, /* Index 406 */
{ TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR_ADDR /* 0xd05982 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_PORTCOUNTER_CLEAR /* 0x036018 */,     8, 1,  1 }, /* Index 407 */
{ TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER_ADDR /* 0xd05984 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER /* 0x036020 */,     8, 1,  1 }, /* Index 408 */
{ TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER_ADDR /* 0xd05986 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER /* 0x036028 */,     8, 1,  1 }, /* Index 409 */
{ TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER_ADDR /* 0xd05988 */, PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER /* 0x036030 */,     8, 1,  1 }, /* Index 410 */
{ TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER_ADDR /* 0xd0598a */, PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER /* 0x036038 */,     8, 1,  1 }, /* Index 411 */
{ TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER_ADDR /* 0xd0598c */, PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER /* 0x036040 */,     8, 1,  1 }, /* Index 412 */
{ TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER_ADDR /* 0xd0598e */, PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER /* 0x036048 */,     8, 1,  1 }, /* Index 413 */
{           TSU_IBPR_RSS_CONTROL_ADDR /* 0xd08000 */, PSIF_CSR_ADDR_IBPR_RSS_CONTROL               /* 0x036050 */,     8, 0, 33 }, /* Index 414 */
{   TSU_IBPR_RSS_IPV4_SECRET_KEY_ADDR /* 0xd08100 */, PSIF_CSR_ADDR_IBPR_RSS_IPV4_SECRET_KEY       /* 0x036058 */,    16, 1,  1 }, /* Index 415 */
{   TSU_IBPR_RSS_IPV6_SECRET_KEY_ADDR /* 0xd08140 */, PSIF_CSR_ADDR_IBPR_RSS_IPV6_SECRET_KEY       /* 0x036068 */,    40, 1,  1 }, /* Index 416 */
{          TSU_IBPR_P1_GID_UPPER_ADDR /* 0xd10000 */, PSIF_CSR_ADDR_P1_RCV_GID_UPPER               /* 0x036090 */,   536, 1,  1 }, /* Index 417 */
{          TSU_IBPR_P1_GID_LOWER_ADDR /* 0xd10100 */, PSIF_CSR_ADDR_P1_RCV_GID_LOWER               /* 0x0362a8 */,   536, 1,  1 }, /* Index 418 */
{ TSU_IBPR_P1_GID_FORWARDING_TABLE_ADDR /* 0xd10200 */, PSIF_CSR_ADDR_IBPR_P1_GID_FORWARDING_TABLE   /* 0x0364c0 */,   536, 1,  1 }, /* Index 419 */
{          TSU_IBPR_P2_GID_UPPER_ADDR /* 0xd10800 */, PSIF_CSR_ADDR_P2_RCV_GID_UPPER               /* 0x0366d8 */,   536, 1,  1 }, /* Index 420 */
{          TSU_IBPR_P2_GID_LOWER_ADDR /* 0xd10900 */, PSIF_CSR_ADDR_P2_RCV_GID_LOWER               /* 0x0368f0 */,   536, 1,  1 }, /* Index 421 */
{ TSU_IBPR_P2_GID_FORWARDING_TABLE_ADDR /* 0xd10a00 */, PSIF_CSR_ADDR_IBPR_P2_GID_FORWARDING_TABLE   /* 0x036b08 */,   536, 1,  1 }, /* Index 422 */
{          TSU_IBPR_P1_EOIB_MAC1_ADDR /* 0xd20000 */, PSIF_CSR_ADDR_IBPR_P1_EOIB_MAC1              /* 0x036d20 */,     8, 0, 34 }, /* Index 423 */
{          TSU_IBPR_P1_EOIB_MAC2_ADDR /* 0xd20040 */, PSIF_CSR_ADDR_IBPR_P1_EOIB_MAC2              /* 0x036d28 */,     8, 0, 34 }, /* Index 424 */
{          TSU_IBPR_P2_EOIB_MAC1_ADDR /* 0xd20080 */, PSIF_CSR_ADDR_IBPR_P2_EOIB_MAC1              /* 0x036d30 */,     8, 0, 34 }, /* Index 425 */
{          TSU_IBPR_P2_EOIB_MAC2_ADDR /* 0xd200c0 */, PSIF_CSR_ADDR_IBPR_P2_EOIB_MAC2              /* 0x036d38 */,     8, 0, 34 }, /* Index 426 */
{          TSU_IBPR_EOIB_CONTROL_ADDR /* 0xd20100 */, PSIF_CSR_ADDR_IBPR_EOIB_CONTROL              /* 0x036d40 */,     8, 0, 34 }, /* Index 427 */
{             TSU_IBPR_DMAC_SEED_ADDR /* 0xd20180 */, PSIF_CSR_ADDR_IBPR_DMAC_SEED                 /* 0x036d48 */,     8, 0, 34 }, /* Index 428 */
{  TSU_IBPR_EOIB_VLAN_ETHERTYPES_ADDR /* 0xd201c0 */, PSIF_CSR_ADDR_IBPR_EOIB_VLAN_ETHERTYPES      /* 0x036d50 */,     8, 0, 34 }, /* Index 429 */
{       TSU_IBPR_EOIB_PF_CONTROL_ADDR /* 0xd20200 */, PSIF_CSR_ADDR_IBPR_EOIB_PF_CONTROL           /* 0x036d58 */,     8, 0, 34 }, /* Index 430 */
{ TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE_ADDR /* 0xd20240 */, PSIF_CSR_ADDR_IBPR_EOIB_UNICAST_OVERFLOW_TABLE /* 0x036d60 */,   512, 1,  1 }, /* Index 431 */
{  TSU_IBPR_EOIB_MULTICAST_TABLE_ADDR /* 0xd20280 */, PSIF_CSR_ADDR_IBPR_EOIB_MULTICAST_TABLE      /* 0x036f60 */,   512, 1,  1 }, /* Index 432 */
{        TSU_IBPR_HDR_SPLIT_EOIB_ADDR /* 0xd202c0 */, PSIF_CSR_ADDR_IBPR_HDR_SPLIT_EOIB            /* 0x037160 */,     8, 1,  1 }, /* Index 433 */
{    TSU_IBPR_HDR_SPLIT_IPOIB_UD_ADDR /* 0xd202c1 */, PSIF_CSR_ADDR_IBPR_HDR_SPLIT_IPOIB_UD        /* 0x037168 */,     8, 1,  1 }, /* Index 434 */
{    TSU_IBPR_TRACE_BUFFER_SETUP_ADDR /* 0xd249f0 */, PSIF_CSR_ADDR_IBPR_TRACE_BUFFER_SETUP        /* 0x037170 */,     8, 1,  1 }, /* Index 435 */
{ TSU_IBPR_TRACE_STORE_QUALIFIER1_ADDR /* 0xd249f1 */, PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER1    /* 0x037178 */,     8, 1,  1 }, /* Index 436 */
{ TSU_IBPR_TRACE_STORE_QUALIFIER2_ADDR /* 0xd249f2 */, PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER2    /* 0x037180 */,     8, 1,  1 }, /* Index 437 */
{ TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK_ADDR /* 0xd249f3 */, PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER1_MASK /* 0x037188 */,     8, 1,  1 }, /* Index 438 */
{ TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK_ADDR /* 0xd249f4 */, PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER2_MASK /* 0x037190 */,     8, 1,  1 }, /* Index 439 */
{        TSU_IBPR_TRACE_TRIGGER1_ADDR /* 0xd249f5 */, PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER1            /* 0x037198 */,     8, 1,  1 }, /* Index 440 */
{        TSU_IBPR_TRACE_TRIGGER2_ADDR /* 0xd249f6 */, PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER2            /* 0x0371a0 */,     8, 1,  1 }, /* Index 441 */
{   TSU_IBPR_TRACE_TRIGGER1_MASK_ADDR /* 0xd249f7 */, PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER1_MASK       /* 0x0371a8 */,     8, 1,  1 }, /* Index 442 */
{   TSU_IBPR_TRACE_TRIGGER2_MASK_ADDR /* 0xd249f8 */, PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER2_MASK       /* 0x0371b0 */,     8, 1,  1 }, /* Index 443 */
{           TSU_IBPR_TRACE_START_ADDR /* 0xd249f9 */, PSIF_CSR_ADDR_IBPR_TRACE_START               /* 0x0371b8 */,     8, 1,  1 }, /* Index 444 */
{            TSU_IBPR_TRACE_STOP_ADDR /* 0xd249fa */, PSIF_CSR_ADDR_IBPR_TRACE_STOP                /* 0x0371c0 */,     8, 1,  1 }, /* Index 445 */
{   TSU_IBPR_TRACE_BUFFER_STATUS_ADDR /* 0xd249fb */, PSIF_CSR_ADDR_IBPR_TRACE_BUFFER_STATUS       /* 0x0371c8 */,     8, 1,  1 }, /* Index 446 */
{        TSU_IBPR_EOIB_VID_TABLE_ADDR /* 0xd40000 */, PSIF_CSR_ADDR_IBPR_EOIB_VID_TABLE            /* 0x0371d0 */, 17408, 1,  1 }, /* Index 447 */
{          TSU_IBPR_TRACE_BUFFER_ADDR /* 0xd48000 */, PSIF_CSR_ADDR_IBPR_TRACE_BUFFER              /* 0x03b5d0 */, 262144, 1,  1 }, /* Index 448 */
{      TSU_SQS_SQ_BASE_ADDR_SW_0_ADDR /* 0xe00000 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_SW                /* 0x07b5d0 */,     8, 0, 35 }, /* Index 449 */
{      TSU_SQS_SQ_BASE_ADDR_SW_1_ADDR /* 0xe00040 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_SW_1              /* 0x07b5d8 */,     8, 0, 35 }, /* Index 450 */
{      TSU_SQS_SQ_BASE_ADDR_SW_2_ADDR /* 0xe00080 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_SW_2              /* 0x07b5e0 */,     8, 0, 35 }, /* Index 451 */
{      TSU_SQS_SQ_BASE_ADDR_HW_0_ADDR /* 0xe00100 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_HW                /* 0x07b5e8 */,     8, 0, 35 }, /* Index 452 */
{      TSU_SQS_SQ_BASE_ADDR_HW_1_ADDR /* 0xe00140 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_HW_1              /* 0x07b5f0 */,     8, 0, 35 }, /* Index 453 */
{      TSU_SQS_SQ_BASE_ADDR_HW_2_ADDR /* 0xe00180 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_HW_2              /* 0x07b5f8 */,     8, 0, 35 }, /* Index 454 */
{         TSU_SQS_SQS_LIST_TABLE_ADDR /* 0xe00200 */, PSIF_CSR_ADDR_SQS_SQS_LIST_TABLE             /* 0x07b600 */,   560, 1,  1 }, /* Index 455 */
{             TSU_SQS_UF_CONTROL_ADDR /* 0xe00280 */, PSIF_CSR_ADDR_SQS_UF_CONTROL                 /* 0x07b830 */,     8, 1,  1 }, /* Index 456 */
{        TSU_SQS_UF_CONTROL_KICK_ADDR /* 0xe00281 */, PSIF_CSR_ADDR_SQS_UF_CONTROL_KICK            /* 0x07b838 */,     8, 1,  1 }, /* Index 457 */
{             TSU_SQS_INT_STATUS_ADDR /* 0xe00282 */, PSIF_CSR_ADDR_SQS_INT_STATUS                 /* 0x07b840 */,     8, 1,  1 }, /* Index 458 */
{               TSU_SQS_INT_MASK_ADDR /* 0xe00283 */, PSIF_CSR_ADDR_SQS_INT_MASK                   /* 0x07b848 */,     8, 1,  1 }, /* Index 459 */
{                TSU_SQS_INT_PRI_ADDR /* 0xe00284 */, PSIF_CSR_ADDR_SQS_INT_PRI                    /* 0x07b850 */,     8, 1,  1 }, /* Index 460 */
{       TSU_SQS_INT_STATUS_CLEAR_ADDR /* 0xe00285 */, PSIF_CSR_ADDR_SQS_INT_STATUS_CLEAR           /* 0x07b858 */,     8, 1,  1 }, /* Index 461 */
{  TSU_SQS_INT_STATUS_CLEAR_KICK_ADDR /* 0xe00286 */, PSIF_CSR_ADDR_SQS_INT_STATUS_CLEAR_KICK      /* 0x07b860 */,     8, 1,  1 }, /* Index 462 */
{       TSU_SQS_SQS_LIST_STATUS0_ADDR /* 0xe00300 */, PSIF_CSR_ADDR_SQS_SQS_LIST_STATUS0           /* 0x07b868 */,   560, 1,  1 }, /* Index 463 */
{       TSU_SQS_SQS_LIST_STATUS1_ADDR /* 0xe00380 */, PSIF_CSR_ADDR_SQS_SQS_LIST_STATUS1           /* 0x07ba98 */,   560, 1,  1 }, /* Index 464 */
{              TSU_SQS_HASH_CTRL_ADDR /* 0xe00400 */, PSIF_CSR_ADDR_SQS_HASH_CTRL                  /* 0x07bcc8 */,    32, 1,  1 }, /* Index 465 */
{         TSU_SQS_ATOMIC_DISABLE_ADDR /* 0xe00405 */, PSIF_CSR_ADDR_SQS_ATOMIC_DISABLE             /* 0x07bce8 */,     8, 1,  1 }, /* Index 466 */
{     TSU_SQS_SQ_BURST_READ_SIZE_ADDR /* 0xe00406 */, PSIF_CSR_ADDR_SQS_SQ_BURST_READ_SIZE         /* 0x07bcf0 */,     8, 1,  1 }, /* Index 467 */
{             TSU_SQS_CBU_DB_CNT_ADDR /* 0xe00407 */, PSIF_CSR_ADDR_SQS_CBU_DB_CNT                 /* 0x07bcf8 */,     8, 1,  1 }, /* Index 468 */
{             TSU_SQS_ERR_DB_CNT_ADDR /* 0xe00408 */, PSIF_CSR_ADDR_SQS_ERR_DB_CNT                 /* 0x07bd00 */,     8, 1,  1 }, /* Index 469 */
{           TSU_SQS_LLQ_PUSH_CNT_ADDR /* 0xe00409 */, PSIF_CSR_ADDR_SQS_LLQ_PUSH_CNT               /* 0x07bd08 */,     8, 1,  1 }, /* Index 470 */
{            TSU_SQS_LLQ_POP_CNT_ADDR /* 0xe0040a */, PSIF_CSR_ADDR_SQS_LLQ_POP_CNT                /* 0x07bd10 */,     8, 1,  1 }, /* Index 471 */
{           TSU_SQS_LLQ_PEEK_CNT_ADDR /* 0xe0040b */, PSIF_CSR_ADDR_SQS_LLQ_PEEK_CNT               /* 0x07bd18 */,     8, 1,  1 }, /* Index 472 */
{              TSU_SQS_SQ_RD_CNT_ADDR /* 0xe0040c */, PSIF_CSR_ADDR_SQS_SQ_RD_CNT                  /* 0x07bd20 */,     8, 1,  1 }, /* Index 473 */
{           TSU_SQS_DSCR_REQ_CNT_ADDR /* 0xe0040d */, PSIF_CSR_ADDR_SQS_DSCR_REQ_CNT               /* 0x07bd28 */,     8, 1,  1 }, /* Index 474 */
{           TSU_SQS_DSCR_RSP_CNT_ADDR /* 0xe0040e */, PSIF_CSR_ADDR_SQS_DSCR_RSP_CNT               /* 0x07bd30 */,     8, 1,  1 }, /* Index 475 */
{            TSU_SQS_ATM_REQ_CNT_ADDR /* 0xe0040f */, PSIF_CSR_ADDR_SQS_ATM_REQ_CNT                /* 0x07bd38 */,     8, 1,  1 }, /* Index 476 */
{            TSU_SQS_ATM_RSP_CNT_ADDR /* 0xe00410 */, PSIF_CSR_ADDR_SQS_ATM_RSP_CNT                /* 0x07bd40 */,     8, 1,  1 }, /* Index 477 */
{      TSU_SQS_PUSH_SQS_LIST_CNT_ADDR /* 0xe00411 */, PSIF_CSR_ADDR_SQS_PUSH_SQS_LIST_CNT          /* 0x07bd48 */,     8, 1,  1 }, /* Index 478 */
{             TSU_SQS_RING_TIMER_ADDR /* 0xe00412 */, PSIF_CSR_ADDR_SQS_RING_TIMER                 /* 0x07bd50 */,     8, 1,  1 }, /* Index 479 */
{      TSU_SQS_PADDED_SQ_DSCR_HW_ADDR /* 0xe00413 */, PSIF_CSR_ADDR_SQS_PADDED_SQ_DSCR_HW          /* 0x07bd58 */,     8, 1,  1 }, /* Index 480 */
{     TSU_SQS_PADDED_RING_BUFFER_ADDR /* 0xe00414 */, PSIF_CSR_ADDR_SQS_PADDED_RING_BUFFER         /* 0x07bd60 */,     8, 1,  1 }, /* Index 481 */
{           TSU_SQS_ECC_ERR_CTRL_ADDR /* 0xe00415 */, PSIF_CSR_ADDR_SQS_ECC_ERR_CTRL               /* 0x07bd68 */,     8, 1,  1 }, /* Index 482 */
{         TSU_SQS_ECC_ERR_STATUS_ADDR /* 0xe00416 */, PSIF_CSR_ADDR_SQS_ECC_ERR_STATUS             /* 0x07bd70 */,     8, 1,  1 }, /* Index 483 */
{   TSU_SQS_ECC_ERR_STATUS_CLEAR_ADDR /* 0xe00417 */, PSIF_CSR_ADDR_SQS_ECC_ERR_STATUS_CLEAR       /* 0x07bd78 */,     8, 1,  1 }, /* Index 484 */
{   TSU_SQS_PIO_RING_BASE_ADDR_0_ADDR /* 0xe00500 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_RING              /* 0x07bd80 */,     8, 0, 35 }, /* Index 485 */
{   TSU_SQS_PIO_RING_BASE_ADDR_1_ADDR /* 0xe00540 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_RING_1            /* 0x07bd88 */,     8, 0, 35 }, /* Index 486 */
{   TSU_SQS_PIO_RING_BASE_ADDR_2_ADDR /* 0xe00580 */, PSIF_CSR_ADDR_BASE_ADDR_SQ_RING_2            /* 0x07bd90 */,     8, 0, 35 }, /* Index 487 */
{ TSU_SQS_PIO_RING_BUFFER_WR_PTR_ADDR /* 0xe005c0 */, PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_WR_PTR     /* 0x07bd98 */,     8, 0, 35 }, /* Index 488 */
{    TSU_SQS_SQS_LIST_ERR_STATUS_ADDR /* 0xe00600 */, PSIF_CSR_ADDR_SQS_SQS_LIST_ERR_STATUS        /* 0x07bda0 */,   560, 1,  1 }, /* Index 489 */
{ TSU_SQS_PIO_RING_BUFFER_RD_PTR_ADDR /* 0xe00680 */, PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_RD_PTR     /* 0x07bfd0 */,     8, 0, 35 }, /* Index 490 */
{ TSU_SQS_PIO_RING_BUFFER_PENDING_CNT_ADDR /* 0xe006c0 */, PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_PENDING_CNT /* 0x07bfd8 */,     8, 0, 35 }, /* Index 491 */
{             TSU_ERR_INT_STATUS_ADDR /* 0xf00000 */, PSIF_CSR_ADDR_ERR_INT_STATUS                 /* 0x07bfe0 */,     8, 1,  1 }, /* Index 492 */
{               TSU_ERR_INT_MASK_ADDR /* 0xf00001 */, PSIF_CSR_ADDR_ERR_INT_MASK                   /* 0x07bfe8 */,     8, 1,  1 }, /* Index 493 */
{                TSU_ERR_INT_PRI_ADDR /* 0xf00002 */, PSIF_CSR_ADDR_ERR_INT_PRI                    /* 0x07bff0 */,     8, 1,  1 }, /* Index 494 */
{       TSU_ERR_INT_STATUS_CLEAR_ADDR /* 0xf00003 */, PSIF_CSR_ADDR_ERR_INT_STATUS_CLEAR           /* 0x07bff8 */,     8, 1,  1 }, /* Index 495 */
{  TSU_ERR_INT_STATUS_CLEAR_KICK_ADDR /* 0xf00004 */, PSIF_CSR_ADDR_ERR_INT_STATUS_CLEAR_KICK      /* 0x07c000 */,     8, 1,  1 }, /* Index 496 */
{     TSU_ERR_ASYNC_EVENT_STATUS_ADDR /* 0xf00010 */, PSIF_CSR_ADDR_ERR_ASYNC_EVENT_STATUS         /* 0x07c008 */,     8, 1,  1 }, /* Index 497 */
{ TSU_ERR_ASYNC_EVENT_AFFILIATED_ADDR /* 0xf00011 */, PSIF_CSR_ADDR_ERR_ASYNC_EVENT_AFFILIATED     /* 0x07c010 */,     8, 1,  1 }, /* Index 498 */
{        TSU_ERR_ASYNC_EVENT_POP_ADDR /* 0xf00012 */, PSIF_CSR_ADDR_ERR_ASYNC_EVENT_POP            /* 0x07c018 */,     8, 1,  1 }, /* Index 499 */
{        TSU_ERR_HOST_ERROR_TYPE_ADDR /* 0xf00200 */, PSIF_CSR_ADDR_ERR_HOST_ERROR_TYPE            /* 0x07c020 */,     8, 1,  1 }, /* Index 500 */
{           TSU_ERR_HOST_COUNTER_ADDR /* 0xf00201 */, PSIF_CSR_ADDR_ERR_HOST_COUNTER               /* 0x07c028 */,     8, 1,  1 }, /* Index 501 */
{     TSU_ERR_CLEAR_HOST_COUNTER_ADDR /* 0xf00202 */, PSIF_CSR_ADDR_ERR_CLEAR_HOST_COUNTER         /* 0x07c030 */,     8, 1,  1 }, /* Index 502 */
{        TSU_ERR_CMPL_ERROR_TYPE_ADDR /* 0xf00210 */, PSIF_CSR_ADDR_ERR_CMPL_ERROR_TYPE            /* 0x07c038 */,     8, 1,  1 }, /* Index 503 */
{           TSU_ERR_CMPL_COUNTER_ADDR /* 0xf00211 */, PSIF_CSR_ADDR_ERR_CMPL_COUNTER               /* 0x07c040 */,     8, 1,  1 }, /* Index 504 */
{     TSU_ERR_CLEAR_CMPL_COUNTER_ADDR /* 0xf00212 */, PSIF_CSR_ADDR_ERR_CLEAR_CMPL_COUNTER         /* 0x07c048 */,     8, 1,  1 }, /* Index 505 */
{         TSU_ERR_CLEAR_DIAG_RAM_ADDR /* 0xf01000 */, PSIF_CSR_ADDR_ERR_CLEAR_DIAG_RAM             /* 0x07c050 */,     8, 1,  1 }, /* Index 506 */
{    TSU_ERR_CLEAR_DIAG_RAM_KICK_ADDR /* 0xf01001 */, PSIF_CSR_ADDR_ERR_CLEAR_DIAG_RAM_KICK        /* 0x07c058 */,     8, 1,  1 }, /* Index 507 */
{          TSU_ERR_DIAG_RAM_ADDR_ADDR /* 0xf0139c */, PSIF_CSR_ADDR_ERR_DIAG_RAM_ADDR              /* 0x07c060 */,     8, 0, 35 }, /* Index 508 */
{     TSU_ERR_DIAG_RAM_READ_ADDR_ADDR /* 0xf0179c */, PSIF_CSR_ADDR_ERR_DIAG_RAM_READ_ADDR         /* 0x07c068 */,     8, 1,  1 }, /* Index 509 */
{     TSU_ERR_DIAG_RAM_READ_KICK_ADDR /* 0xf01b9b */, PSIF_CSR_ADDR_ERR_DIAG_RAM_READ_KICK         /* 0x07c070 */,     8, 1,  1 }, /* Index 510 */
{     TSU_ERR_FENCE_TIME_TO_WAIT_ADDR /* 0xf02000 */, PSIF_CSR_ADDR_ERR_FENCE_TIME_TO_WAIT         /* 0x07c078 */,     8, 1,  1 }, /* Index 511 */
{          TSU_ERR_DIAG_RAM_DATA_ADDR /* 0xf08000 */, PSIF_CSR_ADDR_ERR_DIAG_RAM_DATA              /* 0x07c080 */,    48, 1,  1 }, /* Index 512 */
{   TSU_ERR_CLEAR_ERROR_COUNTERS_ADDR /* 0xf08400 */, PSIF_CSR_ADDR_ERR_CLEAR_ERROR_COUNTERS       /* 0x07c0b0 */,     8, 1,  1 }, /* Index 513 */
{ TSU_ERR_CLEAR_ERROR_COUNTERS_KICK_ADDR /* 0xf08401 */, PSIF_CSR_ADDR_ERR_CLEAR_ERROR_COUNTERS_KICK  /* 0x07c0b8 */,     8, 1,  1 }, /* Index 514 */
{        TSU_ERR_ERROR_COUNTER_0_ADDR /* 0xf10000 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_0            /* 0x07c0c0 */,     8, 0, 33 }, /* Index 515 */
{        TSU_ERR_ERROR_COUNTER_1_ADDR /* 0xf10040 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_1            /* 0x07c0c8 */,     8, 0, 33 }, /* Index 516 */
{        TSU_ERR_ERROR_COUNTER_2_ADDR /* 0xf10080 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_2            /* 0x07c0d0 */,     8, 0, 33 }, /* Index 517 */
{        TSU_ERR_ERROR_COUNTER_3_ADDR /* 0xf100c0 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_3            /* 0x07c0d8 */,     8, 0, 33 }, /* Index 518 */
{        TSU_ERR_ERROR_COUNTER_4_ADDR /* 0xf10100 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_4            /* 0x07c0e0 */,     8, 0, 33 }, /* Index 519 */
{        TSU_ERR_ERROR_COUNTER_5_ADDR /* 0xf10140 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_5            /* 0x07c0e8 */,     8, 0, 33 }, /* Index 520 */
{        TSU_ERR_ERROR_COUNTER_6_ADDR /* 0xf10180 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_6            /* 0x07c0f0 */,     8, 0, 33 }, /* Index 521 */
{        TSU_ERR_ERROR_COUNTER_7_ADDR /* 0xf101c0 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_7            /* 0x07c0f8 */,     8, 0, 33 }, /* Index 522 */
{        TSU_ERR_ERROR_COUNTER_8_ADDR /* 0xf10200 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_8            /* 0x07c100 */,     8, 0, 33 }, /* Index 523 */
{        TSU_ERR_ERROR_COUNTER_9_ADDR /* 0xf10240 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_9            /* 0x07c108 */,     8, 0, 33 }, /* Index 524 */
{       TSU_ERR_ERROR_COUNTER_10_ADDR /* 0xf10280 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_10           /* 0x07c110 */,     8, 0, 33 }, /* Index 525 */
{       TSU_ERR_ERROR_COUNTER_11_ADDR /* 0xf102c0 */, PSIF_CSR_ADDR_ERR_ERROR_COUNTER_11           /* 0x07c118 */,     8, 0, 33 }, /* Index 526 */
{         IBU_P1_CNT1US_CNT124US_ADDR /* 0x1100001 */, PSIF_CSR_ADDR_IBU_P1_CNT1US_CNT124US         /* 0x07c120 */,     8, 1,  1 }, /* Index 527 */
{                  IBU_P1_CNT2MS_ADDR /* 0x1100002 */, PSIF_CSR_ADDR_IBU_P1_CNT2MS                  /* 0x07c128 */,     8, 1,  1 }, /* Index 528 */
{                 IBU_P1_CNT10MS_ADDR /* 0x1100003 */, PSIF_CSR_ADDR_IBU_P1_CNT10MS                 /* 0x07c130 */,     8, 1,  1 }, /* Index 529 */
{                IBU_P1_CNT100MS_ADDR /* 0x1100004 */, PSIF_CSR_ADDR_IBU_P1_CNT100MS                /* 0x07c138 */,     8, 1,  1 }, /* Index 530 */
{                IBU_P1_CNT150MS_ADDR /* 0x1100005 */, PSIF_CSR_ADDR_IBU_P1_CNT150MS                /* 0x07c140 */,     8, 1,  1 }, /* Index 531 */
{                IBU_P1_CNT400MS_ADDR /* 0x1100006 */, PSIF_CSR_ADDR_IBU_P1_CNT400MS                /* 0x07c148 */,     8, 1,  1 }, /* Index 532 */
{              IBU_P1_SKP_TO_CNT_ADDR /* 0x1100007 */, PSIF_CSR_ADDR_IBU_P1_SKP_TO_CNT              /* 0x07c150 */,     8, 1,  1 }, /* Index 533 */
{                 IBU_P1_TGT_VAL_ADDR /* 0x1100008 */, PSIF_CSR_ADDR_IBU_P1_TGT_VAL                 /* 0x07c158 */,     8, 1,  1 }, /* Index 534 */
{             IBU_P1_PHY_VCONFIG_ADDR /* 0x1100009 */, PSIF_CSR_ADDR_IBU_P1_PHY_VCONFIG             /* 0x07c160 */,     8, 1,  1 }, /* Index 535 */
{      IBU_P1_PHY_DISP_ERROR_CNT_ADDR /* 0x110000a */, PSIF_CSR_ADDR_IBU_P1_PHY_DISP_ERROR_CNT      /* 0x07c168 */,     8, 1,  1 }, /* Index 536 */
{      IBU_P1_PHY_CODE_ERROR_CNT_ADDR /* 0x110000b */, PSIF_CSR_ADDR_IBU_P1_PHY_CODE_ERROR_CNT      /* 0x07c170 */,     8, 1,  1 }, /* Index 537 */
{           IBU_P1_PHY_EVENT_LOG_ADDR /* 0x110000c */, PSIF_CSR_ADDR_IBU_P1_PHY_EVENT_LOG           /* 0x07c178 */,     8, 1,  1 }, /* Index 538 */
{          IBU_P1_PORT_TRAIN_FSM_ADDR /* 0x110000d */, PSIF_CSR_ADDR_IBU_P1_PORT_TRAIN_FSM          /* 0x07c180 */,     8, 1,  1 }, /* Index 539 */
{   IBU_P1_PHY_TRAIN_SMTIMER_VS1_ADDR /* 0x110000e */, PSIF_CSR_ADDR_IBU_P1_PHY_TRAIN_SMTIMER_VS1   /* 0x07c188 */,     8, 1,  1 }, /* Index 540 */
{                    IBU_P1_MASK_ADDR /* 0x110000f */, PSIF_CSR_ADDR_IBU_P1_MASK                    /* 0x07c190 */,     8, 1,  1 }, /* Index 541 */
{                  IBU_P1_STATUS_ADDR /* 0x1100010 */, PSIF_CSR_ADDR_IBU_P1_STATUS                  /* 0x07c198 */,     8, 1,  1 }, /* Index 542 */
{      IBU_P1_LINK_WIDTH_ENABLED_ADDR /* 0x1100011 */, PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_ENABLED      /* 0x07c1a0 */,     8, 1,  1 }, /* Index 543 */
{    IBU_P1_LINK_WIDTH_SUPPORTED_ADDR /* 0x1100012 */, PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_SUPPORTED    /* 0x07c1a8 */,     8, 1,  1 }, /* Index 544 */
{       IBU_P1_LINK_WIDTH_ACTIVE_ADDR /* 0x1100013 */, PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_ACTIVE       /* 0x07c1b0 */,     8, 1,  1 }, /* Index 545 */
{    IBU_P1_LINK_SPEED_SUPPORTED_ADDR /* 0x1100014 */, PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_SUPPORTED    /* 0x07c1b8 */,     8, 1,  1 }, /* Index 546 */
{     IBU_P1_PORT_PHYSICAL_STATE_ADDR /* 0x1100015 */, PSIF_CSR_ADDR_IBU_P1_PORT_PHYSICAL_STATE     /* 0x07c1c0 */,     8, 1,  1 }, /* Index 547 */
{ IBU_P1_LINK_DOWN_DEFAULT_STATE_ADDR /* 0x1100016 */, PSIF_CSR_ADDR_IBU_P1_LINK_DOWN_DEFAULT_STATE /* 0x07c1c8 */,     8, 1,  1 }, /* Index 548 */
{       IBU_P1_LINK_SPEED_ACTIVE_ADDR /* 0x1100017 */, PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_ACTIVE       /* 0x07c1d0 */,     8, 1,  1 }, /* Index 549 */
{      IBU_P1_LINK_SPEED_ENABLED_ADDR /* 0x1100018 */, PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_ENABLED      /* 0x07c1d8 */,     8, 1,  1 }, /* Index 550 */
{           IBU_P1_PCPHY_CNT_RST_ADDR /* 0x1100019 */, PSIF_CSR_ADDR_IBU_P1_PCPHY_CNT_RST           /* 0x07c1e0 */,     8, 1,  1 }, /* Index 551 */
{          IBU_P1_PCPHY_CNT_LOAD_ADDR /* 0x110001a */, PSIF_CSR_ADDR_IBU_P1_PCPHY_CNT_LOAD          /* 0x07c1e8 */,     8, 1,  1 }, /* Index 552 */
{          IBU_P1_PCSYMB_ERR_CNT_ADDR /* 0x110001b */, PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT          /* 0x07c1f0 */,     8, 1,  1 }, /* Index 553 */
{      IBU_P1_PCLINK_ERR_REC_CNT_ADDR /* 0x110001c */, PSIF_CSR_ADDR_IBU_P1_PCLINK_ERR_REC_CNT      /* 0x07c1f8 */,     8, 1,  1 }, /* Index 554 */
{       IBU_P1_PCLINK_DOWNED_CNT_ADDR /* 0x110001d */, PSIF_CSR_ADDR_IBU_P1_PCLINK_DOWNED_CNT       /* 0x07c200 */,     8, 1,  1 }, /* Index 555 */
{    IBU_P1_PCSYMB_ERR_CNT_LANE0_ADDR /* 0x110001e */, PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE0    /* 0x07c208 */,     8, 1,  1 }, /* Index 556 */
{    IBU_P1_PCSYMB_ERR_CNT_LANE1_ADDR /* 0x110001f */, PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE1    /* 0x07c210 */,     8, 1,  1 }, /* Index 557 */
{    IBU_P1_PCSYMB_ERR_CNT_LANE2_ADDR /* 0x1100020 */, PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE2    /* 0x07c218 */,     8, 1,  1 }, /* Index 558 */
{    IBU_P1_PCSYMB_ERR_CNT_LANE3_ADDR /* 0x1100021 */, PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE3    /* 0x07c220 */,     8, 1,  1 }, /* Index 559 */
{    IBU_P1_TS3_REV1_TT0_COUNTER_ADDR /* 0x1100022 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT0_COUNTER    /* 0x07c228 */,     8, 1,  1 }, /* Index 560 */
{    IBU_P1_TS3_REV1_TT1_COUNTER_ADDR /* 0x1100023 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT1_COUNTER    /* 0x07c230 */,     8, 1,  1 }, /* Index 561 */
{    IBU_P1_TS3_REV1_TT2_COUNTER_ADDR /* 0x1100024 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT2_COUNTER    /* 0x07c238 */,     8, 1,  1 }, /* Index 562 */
{    IBU_P1_TS3_REV1_TT3_COUNTER_ADDR /* 0x1100025 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT3_COUNTER    /* 0x07c240 */,     8, 1,  1 }, /* Index 563 */
{     IBU_P1_PHY_ALIGN_ERROR_CNT_ADDR /* 0x1100026 */, PSIF_CSR_ADDR_IBU_P1_PHY_ALIGN_ERROR_CNT     /* 0x07c248 */,     8, 1,  1 }, /* Index 564 */
{ IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT_ADDR /* 0x1100027 */, PSIF_CSR_ADDR_IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT /* 0x07c250 */,     8, 1,  1 }, /* Index 565 */
{       IBU_P1_PHY_PAD_ERROR_CNT_ADDR /* 0x1100028 */, PSIF_CSR_ADDR_IBU_P1_PHY_PAD_ERROR_CNT       /* 0x07c258 */,     8, 1,  1 }, /* Index 566 */
{     IBU_P1_PHY_EDR_FDR_CONFIG0_ADDR /* 0x1100029 */, PSIF_CSR_ADDR_IBU_P1_PHY_EDR_FDR_CONFIG0     /* 0x07c260 */,     8, 1,  1 }, /* Index 567 */
{     IBU_P1_PHY_EDR_FDR_CONFIG1_ADDR /* 0x110002a */, PSIF_CSR_ADDR_IBU_P1_PHY_EDR_FDR_CONFIG1     /* 0x07c268 */,     8, 1,  1 }, /* Index 568 */
{     IBU_P1_PHY_LEAKY_BKT_THRSH_ADDR /* 0x110002b */, PSIF_CSR_ADDR_IBU_P1_PHY_LEAKY_BKT_THRSH     /* 0x07c270 */,     8, 1,  1 }, /* Index 569 */
{      IBU_P1_RCV_TS3_STATUS_LOW_ADDR /* 0x110002d */, PSIF_CSR_ADDR_IBU_P1_RCV_TS3_STATUS_LOW      /* 0x07c278 */,     8, 1,  1 }, /* Index 570 */
{     IBU_P1_RCV_TS3_STATUS_HIGH_ADDR /* 0x110002e */, PSIF_CSR_ADDR_IBU_P1_RCV_TS3_STATUS_HIGH     /* 0x07c280 */,     8, 1,  1 }, /* Index 571 */
{                   IBU_P1_GUID0_ADDR /* 0x110002f */, PSIF_CSR_ADDR_IBU_P1_GUID0                   /* 0x07c288 */,     8, 1,  1 }, /* Index 572 */
{                   IBU_P1_GUID1_ADDR /* 0x1100030 */, PSIF_CSR_ADDR_IBU_P1_GUID1                   /* 0x07c290 */,     8, 1,  1 }, /* Index 573 */
{                    IBU_P1_PNUM_ADDR /* 0x1100031 */, PSIF_CSR_ADDR_IBU_P1_PNUM                    /* 0x07c298 */,     8, 1,  1 }, /* Index 574 */
{                  IBU_P1_CNT4MS_ADDR /* 0x1100032 */, PSIF_CSR_ADDR_IBU_P1_CNT4MS                  /* 0x07c2a0 */,     8, 1,  1 }, /* Index 575 */
{                 IBU_P1_CNT36MS_ADDR /* 0x1100033 */, PSIF_CSR_ADDR_IBU_P1_CNT36MS                 /* 0x07c2a8 */,     8, 1,  1 }, /* Index 576 */
{          IBU_P1_PHY_TS3_CONFIG_ADDR /* 0x1100034 */, PSIF_CSR_ADDR_IBU_P1_PHY_TS3_CONFIG          /* 0x07c2b0 */,     8, 1,  1 }, /* Index 577 */
{        IBU_P1_DDS_WINDOW_START_ADDR /* 0x1100035 */, PSIF_CSR_ADDR_IBU_P1_DDS_WINDOW_START        /* 0x07c2b8 */,     8, 1,  1 }, /* Index 578 */
{          IBU_P1_DDS_WINDOW_END_ADDR /* 0x1100036 */, PSIF_CSR_ADDR_IBU_P1_DDS_WINDOW_END          /* 0x07c2c0 */,     8, 1,  1 }, /* Index 579 */
{  IBU_P1_DDS_DEFAULT_WINDOW_END_ADDR /* 0x1100037 */, PSIF_CSR_ADDR_IBU_P1_DDS_DEFAULT_WINDOW_END  /* 0x07c2c8 */,     8, 1,  1 }, /* Index 580 */
{        IBU_P1_RX_TS3DDS_STATUS_ADDR /* 0x1100038 */, PSIF_CSR_ADDR_IBU_P1_RX_TS3DDS_STATUS        /* 0x07c2d0 */,     8, 1,  1 }, /* Index 581 */
{        IBU_P1_TX_TS3DDS_STATUS_ADDR /* 0x1100039 */, PSIF_CSR_ADDR_IBU_P1_TX_TS3DDS_STATUS        /* 0x07c2d8 */,     8, 1,  1 }, /* Index 582 */
{                 IBU_P1_CNT16MS_ADDR /* 0x110003a */, PSIF_CSR_ADDR_IBU_P1_CNT16MS                 /* 0x07c2e0 */,     8, 1,  1 }, /* Index 583 */
{        IBU_P1_CONF_TEST4MS_SCT_ADDR /* 0x110003b */, PSIF_CSR_ADDR_IBU_P1_CONF_TEST4MS_SCT        /* 0x07c2e8 */,     8, 1,  1 }, /* Index 584 */
{       IBU_P1_CONF_TEST16MS_SCT_ADDR /* 0x110003c */, PSIF_CSR_ADDR_IBU_P1_CONF_TEST16MS_SCT       /* 0x07c2f0 */,     8, 1,  1 }, /* Index 585 */
{     IBU_P1_LOCAL_ADDTEST_LIMIT_ADDR /* 0x110003d */, PSIF_CSR_ADDR_IBU_P1_LOCAL_ADDTEST_LIMIT     /* 0x07c2f8 */,     8, 1,  1 }, /* Index 586 */
{    IBU_P1_REMOTE_ADDTEST_LIMIT_ADDR /* 0x110003e */, PSIF_CSR_ADDR_IBU_P1_REMOTE_ADDTEST_LIMIT    /* 0x07c300 */,     8, 1,  1 }, /* Index 587 */
{    IBU_P1_TS3_REV1_TT4_COUNTER_ADDR /* 0x110003f */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT4_COUNTER    /* 0x07c308 */,     8, 1,  1 }, /* Index 588 */
{    IBU_P1_TS3_REV1_TT5_COUNTER_ADDR /* 0x1100040 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT5_COUNTER    /* 0x07c310 */,     8, 1,  1 }, /* Index 589 */
{    IBU_P1_TS3_REV1_TT6_COUNTER_ADDR /* 0x1100041 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT6_COUNTER    /* 0x07c318 */,     8, 1,  1 }, /* Index 590 */
{    IBU_P1_TS3_REV1_TT7_COUNTER_ADDR /* 0x1100042 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT7_COUNTER    /* 0x07c320 */,     8, 1,  1 }, /* Index 591 */
{    IBU_P1_TS3_REV1_TT8_COUNTER_ADDR /* 0x1100043 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT8_COUNTER    /* 0x07c328 */,     8, 1,  1 }, /* Index 592 */
{    IBU_P1_TS3_REV1_TT9_COUNTER_ADDR /* 0x1100044 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT9_COUNTER    /* 0x07c330 */,     8, 1,  1 }, /* Index 593 */
{   IBU_P1_TS3_REV1_TT10_COUNTER_ADDR /* 0x1100045 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT10_COUNTER   /* 0x07c338 */,     8, 1,  1 }, /* Index 594 */
{   IBU_P1_TS3_REV1_TT11_COUNTER_ADDR /* 0x1100046 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT11_COUNTER   /* 0x07c340 */,     8, 1,  1 }, /* Index 595 */
{   IBU_P1_TS3_REV1_TT12_COUNTER_ADDR /* 0x1100047 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT12_COUNTER   /* 0x07c348 */,     8, 1,  1 }, /* Index 596 */
{   IBU_P1_TS3_REV1_TT13_COUNTER_ADDR /* 0x1100048 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT13_COUNTER   /* 0x07c350 */,     8, 1,  1 }, /* Index 597 */
{   IBU_P1_TS3_REV1_TT14_COUNTER_ADDR /* 0x1100049 */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT14_COUNTER   /* 0x07c358 */,     8, 1,  1 }, /* Index 598 */
{   IBU_P1_TS3_REV1_TT15_COUNTER_ADDR /* 0x110004a */, PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT15_COUNTER   /* 0x07c360 */,     8, 1,  1 }, /* Index 599 */
{ IBU_P1_CONF_TEST_LANE_ERROR_LIMIT_ADDR /* 0x110004b */, PSIF_CSR_ADDR_IBU_P1_CONF_TEST_LANE_ERROR_LIMIT /* 0x07c368 */,     8, 1,  1 }, /* Index 600 */
{    IBU_P1_CONF_TEST_IDLE_LIMIT_ADDR /* 0x110004c */, PSIF_CSR_ADDR_IBU_P1_CONF_TEST_IDLE_LIMIT    /* 0x07c370 */,     8, 1,  1 }, /* Index 601 */
{        IBU_P1_CONF_TEST2MS_SCT_ADDR /* 0x110004d */, PSIF_CSR_ADDR_IBU_P1_CONF_TEST2MS_SCT        /* 0x07c378 */,     8, 1,  1 }, /* Index 602 */
{           IBU_P1_CNT100_MS_HBR_ADDR /* 0x110004e */, PSIF_CSR_ADDR_IBU_P1_CNT100_MS_HBR           /* 0x07c380 */,     8, 1,  1 }, /* Index 603 */
{      IBU_P1_PMAEQULANE0_STATUS_ADDR /* 0x110004f */, PSIF_CSR_ADDR_IBU_P1_PMAEQULANE0_STATUS      /* 0x07c388 */,     8, 1,  1 }, /* Index 604 */
{      IBU_P1_PMAEQULANE1_STATUS_ADDR /* 0x1100050 */, PSIF_CSR_ADDR_IBU_P1_PMAEQULANE1_STATUS      /* 0x07c390 */,     8, 1,  1 }, /* Index 605 */
{      IBU_P1_PMAEQULANE2_STATUS_ADDR /* 0x1100051 */, PSIF_CSR_ADDR_IBU_P1_PMAEQULANE2_STATUS      /* 0x07c398 */,     8, 1,  1 }, /* Index 606 */
{      IBU_P1_PMAEQULANE3_STATUS_ADDR /* 0x1100052 */, PSIF_CSR_ADDR_IBU_P1_PMAEQULANE3_STATUS      /* 0x07c3a0 */,     8, 1,  1 }, /* Index 607 */
{      IBU_P1_PMADDSLANE0_STATUS_ADDR /* 0x1100053 */, PSIF_CSR_ADDR_IBU_P1_PMADDSLANE0_STATUS      /* 0x07c3a8 */,     8, 1,  1 }, /* Index 608 */
{      IBU_P1_PMADDSLANE1_STATUS_ADDR /* 0x1100054 */, PSIF_CSR_ADDR_IBU_P1_PMADDSLANE1_STATUS      /* 0x07c3b0 */,     8, 1,  1 }, /* Index 609 */
{      IBU_P1_PMADDSLANE2_STATUS_ADDR /* 0x1100055 */, PSIF_CSR_ADDR_IBU_P1_PMADDSLANE2_STATUS      /* 0x07c3b8 */,     8, 1,  1 }, /* Index 610 */
{      IBU_P1_PMADDSLANE3_STATUS_ADDR /* 0x1100056 */, PSIF_CSR_ADDR_IBU_P1_PMADDSLANE3_STATUS      /* 0x07c3c0 */,     8, 1,  1 }, /* Index 611 */
{           IBU_P1_PHY_EDPL_ERR0_ADDR /* 0x1100057 */, PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR0           /* 0x07c3c8 */,     8, 1,  1 }, /* Index 612 */
{           IBU_P1_PHY_EDPL_ERR1_ADDR /* 0x1100058 */, PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR1           /* 0x07c3d0 */,     8, 1,  1 }, /* Index 613 */
{           IBU_P1_PHY_EDPL_ERR2_ADDR /* 0x1100059 */, PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR2           /* 0x07c3d8 */,     8, 1,  1 }, /* Index 614 */
{           IBU_P1_PHY_EDPL_ERR3_ADDR /* 0x110005a */, PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR3           /* 0x07c3e0 */,     8, 1,  1 }, /* Index 615 */
{        IBU_P1_PHY_BLK_TYPE_ERR_ADDR /* 0x110005b */, PSIF_CSR_ADDR_IBU_P1_PHY_BLK_TYPE_ERR        /* 0x07c3e8 */,     8, 1,  1 }, /* Index 616 */
{         IBU_P1_PHY_BLK_EOP_ERR_ADDR /* 0x110005c */, PSIF_CSR_ADDR_IBU_P1_PHY_BLK_EOP_ERR         /* 0x07c3f0 */,     8, 1,  1 }, /* Index 617 */
{         IBU_P1_PHY_CIN_PKT_ERR_ADDR /* 0x110005d */, PSIF_CSR_ADDR_IBU_P1_PHY_CIN_PKT_ERR         /* 0x07c3f8 */,     8, 1,  1 }, /* Index 618 */
{         IBU_P1_PHY_SYN_HDR_ERR_ADDR /* 0x110005e */, PSIF_CSR_ADDR_IBU_P1_PHY_SYN_HDR_ERR         /* 0x07c400 */,     8, 1,  1 }, /* Index 619 */
{           IBU_P1_PHY_PRBS_ERR0_ADDR /* 0x110005f */, PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR0           /* 0x07c408 */,     8, 1,  1 }, /* Index 620 */
{           IBU_P1_PHY_PRBS_ERR1_ADDR /* 0x1100060 */, PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR1           /* 0x07c410 */,     8, 1,  1 }, /* Index 621 */
{           IBU_P1_PHY_PRBS_ERR2_ADDR /* 0x1100061 */, PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR2           /* 0x07c418 */,     8, 1,  1 }, /* Index 622 */
{           IBU_P1_PHY_PRBS_ERR3_ADDR /* 0x1100062 */, PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR3           /* 0x07c420 */,     8, 1,  1 }, /* Index 623 */
{       IBU_P1_PHY_DESKEW_STATUS_ADDR /* 0x1100063 */, PSIF_CSR_ADDR_IBU_P1_PHY_DESKEW_STATUS       /* 0x07c428 */,     8, 1,  1 }, /* Index 624 */
{         IBU_P1_PHY_FECUNC_ERR0_ADDR /* 0x1100064 */, PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR0         /* 0x07c430 */,     8, 1,  1 }, /* Index 625 */
{         IBU_P1_PHY_FECUNC_ERR1_ADDR /* 0x1100065 */, PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR1         /* 0x07c438 */,     8, 1,  1 }, /* Index 626 */
{         IBU_P1_PHY_FECUNC_ERR2_ADDR /* 0x1100066 */, PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR2         /* 0x07c440 */,     8, 1,  1 }, /* Index 627 */
{         IBU_P1_PHY_FECUNC_ERR3_ADDR /* 0x1100067 */, PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR3         /* 0x07c448 */,     8, 1,  1 }, /* Index 628 */
{         IBU_P1_PHY_FECCOR_ERR0_ADDR /* 0x1100068 */, PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR0         /* 0x07c450 */,     8, 1,  1 }, /* Index 629 */
{         IBU_P1_PHY_FECCOR_ERR1_ADDR /* 0x1100069 */, PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR1         /* 0x07c458 */,     8, 1,  1 }, /* Index 630 */
{         IBU_P1_PHY_FECCOR_ERR2_ADDR /* 0x110006a */, PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR2         /* 0x07c460 */,     8, 1,  1 }, /* Index 631 */
{         IBU_P1_PHY_FECCOR_ERR3_ADDR /* 0x110006b */, PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR3         /* 0x07c468 */,     8, 1,  1 }, /* Index 632 */
{            IBU_P1_PHY_SMSTATUS_ADDR /* 0x110006c */, PSIF_CSR_ADDR_IBU_P1_PHY_SMSTATUS            /* 0x07c470 */,     8, 1,  1 }, /* Index 633 */
{ IBU_P1_PHY_TS3_NEGOTIATED_STATUS_ADDR /* 0x110006d */, PSIF_CSR_ADDR_IBU_P1_PHY_TS3_NEGOTIATED_STATUS /* 0x07c478 */,     8, 1,  1 }, /* Index 634 */
{                IBU_P1_PHY_TEST_ADDR /* 0x110006e */, PSIF_CSR_ADDR_IBU_P1_PHY_TEST                /* 0x07c480 */,     8, 1,  1 }, /* Index 635 */
{  IBU_P1_EDR_FDR_RX_STATUS_REG0_ADDR /* 0x110006f */, PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG0  /* 0x07c488 */,     8, 1,  1 }, /* Index 636 */
{  IBU_P1_EDR_FDR_RX_STATUS_REG1_ADDR /* 0x1100070 */, PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG1  /* 0x07c490 */,     8, 1,  1 }, /* Index 637 */
{  IBU_P1_EDR_FDR_RX_STATUS_REG2_ADDR /* 0x1100071 */, PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG2  /* 0x07c498 */,     8, 1,  1 }, /* Index 638 */
{  IBU_P1_EDR_FDR_TX_STATUS_REG0_ADDR /* 0x1100072 */, PSIF_CSR_ADDR_IBU_P1_EDR_FDR_TX_STATUS_REG0  /* 0x07c4a0 */,     8, 1,  1 }, /* Index 639 */
{            IBU_P1_INT_PRIORITY_ADDR /* 0x1100073 */, PSIF_CSR_ADDR_IBU_P1_INT_PRIORITY            /* 0x07c4a8 */,     8, 1,  1 }, /* Index 640 */
{               IBU_P1_INT_FATAL_ADDR /* 0x1100074 */, PSIF_CSR_ADDR_IBU_P1_INT_FATAL               /* 0x07c4b0 */,     8, 1,  1 }, /* Index 641 */
{ IBU_P1_LINK_ROUND_TRIP_LATENCY_ADDR /* 0x1100075 */, PSIF_CSR_ADDR_IBU_P1_LINK_ROUND_TRIP_LATENCY /* 0x07c4b8 */,     8, 1,  1 }, /* Index 642 */
{   IBU_P1_PHY_FORCE_LEGACY_MODE_ADDR /* 0x1100076 */, PSIF_CSR_ADDR_IBU_P1_PHY_FORCE_LEGACY_MODE   /* 0x07c4c0 */,     8, 1,  1 }, /* Index 643 */
{                     IBU_P1_LID_ADDR /* 0x1100100 */, PSIF_CSR_ADDR_IBU_P1_LID                     /* 0x07c4c8 */,     8, 1,  1 }, /* Index 644 */
{                     IBU_P1_LMC_ADDR /* 0x1100101 */, PSIF_CSR_ADDR_IBU_P1_LMC                     /* 0x07c4d0 */,     8, 1,  1 }, /* Index 645 */
{              IBU_P1_PORT_STATE_ADDR /* 0x1100102 */, PSIF_CSR_ADDR_IBU_P1_PORT_STATE              /* 0x07c4d8 */,     8, 1,  1 }, /* Index 646 */
{                   IBU_P1_VLCAP_ADDR /* 0x1100103 */, PSIF_CSR_ADDR_IBU_P1_VLCAP                   /* 0x07c4e0 */,     8, 1,  1 }, /* Index 647 */
{            IBU_P1_NEIGHBOR_MTU_ADDR /* 0x1100104 */, PSIF_CSR_ADDR_IBU_P1_NEIGHBOR_MTU            /* 0x07c4e8 */,     8, 1,  1 }, /* Index 648 */
{            IBU_P1_VLHIGH_LIMIT_ADDR /* 0x1100105 */, PSIF_CSR_ADDR_IBU_P1_VLHIGH_LIMIT            /* 0x07c4f0 */,     8, 1,  1 }, /* Index 649 */
{  IBU_P1_VLARBITRATION_HIGH_CAP_ADDR /* 0x1100106 */, PSIF_CSR_ADDR_IBU_P1_VLARBITRATION_HIGH_CAP  /* 0x07c4f8 */,     8, 1,  1 }, /* Index 650 */
{   IBU_P1_VLARBITRATION_LOW_CAP_ADDR /* 0x1100107 */, PSIF_CSR_ADDR_IBU_P1_VLARBITRATION_LOW_CAP   /* 0x07c500 */,     8, 1,  1 }, /* Index 651 */
{                  IBU_P1_MTUCAP_ADDR /* 0x1100108 */, PSIF_CSR_ADDR_IBU_P1_MTUCAP                  /* 0x07c508 */,     8, 1,  1 }, /* Index 652 */
{         IBU_P1_OPERATIONAL_VLS_ADDR /* 0x1100109 */, PSIF_CSR_ADDR_IBU_P1_OPERATIONAL_VLS         /* 0x07c510 */,     8, 1,  1 }, /* Index 653 */
{        IBU_P1_PCPORT_RCV_ERROR_ADDR /* 0x110010c */, PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_ERROR        /* 0x07c518 */,     8, 1,  1 }, /* Index 654 */
{ IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_ADDR /* 0x110010d */, PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS /* 0x07c520 */,     8, 1,  1 }, /* Index 655 */
{    IBU_P1_PCPORT_XMIT_DISCARDS_ADDR /* 0x110010e */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_DISCARDS    /* 0x07c528 */,     8, 1,  1 }, /* Index 656 */
{ IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS_ADDR /* 0x110010f */, PSIF_CSR_ADDR_IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS /* 0x07c530 */,     8, 1,  1 }, /* Index 657 */
{ IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_ADDR /* 0x1100110 */, PSIF_CSR_ADDR_IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS /* 0x07c538 */,     8, 1,  1 }, /* Index 658 */
{          IBU_P1_PCVL15_DROPPED_ADDR /* 0x1100111 */, PSIF_CSR_ADDR_IBU_P1_PCVL15_DROPPED          /* 0x07c540 */,     8, 1,  1 }, /* Index 659 */
{        IBU_P1_PCPORT_XMIT_WAIT_ADDR /* 0x1100112 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT        /* 0x07c548 */,     8, 1,  1 }, /* Index 660 */
{   IBU_P1_PCPORT_XMIT_DATA_LSQW_ADDR /* 0x1100113 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_DATA_LSQW   /* 0x07c550 */,     8, 1,  1 }, /* Index 661 */
{ IBU_P1_LINK_ERROR_CHECK_ENABLE_ADDR /* 0x1100114 */, PSIF_CSR_ADDR_IBU_P1_LINK_ERROR_CHECK_ENABLE /* 0x07c558 */,     8, 1,  1 }, /* Index 662 */
{    IBU_P1_PCPORT_RCV_DATA_LSQW_ADDR /* 0x1100115 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_DATA_LSQW    /* 0x07c560 */,     8, 1,  1 }, /* Index 663 */
{   IBU_P1_PCPORT_XMIT_PKTS_LSQW_ADDR /* 0x1100117 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_PKTS_LSQW   /* 0x07c568 */,     8, 1,  1 }, /* Index 664 */
{    IBU_P1_PCPORT_RCV_PKTS_LSQW_ADDR /* 0x1100119 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_PKTS_LSQW    /* 0x07c570 */,     8, 1,  1 }, /* Index 665 */
{ IBU_P1_PCPORT_UCXMIT_PKTS_LSQW_ADDR /* 0x110011b */, PSIF_CSR_ADDR_IBU_P1_PCPORT_UCXMIT_PKTS_LSQW /* 0x07c578 */,     8, 1,  1 }, /* Index 666 */
{ IBU_P1_PCPORT_MCXMIT_PKTS_LSQW_ADDR /* 0x110011d */, PSIF_CSR_ADDR_IBU_P1_PCPORT_MCXMIT_PKTS_LSQW /* 0x07c580 */,     8, 1,  1 }, /* Index 667 */
{  IBU_P1_PCPORT_UCRCV_PKTS_LSQW_ADDR /* 0x110011f */, PSIF_CSR_ADDR_IBU_P1_PCPORT_UCRCV_PKTS_LSQW  /* 0x07c588 */,     8, 1,  1 }, /* Index 668 */
{  IBU_P1_PCPORT_MCRCV_PKTS_LSQW_ADDR /* 0x1100121 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_MCRCV_PKTS_LSQW  /* 0x07c590 */,     8, 1,  1 }, /* Index 669 */
{    IBU_P1_PCPORT_XMIT_WAIT_VL0_ADDR /* 0x1100123 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL0    /* 0x07c598 */,     8, 1,  1 }, /* Index 670 */
{    IBU_P1_PCPORT_XMIT_WAIT_VL1_ADDR /* 0x1100124 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL1    /* 0x07c5a0 */,     8, 1,  1 }, /* Index 671 */
{    IBU_P1_PCPORT_XMIT_WAIT_VL2_ADDR /* 0x1100125 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL2    /* 0x07c5a8 */,     8, 1,  1 }, /* Index 672 */
{    IBU_P1_PCPORT_XMIT_WAIT_VL3_ADDR /* 0x1100126 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL3    /* 0x07c5b0 */,     8, 1,  1 }, /* Index 673 */
{    IBU_P1_PCPORT_XMIT_WAIT_VL4_ADDR /* 0x1100127 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL4    /* 0x07c5b8 */,     8, 1,  1 }, /* Index 674 */
{    IBU_P1_PCPORT_XMIT_WAIT_VL5_ADDR /* 0x1100128 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL5    /* 0x07c5c0 */,     8, 1,  1 }, /* Index 675 */
{    IBU_P1_PCPORT_XMIT_WAIT_VL6_ADDR /* 0x1100129 */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL6    /* 0x07c5c8 */,     8, 1,  1 }, /* Index 676 */
{    IBU_P1_PCPORT_XMIT_WAIT_VL7_ADDR /* 0x110012a */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL7    /* 0x07c5d0 */,     8, 1,  1 }, /* Index 677 */
{   IBU_P1_PCPORT_XMIT_WAIT_VL15_ADDR /* 0x110012b */, PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL15   /* 0x07c5d8 */,     8, 1,  1 }, /* Index 678 */
{       IBU_P1_PCRX_LINK_CNT_RST_ADDR /* 0x110012c */, PSIF_CSR_ADDR_IBU_P1_PCRX_LINK_CNT_RST       /* 0x07c5e0 */,     8, 1,  1 }, /* Index 679 */
{      IBU_P1_PCRX_LINK_CNT_LOAD_ADDR /* 0x110012d */, PSIF_CSR_ADDR_IBU_P1_PCRX_LINK_CNT_LOAD      /* 0x07c5e8 */,     8, 1,  1 }, /* Index 680 */
{        IBU_P1_LOCAL_PHY_ERRORS_ADDR /* 0x110012e */, PSIF_CSR_ADDR_IBU_P1_LOCAL_PHY_ERRORS        /* 0x07c5f0 */,     8, 1,  1 }, /* Index 681 */
{          IBU_P1_OVERRUN_ERRORS_ADDR /* 0x110012f */, PSIF_CSR_ADDR_IBU_P1_OVERRUN_ERRORS          /* 0x07c5f8 */,     8, 1,  1 }, /* Index 682 */
{             IBU_P1_PSLINK_DLID_ADDR /* 0x1100130 */, PSIF_CSR_ADDR_IBU_P1_PSLINK_DLID             /* 0x07c600 */,     8, 1,  1 }, /* Index 683 */
{                  IBU_P1_PSTICK_ADDR /* 0x1100131 */, PSIF_CSR_ADDR_IBU_P1_PSTICK                  /* 0x07c608 */,     8, 1,  1 }, /* Index 684 */
{                IBU_P1_PSSTATUS_ADDR /* 0x1100132 */, PSIF_CSR_ADDR_IBU_P1_PSSTATUS                /* 0x07c610 */,     8, 1,  1 }, /* Index 685 */
{           IBU_P1_PSSTART_DELAY_ADDR /* 0x1100133 */, PSIF_CSR_ADDR_IBU_P1_PSSTART_DELAY           /* 0x07c618 */,     8, 1,  1 }, /* Index 686 */
{              IBU_P1_PSINTERVAL_ADDR /* 0x1100134 */, PSIF_CSR_ADDR_IBU_P1_PSINTERVAL              /* 0x07c620 */,     8, 1,  1 }, /* Index 687 */
{              IBU_P1_PSCNT_SEL0_ADDR /* 0x1100135 */, PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL0              /* 0x07c628 */,     8, 1,  1 }, /* Index 688 */
{              IBU_P1_PSCNT_SEL1_ADDR /* 0x1100136 */, PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL1              /* 0x07c630 */,     8, 1,  1 }, /* Index 689 */
{              IBU_P1_PSCNT_SEL2_ADDR /* 0x1100137 */, PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL2              /* 0x07c638 */,     8, 1,  1 }, /* Index 690 */
{              IBU_P1_PSCNT_SEL3_ADDR /* 0x1100138 */, PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL3              /* 0x07c640 */,     8, 1,  1 }, /* Index 691 */
{                  IBU_P1_PSCNT0_ADDR /* 0x1100139 */, PSIF_CSR_ADDR_IBU_P1_PSCNT0                  /* 0x07c648 */,     8, 1,  1 }, /* Index 692 */
{                  IBU_P1_PSCNT1_ADDR /* 0x110013a */, PSIF_CSR_ADDR_IBU_P1_PSCNT1                  /* 0x07c650 */,     8, 1,  1 }, /* Index 693 */
{                  IBU_P1_PSCNT2_ADDR /* 0x110013b */, PSIF_CSR_ADDR_IBU_P1_PSCNT2                  /* 0x07c658 */,     8, 1,  1 }, /* Index 694 */
{                  IBU_P1_PSCNT3_ADDR /* 0x110013c */, PSIF_CSR_ADDR_IBU_P1_PSCNT3                  /* 0x07c660 */,     8, 1,  1 }, /* Index 695 */
{         IBU_P1_PSINIT_SAMPLING_ADDR /* 0x110013d */, PSIF_CSR_ADDR_IBU_P1_PSINIT_SAMPLING         /* 0x07c668 */,     8, 1,  1 }, /* Index 696 */
{              IBU_P1_PSCNT_LOAD_ADDR /* 0x110013e */, PSIF_CSR_ADDR_IBU_P1_PSCNT_LOAD              /* 0x07c670 */,     8, 1,  1 }, /* Index 697 */
{       IBU_P1_PORT_STATE_CHANGE_ADDR /* 0x110013f */, PSIF_CSR_ADDR_IBU_P1_PORT_STATE_CHANGE       /* 0x07c678 */,     8, 1,  1 }, /* Index 698 */
{           IBU_P1_TRAP_REGISTER_ADDR /* 0x1100140 */, PSIF_CSR_ADDR_IBU_P1_TRAP_REGISTER           /* 0x07c680 */,     8, 1,  1 }, /* Index 699 */
{           IBU_P1_LINK_VCONFIG0_ADDR /* 0x1100141 */, PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG0           /* 0x07c688 */,     8, 1,  1 }, /* Index 700 */
{           IBU_P1_LINK_VCONFIG1_ADDR /* 0x1100142 */, PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG1           /* 0x07c690 */,     8, 1,  1 }, /* Index 701 */
{           IBU_P1_LINK_VCONFIG2_ADDR /* 0x1100143 */, PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG2           /* 0x07c698 */,     8, 1,  1 }, /* Index 702 */
{    IBU_P1_LINK_RX_CREDIT_VL1_0_ADDR /* 0x1100144 */, PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL1_0    /* 0x07c6a0 */,     8, 1,  1 }, /* Index 703 */
{    IBU_P1_LINK_RX_CREDIT_VL3_2_ADDR /* 0x1100145 */, PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL3_2    /* 0x07c6a8 */,     8, 1,  1 }, /* Index 704 */
{    IBU_P1_LINK_RX_CREDIT_VL5_4_ADDR /* 0x1100146 */, PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL5_4    /* 0x07c6b0 */,     8, 1,  1 }, /* Index 705 */
{    IBU_P1_LINK_RX_CREDIT_VL7_6_ADDR /* 0x1100147 */, PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL7_6    /* 0x07c6b8 */,     8, 1,  1 }, /* Index 706 */
{    IBU_P1_LINK_TX_CREDIT_VL1_0_ADDR /* 0x1100148 */, PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL1_0    /* 0x07c6c0 */,     8, 1,  1 }, /* Index 707 */
{    IBU_P1_LINK_TX_CREDIT_VL3_2_ADDR /* 0x1100149 */, PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL3_2    /* 0x07c6c8 */,     8, 1,  1 }, /* Index 708 */
{    IBU_P1_LINK_TX_CREDIT_VL5_4_ADDR /* 0x110014a */, PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL5_4    /* 0x07c6d0 */,     8, 1,  1 }, /* Index 709 */
{    IBU_P1_LINK_TX_CREDIT_VL7_6_ADDR /* 0x110014b */, PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL7_6    /* 0x07c6d8 */,     8, 1,  1 }, /* Index 710 */
{       IBU_P1_PCTX_LINK_CNT_RST_ADDR /* 0x110014c */, PSIF_CSR_ADDR_IBU_P1_PCTX_LINK_CNT_RST       /* 0x07c6e0 */,     8, 1,  1 }, /* Index 711 */
{      IBU_P1_PCTX_LINK_CNT_LOAD_ADDR /* 0x110014d */, PSIF_CSR_ADDR_IBU_P1_PCTX_LINK_CNT_LOAD      /* 0x07c6e8 */,     8, 1,  1 }, /* Index 712 */
{             IBU_P1_PSCNT_WIDTH_ADDR /* 0x110014f */, PSIF_CSR_ADDR_IBU_P1_PSCNT_WIDTH             /* 0x07c6f0 */,     8, 1,  1 }, /* Index 713 */
{              IBU_P1_PSCNT_MASK_ADDR /* 0x1100150 */, PSIF_CSR_ADDR_IBU_P1_PSCNT_MASK              /* 0x07c6f8 */,     8, 1,  1 }, /* Index 714 */
{       IBU_P1_PCICRC_RCV_ERRORS_ADDR /* 0x1100151 */, PSIF_CSR_ADDR_IBU_P1_PCICRC_RCV_ERRORS       /* 0x07c700 */,     8, 1,  1 }, /* Index 715 */
{       IBU_P1_PCVCRC_RCV_ERRORS_ADDR /* 0x1100152 */, PSIF_CSR_ADDR_IBU_P1_PCVCRC_RCV_ERRORS       /* 0x07c708 */,     8, 1,  1 }, /* Index 716 */
{        IBU_P1_PCLEN_RCV_ERRORS_ADDR /* 0x1100153 */, PSIF_CSR_ADDR_IBU_P1_PCLEN_RCV_ERRORS        /* 0x07c710 */,     8, 1,  1 }, /* Index 717 */
{       IBU_P1_PCDLID_RCV_ERRORS_ADDR /* 0x1100154 */, PSIF_CSR_ADDR_IBU_P1_PCDLID_RCV_ERRORS       /* 0x07c718 */,     8, 1,  1 }, /* Index 718 */
{      IBU_P1_PCRCV_FCLEN_ERRORS_ADDR /* 0x1100155 */, PSIF_CSR_ADDR_IBU_P1_PCRCV_FCLEN_ERRORS      /* 0x07c720 */,     8, 1,  1 }, /* Index 719 */
{       IBU_P1_PCRCV_FCVL_ERRORS_ADDR /* 0x1100156 */, PSIF_CSR_ADDR_IBU_P1_PCRCV_FCVL_ERRORS       /* 0x07c728 */,     8, 1,  1 }, /* Index 720 */
{      IBU_P1_PCRCV_FCCRC_ERRORS_ADDR /* 0x1100157 */, PSIF_CSR_ADDR_IBU_P1_PCRCV_FCCRC_ERRORS      /* 0x07c730 */,     8, 1,  1 }, /* Index 721 */
{ IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS_ADDR /* 0x1100158 */, PSIF_CSR_ADDR_IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS /* 0x07c738 */,     8, 1,  1 }, /* Index 722 */
{     IBU_P1_PCMAL_FORMED_ERRORS_ADDR /* 0x1100159 */, PSIF_CSR_ADDR_IBU_P1_PCMAL_FORMED_ERRORS     /* 0x07c740 */,     8, 1,  1 }, /* Index 723 */
{       IBU_P1_PCBUF_OVER_ERRORS_ADDR /* 0x110015a */, PSIF_CSR_ADDR_IBU_P1_PCBUF_OVER_ERRORS       /* 0x07c748 */,     8, 1,  1 }, /* Index 724 */
{          IBU_P1_PCVLMAP_ERRORS_ADDR /* 0x110015b */, PSIF_CSR_ADDR_IBU_P1_PCVLMAP_ERRORS          /* 0x07c750 */,     8, 1,  1 }, /* Index 725 */
{ IBU_P1_PCVLINIT_CREDIT_VL1_VL0_ADDR /* 0x110015c */, PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL1_VL0 /* 0x07c758 */,     8, 1,  1 }, /* Index 726 */
{ IBU_P1_PCVLINIT_CREDIT_VL3_VL2_ADDR /* 0x110015d */, PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL3_VL2 /* 0x07c760 */,     8, 1,  1 }, /* Index 727 */
{ IBU_P1_PCVLINIT_CREDIT_VL5_VL4_ADDR /* 0x110015e */, PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL5_VL4 /* 0x07c768 */,     8, 1,  1 }, /* Index 728 */
{ IBU_P1_PCVLINIT_CREDIT_VL7_VL6_ADDR /* 0x110015f */, PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL7_VL6 /* 0x07c770 */,     8, 1,  1 }, /* Index 729 */
{ IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT_ADDR /* 0x1100160 */, PSIF_CSR_ADDR_IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT /* 0x07c778 */,     8, 1,  1 }, /* Index 730 */
{ IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT_ADDR /* 0x1100161 */, PSIF_CSR_ADDR_IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT /* 0x07c780 */,     8, 1,  1 }, /* Index 731 */
{ IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT_ADDR /* 0x1100162 */, PSIF_CSR_ADDR_IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT /* 0x07c788 */,     8, 1,  1 }, /* Index 732 */
{ IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT_ADDR /* 0x1100163 */, PSIF_CSR_ADDR_IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT /* 0x07c790 */,     8, 1,  1 }, /* Index 733 */
{ IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT_ADDR /* 0x1100164 */, PSIF_CSR_ADDR_IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT /* 0x07c798 */,     8, 1,  1 }, /* Index 734 */
{ IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT_ADDR /* 0x1100165 */, PSIF_CSR_ADDR_IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT /* 0x07c7a0 */,     8, 1,  1 }, /* Index 735 */
{            IBU_P1_PCECCENA_ERR_ADDR /* 0x1100166 */, PSIF_CSR_ADDR_IBU_P1_PCECCENA_ERR            /* 0x07c7a8 */,     8, 1,  1 }, /* Index 736 */
{    IBU_P1_PCTX_ECC_COR_ERR_CNT_ADDR /* 0x1100167 */, PSIF_CSR_ADDR_IBU_P1_PCTX_ECC_COR_ERR_CNT    /* 0x07c7b0 */,     8, 1,  1 }, /* Index 737 */
{    IBU_P1_PCTX_ECC_UNC_ERR_CNT_ADDR /* 0x1100168 */, PSIF_CSR_ADDR_IBU_P1_PCTX_ECC_UNC_ERR_CNT    /* 0x07c7b8 */,     8, 1,  1 }, /* Index 738 */
{           IBU_P1_TX_SRAMSTATUS_ADDR /* 0x1100169 */, PSIF_CSR_ADDR_IBU_P1_TX_SRAMSTATUS           /* 0x07c7c0 */,     8, 1,  1 }, /* Index 739 */
{         IBU_P1_TX_CACHE_STATUS_ADDR /* 0x110016a */, PSIF_CSR_ADDR_IBU_P1_TX_CACHE_STATUS         /* 0x07c7c8 */,     8, 1,  1 }, /* Index 740 */
{                IBU_P1_TX_DEBUG_ADDR /* 0x110016b */, PSIF_CSR_ADDR_IBU_P1_TX_DEBUG                /* 0x07c7d0 */,     8, 1,  1 }, /* Index 741 */
{      IBU_P1_RX_VL07_SRAMSTATUS_ADDR /* 0x110016c */, PSIF_CSR_ADDR_IBU_P1_RX_VL07_SRAMSTATUS      /* 0x07c7d8 */,     8, 1,  1 }, /* Index 742 */
{      IBU_P1_RX_VL15_SRAMSTATUS_ADDR /* 0x110016d */, PSIF_CSR_ADDR_IBU_P1_RX_VL15_SRAMSTATUS      /* 0x07c7e0 */,     8, 1,  1 }, /* Index 743 */
{          IBU_P1_LOOPSRAMSTATUS_ADDR /* 0x110016e */, PSIF_CSR_ADDR_IBU_P1_LOOPSRAMSTATUS          /* 0x07c7e8 */,     8, 1,  1 }, /* Index 744 */
{                IBU_P1_RX_DEBUG_ADDR /* 0x110016f */, PSIF_CSR_ADDR_IBU_P1_RX_DEBUG                /* 0x07c7f0 */,     8, 1,  1 }, /* Index 745 */
{ IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS_ADDR /* 0x1100170 */, PSIF_CSR_ADDR_IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS /* 0x07c7f8 */,     8, 1,  1 }, /* Index 746 */
{      IBU_P1_VLARB_HI_PRI_TABLE_ADDR /* 0x1100180 */, PSIF_CSR_ADDR_IBU_P1_VLARB_HI_PRI_TABLE      /* 0x07c800 */,    80, 1,  1 }, /* Index 747 */
{      IBU_P1_VLARB_LO_PRI_TABLE_ADDR /* 0x11001c0 */, PSIF_CSR_ADDR_IBU_P1_VLARB_LO_PRI_TABLE      /* 0x07c850 */,    80, 1,  1 }, /* Index 748 */
{              IBU_P1_TX_TBSVL10_ADDR /* 0x11001d0 */, PSIF_CSR_ADDR_IBU_P1_TX_TBSVL10              /* 0x07c8a0 */,     8, 1,  1 }, /* Index 749 */
{              IBU_P1_TX_TBSVL32_ADDR /* 0x11001d1 */, PSIF_CSR_ADDR_IBU_P1_TX_TBSVL32              /* 0x07c8a8 */,     8, 1,  1 }, /* Index 750 */
{              IBU_P1_TX_TBSVL54_ADDR /* 0x11001d2 */, PSIF_CSR_ADDR_IBU_P1_TX_TBSVL54              /* 0x07c8b0 */,     8, 1,  1 }, /* Index 751 */
{              IBU_P1_TX_TBSVL76_ADDR /* 0x11001d3 */, PSIF_CSR_ADDR_IBU_P1_TX_TBSVL76              /* 0x07c8b8 */,     8, 1,  1 }, /* Index 752 */
{          IBU_P1_TX_TBSARB_VL10_ADDR /* 0x11001d4 */, PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL10          /* 0x07c8c0 */,     8, 1,  1 }, /* Index 753 */
{          IBU_P1_TX_TBSARB_VL32_ADDR /* 0x11001d5 */, PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL32          /* 0x07c8c8 */,     8, 1,  1 }, /* Index 754 */
{          IBU_P1_TX_TBSARB_VL54_ADDR /* 0x11001d6 */, PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL54          /* 0x07c8d0 */,     8, 1,  1 }, /* Index 755 */
{          IBU_P1_TX_TBSARB_VL76_ADDR /* 0x11001d7 */, PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL76          /* 0x07c8d8 */,     8, 1,  1 }, /* Index 756 */
{ IBU_P1_RX_TRACE_CAPTURE_ENABLE_ADDR /* 0x11001d8 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_ENABLE /* 0x07c8e0 */,     8, 1,  1 }, /* Index 757 */
{   IBU_P1_RX_TRACE_CAPTURE_MODE_ADDR /* 0x11001d9 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_MODE   /* 0x07c8e8 */,     8, 1,  1 }, /* Index 758 */
{    IBU_P1_RX_TRACE_CAPTURE_RDY_ADDR /* 0x11001da */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_RDY    /* 0x07c8f0 */,     8, 1,  1 }, /* Index 759 */
{  IBU_P1_RX_TRACE_CAPTURE_TIMER_ADDR /* 0x11001db */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_TIMER  /* 0x07c8f8 */,     8, 1,  1 }, /* Index 760 */
{  IBU_P1_RX_TRACE_CAPTURE_START_ADDR /* 0x11001dc */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_START  /* 0x07c900 */,     8, 1,  1 }, /* Index 761 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA1_ADDR /* 0x11001e0 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA1  /* 0x07c908 */,     8, 1,  1 }, /* Index 762 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA2_ADDR /* 0x11001e1 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA2  /* 0x07c910 */,     8, 1,  1 }, /* Index 763 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA3_ADDR /* 0x11001e2 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA3  /* 0x07c918 */,     8, 1,  1 }, /* Index 764 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA4_ADDR /* 0x11001e3 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA4  /* 0x07c920 */,     8, 1,  1 }, /* Index 765 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA5_ADDR /* 0x11001e4 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA5  /* 0x07c928 */,     8, 1,  1 }, /* Index 766 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA6_ADDR /* 0x11001e5 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA6  /* 0x07c930 */,     8, 1,  1 }, /* Index 767 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA7_ADDR /* 0x11001e6 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA7  /* 0x07c938 */,     8, 1,  1 }, /* Index 768 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA8_ADDR /* 0x11001e7 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA8  /* 0x07c940 */,     8, 1,  1 }, /* Index 769 */
{  IBU_P1_RX_TRACE_CAPTURE_DATA9_ADDR /* 0x11001e8 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA9  /* 0x07c948 */,     8, 1,  1 }, /* Index 770 */
{ IBU_P1_RX_TRACE_CAPTURE_DATA10_ADDR /* 0x11001e9 */, PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA10 /* 0x07c950 */,     8, 1,  1 }, /* Index 771 */
{      IBU_P1_LINK_RX_FCCL_VL1_0_ADDR /* 0x11001ea */, PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL1_0      /* 0x07c958 */,     8, 1,  1 }, /* Index 772 */
{      IBU_P1_LINK_RX_FCCL_VL3_2_ADDR /* 0x11001eb */, PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL3_2      /* 0x07c960 */,     8, 1,  1 }, /* Index 773 */
{      IBU_P1_LINK_RX_FCCL_VL5_4_ADDR /* 0x11001ec */, PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL5_4      /* 0x07c968 */,     8, 1,  1 }, /* Index 774 */
{      IBU_P1_LINK_RX_FCCL_VL7_6_ADDR /* 0x11001ed */, PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL7_6      /* 0x07c970 */,     8, 1,  1 }, /* Index 775 */
{       IBU_P1_ADD_DEFAULT_LANE0_ADDR /* 0x1100210 */, PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE0       /* 0x07c978 */,     8, 1,  1 }, /* Index 776 */
{       IBU_P1_ADD_DEFAULT_LANE1_ADDR /* 0x1100211 */, PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE1       /* 0x07c980 */,     8, 1,  1 }, /* Index 777 */
{       IBU_P1_ADD_DEFAULT_LANE2_ADDR /* 0x1100212 */, PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE2       /* 0x07c988 */,     8, 1,  1 }, /* Index 778 */
{       IBU_P1_ADD_DEFAULT_LANE3_ADDR /* 0x1100213 */, PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE3       /* 0x07c990 */,     8, 1,  1 }, /* Index 779 */
{          IBU_P1_PHY_ADD0_LANE0_ADDR /* 0x1100214 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE0          /* 0x07c998 */,     8, 1,  1 }, /* Index 780 */
{          IBU_P1_PHY_ADD0_LANE1_ADDR /* 0x1100215 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE1          /* 0x07c9a0 */,     8, 1,  1 }, /* Index 781 */
{          IBU_P1_PHY_ADD0_LANE2_ADDR /* 0x1100216 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE2          /* 0x07c9a8 */,     8, 1,  1 }, /* Index 782 */
{          IBU_P1_PHY_ADD0_LANE3_ADDR /* 0x1100217 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE3          /* 0x07c9b0 */,     8, 1,  1 }, /* Index 783 */
{          IBU_P1_PHY_ADD1_LANE0_ADDR /* 0x1100218 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE0          /* 0x07c9b8 */,     8, 1,  1 }, /* Index 784 */
{          IBU_P1_PHY_ADD1_LANE1_ADDR /* 0x1100219 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE1          /* 0x07c9c0 */,     8, 1,  1 }, /* Index 785 */
{          IBU_P1_PHY_ADD1_LANE2_ADDR /* 0x110021a */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE2          /* 0x07c9c8 */,     8, 1,  1 }, /* Index 786 */
{          IBU_P1_PHY_ADD1_LANE3_ADDR /* 0x110021b */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE3          /* 0x07c9d0 */,     8, 1,  1 }, /* Index 787 */
{          IBU_P1_PHY_ADD2_LANE0_ADDR /* 0x110021c */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE0          /* 0x07c9d8 */,     8, 1,  1 }, /* Index 788 */
{          IBU_P1_PHY_ADD2_LANE1_ADDR /* 0x110021d */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE1          /* 0x07c9e0 */,     8, 1,  1 }, /* Index 789 */
{          IBU_P1_PHY_ADD2_LANE2_ADDR /* 0x110021e */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE2          /* 0x07c9e8 */,     8, 1,  1 }, /* Index 790 */
{          IBU_P1_PHY_ADD2_LANE3_ADDR /* 0x110021f */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE3          /* 0x07c9f0 */,     8, 1,  1 }, /* Index 791 */
{          IBU_P1_PHY_ADD3_LANE0_ADDR /* 0x1100220 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE0          /* 0x07c9f8 */,     8, 1,  1 }, /* Index 792 */
{          IBU_P1_PHY_ADD3_LANE1_ADDR /* 0x1100221 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE1          /* 0x07ca00 */,     8, 1,  1 }, /* Index 793 */
{          IBU_P1_PHY_ADD3_LANE2_ADDR /* 0x1100222 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE2          /* 0x07ca08 */,     8, 1,  1 }, /* Index 794 */
{          IBU_P1_PHY_ADD3_LANE3_ADDR /* 0x1100223 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE3          /* 0x07ca10 */,     8, 1,  1 }, /* Index 795 */
{          IBU_P1_PHY_ADD4_LANE0_ADDR /* 0x1100224 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE0          /* 0x07ca18 */,     8, 1,  1 }, /* Index 796 */
{          IBU_P1_PHY_ADD4_LANE1_ADDR /* 0x1100225 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE1          /* 0x07ca20 */,     8, 1,  1 }, /* Index 797 */
{          IBU_P1_PHY_ADD4_LANE2_ADDR /* 0x1100226 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE2          /* 0x07ca28 */,     8, 1,  1 }, /* Index 798 */
{          IBU_P1_PHY_ADD4_LANE3_ADDR /* 0x1100227 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE3          /* 0x07ca30 */,     8, 1,  1 }, /* Index 799 */
{          IBU_P1_PHY_ADD5_LANE0_ADDR /* 0x1100228 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE0          /* 0x07ca38 */,     8, 1,  1 }, /* Index 800 */
{          IBU_P1_PHY_ADD5_LANE1_ADDR /* 0x1100229 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE1          /* 0x07ca40 */,     8, 1,  1 }, /* Index 801 */
{          IBU_P1_PHY_ADD5_LANE2_ADDR /* 0x110022a */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE2          /* 0x07ca48 */,     8, 1,  1 }, /* Index 802 */
{          IBU_P1_PHY_ADD5_LANE3_ADDR /* 0x110022b */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE3          /* 0x07ca50 */,     8, 1,  1 }, /* Index 803 */
{          IBU_P1_PHY_ADD6_LANE0_ADDR /* 0x110022c */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE0          /* 0x07ca58 */,     8, 1,  1 }, /* Index 804 */
{          IBU_P1_PHY_ADD6_LANE1_ADDR /* 0x110022d */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE1          /* 0x07ca60 */,     8, 1,  1 }, /* Index 805 */
{          IBU_P1_PHY_ADD6_LANE2_ADDR /* 0x110022e */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE2          /* 0x07ca68 */,     8, 1,  1 }, /* Index 806 */
{          IBU_P1_PHY_ADD6_LANE3_ADDR /* 0x110022f */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE3          /* 0x07ca70 */,     8, 1,  1 }, /* Index 807 */
{          IBU_P1_PHY_ADD7_LANE0_ADDR /* 0x1100230 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE0          /* 0x07ca78 */,     8, 1,  1 }, /* Index 808 */
{          IBU_P1_PHY_ADD7_LANE1_ADDR /* 0x1100231 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE1          /* 0x07ca80 */,     8, 1,  1 }, /* Index 809 */
{          IBU_P1_PHY_ADD7_LANE2_ADDR /* 0x1100232 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE2          /* 0x07ca88 */,     8, 1,  1 }, /* Index 810 */
{          IBU_P1_PHY_ADD7_LANE3_ADDR /* 0x1100233 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE3          /* 0x07ca90 */,     8, 1,  1 }, /* Index 811 */
{          IBU_P1_PHY_ADD8_LANE0_ADDR /* 0x1100234 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE0          /* 0x07ca98 */,     8, 1,  1 }, /* Index 812 */
{          IBU_P1_PHY_ADD8_LANE1_ADDR /* 0x1100235 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE1          /* 0x07caa0 */,     8, 1,  1 }, /* Index 813 */
{          IBU_P1_PHY_ADD8_LANE2_ADDR /* 0x1100236 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE2          /* 0x07caa8 */,     8, 1,  1 }, /* Index 814 */
{          IBU_P1_PHY_ADD8_LANE3_ADDR /* 0x1100237 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE3          /* 0x07cab0 */,     8, 1,  1 }, /* Index 815 */
{          IBU_P1_PHY_ADD9_LANE0_ADDR /* 0x1100238 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE0          /* 0x07cab8 */,     8, 1,  1 }, /* Index 816 */
{          IBU_P1_PHY_ADD9_LANE1_ADDR /* 0x1100239 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE1          /* 0x07cac0 */,     8, 1,  1 }, /* Index 817 */
{          IBU_P1_PHY_ADD9_LANE2_ADDR /* 0x110023a */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE2          /* 0x07cac8 */,     8, 1,  1 }, /* Index 818 */
{          IBU_P1_PHY_ADD9_LANE3_ADDR /* 0x110023b */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE3          /* 0x07cad0 */,     8, 1,  1 }, /* Index 819 */
{         IBU_P1_PHY_ADD10_LANE0_ADDR /* 0x110023c */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE0         /* 0x07cad8 */,     8, 1,  1 }, /* Index 820 */
{         IBU_P1_PHY_ADD10_LANE1_ADDR /* 0x110023d */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE1         /* 0x07cae0 */,     8, 1,  1 }, /* Index 821 */
{         IBU_P1_PHY_ADD10_LANE2_ADDR /* 0x110023e */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE2         /* 0x07cae8 */,     8, 1,  1 }, /* Index 822 */
{         IBU_P1_PHY_ADD10_LANE3_ADDR /* 0x110023f */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE3         /* 0x07caf0 */,     8, 1,  1 }, /* Index 823 */
{         IBU_P1_PHY_ADD11_LANE0_ADDR /* 0x1100240 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE0         /* 0x07caf8 */,     8, 1,  1 }, /* Index 824 */
{         IBU_P1_PHY_ADD11_LANE1_ADDR /* 0x1100241 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE1         /* 0x07cb00 */,     8, 1,  1 }, /* Index 825 */
{         IBU_P1_PHY_ADD11_LANE2_ADDR /* 0x1100242 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE2         /* 0x07cb08 */,     8, 1,  1 }, /* Index 826 */
{         IBU_P1_PHY_ADD11_LANE3_ADDR /* 0x1100243 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE3         /* 0x07cb10 */,     8, 1,  1 }, /* Index 827 */
{         IBU_P1_PHY_ADD12_LANE0_ADDR /* 0x1100244 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE0         /* 0x07cb18 */,     8, 1,  1 }, /* Index 828 */
{         IBU_P1_PHY_ADD12_LANE1_ADDR /* 0x1100245 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE1         /* 0x07cb20 */,     8, 1,  1 }, /* Index 829 */
{         IBU_P1_PHY_ADD12_LANE2_ADDR /* 0x1100246 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE2         /* 0x07cb28 */,     8, 1,  1 }, /* Index 830 */
{         IBU_P1_PHY_ADD12_LANE3_ADDR /* 0x1100247 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE3         /* 0x07cb30 */,     8, 1,  1 }, /* Index 831 */
{         IBU_P1_PHY_ADD13_LANE0_ADDR /* 0x1100248 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE0         /* 0x07cb38 */,     8, 1,  1 }, /* Index 832 */
{         IBU_P1_PHY_ADD13_LANE1_ADDR /* 0x1100249 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE1         /* 0x07cb40 */,     8, 1,  1 }, /* Index 833 */
{         IBU_P1_PHY_ADD13_LANE2_ADDR /* 0x110024a */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE2         /* 0x07cb48 */,     8, 1,  1 }, /* Index 834 */
{         IBU_P1_PHY_ADD13_LANE3_ADDR /* 0x110024b */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE3         /* 0x07cb50 */,     8, 1,  1 }, /* Index 835 */
{         IBU_P1_PHY_ADD14_LANE0_ADDR /* 0x110024c */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE0         /* 0x07cb58 */,     8, 1,  1 }, /* Index 836 */
{         IBU_P1_PHY_ADD14_LANE1_ADDR /* 0x110024d */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE1         /* 0x07cb60 */,     8, 1,  1 }, /* Index 837 */
{         IBU_P1_PHY_ADD14_LANE2_ADDR /* 0x110024e */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE2         /* 0x07cb68 */,     8, 1,  1 }, /* Index 838 */
{         IBU_P1_PHY_ADD14_LANE3_ADDR /* 0x110024f */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE3         /* 0x07cb70 */,     8, 1,  1 }, /* Index 839 */
{         IBU_P1_PHY_ADD15_LANE0_ADDR /* 0x1100250 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE0         /* 0x07cb78 */,     8, 1,  1 }, /* Index 840 */
{         IBU_P1_PHY_ADD15_LANE1_ADDR /* 0x1100251 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE1         /* 0x07cb80 */,     8, 1,  1 }, /* Index 841 */
{         IBU_P1_PHY_ADD15_LANE2_ADDR /* 0x1100252 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE2         /* 0x07cb88 */,     8, 1,  1 }, /* Index 842 */
{         IBU_P1_PHY_ADD15_LANE3_ADDR /* 0x1100253 */, PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE3         /* 0x07cb90 */,     8, 1,  1 }, /* Index 843 */
{     IBU_P1_PHY_AMP1_ADD0_LANE0_ADDR /* 0x1100254 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE0     /* 0x07cb98 */,     8, 1,  1 }, /* Index 844 */
{     IBU_P1_PHY_AMP1_ADD0_LANE1_ADDR /* 0x1100255 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE1     /* 0x07cba0 */,     8, 1,  1 }, /* Index 845 */
{     IBU_P1_PHY_AMP1_ADD0_LANE2_ADDR /* 0x1100256 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE2     /* 0x07cba8 */,     8, 1,  1 }, /* Index 846 */
{     IBU_P1_PHY_AMP1_ADD0_LANE3_ADDR /* 0x1100257 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE3     /* 0x07cbb0 */,     8, 1,  1 }, /* Index 847 */
{     IBU_P1_PHY_AMP1_ADD1_LANE0_ADDR /* 0x1100258 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE0     /* 0x07cbb8 */,     8, 1,  1 }, /* Index 848 */
{     IBU_P1_PHY_AMP1_ADD1_LANE1_ADDR /* 0x1100259 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE1     /* 0x07cbc0 */,     8, 1,  1 }, /* Index 849 */
{     IBU_P1_PHY_AMP1_ADD1_LANE2_ADDR /* 0x110025a */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE2     /* 0x07cbc8 */,     8, 1,  1 }, /* Index 850 */
{     IBU_P1_PHY_AMP1_ADD1_LANE3_ADDR /* 0x110025b */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE3     /* 0x07cbd0 */,     8, 1,  1 }, /* Index 851 */
{     IBU_P1_PHY_AMP1_ADD2_LANE0_ADDR /* 0x110025c */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE0     /* 0x07cbd8 */,     8, 1,  1 }, /* Index 852 */
{     IBU_P1_PHY_AMP1_ADD2_LANE1_ADDR /* 0x110025d */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE1     /* 0x07cbe0 */,     8, 1,  1 }, /* Index 853 */
{     IBU_P1_PHY_AMP1_ADD2_LANE2_ADDR /* 0x110025e */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE2     /* 0x07cbe8 */,     8, 1,  1 }, /* Index 854 */
{     IBU_P1_PHY_AMP1_ADD2_LANE3_ADDR /* 0x110025f */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE3     /* 0x07cbf0 */,     8, 1,  1 }, /* Index 855 */
{     IBU_P1_PHY_AMP1_ADD3_LANE0_ADDR /* 0x1100260 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE0     /* 0x07cbf8 */,     8, 1,  1 }, /* Index 856 */
{     IBU_P1_PHY_AMP1_ADD3_LANE1_ADDR /* 0x1100261 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE1     /* 0x07cc00 */,     8, 1,  1 }, /* Index 857 */
{     IBU_P1_PHY_AMP1_ADD3_LANE2_ADDR /* 0x1100262 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE2     /* 0x07cc08 */,     8, 1,  1 }, /* Index 858 */
{     IBU_P1_PHY_AMP1_ADD3_LANE3_ADDR /* 0x1100263 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE3     /* 0x07cc10 */,     8, 1,  1 }, /* Index 859 */
{     IBU_P1_PHY_AMP1_ADD4_LANE0_ADDR /* 0x1100264 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE0     /* 0x07cc18 */,     8, 1,  1 }, /* Index 860 */
{     IBU_P1_PHY_AMP1_ADD4_LANE1_ADDR /* 0x1100265 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE1     /* 0x07cc20 */,     8, 1,  1 }, /* Index 861 */
{     IBU_P1_PHY_AMP1_ADD4_LANE2_ADDR /* 0x1100266 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE2     /* 0x07cc28 */,     8, 1,  1 }, /* Index 862 */
{     IBU_P1_PHY_AMP1_ADD4_LANE3_ADDR /* 0x1100267 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE3     /* 0x07cc30 */,     8, 1,  1 }, /* Index 863 */
{     IBU_P1_PHY_AMP1_ADD5_LANE0_ADDR /* 0x1100268 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE0     /* 0x07cc38 */,     8, 1,  1 }, /* Index 864 */
{     IBU_P1_PHY_AMP1_ADD5_LANE1_ADDR /* 0x1100269 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE1     /* 0x07cc40 */,     8, 1,  1 }, /* Index 865 */
{     IBU_P1_PHY_AMP1_ADD5_LANE2_ADDR /* 0x110026a */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE2     /* 0x07cc48 */,     8, 1,  1 }, /* Index 866 */
{     IBU_P1_PHY_AMP1_ADD5_LANE3_ADDR /* 0x110026b */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE3     /* 0x07cc50 */,     8, 1,  1 }, /* Index 867 */
{     IBU_P1_PHY_AMP1_ADD6_LANE0_ADDR /* 0x110026c */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE0     /* 0x07cc58 */,     8, 1,  1 }, /* Index 868 */
{     IBU_P1_PHY_AMP1_ADD6_LANE1_ADDR /* 0x110026d */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE1     /* 0x07cc60 */,     8, 1,  1 }, /* Index 869 */
{     IBU_P1_PHY_AMP1_ADD6_LANE2_ADDR /* 0x110026e */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE2     /* 0x07cc68 */,     8, 1,  1 }, /* Index 870 */
{     IBU_P1_PHY_AMP1_ADD6_LANE3_ADDR /* 0x110026f */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE3     /* 0x07cc70 */,     8, 1,  1 }, /* Index 871 */
{     IBU_P1_PHY_AMP1_ADD7_LANE0_ADDR /* 0x1100270 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE0     /* 0x07cc78 */,     8, 1,  1 }, /* Index 872 */
{     IBU_P1_PHY_AMP1_ADD7_LANE1_ADDR /* 0x1100271 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE1     /* 0x07cc80 */,     8, 1,  1 }, /* Index 873 */
{     IBU_P1_PHY_AMP1_ADD7_LANE2_ADDR /* 0x1100272 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE2     /* 0x07cc88 */,     8, 1,  1 }, /* Index 874 */
{     IBU_P1_PHY_AMP1_ADD7_LANE3_ADDR /* 0x1100273 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE3     /* 0x07cc90 */,     8, 1,  1 }, /* Index 875 */
{     IBU_P1_PHY_AMP1_ADD8_LANE0_ADDR /* 0x1100274 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE0     /* 0x07cc98 */,     8, 1,  1 }, /* Index 876 */
{     IBU_P1_PHY_AMP1_ADD8_LANE1_ADDR /* 0x1100275 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE1     /* 0x07cca0 */,     8, 1,  1 }, /* Index 877 */
{     IBU_P1_PHY_AMP1_ADD8_LANE2_ADDR /* 0x1100276 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE2     /* 0x07cca8 */,     8, 1,  1 }, /* Index 878 */
{     IBU_P1_PHY_AMP1_ADD8_LANE3_ADDR /* 0x1100277 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE3     /* 0x07ccb0 */,     8, 1,  1 }, /* Index 879 */
{     IBU_P1_PHY_AMP1_ADD9_LANE0_ADDR /* 0x1100278 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE0     /* 0x07ccb8 */,     8, 1,  1 }, /* Index 880 */
{     IBU_P1_PHY_AMP1_ADD9_LANE1_ADDR /* 0x1100279 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE1     /* 0x07ccc0 */,     8, 1,  1 }, /* Index 881 */
{     IBU_P1_PHY_AMP1_ADD9_LANE2_ADDR /* 0x110027a */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE2     /* 0x07ccc8 */,     8, 1,  1 }, /* Index 882 */
{     IBU_P1_PHY_AMP1_ADD9_LANE3_ADDR /* 0x110027b */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE3     /* 0x07ccd0 */,     8, 1,  1 }, /* Index 883 */
{    IBU_P1_PHY_AMP1_ADD10_LANE0_ADDR /* 0x110027c */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE0    /* 0x07ccd8 */,     8, 1,  1 }, /* Index 884 */
{    IBU_P1_PHY_AMP1_ADD10_LANE1_ADDR /* 0x110027d */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE1    /* 0x07cce0 */,     8, 1,  1 }, /* Index 885 */
{    IBU_P1_PHY_AMP1_ADD10_LANE2_ADDR /* 0x110027e */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE2    /* 0x07cce8 */,     8, 1,  1 }, /* Index 886 */
{    IBU_P1_PHY_AMP1_ADD10_LANE3_ADDR /* 0x110027f */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE3    /* 0x07ccf0 */,     8, 1,  1 }, /* Index 887 */
{    IBU_P1_PHY_AMP1_ADD11_LANE0_ADDR /* 0x1100280 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE0    /* 0x07ccf8 */,     8, 1,  1 }, /* Index 888 */
{    IBU_P1_PHY_AMP1_ADD11_LANE1_ADDR /* 0x1100281 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE1    /* 0x07cd00 */,     8, 1,  1 }, /* Index 889 */
{    IBU_P1_PHY_AMP1_ADD11_LANE2_ADDR /* 0x1100282 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE2    /* 0x07cd08 */,     8, 1,  1 }, /* Index 890 */
{    IBU_P1_PHY_AMP1_ADD11_LANE3_ADDR /* 0x1100283 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE3    /* 0x07cd10 */,     8, 1,  1 }, /* Index 891 */
{    IBU_P1_PHY_AMP1_ADD12_LANE0_ADDR /* 0x1100284 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE0    /* 0x07cd18 */,     8, 1,  1 }, /* Index 892 */
{    IBU_P1_PHY_AMP1_ADD12_LANE1_ADDR /* 0x1100285 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE1    /* 0x07cd20 */,     8, 1,  1 }, /* Index 893 */
{    IBU_P1_PHY_AMP1_ADD12_LANE2_ADDR /* 0x1100286 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE2    /* 0x07cd28 */,     8, 1,  1 }, /* Index 894 */
{    IBU_P1_PHY_AMP1_ADD12_LANE3_ADDR /* 0x1100287 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE3    /* 0x07cd30 */,     8, 1,  1 }, /* Index 895 */
{    IBU_P1_PHY_AMP1_ADD13_LANE0_ADDR /* 0x1100288 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE0    /* 0x07cd38 */,     8, 1,  1 }, /* Index 896 */
{    IBU_P1_PHY_AMP1_ADD13_LANE1_ADDR /* 0x1100289 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE1    /* 0x07cd40 */,     8, 1,  1 }, /* Index 897 */
{    IBU_P1_PHY_AMP1_ADD13_LANE2_ADDR /* 0x110028a */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE2    /* 0x07cd48 */,     8, 1,  1 }, /* Index 898 */
{    IBU_P1_PHY_AMP1_ADD13_LANE3_ADDR /* 0x110028b */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE3    /* 0x07cd50 */,     8, 1,  1 }, /* Index 899 */
{    IBU_P1_PHY_AMP1_ADD14_LANE0_ADDR /* 0x110028c */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE0    /* 0x07cd58 */,     8, 1,  1 }, /* Index 900 */
{    IBU_P1_PHY_AMP1_ADD14_LANE1_ADDR /* 0x110028d */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE1    /* 0x07cd60 */,     8, 1,  1 }, /* Index 901 */
{    IBU_P1_PHY_AMP1_ADD14_LANE2_ADDR /* 0x110028e */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE2    /* 0x07cd68 */,     8, 1,  1 }, /* Index 902 */
{    IBU_P1_PHY_AMP1_ADD14_LANE3_ADDR /* 0x110028f */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE3    /* 0x07cd70 */,     8, 1,  1 }, /* Index 903 */
{    IBU_P1_PHY_AMP1_ADD15_LANE0_ADDR /* 0x1100290 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE0    /* 0x07cd78 */,     8, 1,  1 }, /* Index 904 */
{    IBU_P1_PHY_AMP1_ADD15_LANE1_ADDR /* 0x1100291 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE1    /* 0x07cd80 */,     8, 1,  1 }, /* Index 905 */
{    IBU_P1_PHY_AMP1_ADD15_LANE2_ADDR /* 0x1100292 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE2    /* 0x07cd88 */,     8, 1,  1 }, /* Index 906 */
{    IBU_P1_PHY_AMP1_ADD15_LANE3_ADDR /* 0x1100293 */, PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE3    /* 0x07cd90 */,     8, 1,  1 }, /* Index 907 */
{             IBU_P1_REMOTE_DDS0_ADDR /* 0x1100294 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS0             /* 0x07cd98 */,     8, 1,  1 }, /* Index 908 */
{             IBU_P1_REMOTE_DDS1_ADDR /* 0x1100295 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS1             /* 0x07cda0 */,     8, 1,  1 }, /* Index 909 */
{             IBU_P1_REMOTE_DDS2_ADDR /* 0x1100296 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS2             /* 0x07cda8 */,     8, 1,  1 }, /* Index 910 */
{             IBU_P1_REMOTE_DDS3_ADDR /* 0x1100297 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS3             /* 0x07cdb0 */,     8, 1,  1 }, /* Index 911 */
{             IBU_P1_REMOTE_DDS4_ADDR /* 0x1100298 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS4             /* 0x07cdb8 */,     8, 1,  1 }, /* Index 912 */
{             IBU_P1_REMOTE_DDS5_ADDR /* 0x1100299 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS5             /* 0x07cdc0 */,     8, 1,  1 }, /* Index 913 */
{             IBU_P1_REMOTE_DDS6_ADDR /* 0x110029a */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS6             /* 0x07cdc8 */,     8, 1,  1 }, /* Index 914 */
{             IBU_P1_REMOTE_DDS7_ADDR /* 0x110029b */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS7             /* 0x07cdd0 */,     8, 1,  1 }, /* Index 915 */
{             IBU_P1_REMOTE_DDS8_ADDR /* 0x110029c */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS8             /* 0x07cdd8 */,     8, 1,  1 }, /* Index 916 */
{             IBU_P1_REMOTE_DDS9_ADDR /* 0x110029d */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS9             /* 0x07cde0 */,     8, 1,  1 }, /* Index 917 */
{            IBU_P1_REMOTE_DDS10_ADDR /* 0x110029e */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS10            /* 0x07cde8 */,     8, 1,  1 }, /* Index 918 */
{            IBU_P1_REMOTE_DDS11_ADDR /* 0x110029f */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS11            /* 0x07cdf0 */,     8, 1,  1 }, /* Index 919 */
{            IBU_P1_REMOTE_DDS12_ADDR /* 0x11002a0 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS12            /* 0x07cdf8 */,     8, 1,  1 }, /* Index 920 */
{            IBU_P1_REMOTE_DDS13_ADDR /* 0x11002a1 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS13            /* 0x07ce00 */,     8, 1,  1 }, /* Index 921 */
{            IBU_P1_REMOTE_DDS14_ADDR /* 0x11002a2 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS14            /* 0x07ce08 */,     8, 1,  1 }, /* Index 922 */
{            IBU_P1_REMOTE_DDS15_ADDR /* 0x11002a3 */, PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS15            /* 0x07ce10 */,     8, 1,  1 }, /* Index 923 */
{                 IBU_P1_BAD_CSR_ADDR /* 0x1100bad */, PSIF_CSR_ADDR_IBU_P1_BAD_CSR                 /* 0x07ce18 */,     8, 1,  1 }, /* Index 924 */
{     IBU_P1_CETUS_CH0_REG15_CSR_ADDR /* 0x114000f */, PSIF_CSR_ADDR_IBU_P1_CETUS_CH0_REG15_CSR     /* 0x07ce20 */,     8, 1,  1 }, /* Index 925 */
{    IBU_P1_CETUS_CH0_REG102_CSR_ADDR /* 0x1140066 */, PSIF_CSR_ADDR_IBU_P1_CETUS_CH0_REG102_CSR    /* 0x07ce28 */,     8, 1,  1 }, /* Index 926 */
{     IBU_P1_CETUS_CH1_REG15_CSR_ADDR /* 0x114010f */, PSIF_CSR_ADDR_IBU_P1_CETUS_CH1_REG15_CSR     /* 0x07ce30 */,     8, 1,  1 }, /* Index 927 */
{    IBU_P1_CETUS_CH1_REG102_CSR_ADDR /* 0x1140166 */, PSIF_CSR_ADDR_IBU_P1_CETUS_CH1_REG102_CSR    /* 0x07ce38 */,     8, 1,  1 }, /* Index 928 */
{    IBU_P1_CETUS_PLLA_REG24_CSR_ADDR /* 0x1140218 */, PSIF_CSR_ADDR_IBU_P1_CETUS_PLLA_REG24_CSR    /* 0x07ce40 */,     8, 1,  1 }, /* Index 929 */
{     IBU_P1_CETUS_CH2_REG15_CSR_ADDR /* 0x114030f */, PSIF_CSR_ADDR_IBU_P1_CETUS_CH2_REG15_CSR     /* 0x07ce48 */,     8, 1,  1 }, /* Index 930 */
{    IBU_P1_CETUS_CH2_REG102_CSR_ADDR /* 0x1140366 */, PSIF_CSR_ADDR_IBU_P1_CETUS_CH2_REG102_CSR    /* 0x07ce50 */,     8, 1,  1 }, /* Index 931 */
{     IBU_P1_CETUS_CH3_REG15_CSR_ADDR /* 0x114040f */, PSIF_CSR_ADDR_IBU_P1_CETUS_CH3_REG15_CSR     /* 0x07ce58 */,     8, 1,  1 }, /* Index 932 */
{    IBU_P1_CETUS_CH3_REG102_CSR_ADDR /* 0x1140466 */, PSIF_CSR_ADDR_IBU_P1_CETUS_CH3_REG102_CSR    /* 0x07ce60 */,     8, 1,  1 }, /* Index 933 */
{    IBU_P1_CETUS_PLLB_REG24_CSR_ADDR /* 0x1140618 */, PSIF_CSR_ADDR_IBU_P1_CETUS_PLLB_REG24_CSR    /* 0x07ce68 */,     8, 1,  1 }, /* Index 934 */
{           IBU_P1_PMA_RESET_CSR_ADDR /* 0x1160000 */, PSIF_CSR_ADDR_IBU_P1_PMA_RESET_CSR           /* 0x07ce70 */,     8, 1,  1 }, /* Index 935 */
{            IBU_P1_PMA_PLLA_CSR_ADDR /* 0x1160001 */, PSIF_CSR_ADDR_IBU_P1_PMA_PLLA_CSR            /* 0x07ce78 */,     8, 1,  1 }, /* Index 936 */
{            IBU_P1_PMA_PLLB_CSR_ADDR /* 0x1160002 */, PSIF_CSR_ADDR_IBU_P1_PMA_PLLB_CSR            /* 0x07ce80 */,     8, 1,  1 }, /* Index 937 */
{           IBU_P1_PMA_CMODE_CSR_ADDR /* 0x1160003 */, PSIF_CSR_ADDR_IBU_P1_PMA_CMODE_CSR           /* 0x07ce88 */,     8, 1,  1 }, /* Index 938 */
{              IBU_P1_PMA_LB_CSR_ADDR /* 0x1160004 */, PSIF_CSR_ADDR_IBU_P1_PMA_LB_CSR              /* 0x07ce90 */,     8, 1,  1 }, /* Index 939 */
{             IBU_P1_PMA_PWR_CSR_ADDR /* 0x1160005 */, PSIF_CSR_ADDR_IBU_P1_PMA_PWR_CSR             /* 0x07ce98 */,     8, 1,  1 }, /* Index 940 */
{         IBU_P1_PMA_STATUS0_CSR_ADDR /* 0x1160006 */, PSIF_CSR_ADDR_IBU_P1_PMA_STATUS0_CSR         /* 0x07cea0 */,     8, 1,  1 }, /* Index 941 */
{         IBU_P1_PMA_STATUS1_CSR_ADDR /* 0x1160007 */, PSIF_CSR_ADDR_IBU_P1_PMA_STATUS1_CSR         /* 0x07cea8 */,     8, 1,  1 }, /* Index 942 */
{         IBU_P1_PMA_STATUS2_CSR_ADDR /* 0x1160008 */, PSIF_CSR_ADDR_IBU_P1_PMA_STATUS2_CSR         /* 0x07ceb0 */,     8, 1,  1 }, /* Index 943 */
{     IBU_P1_PMA_TXWCLK0_CNT_CSR_ADDR /* 0x1160009 */, PSIF_CSR_ADDR_IBU_P1_PMA_TXWCLK0_CNT_CSR     /* 0x07ceb8 */,     8, 1,  1 }, /* Index 944 */
{     IBU_P1_PMA_TXWCLK0_CNT_VAL_ADDR /* 0x116000a */, PSIF_CSR_ADDR_IBU_P1_PMA_TXWCLK0_CNT_VAL     /* 0x07cec0 */,     8, 1,  1 }, /* Index 945 */
{     IBU_P1_PMA_RXWCLK0_CNT_CSR_ADDR /* 0x116000b */, PSIF_CSR_ADDR_IBU_P1_PMA_RXWCLK0_CNT_CSR     /* 0x07cec8 */,     8, 1,  1 }, /* Index 946 */
{     IBU_P1_PMA_RXWCLK0_CNT_VAL_ADDR /* 0x116000c */, PSIF_CSR_ADDR_IBU_P1_PMA_RXWCLK0_CNT_VAL     /* 0x07ced0 */,     8, 1,  1 }, /* Index 947 */
{      IBU_P1_PMA_IRQ_STATUS_CSR_ADDR /* 0x116000d */, PSIF_CSR_ADDR_IBU_P1_PMA_IRQ_STATUS_CSR      /* 0x07ced8 */,     8, 1,  1 }, /* Index 948 */
{        IBU_P1_PMA_IRQ_MASK_CSR_ADDR /* 0x116000e */, PSIF_CSR_ADDR_IBU_P1_PMA_IRQ_MASK_CSR        /* 0x07cee0 */,     8, 1,  1 }, /* Index 949 */
{             IBU_P1_PMA_BAD_CSR_ADDR /* 0x116fbad */, PSIF_CSR_ADDR_IBU_P1_PMA_BAD_CSR             /* 0x07cee8 */,     8, 1,  1 }, /* Index 950 */
{         IBU_P2_CNT1US_CNT124US_ADDR /* 0x1180001 */, PSIF_CSR_ADDR_IBU_P2_CNT1US_CNT124US         /* 0x07cef0 */,     8, 1,  1 }, /* Index 951 */
{                  IBU_P2_CNT2MS_ADDR /* 0x1180002 */, PSIF_CSR_ADDR_IBU_P2_CNT2MS                  /* 0x07cef8 */,     8, 1,  1 }, /* Index 952 */
{                 IBU_P2_CNT10MS_ADDR /* 0x1180003 */, PSIF_CSR_ADDR_IBU_P2_CNT10MS                 /* 0x07cf00 */,     8, 1,  1 }, /* Index 953 */
{                IBU_P2_CNT100MS_ADDR /* 0x1180004 */, PSIF_CSR_ADDR_IBU_P2_CNT100MS                /* 0x07cf08 */,     8, 1,  1 }, /* Index 954 */
{                IBU_P2_CNT150MS_ADDR /* 0x1180005 */, PSIF_CSR_ADDR_IBU_P2_CNT150MS                /* 0x07cf10 */,     8, 1,  1 }, /* Index 955 */
{                IBU_P2_CNT400MS_ADDR /* 0x1180006 */, PSIF_CSR_ADDR_IBU_P2_CNT400MS                /* 0x07cf18 */,     8, 1,  1 }, /* Index 956 */
{              IBU_P2_SKP_TO_CNT_ADDR /* 0x1180007 */, PSIF_CSR_ADDR_IBU_P2_SKP_TO_CNT              /* 0x07cf20 */,     8, 1,  1 }, /* Index 957 */
{                 IBU_P2_TGT_VAL_ADDR /* 0x1180008 */, PSIF_CSR_ADDR_IBU_P2_TGT_VAL                 /* 0x07cf28 */,     8, 1,  1 }, /* Index 958 */
{             IBU_P2_PHY_VCONFIG_ADDR /* 0x1180009 */, PSIF_CSR_ADDR_IBU_P2_PHY_VCONFIG             /* 0x07cf30 */,     8, 1,  1 }, /* Index 959 */
{      IBU_P2_PHY_DISP_ERROR_CNT_ADDR /* 0x118000a */, PSIF_CSR_ADDR_IBU_P2_PHY_DISP_ERROR_CNT      /* 0x07cf38 */,     8, 1,  1 }, /* Index 960 */
{      IBU_P2_PHY_CODE_ERROR_CNT_ADDR /* 0x118000b */, PSIF_CSR_ADDR_IBU_P2_PHY_CODE_ERROR_CNT      /* 0x07cf40 */,     8, 1,  1 }, /* Index 961 */
{           IBU_P2_PHY_EVENT_LOG_ADDR /* 0x118000c */, PSIF_CSR_ADDR_IBU_P2_PHY_EVENT_LOG           /* 0x07cf48 */,     8, 1,  1 }, /* Index 962 */
{          IBU_P2_PORT_TRAIN_FSM_ADDR /* 0x118000d */, PSIF_CSR_ADDR_IBU_P2_PORT_TRAIN_FSM          /* 0x07cf50 */,     8, 1,  1 }, /* Index 963 */
{   IBU_P2_PHY_TRAIN_SMTIMER_VS1_ADDR /* 0x118000e */, PSIF_CSR_ADDR_IBU_P2_PHY_TRAIN_SMTIMER_VS1   /* 0x07cf58 */,     8, 1,  1 }, /* Index 964 */
{                    IBU_P2_MASK_ADDR /* 0x118000f */, PSIF_CSR_ADDR_IBU_P2_MASK                    /* 0x07cf60 */,     8, 1,  1 }, /* Index 965 */
{                  IBU_P2_STATUS_ADDR /* 0x1180010 */, PSIF_CSR_ADDR_IBU_P2_STATUS                  /* 0x07cf68 */,     8, 1,  1 }, /* Index 966 */
{      IBU_P2_LINK_WIDTH_ENABLED_ADDR /* 0x1180011 */, PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_ENABLED      /* 0x07cf70 */,     8, 1,  1 }, /* Index 967 */
{    IBU_P2_LINK_WIDTH_SUPPORTED_ADDR /* 0x1180012 */, PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_SUPPORTED    /* 0x07cf78 */,     8, 1,  1 }, /* Index 968 */
{       IBU_P2_LINK_WIDTH_ACTIVE_ADDR /* 0x1180013 */, PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_ACTIVE       /* 0x07cf80 */,     8, 1,  1 }, /* Index 969 */
{    IBU_P2_LINK_SPEED_SUPPORTED_ADDR /* 0x1180014 */, PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_SUPPORTED    /* 0x07cf88 */,     8, 1,  1 }, /* Index 970 */
{     IBU_P2_PORT_PHYSICAL_STATE_ADDR /* 0x1180015 */, PSIF_CSR_ADDR_IBU_P2_PORT_PHYSICAL_STATE     /* 0x07cf90 */,     8, 1,  1 }, /* Index 971 */
{ IBU_P2_LINK_DOWN_DEFAULT_STATE_ADDR /* 0x1180016 */, PSIF_CSR_ADDR_IBU_P2_LINK_DOWN_DEFAULT_STATE /* 0x07cf98 */,     8, 1,  1 }, /* Index 972 */
{       IBU_P2_LINK_SPEED_ACTIVE_ADDR /* 0x1180017 */, PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_ACTIVE       /* 0x07cfa0 */,     8, 1,  1 }, /* Index 973 */
{      IBU_P2_LINK_SPEED_ENABLED_ADDR /* 0x1180018 */, PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_ENABLED      /* 0x07cfa8 */,     8, 1,  1 }, /* Index 974 */
{           IBU_P2_PCPHY_CNT_RST_ADDR /* 0x1180019 */, PSIF_CSR_ADDR_IBU_P2_PCPHY_CNT_RST           /* 0x07cfb0 */,     8, 1,  1 }, /* Index 975 */
{          IBU_P2_PCPHY_CNT_LOAD_ADDR /* 0x118001a */, PSIF_CSR_ADDR_IBU_P2_PCPHY_CNT_LOAD          /* 0x07cfb8 */,     8, 1,  1 }, /* Index 976 */
{          IBU_P2_PCSYMB_ERR_CNT_ADDR /* 0x118001b */, PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT          /* 0x07cfc0 */,     8, 1,  1 }, /* Index 977 */
{      IBU_P2_PCLINK_ERR_REC_CNT_ADDR /* 0x118001c */, PSIF_CSR_ADDR_IBU_P2_PCLINK_ERR_REC_CNT      /* 0x07cfc8 */,     8, 1,  1 }, /* Index 978 */
{       IBU_P2_PCLINK_DOWNED_CNT_ADDR /* 0x118001d */, PSIF_CSR_ADDR_IBU_P2_PCLINK_DOWNED_CNT       /* 0x07cfd0 */,     8, 1,  1 }, /* Index 979 */
{    IBU_P2_PCSYMB_ERR_CNT_LANE0_ADDR /* 0x118001e */, PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE0    /* 0x07cfd8 */,     8, 1,  1 }, /* Index 980 */
{    IBU_P2_PCSYMB_ERR_CNT_LANE1_ADDR /* 0x118001f */, PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE1    /* 0x07cfe0 */,     8, 1,  1 }, /* Index 981 */
{    IBU_P2_PCSYMB_ERR_CNT_LANE2_ADDR /* 0x1180020 */, PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE2    /* 0x07cfe8 */,     8, 1,  1 }, /* Index 982 */
{    IBU_P2_PCSYMB_ERR_CNT_LANE3_ADDR /* 0x1180021 */, PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE3    /* 0x07cff0 */,     8, 1,  1 }, /* Index 983 */
{    IBU_P2_TS3_REV1_TT0_COUNTER_ADDR /* 0x1180022 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT0_COUNTER    /* 0x07cff8 */,     8, 1,  1 }, /* Index 984 */
{    IBU_P2_TS3_REV1_TT1_COUNTER_ADDR /* 0x1180023 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT1_COUNTER    /* 0x07d000 */,     8, 1,  1 }, /* Index 985 */
{    IBU_P2_TS3_REV1_TT2_COUNTER_ADDR /* 0x1180024 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT2_COUNTER    /* 0x07d008 */,     8, 1,  1 }, /* Index 986 */
{    IBU_P2_TS3_REV1_TT3_COUNTER_ADDR /* 0x1180025 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT3_COUNTER    /* 0x07d010 */,     8, 1,  1 }, /* Index 987 */
{     IBU_P2_PHY_ALIGN_ERROR_CNT_ADDR /* 0x1180026 */, PSIF_CSR_ADDR_IBU_P2_PHY_ALIGN_ERROR_CNT     /* 0x07d018 */,     8, 1,  1 }, /* Index 988 */
{ IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT_ADDR /* 0x1180027 */, PSIF_CSR_ADDR_IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT /* 0x07d020 */,     8, 1,  1 }, /* Index 989 */
{       IBU_P2_PHY_PAD_ERROR_CNT_ADDR /* 0x1180028 */, PSIF_CSR_ADDR_IBU_P2_PHY_PAD_ERROR_CNT       /* 0x07d028 */,     8, 1,  1 }, /* Index 990 */
{     IBU_P2_PHY_EDR_FDR_CONFIG0_ADDR /* 0x1180029 */, PSIF_CSR_ADDR_IBU_P2_PHY_EDR_FDR_CONFIG0     /* 0x07d030 */,     8, 1,  1 }, /* Index 991 */
{     IBU_P2_PHY_EDR_FDR_CONFIG1_ADDR /* 0x118002a */, PSIF_CSR_ADDR_IBU_P2_PHY_EDR_FDR_CONFIG1     /* 0x07d038 */,     8, 1,  1 }, /* Index 992 */
{     IBU_P2_PHY_LEAKY_BKT_THRSH_ADDR /* 0x118002b */, PSIF_CSR_ADDR_IBU_P2_PHY_LEAKY_BKT_THRSH     /* 0x07d040 */,     8, 1,  1 }, /* Index 993 */
{      IBU_P2_RCV_TS3_STATUS_LOW_ADDR /* 0x118002d */, PSIF_CSR_ADDR_IBU_P2_RCV_TS3_STATUS_LOW      /* 0x07d048 */,     8, 1,  1 }, /* Index 994 */
{     IBU_P2_RCV_TS3_STATUS_HIGH_ADDR /* 0x118002e */, PSIF_CSR_ADDR_IBU_P2_RCV_TS3_STATUS_HIGH     /* 0x07d050 */,     8, 1,  1 }, /* Index 995 */
{                   IBU_P2_GUID0_ADDR /* 0x118002f */, PSIF_CSR_ADDR_IBU_P2_GUID0                   /* 0x07d058 */,     8, 1,  1 }, /* Index 996 */
{                   IBU_P2_GUID1_ADDR /* 0x1180030 */, PSIF_CSR_ADDR_IBU_P2_GUID1                   /* 0x07d060 */,     8, 1,  1 }, /* Index 997 */
{                    IBU_P2_PNUM_ADDR /* 0x1180031 */, PSIF_CSR_ADDR_IBU_P2_PNUM                    /* 0x07d068 */,     8, 1,  1 }, /* Index 998 */
{                  IBU_P2_CNT4MS_ADDR /* 0x1180032 */, PSIF_CSR_ADDR_IBU_P2_CNT4MS                  /* 0x07d070 */,     8, 1,  1 }, /* Index 999 */
{                 IBU_P2_CNT36MS_ADDR /* 0x1180033 */, PSIF_CSR_ADDR_IBU_P2_CNT36MS                 /* 0x07d078 */,     8, 1,  1 }, /* Index 1000 */
{          IBU_P2_PHY_TS3_CONFIG_ADDR /* 0x1180034 */, PSIF_CSR_ADDR_IBU_P2_PHY_TS3_CONFIG          /* 0x07d080 */,     8, 1,  1 }, /* Index 1001 */
{        IBU_P2_DDS_WINDOW_START_ADDR /* 0x1180035 */, PSIF_CSR_ADDR_IBU_P2_DDS_WINDOW_START        /* 0x07d088 */,     8, 1,  1 }, /* Index 1002 */
{          IBU_P2_DDS_WINDOW_END_ADDR /* 0x1180036 */, PSIF_CSR_ADDR_IBU_P2_DDS_WINDOW_END          /* 0x07d090 */,     8, 1,  1 }, /* Index 1003 */
{  IBU_P2_DDS_DEFAULT_WINDOW_END_ADDR /* 0x1180037 */, PSIF_CSR_ADDR_IBU_P2_DDS_DEFAULT_WINDOW_END  /* 0x07d098 */,     8, 1,  1 }, /* Index 1004 */
{        IBU_P2_RX_TS3DDS_STATUS_ADDR /* 0x1180038 */, PSIF_CSR_ADDR_IBU_P2_RX_TS3DDS_STATUS        /* 0x07d0a0 */,     8, 1,  1 }, /* Index 1005 */
{        IBU_P2_TX_TS3DDS_STATUS_ADDR /* 0x1180039 */, PSIF_CSR_ADDR_IBU_P2_TX_TS3DDS_STATUS        /* 0x07d0a8 */,     8, 1,  1 }, /* Index 1006 */
{                 IBU_P2_CNT16MS_ADDR /* 0x118003a */, PSIF_CSR_ADDR_IBU_P2_CNT16MS                 /* 0x07d0b0 */,     8, 1,  1 }, /* Index 1007 */
{        IBU_P2_CONF_TEST4MS_SCT_ADDR /* 0x118003b */, PSIF_CSR_ADDR_IBU_P2_CONF_TEST4MS_SCT        /* 0x07d0b8 */,     8, 1,  1 }, /* Index 1008 */
{       IBU_P2_CONF_TEST16MS_SCT_ADDR /* 0x118003c */, PSIF_CSR_ADDR_IBU_P2_CONF_TEST16MS_SCT       /* 0x07d0c0 */,     8, 1,  1 }, /* Index 1009 */
{     IBU_P2_LOCAL_ADDTEST_LIMIT_ADDR /* 0x118003d */, PSIF_CSR_ADDR_IBU_P2_LOCAL_ADDTEST_LIMIT     /* 0x07d0c8 */,     8, 1,  1 }, /* Index 1010 */
{    IBU_P2_REMOTE_ADDTEST_LIMIT_ADDR /* 0x118003e */, PSIF_CSR_ADDR_IBU_P2_REMOTE_ADDTEST_LIMIT    /* 0x07d0d0 */,     8, 1,  1 }, /* Index 1011 */
{    IBU_P2_TS3_REV1_TT4_COUNTER_ADDR /* 0x118003f */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT4_COUNTER    /* 0x07d0d8 */,     8, 1,  1 }, /* Index 1012 */
{    IBU_P2_TS3_REV1_TT5_COUNTER_ADDR /* 0x1180040 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT5_COUNTER    /* 0x07d0e0 */,     8, 1,  1 }, /* Index 1013 */
{    IBU_P2_TS3_REV1_TT6_COUNTER_ADDR /* 0x1180041 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT6_COUNTER    /* 0x07d0e8 */,     8, 1,  1 }, /* Index 1014 */
{    IBU_P2_TS3_REV1_TT7_COUNTER_ADDR /* 0x1180042 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT7_COUNTER    /* 0x07d0f0 */,     8, 1,  1 }, /* Index 1015 */
{    IBU_P2_TS3_REV1_TT8_COUNTER_ADDR /* 0x1180043 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT8_COUNTER    /* 0x07d0f8 */,     8, 1,  1 }, /* Index 1016 */
{    IBU_P2_TS3_REV1_TT9_COUNTER_ADDR /* 0x1180044 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT9_COUNTER    /* 0x07d100 */,     8, 1,  1 }, /* Index 1017 */
{   IBU_P2_TS3_REV1_TT10_COUNTER_ADDR /* 0x1180045 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT10_COUNTER   /* 0x07d108 */,     8, 1,  1 }, /* Index 1018 */
{   IBU_P2_TS3_REV1_TT11_COUNTER_ADDR /* 0x1180046 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT11_COUNTER   /* 0x07d110 */,     8, 1,  1 }, /* Index 1019 */
{   IBU_P2_TS3_REV1_TT12_COUNTER_ADDR /* 0x1180047 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT12_COUNTER   /* 0x07d118 */,     8, 1,  1 }, /* Index 1020 */
{   IBU_P2_TS3_REV1_TT13_COUNTER_ADDR /* 0x1180048 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT13_COUNTER   /* 0x07d120 */,     8, 1,  1 }, /* Index 1021 */
{   IBU_P2_TS3_REV1_TT14_COUNTER_ADDR /* 0x1180049 */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT14_COUNTER   /* 0x07d128 */,     8, 1,  1 }, /* Index 1022 */
{   IBU_P2_TS3_REV1_TT15_COUNTER_ADDR /* 0x118004a */, PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT15_COUNTER   /* 0x07d130 */,     8, 1,  1 }, /* Index 1023 */
{ IBU_P2_CONF_TEST_LANE_ERROR_LIMIT_ADDR /* 0x118004b */, PSIF_CSR_ADDR_IBU_P2_CONF_TEST_LANE_ERROR_LIMIT /* 0x07d138 */,     8, 1,  1 }, /* Index 1024 */
{    IBU_P2_CONF_TEST_IDLE_LIMIT_ADDR /* 0x118004c */, PSIF_CSR_ADDR_IBU_P2_CONF_TEST_IDLE_LIMIT    /* 0x07d140 */,     8, 1,  1 }, /* Index 1025 */
{        IBU_P2_CONF_TEST2MS_SCT_ADDR /* 0x118004d */, PSIF_CSR_ADDR_IBU_P2_CONF_TEST2MS_SCT        /* 0x07d148 */,     8, 1,  1 }, /* Index 1026 */
{           IBU_P2_CNT100_MS_HBR_ADDR /* 0x118004e */, PSIF_CSR_ADDR_IBU_P2_CNT100_MS_HBR           /* 0x07d150 */,     8, 1,  1 }, /* Index 1027 */
{      IBU_P2_PMAEQULANE0_STATUS_ADDR /* 0x118004f */, PSIF_CSR_ADDR_IBU_P2_PMAEQULANE0_STATUS      /* 0x07d158 */,     8, 1,  1 }, /* Index 1028 */
{      IBU_P2_PMAEQULANE1_STATUS_ADDR /* 0x1180050 */, PSIF_CSR_ADDR_IBU_P2_PMAEQULANE1_STATUS      /* 0x07d160 */,     8, 1,  1 }, /* Index 1029 */
{      IBU_P2_PMAEQULANE2_STATUS_ADDR /* 0x1180051 */, PSIF_CSR_ADDR_IBU_P2_PMAEQULANE2_STATUS      /* 0x07d168 */,     8, 1,  1 }, /* Index 1030 */
{      IBU_P2_PMAEQULANE3_STATUS_ADDR /* 0x1180052 */, PSIF_CSR_ADDR_IBU_P2_PMAEQULANE3_STATUS      /* 0x07d170 */,     8, 1,  1 }, /* Index 1031 */
{      IBU_P2_PMADDSLANE0_STATUS_ADDR /* 0x1180053 */, PSIF_CSR_ADDR_IBU_P2_PMADDSLANE0_STATUS      /* 0x07d178 */,     8, 1,  1 }, /* Index 1032 */
{      IBU_P2_PMADDSLANE1_STATUS_ADDR /* 0x1180054 */, PSIF_CSR_ADDR_IBU_P2_PMADDSLANE1_STATUS      /* 0x07d180 */,     8, 1,  1 }, /* Index 1033 */
{      IBU_P2_PMADDSLANE2_STATUS_ADDR /* 0x1180055 */, PSIF_CSR_ADDR_IBU_P2_PMADDSLANE2_STATUS      /* 0x07d188 */,     8, 1,  1 }, /* Index 1034 */
{      IBU_P2_PMADDSLANE3_STATUS_ADDR /* 0x1180056 */, PSIF_CSR_ADDR_IBU_P2_PMADDSLANE3_STATUS      /* 0x07d190 */,     8, 1,  1 }, /* Index 1035 */
{           IBU_P2_PHY_EDPL_ERR0_ADDR /* 0x1180057 */, PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR0           /* 0x07d198 */,     8, 1,  1 }, /* Index 1036 */
{           IBU_P2_PHY_EDPL_ERR1_ADDR /* 0x1180058 */, PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR1           /* 0x07d1a0 */,     8, 1,  1 }, /* Index 1037 */
{           IBU_P2_PHY_EDPL_ERR2_ADDR /* 0x1180059 */, PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR2           /* 0x07d1a8 */,     8, 1,  1 }, /* Index 1038 */
{           IBU_P2_PHY_EDPL_ERR3_ADDR /* 0x118005a */, PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR3           /* 0x07d1b0 */,     8, 1,  1 }, /* Index 1039 */
{        IBU_P2_PHY_BLK_TYPE_ERR_ADDR /* 0x118005b */, PSIF_CSR_ADDR_IBU_P2_PHY_BLK_TYPE_ERR        /* 0x07d1b8 */,     8, 1,  1 }, /* Index 1040 */
{         IBU_P2_PHY_BLK_EOP_ERR_ADDR /* 0x118005c */, PSIF_CSR_ADDR_IBU_P2_PHY_BLK_EOP_ERR         /* 0x07d1c0 */,     8, 1,  1 }, /* Index 1041 */
{         IBU_P2_PHY_CIN_PKT_ERR_ADDR /* 0x118005d */, PSIF_CSR_ADDR_IBU_P2_PHY_CIN_PKT_ERR         /* 0x07d1c8 */,     8, 1,  1 }, /* Index 1042 */
{         IBU_P2_PHY_SYN_HDR_ERR_ADDR /* 0x118005e */, PSIF_CSR_ADDR_IBU_P2_PHY_SYN_HDR_ERR         /* 0x07d1d0 */,     8, 1,  1 }, /* Index 1043 */
{           IBU_P2_PHY_PRBS_ERR0_ADDR /* 0x118005f */, PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR0           /* 0x07d1d8 */,     8, 1,  1 }, /* Index 1044 */
{           IBU_P2_PHY_PRBS_ERR1_ADDR /* 0x1180060 */, PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR1           /* 0x07d1e0 */,     8, 1,  1 }, /* Index 1045 */
{           IBU_P2_PHY_PRBS_ERR2_ADDR /* 0x1180061 */, PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR2           /* 0x07d1e8 */,     8, 1,  1 }, /* Index 1046 */
{           IBU_P2_PHY_PRBS_ERR3_ADDR /* 0x1180062 */, PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR3           /* 0x07d1f0 */,     8, 1,  1 }, /* Index 1047 */
{       IBU_P2_PHY_DESKEW_STATUS_ADDR /* 0x1180063 */, PSIF_CSR_ADDR_IBU_P2_PHY_DESKEW_STATUS       /* 0x07d1f8 */,     8, 1,  1 }, /* Index 1048 */
{         IBU_P2_PHY_FECUNC_ERR0_ADDR /* 0x1180064 */, PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR0         /* 0x07d200 */,     8, 1,  1 }, /* Index 1049 */
{         IBU_P2_PHY_FECUNC_ERR1_ADDR /* 0x1180065 */, PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR1         /* 0x07d208 */,     8, 1,  1 }, /* Index 1050 */
{         IBU_P2_PHY_FECUNC_ERR2_ADDR /* 0x1180066 */, PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR2         /* 0x07d210 */,     8, 1,  1 }, /* Index 1051 */
{         IBU_P2_PHY_FECUNC_ERR3_ADDR /* 0x1180067 */, PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR3         /* 0x07d218 */,     8, 1,  1 }, /* Index 1052 */
{         IBU_P2_PHY_FECCOR_ERR0_ADDR /* 0x1180068 */, PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR0         /* 0x07d220 */,     8, 1,  1 }, /* Index 1053 */
{         IBU_P2_PHY_FECCOR_ERR1_ADDR /* 0x1180069 */, PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR1         /* 0x07d228 */,     8, 1,  1 }, /* Index 1054 */
{         IBU_P2_PHY_FECCOR_ERR2_ADDR /* 0x118006a */, PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR2         /* 0x07d230 */,     8, 1,  1 }, /* Index 1055 */
{         IBU_P2_PHY_FECCOR_ERR3_ADDR /* 0x118006b */, PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR3         /* 0x07d238 */,     8, 1,  1 }, /* Index 1056 */
{            IBU_P2_PHY_SMSTATUS_ADDR /* 0x118006c */, PSIF_CSR_ADDR_IBU_P2_PHY_SMSTATUS            /* 0x07d240 */,     8, 1,  1 }, /* Index 1057 */
{ IBU_P2_PHY_TS3_NEGOTIATED_STATUS_ADDR /* 0x118006d */, PSIF_CSR_ADDR_IBU_P2_PHY_TS3_NEGOTIATED_STATUS /* 0x07d248 */,     8, 1,  1 }, /* Index 1058 */
{                IBU_P2_PHY_TEST_ADDR /* 0x118006e */, PSIF_CSR_ADDR_IBU_P2_PHY_TEST                /* 0x07d250 */,     8, 1,  1 }, /* Index 1059 */
{  IBU_P2_EDR_FDR_RX_STATUS_REG0_ADDR /* 0x118006f */, PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG0  /* 0x07d258 */,     8, 1,  1 }, /* Index 1060 */
{  IBU_P2_EDR_FDR_RX_STATUS_REG1_ADDR /* 0x1180070 */, PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG1  /* 0x07d260 */,     8, 1,  1 }, /* Index 1061 */
{  IBU_P2_EDR_FDR_RX_STATUS_REG2_ADDR /* 0x1180071 */, PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG2  /* 0x07d268 */,     8, 1,  1 }, /* Index 1062 */
{  IBU_P2_EDR_FDR_TX_STATUS_REG0_ADDR /* 0x1180072 */, PSIF_CSR_ADDR_IBU_P2_EDR_FDR_TX_STATUS_REG0  /* 0x07d270 */,     8, 1,  1 }, /* Index 1063 */
{            IBU_P2_INT_PRIORITY_ADDR /* 0x1180073 */, PSIF_CSR_ADDR_IBU_P2_INT_PRIORITY            /* 0x07d278 */,     8, 1,  1 }, /* Index 1064 */
{               IBU_P2_INT_FATAL_ADDR /* 0x1180074 */, PSIF_CSR_ADDR_IBU_P2_INT_FATAL               /* 0x07d280 */,     8, 1,  1 }, /* Index 1065 */
{ IBU_P2_LINK_ROUND_TRIP_LATENCY_ADDR /* 0x1180075 */, PSIF_CSR_ADDR_IBU_P2_LINK_ROUND_TRIP_LATENCY /* 0x07d288 */,     8, 1,  1 }, /* Index 1066 */
{   IBU_P2_PHY_FORCE_LEGACY_MODE_ADDR /* 0x1180076 */, PSIF_CSR_ADDR_IBU_P2_PHY_FORCE_LEGACY_MODE   /* 0x07d290 */,     8, 1,  1 }, /* Index 1067 */
{                     IBU_P2_LID_ADDR /* 0x1180100 */, PSIF_CSR_ADDR_IBU_P2_LID                     /* 0x07d298 */,     8, 1,  1 }, /* Index 1068 */
{                     IBU_P2_LMC_ADDR /* 0x1180101 */, PSIF_CSR_ADDR_IBU_P2_LMC                     /* 0x07d2a0 */,     8, 1,  1 }, /* Index 1069 */
{              IBU_P2_PORT_STATE_ADDR /* 0x1180102 */, PSIF_CSR_ADDR_IBU_P2_PORT_STATE              /* 0x07d2a8 */,     8, 1,  1 }, /* Index 1070 */
{                   IBU_P2_VLCAP_ADDR /* 0x1180103 */, PSIF_CSR_ADDR_IBU_P2_VLCAP                   /* 0x07d2b0 */,     8, 1,  1 }, /* Index 1071 */
{            IBU_P2_NEIGHBOR_MTU_ADDR /* 0x1180104 */, PSIF_CSR_ADDR_IBU_P2_NEIGHBOR_MTU            /* 0x07d2b8 */,     8, 1,  1 }, /* Index 1072 */
{            IBU_P2_VLHIGH_LIMIT_ADDR /* 0x1180105 */, PSIF_CSR_ADDR_IBU_P2_VLHIGH_LIMIT            /* 0x07d2c0 */,     8, 1,  1 }, /* Index 1073 */
{  IBU_P2_VLARBITRATION_HIGH_CAP_ADDR /* 0x1180106 */, PSIF_CSR_ADDR_IBU_P2_VLARBITRATION_HIGH_CAP  /* 0x07d2c8 */,     8, 1,  1 }, /* Index 1074 */
{   IBU_P2_VLARBITRATION_LOW_CAP_ADDR /* 0x1180107 */, PSIF_CSR_ADDR_IBU_P2_VLARBITRATION_LOW_CAP   /* 0x07d2d0 */,     8, 1,  1 }, /* Index 1075 */
{                  IBU_P2_MTUCAP_ADDR /* 0x1180108 */, PSIF_CSR_ADDR_IBU_P2_MTUCAP                  /* 0x07d2d8 */,     8, 1,  1 }, /* Index 1076 */
{         IBU_P2_OPERATIONAL_VLS_ADDR /* 0x1180109 */, PSIF_CSR_ADDR_IBU_P2_OPERATIONAL_VLS         /* 0x07d2e0 */,     8, 1,  1 }, /* Index 1077 */
{        IBU_P2_PCPORT_RCV_ERROR_ADDR /* 0x118010c */, PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_ERROR        /* 0x07d2e8 */,     8, 1,  1 }, /* Index 1078 */
{ IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_ADDR /* 0x118010d */, PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS /* 0x07d2f0 */,     8, 1,  1 }, /* Index 1079 */
{    IBU_P2_PCPORT_XMIT_DISCARDS_ADDR /* 0x118010e */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_DISCARDS    /* 0x07d2f8 */,     8, 1,  1 }, /* Index 1080 */
{ IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS_ADDR /* 0x118010f */, PSIF_CSR_ADDR_IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS /* 0x07d300 */,     8, 1,  1 }, /* Index 1081 */
{ IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_ADDR /* 0x1180110 */, PSIF_CSR_ADDR_IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS /* 0x07d308 */,     8, 1,  1 }, /* Index 1082 */
{          IBU_P2_PCVL15_DROPPED_ADDR /* 0x1180111 */, PSIF_CSR_ADDR_IBU_P2_PCVL15_DROPPED          /* 0x07d310 */,     8, 1,  1 }, /* Index 1083 */
{        IBU_P2_PCPORT_XMIT_WAIT_ADDR /* 0x1180112 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT        /* 0x07d318 */,     8, 1,  1 }, /* Index 1084 */
{   IBU_P2_PCPORT_XMIT_DATA_LSQW_ADDR /* 0x1180113 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_DATA_LSQW   /* 0x07d320 */,     8, 1,  1 }, /* Index 1085 */
{ IBU_P2_LINK_ERROR_CHECK_ENABLE_ADDR /* 0x1180114 */, PSIF_CSR_ADDR_IBU_P2_LINK_ERROR_CHECK_ENABLE /* 0x07d328 */,     8, 1,  1 }, /* Index 1086 */
{    IBU_P2_PCPORT_RCV_DATA_LSQW_ADDR /* 0x1180115 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_DATA_LSQW    /* 0x07d330 */,     8, 1,  1 }, /* Index 1087 */
{   IBU_P2_PCPORT_XMIT_PKTS_LSQW_ADDR /* 0x1180117 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_PKTS_LSQW   /* 0x07d338 */,     8, 1,  1 }, /* Index 1088 */
{    IBU_P2_PCPORT_RCV_PKTS_LSQW_ADDR /* 0x1180119 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_PKTS_LSQW    /* 0x07d340 */,     8, 1,  1 }, /* Index 1089 */
{ IBU_P2_PCPORT_UCXMIT_PKTS_LSQW_ADDR /* 0x118011b */, PSIF_CSR_ADDR_IBU_P2_PCPORT_UCXMIT_PKTS_LSQW /* 0x07d348 */,     8, 1,  1 }, /* Index 1090 */
{ IBU_P2_PCPORT_MCXMIT_PKTS_LSQW_ADDR /* 0x118011d */, PSIF_CSR_ADDR_IBU_P2_PCPORT_MCXMIT_PKTS_LSQW /* 0x07d350 */,     8, 1,  1 }, /* Index 1091 */
{  IBU_P2_PCPORT_UCRCV_PKTS_LSQW_ADDR /* 0x118011f */, PSIF_CSR_ADDR_IBU_P2_PCPORT_UCRCV_PKTS_LSQW  /* 0x07d358 */,     8, 1,  1 }, /* Index 1092 */
{  IBU_P2_PCPORT_MCRCV_PKTS_LSQW_ADDR /* 0x1180121 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_MCRCV_PKTS_LSQW  /* 0x07d360 */,     8, 1,  1 }, /* Index 1093 */
{    IBU_P2_PCPORT_XMIT_WAIT_VL0_ADDR /* 0x1180123 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL0    /* 0x07d368 */,     8, 1,  1 }, /* Index 1094 */
{    IBU_P2_PCPORT_XMIT_WAIT_VL1_ADDR /* 0x1180124 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL1    /* 0x07d370 */,     8, 1,  1 }, /* Index 1095 */
{    IBU_P2_PCPORT_XMIT_WAIT_VL2_ADDR /* 0x1180125 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL2    /* 0x07d378 */,     8, 1,  1 }, /* Index 1096 */
{    IBU_P2_PCPORT_XMIT_WAIT_VL3_ADDR /* 0x1180126 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL3    /* 0x07d380 */,     8, 1,  1 }, /* Index 1097 */
{    IBU_P2_PCPORT_XMIT_WAIT_VL4_ADDR /* 0x1180127 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL4    /* 0x07d388 */,     8, 1,  1 }, /* Index 1098 */
{    IBU_P2_PCPORT_XMIT_WAIT_VL5_ADDR /* 0x1180128 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL5    /* 0x07d390 */,     8, 1,  1 }, /* Index 1099 */
{    IBU_P2_PCPORT_XMIT_WAIT_VL6_ADDR /* 0x1180129 */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL6    /* 0x07d398 */,     8, 1,  1 }, /* Index 1100 */
{    IBU_P2_PCPORT_XMIT_WAIT_VL7_ADDR /* 0x118012a */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL7    /* 0x07d3a0 */,     8, 1,  1 }, /* Index 1101 */
{   IBU_P2_PCPORT_XMIT_WAIT_VL15_ADDR /* 0x118012b */, PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL15   /* 0x07d3a8 */,     8, 1,  1 }, /* Index 1102 */
{       IBU_P2_PCRX_LINK_CNT_RST_ADDR /* 0x118012c */, PSIF_CSR_ADDR_IBU_P2_PCRX_LINK_CNT_RST       /* 0x07d3b0 */,     8, 1,  1 }, /* Index 1103 */
{      IBU_P2_PCRX_LINK_CNT_LOAD_ADDR /* 0x118012d */, PSIF_CSR_ADDR_IBU_P2_PCRX_LINK_CNT_LOAD      /* 0x07d3b8 */,     8, 1,  1 }, /* Index 1104 */
{        IBU_P2_LOCAL_PHY_ERRORS_ADDR /* 0x118012e */, PSIF_CSR_ADDR_IBU_P2_LOCAL_PHY_ERRORS        /* 0x07d3c0 */,     8, 1,  1 }, /* Index 1105 */
{          IBU_P2_OVERRUN_ERRORS_ADDR /* 0x118012f */, PSIF_CSR_ADDR_IBU_P2_OVERRUN_ERRORS          /* 0x07d3c8 */,     8, 1,  1 }, /* Index 1106 */
{             IBU_P2_PSLINK_DLID_ADDR /* 0x1180130 */, PSIF_CSR_ADDR_IBU_P2_PSLINK_DLID             /* 0x07d3d0 */,     8, 1,  1 }, /* Index 1107 */
{                  IBU_P2_PSTICK_ADDR /* 0x1180131 */, PSIF_CSR_ADDR_IBU_P2_PSTICK                  /* 0x07d3d8 */,     8, 1,  1 }, /* Index 1108 */
{                IBU_P2_PSSTATUS_ADDR /* 0x1180132 */, PSIF_CSR_ADDR_IBU_P2_PSSTATUS                /* 0x07d3e0 */,     8, 1,  1 }, /* Index 1109 */
{           IBU_P2_PSSTART_DELAY_ADDR /* 0x1180133 */, PSIF_CSR_ADDR_IBU_P2_PSSTART_DELAY           /* 0x07d3e8 */,     8, 1,  1 }, /* Index 1110 */
{              IBU_P2_PSINTERVAL_ADDR /* 0x1180134 */, PSIF_CSR_ADDR_IBU_P2_PSINTERVAL              /* 0x07d3f0 */,     8, 1,  1 }, /* Index 1111 */
{              IBU_P2_PSCNT_SEL0_ADDR /* 0x1180135 */, PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL0              /* 0x07d3f8 */,     8, 1,  1 }, /* Index 1112 */
{              IBU_P2_PSCNT_SEL1_ADDR /* 0x1180136 */, PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL1              /* 0x07d400 */,     8, 1,  1 }, /* Index 1113 */
{              IBU_P2_PSCNT_SEL2_ADDR /* 0x1180137 */, PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL2              /* 0x07d408 */,     8, 1,  1 }, /* Index 1114 */
{              IBU_P2_PSCNT_SEL3_ADDR /* 0x1180138 */, PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL3              /* 0x07d410 */,     8, 1,  1 }, /* Index 1115 */
{                  IBU_P2_PSCNT0_ADDR /* 0x1180139 */, PSIF_CSR_ADDR_IBU_P2_PSCNT0                  /* 0x07d418 */,     8, 1,  1 }, /* Index 1116 */
{                  IBU_P2_PSCNT1_ADDR /* 0x118013a */, PSIF_CSR_ADDR_IBU_P2_PSCNT1                  /* 0x07d420 */,     8, 1,  1 }, /* Index 1117 */
{                  IBU_P2_PSCNT2_ADDR /* 0x118013b */, PSIF_CSR_ADDR_IBU_P2_PSCNT2                  /* 0x07d428 */,     8, 1,  1 }, /* Index 1118 */
{                  IBU_P2_PSCNT3_ADDR /* 0x118013c */, PSIF_CSR_ADDR_IBU_P2_PSCNT3                  /* 0x07d430 */,     8, 1,  1 }, /* Index 1119 */
{         IBU_P2_PSINIT_SAMPLING_ADDR /* 0x118013d */, PSIF_CSR_ADDR_IBU_P2_PSINIT_SAMPLING         /* 0x07d438 */,     8, 1,  1 }, /* Index 1120 */
{              IBU_P2_PSCNT_LOAD_ADDR /* 0x118013e */, PSIF_CSR_ADDR_IBU_P2_PSCNT_LOAD              /* 0x07d440 */,     8, 1,  1 }, /* Index 1121 */
{       IBU_P2_PORT_STATE_CHANGE_ADDR /* 0x118013f */, PSIF_CSR_ADDR_IBU_P2_PORT_STATE_CHANGE       /* 0x07d448 */,     8, 1,  1 }, /* Index 1122 */
{           IBU_P2_TRAP_REGISTER_ADDR /* 0x1180140 */, PSIF_CSR_ADDR_IBU_P2_TRAP_REGISTER           /* 0x07d450 */,     8, 1,  1 }, /* Index 1123 */
{           IBU_P2_LINK_VCONFIG0_ADDR /* 0x1180141 */, PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG0           /* 0x07d458 */,     8, 1,  1 }, /* Index 1124 */
{           IBU_P2_LINK_VCONFIG1_ADDR /* 0x1180142 */, PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG1           /* 0x07d460 */,     8, 1,  1 }, /* Index 1125 */
{           IBU_P2_LINK_VCONFIG2_ADDR /* 0x1180143 */, PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG2           /* 0x07d468 */,     8, 1,  1 }, /* Index 1126 */
{    IBU_P2_LINK_RX_CREDIT_VL1_0_ADDR /* 0x1180144 */, PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL1_0    /* 0x07d470 */,     8, 1,  1 }, /* Index 1127 */
{    IBU_P2_LINK_RX_CREDIT_VL3_2_ADDR /* 0x1180145 */, PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL3_2    /* 0x07d478 */,     8, 1,  1 }, /* Index 1128 */
{    IBU_P2_LINK_RX_CREDIT_VL5_4_ADDR /* 0x1180146 */, PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL5_4    /* 0x07d480 */,     8, 1,  1 }, /* Index 1129 */
{    IBU_P2_LINK_RX_CREDIT_VL7_6_ADDR /* 0x1180147 */, PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL7_6    /* 0x07d488 */,     8, 1,  1 }, /* Index 1130 */
{    IBU_P2_LINK_TX_CREDIT_VL1_0_ADDR /* 0x1180148 */, PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL1_0    /* 0x07d490 */,     8, 1,  1 }, /* Index 1131 */
{    IBU_P2_LINK_TX_CREDIT_VL3_2_ADDR /* 0x1180149 */, PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL3_2    /* 0x07d498 */,     8, 1,  1 }, /* Index 1132 */
{    IBU_P2_LINK_TX_CREDIT_VL5_4_ADDR /* 0x118014a */, PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL5_4    /* 0x07d4a0 */,     8, 1,  1 }, /* Index 1133 */
{    IBU_P2_LINK_TX_CREDIT_VL7_6_ADDR /* 0x118014b */, PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL7_6    /* 0x07d4a8 */,     8, 1,  1 }, /* Index 1134 */
{       IBU_P2_PCTX_LINK_CNT_RST_ADDR /* 0x118014c */, PSIF_CSR_ADDR_IBU_P2_PCTX_LINK_CNT_RST       /* 0x07d4b0 */,     8, 1,  1 }, /* Index 1135 */
{      IBU_P2_PCTX_LINK_CNT_LOAD_ADDR /* 0x118014d */, PSIF_CSR_ADDR_IBU_P2_PCTX_LINK_CNT_LOAD      /* 0x07d4b8 */,     8, 1,  1 }, /* Index 1136 */
{             IBU_P2_PSCNT_WIDTH_ADDR /* 0x118014f */, PSIF_CSR_ADDR_IBU_P2_PSCNT_WIDTH             /* 0x07d4c0 */,     8, 1,  1 }, /* Index 1137 */
{              IBU_P2_PSCNT_MASK_ADDR /* 0x1180150 */, PSIF_CSR_ADDR_IBU_P2_PSCNT_MASK              /* 0x07d4c8 */,     8, 1,  1 }, /* Index 1138 */
{       IBU_P2_PCICRC_RCV_ERRORS_ADDR /* 0x1180151 */, PSIF_CSR_ADDR_IBU_P2_PCICRC_RCV_ERRORS       /* 0x07d4d0 */,     8, 1,  1 }, /* Index 1139 */
{       IBU_P2_PCVCRC_RCV_ERRORS_ADDR /* 0x1180152 */, PSIF_CSR_ADDR_IBU_P2_PCVCRC_RCV_ERRORS       /* 0x07d4d8 */,     8, 1,  1 }, /* Index 1140 */
{        IBU_P2_PCLEN_RCV_ERRORS_ADDR /* 0x1180153 */, PSIF_CSR_ADDR_IBU_P2_PCLEN_RCV_ERRORS        /* 0x07d4e0 */,     8, 1,  1 }, /* Index 1141 */
{       IBU_P2_PCDLID_RCV_ERRORS_ADDR /* 0x1180154 */, PSIF_CSR_ADDR_IBU_P2_PCDLID_RCV_ERRORS       /* 0x07d4e8 */,     8, 1,  1 }, /* Index 1142 */
{      IBU_P2_PCRCV_FCLEN_ERRORS_ADDR /* 0x1180155 */, PSIF_CSR_ADDR_IBU_P2_PCRCV_FCLEN_ERRORS      /* 0x07d4f0 */,     8, 1,  1 }, /* Index 1143 */
{       IBU_P2_PCRCV_FCVL_ERRORS_ADDR /* 0x1180156 */, PSIF_CSR_ADDR_IBU_P2_PCRCV_FCVL_ERRORS       /* 0x07d4f8 */,     8, 1,  1 }, /* Index 1144 */
{      IBU_P2_PCRCV_FCCRC_ERRORS_ADDR /* 0x1180157 */, PSIF_CSR_ADDR_IBU_P2_PCRCV_FCCRC_ERRORS      /* 0x07d500 */,     8, 1,  1 }, /* Index 1145 */
{ IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS_ADDR /* 0x1180158 */, PSIF_CSR_ADDR_IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS /* 0x07d508 */,     8, 1,  1 }, /* Index 1146 */
{     IBU_P2_PCMAL_FORMED_ERRORS_ADDR /* 0x1180159 */, PSIF_CSR_ADDR_IBU_P2_PCMAL_FORMED_ERRORS     /* 0x07d510 */,     8, 1,  1 }, /* Index 1147 */
{       IBU_P2_PCBUF_OVER_ERRORS_ADDR /* 0x118015a */, PSIF_CSR_ADDR_IBU_P2_PCBUF_OVER_ERRORS       /* 0x07d518 */,     8, 1,  1 }, /* Index 1148 */
{          IBU_P2_PCVLMAP_ERRORS_ADDR /* 0x118015b */, PSIF_CSR_ADDR_IBU_P2_PCVLMAP_ERRORS          /* 0x07d520 */,     8, 1,  1 }, /* Index 1149 */
{ IBU_P2_PCVLINIT_CREDIT_VL1_VL0_ADDR /* 0x118015c */, PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL1_VL0 /* 0x07d528 */,     8, 1,  1 }, /* Index 1150 */
{ IBU_P2_PCVLINIT_CREDIT_VL3_VL2_ADDR /* 0x118015d */, PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL3_VL2 /* 0x07d530 */,     8, 1,  1 }, /* Index 1151 */
{ IBU_P2_PCVLINIT_CREDIT_VL5_VL4_ADDR /* 0x118015e */, PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL5_VL4 /* 0x07d538 */,     8, 1,  1 }, /* Index 1152 */
{ IBU_P2_PCVLINIT_CREDIT_VL7_VL6_ADDR /* 0x118015f */, PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL7_VL6 /* 0x07d540 */,     8, 1,  1 }, /* Index 1153 */
{ IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT_ADDR /* 0x1180160 */, PSIF_CSR_ADDR_IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT /* 0x07d548 */,     8, 1,  1 }, /* Index 1154 */
{ IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT_ADDR /* 0x1180161 */, PSIF_CSR_ADDR_IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT /* 0x07d550 */,     8, 1,  1 }, /* Index 1155 */
{ IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT_ADDR /* 0x1180162 */, PSIF_CSR_ADDR_IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT /* 0x07d558 */,     8, 1,  1 }, /* Index 1156 */
{ IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT_ADDR /* 0x1180163 */, PSIF_CSR_ADDR_IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT /* 0x07d560 */,     8, 1,  1 }, /* Index 1157 */
{ IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT_ADDR /* 0x1180164 */, PSIF_CSR_ADDR_IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT /* 0x07d568 */,     8, 1,  1 }, /* Index 1158 */
{ IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT_ADDR /* 0x1180165 */, PSIF_CSR_ADDR_IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT /* 0x07d570 */,     8, 1,  1 }, /* Index 1159 */
{            IBU_P2_PCECCENA_ERR_ADDR /* 0x1180166 */, PSIF_CSR_ADDR_IBU_P2_PCECCENA_ERR            /* 0x07d578 */,     8, 1,  1 }, /* Index 1160 */
{    IBU_P2_PCTX_ECC_COR_ERR_CNT_ADDR /* 0x1180167 */, PSIF_CSR_ADDR_IBU_P2_PCTX_ECC_COR_ERR_CNT    /* 0x07d580 */,     8, 1,  1 }, /* Index 1161 */
{    IBU_P2_PCTX_ECC_UNC_ERR_CNT_ADDR /* 0x1180168 */, PSIF_CSR_ADDR_IBU_P2_PCTX_ECC_UNC_ERR_CNT    /* 0x07d588 */,     8, 1,  1 }, /* Index 1162 */
{           IBU_P2_TX_SRAMSTATUS_ADDR /* 0x1180169 */, PSIF_CSR_ADDR_IBU_P2_TX_SRAMSTATUS           /* 0x07d590 */,     8, 1,  1 }, /* Index 1163 */
{         IBU_P2_TX_CACHE_STATUS_ADDR /* 0x118016a */, PSIF_CSR_ADDR_IBU_P2_TX_CACHE_STATUS         /* 0x07d598 */,     8, 1,  1 }, /* Index 1164 */
{                IBU_P2_TX_DEBUG_ADDR /* 0x118016b */, PSIF_CSR_ADDR_IBU_P2_TX_DEBUG                /* 0x07d5a0 */,     8, 1,  1 }, /* Index 1165 */
{      IBU_P2_RX_VL07_SRAMSTATUS_ADDR /* 0x118016c */, PSIF_CSR_ADDR_IBU_P2_RX_VL07_SRAMSTATUS      /* 0x07d5a8 */,     8, 1,  1 }, /* Index 1166 */
{      IBU_P2_RX_VL15_SRAMSTATUS_ADDR /* 0x118016d */, PSIF_CSR_ADDR_IBU_P2_RX_VL15_SRAMSTATUS      /* 0x07d5b0 */,     8, 1,  1 }, /* Index 1167 */
{          IBU_P2_LOOPSRAMSTATUS_ADDR /* 0x118016e */, PSIF_CSR_ADDR_IBU_P2_LOOPSRAMSTATUS          /* 0x07d5b8 */,     8, 1,  1 }, /* Index 1168 */
{                IBU_P2_RX_DEBUG_ADDR /* 0x118016f */, PSIF_CSR_ADDR_IBU_P2_RX_DEBUG                /* 0x07d5c0 */,     8, 1,  1 }, /* Index 1169 */
{ IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS_ADDR /* 0x1180170 */, PSIF_CSR_ADDR_IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS /* 0x07d5c8 */,     8, 1,  1 }, /* Index 1170 */
{      IBU_P2_VLARB_HI_PRI_TABLE_ADDR /* 0x1180180 */, PSIF_CSR_ADDR_IBU_P2_VLARB_HI_PRI_TABLE      /* 0x07d5d0 */,    80, 1,  1 }, /* Index 1171 */
{      IBU_P2_VLARB_LO_PRI_TABLE_ADDR /* 0x11801c0 */, PSIF_CSR_ADDR_IBU_P2_VLARB_LO_PRI_TABLE      /* 0x07d620 */,    80, 1,  1 }, /* Index 1172 */
{              IBU_P2_TX_TBSVL10_ADDR /* 0x11801d0 */, PSIF_CSR_ADDR_IBU_P2_TX_TBSVL10              /* 0x07d670 */,     8, 1,  1 }, /* Index 1173 */
{              IBU_P2_TX_TBSVL32_ADDR /* 0x11801d1 */, PSIF_CSR_ADDR_IBU_P2_TX_TBSVL32              /* 0x07d678 */,     8, 1,  1 }, /* Index 1174 */
{              IBU_P2_TX_TBSVL54_ADDR /* 0x11801d2 */, PSIF_CSR_ADDR_IBU_P2_TX_TBSVL54              /* 0x07d680 */,     8, 1,  1 }, /* Index 1175 */
{              IBU_P2_TX_TBSVL76_ADDR /* 0x11801d3 */, PSIF_CSR_ADDR_IBU_P2_TX_TBSVL76              /* 0x07d688 */,     8, 1,  1 }, /* Index 1176 */
{          IBU_P2_TX_TBSARB_VL10_ADDR /* 0x11801d4 */, PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL10          /* 0x07d690 */,     8, 1,  1 }, /* Index 1177 */
{          IBU_P2_TX_TBSARB_VL32_ADDR /* 0x11801d5 */, PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL32          /* 0x07d698 */,     8, 1,  1 }, /* Index 1178 */
{          IBU_P2_TX_TBSARB_VL54_ADDR /* 0x11801d6 */, PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL54          /* 0x07d6a0 */,     8, 1,  1 }, /* Index 1179 */
{          IBU_P2_TX_TBSARB_VL76_ADDR /* 0x11801d7 */, PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL76          /* 0x07d6a8 */,     8, 1,  1 }, /* Index 1180 */
{ IBU_P2_RX_TRACE_CAPTURE_ENABLE_ADDR /* 0x11801d8 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_ENABLE /* 0x07d6b0 */,     8, 1,  1 }, /* Index 1181 */
{   IBU_P2_RX_TRACE_CAPTURE_MODE_ADDR /* 0x11801d9 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_MODE   /* 0x07d6b8 */,     8, 1,  1 }, /* Index 1182 */
{    IBU_P2_RX_TRACE_CAPTURE_RDY_ADDR /* 0x11801da */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_RDY    /* 0x07d6c0 */,     8, 1,  1 }, /* Index 1183 */
{  IBU_P2_RX_TRACE_CAPTURE_TIMER_ADDR /* 0x11801db */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_TIMER  /* 0x07d6c8 */,     8, 1,  1 }, /* Index 1184 */
{  IBU_P2_RX_TRACE_CAPTURE_START_ADDR /* 0x11801dc */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_START  /* 0x07d6d0 */,     8, 1,  1 }, /* Index 1185 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA1_ADDR /* 0x11801e0 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA1  /* 0x07d6d8 */,     8, 1,  1 }, /* Index 1186 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA2_ADDR /* 0x11801e1 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA2  /* 0x07d6e0 */,     8, 1,  1 }, /* Index 1187 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA3_ADDR /* 0x11801e2 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA3  /* 0x07d6e8 */,     8, 1,  1 }, /* Index 1188 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA4_ADDR /* 0x11801e3 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA4  /* 0x07d6f0 */,     8, 1,  1 }, /* Index 1189 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA5_ADDR /* 0x11801e4 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA5  /* 0x07d6f8 */,     8, 1,  1 }, /* Index 1190 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA6_ADDR /* 0x11801e5 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA6  /* 0x07d700 */,     8, 1,  1 }, /* Index 1191 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA7_ADDR /* 0x11801e6 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA7  /* 0x07d708 */,     8, 1,  1 }, /* Index 1192 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA8_ADDR /* 0x11801e7 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA8  /* 0x07d710 */,     8, 1,  1 }, /* Index 1193 */
{  IBU_P2_RX_TRACE_CAPTURE_DATA9_ADDR /* 0x11801e8 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA9  /* 0x07d718 */,     8, 1,  1 }, /* Index 1194 */
{ IBU_P2_RX_TRACE_CAPTURE_DATA10_ADDR /* 0x11801e9 */, PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA10 /* 0x07d720 */,     8, 1,  1 }, /* Index 1195 */
{      IBU_P2_LINK_RX_FCCL_VL1_0_ADDR /* 0x11801ea */, PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL1_0      /* 0x07d728 */,     8, 1,  1 }, /* Index 1196 */
{      IBU_P2_LINK_RX_FCCL_VL3_2_ADDR /* 0x11801eb */, PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL3_2      /* 0x07d730 */,     8, 1,  1 }, /* Index 1197 */
{      IBU_P2_LINK_RX_FCCL_VL5_4_ADDR /* 0x11801ec */, PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL5_4      /* 0x07d738 */,     8, 1,  1 }, /* Index 1198 */
{      IBU_P2_LINK_RX_FCCL_VL7_6_ADDR /* 0x11801ed */, PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL7_6      /* 0x07d740 */,     8, 1,  1 }, /* Index 1199 */
{       IBU_P2_ADD_DEFAULT_LANE0_ADDR /* 0x1180210 */, PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE0       /* 0x07d748 */,     8, 1,  1 }, /* Index 1200 */
{       IBU_P2_ADD_DEFAULT_LANE1_ADDR /* 0x1180211 */, PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE1       /* 0x07d750 */,     8, 1,  1 }, /* Index 1201 */
{       IBU_P2_ADD_DEFAULT_LANE2_ADDR /* 0x1180212 */, PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE2       /* 0x07d758 */,     8, 1,  1 }, /* Index 1202 */
{       IBU_P2_ADD_DEFAULT_LANE3_ADDR /* 0x1180213 */, PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE3       /* 0x07d760 */,     8, 1,  1 }, /* Index 1203 */
{          IBU_P2_PHY_ADD0_LANE0_ADDR /* 0x1180214 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE0          /* 0x07d768 */,     8, 1,  1 }, /* Index 1204 */
{          IBU_P2_PHY_ADD0_LANE1_ADDR /* 0x1180215 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE1          /* 0x07d770 */,     8, 1,  1 }, /* Index 1205 */
{          IBU_P2_PHY_ADD0_LANE2_ADDR /* 0x1180216 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE2          /* 0x07d778 */,     8, 1,  1 }, /* Index 1206 */
{          IBU_P2_PHY_ADD0_LANE3_ADDR /* 0x1180217 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE3          /* 0x07d780 */,     8, 1,  1 }, /* Index 1207 */
{          IBU_P2_PHY_ADD1_LANE0_ADDR /* 0x1180218 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE0          /* 0x07d788 */,     8, 1,  1 }, /* Index 1208 */
{          IBU_P2_PHY_ADD1_LANE1_ADDR /* 0x1180219 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE1          /* 0x07d790 */,     8, 1,  1 }, /* Index 1209 */
{          IBU_P2_PHY_ADD1_LANE2_ADDR /* 0x118021a */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE2          /* 0x07d798 */,     8, 1,  1 }, /* Index 1210 */
{          IBU_P2_PHY_ADD1_LANE3_ADDR /* 0x118021b */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE3          /* 0x07d7a0 */,     8, 1,  1 }, /* Index 1211 */
{          IBU_P2_PHY_ADD2_LANE0_ADDR /* 0x118021c */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE0          /* 0x07d7a8 */,     8, 1,  1 }, /* Index 1212 */
{          IBU_P2_PHY_ADD2_LANE1_ADDR /* 0x118021d */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE1          /* 0x07d7b0 */,     8, 1,  1 }, /* Index 1213 */
{          IBU_P2_PHY_ADD2_LANE2_ADDR /* 0x118021e */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE2          /* 0x07d7b8 */,     8, 1,  1 }, /* Index 1214 */
{          IBU_P2_PHY_ADD2_LANE3_ADDR /* 0x118021f */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE3          /* 0x07d7c0 */,     8, 1,  1 }, /* Index 1215 */
{          IBU_P2_PHY_ADD3_LANE0_ADDR /* 0x1180220 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE0          /* 0x07d7c8 */,     8, 1,  1 }, /* Index 1216 */
{          IBU_P2_PHY_ADD3_LANE1_ADDR /* 0x1180221 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE1          /* 0x07d7d0 */,     8, 1,  1 }, /* Index 1217 */
{          IBU_P2_PHY_ADD3_LANE2_ADDR /* 0x1180222 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE2          /* 0x07d7d8 */,     8, 1,  1 }, /* Index 1218 */
{          IBU_P2_PHY_ADD3_LANE3_ADDR /* 0x1180223 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE3          /* 0x07d7e0 */,     8, 1,  1 }, /* Index 1219 */
{          IBU_P2_PHY_ADD4_LANE0_ADDR /* 0x1180224 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE0          /* 0x07d7e8 */,     8, 1,  1 }, /* Index 1220 */
{          IBU_P2_PHY_ADD4_LANE1_ADDR /* 0x1180225 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE1          /* 0x07d7f0 */,     8, 1,  1 }, /* Index 1221 */
{          IBU_P2_PHY_ADD4_LANE2_ADDR /* 0x1180226 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE2          /* 0x07d7f8 */,     8, 1,  1 }, /* Index 1222 */
{          IBU_P2_PHY_ADD4_LANE3_ADDR /* 0x1180227 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE3          /* 0x07d800 */,     8, 1,  1 }, /* Index 1223 */
{          IBU_P2_PHY_ADD5_LANE0_ADDR /* 0x1180228 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE0          /* 0x07d808 */,     8, 1,  1 }, /* Index 1224 */
{          IBU_P2_PHY_ADD5_LANE1_ADDR /* 0x1180229 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE1          /* 0x07d810 */,     8, 1,  1 }, /* Index 1225 */
{          IBU_P2_PHY_ADD5_LANE2_ADDR /* 0x118022a */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE2          /* 0x07d818 */,     8, 1,  1 }, /* Index 1226 */
{          IBU_P2_PHY_ADD5_LANE3_ADDR /* 0x118022b */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE3          /* 0x07d820 */,     8, 1,  1 }, /* Index 1227 */
{          IBU_P2_PHY_ADD6_LANE0_ADDR /* 0x118022c */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE0          /* 0x07d828 */,     8, 1,  1 }, /* Index 1228 */
{          IBU_P2_PHY_ADD6_LANE1_ADDR /* 0x118022d */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE1          /* 0x07d830 */,     8, 1,  1 }, /* Index 1229 */
{          IBU_P2_PHY_ADD6_LANE2_ADDR /* 0x118022e */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE2          /* 0x07d838 */,     8, 1,  1 }, /* Index 1230 */
{          IBU_P2_PHY_ADD6_LANE3_ADDR /* 0x118022f */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE3          /* 0x07d840 */,     8, 1,  1 }, /* Index 1231 */
{          IBU_P2_PHY_ADD7_LANE0_ADDR /* 0x1180230 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE0          /* 0x07d848 */,     8, 1,  1 }, /* Index 1232 */
{          IBU_P2_PHY_ADD7_LANE1_ADDR /* 0x1180231 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE1          /* 0x07d850 */,     8, 1,  1 }, /* Index 1233 */
{          IBU_P2_PHY_ADD7_LANE2_ADDR /* 0x1180232 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE2          /* 0x07d858 */,     8, 1,  1 }, /* Index 1234 */
{          IBU_P2_PHY_ADD7_LANE3_ADDR /* 0x1180233 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE3          /* 0x07d860 */,     8, 1,  1 }, /* Index 1235 */
{          IBU_P2_PHY_ADD8_LANE0_ADDR /* 0x1180234 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE0          /* 0x07d868 */,     8, 1,  1 }, /* Index 1236 */
{          IBU_P2_PHY_ADD8_LANE1_ADDR /* 0x1180235 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE1          /* 0x07d870 */,     8, 1,  1 }, /* Index 1237 */
{          IBU_P2_PHY_ADD8_LANE2_ADDR /* 0x1180236 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE2          /* 0x07d878 */,     8, 1,  1 }, /* Index 1238 */
{          IBU_P2_PHY_ADD8_LANE3_ADDR /* 0x1180237 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE3          /* 0x07d880 */,     8, 1,  1 }, /* Index 1239 */
{          IBU_P2_PHY_ADD9_LANE0_ADDR /* 0x1180238 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE0          /* 0x07d888 */,     8, 1,  1 }, /* Index 1240 */
{          IBU_P2_PHY_ADD9_LANE1_ADDR /* 0x1180239 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE1          /* 0x07d890 */,     8, 1,  1 }, /* Index 1241 */
{          IBU_P2_PHY_ADD9_LANE2_ADDR /* 0x118023a */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE2          /* 0x07d898 */,     8, 1,  1 }, /* Index 1242 */
{          IBU_P2_PHY_ADD9_LANE3_ADDR /* 0x118023b */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE3          /* 0x07d8a0 */,     8, 1,  1 }, /* Index 1243 */
{         IBU_P2_PHY_ADD10_LANE0_ADDR /* 0x118023c */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE0         /* 0x07d8a8 */,     8, 1,  1 }, /* Index 1244 */
{         IBU_P2_PHY_ADD10_LANE1_ADDR /* 0x118023d */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE1         /* 0x07d8b0 */,     8, 1,  1 }, /* Index 1245 */
{         IBU_P2_PHY_ADD10_LANE2_ADDR /* 0x118023e */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE2         /* 0x07d8b8 */,     8, 1,  1 }, /* Index 1246 */
{         IBU_P2_PHY_ADD10_LANE3_ADDR /* 0x118023f */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE3         /* 0x07d8c0 */,     8, 1,  1 }, /* Index 1247 */
{         IBU_P2_PHY_ADD11_LANE0_ADDR /* 0x1180240 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE0         /* 0x07d8c8 */,     8, 1,  1 }, /* Index 1248 */
{         IBU_P2_PHY_ADD11_LANE1_ADDR /* 0x1180241 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE1         /* 0x07d8d0 */,     8, 1,  1 }, /* Index 1249 */
{         IBU_P2_PHY_ADD11_LANE2_ADDR /* 0x1180242 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE2         /* 0x07d8d8 */,     8, 1,  1 }, /* Index 1250 */
{         IBU_P2_PHY_ADD11_LANE3_ADDR /* 0x1180243 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE3         /* 0x07d8e0 */,     8, 1,  1 }, /* Index 1251 */
{         IBU_P2_PHY_ADD12_LANE0_ADDR /* 0x1180244 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE0         /* 0x07d8e8 */,     8, 1,  1 }, /* Index 1252 */
{         IBU_P2_PHY_ADD12_LANE1_ADDR /* 0x1180245 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE1         /* 0x07d8f0 */,     8, 1,  1 }, /* Index 1253 */
{         IBU_P2_PHY_ADD12_LANE2_ADDR /* 0x1180246 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE2         /* 0x07d8f8 */,     8, 1,  1 }, /* Index 1254 */
{         IBU_P2_PHY_ADD12_LANE3_ADDR /* 0x1180247 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE3         /* 0x07d900 */,     8, 1,  1 }, /* Index 1255 */
{         IBU_P2_PHY_ADD13_LANE0_ADDR /* 0x1180248 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE0         /* 0x07d908 */,     8, 1,  1 }, /* Index 1256 */
{         IBU_P2_PHY_ADD13_LANE1_ADDR /* 0x1180249 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE1         /* 0x07d910 */,     8, 1,  1 }, /* Index 1257 */
{         IBU_P2_PHY_ADD13_LANE2_ADDR /* 0x118024a */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE2         /* 0x07d918 */,     8, 1,  1 }, /* Index 1258 */
{         IBU_P2_PHY_ADD13_LANE3_ADDR /* 0x118024b */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE3         /* 0x07d920 */,     8, 1,  1 }, /* Index 1259 */
{         IBU_P2_PHY_ADD14_LANE0_ADDR /* 0x118024c */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE0         /* 0x07d928 */,     8, 1,  1 }, /* Index 1260 */
{         IBU_P2_PHY_ADD14_LANE1_ADDR /* 0x118024d */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE1         /* 0x07d930 */,     8, 1,  1 }, /* Index 1261 */
{         IBU_P2_PHY_ADD14_LANE2_ADDR /* 0x118024e */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE2         /* 0x07d938 */,     8, 1,  1 }, /* Index 1262 */
{         IBU_P2_PHY_ADD14_LANE3_ADDR /* 0x118024f */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE3         /* 0x07d940 */,     8, 1,  1 }, /* Index 1263 */
{         IBU_P2_PHY_ADD15_LANE0_ADDR /* 0x1180250 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE0         /* 0x07d948 */,     8, 1,  1 }, /* Index 1264 */
{         IBU_P2_PHY_ADD15_LANE1_ADDR /* 0x1180251 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE1         /* 0x07d950 */,     8, 1,  1 }, /* Index 1265 */
{         IBU_P2_PHY_ADD15_LANE2_ADDR /* 0x1180252 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE2         /* 0x07d958 */,     8, 1,  1 }, /* Index 1266 */
{         IBU_P2_PHY_ADD15_LANE3_ADDR /* 0x1180253 */, PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE3         /* 0x07d960 */,     8, 1,  1 }, /* Index 1267 */
{     IBU_P2_PHY_AMP1_ADD0_LANE0_ADDR /* 0x1180254 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE0     /* 0x07d968 */,     8, 1,  1 }, /* Index 1268 */
{     IBU_P2_PHY_AMP1_ADD0_LANE1_ADDR /* 0x1180255 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE1     /* 0x07d970 */,     8, 1,  1 }, /* Index 1269 */
{     IBU_P2_PHY_AMP1_ADD0_LANE2_ADDR /* 0x1180256 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE2     /* 0x07d978 */,     8, 1,  1 }, /* Index 1270 */
{     IBU_P2_PHY_AMP1_ADD0_LANE3_ADDR /* 0x1180257 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE3     /* 0x07d980 */,     8, 1,  1 }, /* Index 1271 */
{     IBU_P2_PHY_AMP1_ADD1_LANE0_ADDR /* 0x1180258 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE0     /* 0x07d988 */,     8, 1,  1 }, /* Index 1272 */
{     IBU_P2_PHY_AMP1_ADD1_LANE1_ADDR /* 0x1180259 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE1     /* 0x07d990 */,     8, 1,  1 }, /* Index 1273 */
{     IBU_P2_PHY_AMP1_ADD1_LANE2_ADDR /* 0x118025a */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE2     /* 0x07d998 */,     8, 1,  1 }, /* Index 1274 */
{     IBU_P2_PHY_AMP1_ADD1_LANE3_ADDR /* 0x118025b */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE3     /* 0x07d9a0 */,     8, 1,  1 }, /* Index 1275 */
{     IBU_P2_PHY_AMP1_ADD2_LANE0_ADDR /* 0x118025c */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE0     /* 0x07d9a8 */,     8, 1,  1 }, /* Index 1276 */
{     IBU_P2_PHY_AMP1_ADD2_LANE1_ADDR /* 0x118025d */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE1     /* 0x07d9b0 */,     8, 1,  1 }, /* Index 1277 */
{     IBU_P2_PHY_AMP1_ADD2_LANE2_ADDR /* 0x118025e */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE2     /* 0x07d9b8 */,     8, 1,  1 }, /* Index 1278 */
{     IBU_P2_PHY_AMP1_ADD2_LANE3_ADDR /* 0x118025f */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE3     /* 0x07d9c0 */,     8, 1,  1 }, /* Index 1279 */
{     IBU_P2_PHY_AMP1_ADD3_LANE0_ADDR /* 0x1180260 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE0     /* 0x07d9c8 */,     8, 1,  1 }, /* Index 1280 */
{     IBU_P2_PHY_AMP1_ADD3_LANE1_ADDR /* 0x1180261 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE1     /* 0x07d9d0 */,     8, 1,  1 }, /* Index 1281 */
{     IBU_P2_PHY_AMP1_ADD3_LANE2_ADDR /* 0x1180262 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE2     /* 0x07d9d8 */,     8, 1,  1 }, /* Index 1282 */
{     IBU_P2_PHY_AMP1_ADD3_LANE3_ADDR /* 0x1180263 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE3     /* 0x07d9e0 */,     8, 1,  1 }, /* Index 1283 */
{     IBU_P2_PHY_AMP1_ADD4_LANE0_ADDR /* 0x1180264 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE0     /* 0x07d9e8 */,     8, 1,  1 }, /* Index 1284 */
{     IBU_P2_PHY_AMP1_ADD4_LANE1_ADDR /* 0x1180265 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE1     /* 0x07d9f0 */,     8, 1,  1 }, /* Index 1285 */
{     IBU_P2_PHY_AMP1_ADD4_LANE2_ADDR /* 0x1180266 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE2     /* 0x07d9f8 */,     8, 1,  1 }, /* Index 1286 */
{     IBU_P2_PHY_AMP1_ADD4_LANE3_ADDR /* 0x1180267 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE3     /* 0x07da00 */,     8, 1,  1 }, /* Index 1287 */
{     IBU_P2_PHY_AMP1_ADD5_LANE0_ADDR /* 0x1180268 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE0     /* 0x07da08 */,     8, 1,  1 }, /* Index 1288 */
{     IBU_P2_PHY_AMP1_ADD5_LANE1_ADDR /* 0x1180269 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE1     /* 0x07da10 */,     8, 1,  1 }, /* Index 1289 */
{     IBU_P2_PHY_AMP1_ADD5_LANE2_ADDR /* 0x118026a */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE2     /* 0x07da18 */,     8, 1,  1 }, /* Index 1290 */
{     IBU_P2_PHY_AMP1_ADD5_LANE3_ADDR /* 0x118026b */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE3     /* 0x07da20 */,     8, 1,  1 }, /* Index 1291 */
{     IBU_P2_PHY_AMP1_ADD6_LANE0_ADDR /* 0x118026c */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE0     /* 0x07da28 */,     8, 1,  1 }, /* Index 1292 */
{     IBU_P2_PHY_AMP1_ADD6_LANE1_ADDR /* 0x118026d */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE1     /* 0x07da30 */,     8, 1,  1 }, /* Index 1293 */
{     IBU_P2_PHY_AMP1_ADD6_LANE2_ADDR /* 0x118026e */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE2     /* 0x07da38 */,     8, 1,  1 }, /* Index 1294 */
{     IBU_P2_PHY_AMP1_ADD6_LANE3_ADDR /* 0x118026f */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE3     /* 0x07da40 */,     8, 1,  1 }, /* Index 1295 */
{     IBU_P2_PHY_AMP1_ADD7_LANE0_ADDR /* 0x1180270 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE0     /* 0x07da48 */,     8, 1,  1 }, /* Index 1296 */
{     IBU_P2_PHY_AMP1_ADD7_LANE1_ADDR /* 0x1180271 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE1     /* 0x07da50 */,     8, 1,  1 }, /* Index 1297 */
{     IBU_P2_PHY_AMP1_ADD7_LANE2_ADDR /* 0x1180272 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE2     /* 0x07da58 */,     8, 1,  1 }, /* Index 1298 */
{     IBU_P2_PHY_AMP1_ADD7_LANE3_ADDR /* 0x1180273 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE3     /* 0x07da60 */,     8, 1,  1 }, /* Index 1299 */
{     IBU_P2_PHY_AMP1_ADD8_LANE0_ADDR /* 0x1180274 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE0     /* 0x07da68 */,     8, 1,  1 }, /* Index 1300 */
{     IBU_P2_PHY_AMP1_ADD8_LANE1_ADDR /* 0x1180275 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE1     /* 0x07da70 */,     8, 1,  1 }, /* Index 1301 */
{     IBU_P2_PHY_AMP1_ADD8_LANE2_ADDR /* 0x1180276 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE2     /* 0x07da78 */,     8, 1,  1 }, /* Index 1302 */
{     IBU_P2_PHY_AMP1_ADD8_LANE3_ADDR /* 0x1180277 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE3     /* 0x07da80 */,     8, 1,  1 }, /* Index 1303 */
{     IBU_P2_PHY_AMP1_ADD9_LANE0_ADDR /* 0x1180278 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE0     /* 0x07da88 */,     8, 1,  1 }, /* Index 1304 */
{     IBU_P2_PHY_AMP1_ADD9_LANE1_ADDR /* 0x1180279 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE1     /* 0x07da90 */,     8, 1,  1 }, /* Index 1305 */
{     IBU_P2_PHY_AMP1_ADD9_LANE2_ADDR /* 0x118027a */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE2     /* 0x07da98 */,     8, 1,  1 }, /* Index 1306 */
{     IBU_P2_PHY_AMP1_ADD9_LANE3_ADDR /* 0x118027b */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE3     /* 0x07daa0 */,     8, 1,  1 }, /* Index 1307 */
{    IBU_P2_PHY_AMP1_ADD10_LANE0_ADDR /* 0x118027c */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE0    /* 0x07daa8 */,     8, 1,  1 }, /* Index 1308 */
{    IBU_P2_PHY_AMP1_ADD10_LANE1_ADDR /* 0x118027d */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE1    /* 0x07dab0 */,     8, 1,  1 }, /* Index 1309 */
{    IBU_P2_PHY_AMP1_ADD10_LANE2_ADDR /* 0x118027e */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE2    /* 0x07dab8 */,     8, 1,  1 }, /* Index 1310 */
{    IBU_P2_PHY_AMP1_ADD10_LANE3_ADDR /* 0x118027f */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE3    /* 0x07dac0 */,     8, 1,  1 }, /* Index 1311 */
{    IBU_P2_PHY_AMP1_ADD11_LANE0_ADDR /* 0x1180280 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE0    /* 0x07dac8 */,     8, 1,  1 }, /* Index 1312 */
{    IBU_P2_PHY_AMP1_ADD11_LANE1_ADDR /* 0x1180281 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE1    /* 0x07dad0 */,     8, 1,  1 }, /* Index 1313 */
{    IBU_P2_PHY_AMP1_ADD11_LANE2_ADDR /* 0x1180282 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE2    /* 0x07dad8 */,     8, 1,  1 }, /* Index 1314 */
{    IBU_P2_PHY_AMP1_ADD11_LANE3_ADDR /* 0x1180283 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE3    /* 0x07dae0 */,     8, 1,  1 }, /* Index 1315 */
{    IBU_P2_PHY_AMP1_ADD12_LANE0_ADDR /* 0x1180284 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE0    /* 0x07dae8 */,     8, 1,  1 }, /* Index 1316 */
{    IBU_P2_PHY_AMP1_ADD12_LANE1_ADDR /* 0x1180285 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE1    /* 0x07daf0 */,     8, 1,  1 }, /* Index 1317 */
{    IBU_P2_PHY_AMP1_ADD12_LANE2_ADDR /* 0x1180286 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE2    /* 0x07daf8 */,     8, 1,  1 }, /* Index 1318 */
{    IBU_P2_PHY_AMP1_ADD12_LANE3_ADDR /* 0x1180287 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE3    /* 0x07db00 */,     8, 1,  1 }, /* Index 1319 */
{    IBU_P2_PHY_AMP1_ADD13_LANE0_ADDR /* 0x1180288 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE0    /* 0x07db08 */,     8, 1,  1 }, /* Index 1320 */
{    IBU_P2_PHY_AMP1_ADD13_LANE1_ADDR /* 0x1180289 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE1    /* 0x07db10 */,     8, 1,  1 }, /* Index 1321 */
{    IBU_P2_PHY_AMP1_ADD13_LANE2_ADDR /* 0x118028a */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE2    /* 0x07db18 */,     8, 1,  1 }, /* Index 1322 */
{    IBU_P2_PHY_AMP1_ADD13_LANE3_ADDR /* 0x118028b */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE3    /* 0x07db20 */,     8, 1,  1 }, /* Index 1323 */
{    IBU_P2_PHY_AMP1_ADD14_LANE0_ADDR /* 0x118028c */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE0    /* 0x07db28 */,     8, 1,  1 }, /* Index 1324 */
{    IBU_P2_PHY_AMP1_ADD14_LANE1_ADDR /* 0x118028d */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE1    /* 0x07db30 */,     8, 1,  1 }, /* Index 1325 */
{    IBU_P2_PHY_AMP1_ADD14_LANE2_ADDR /* 0x118028e */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE2    /* 0x07db38 */,     8, 1,  1 }, /* Index 1326 */
{    IBU_P2_PHY_AMP1_ADD14_LANE3_ADDR /* 0x118028f */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE3    /* 0x07db40 */,     8, 1,  1 }, /* Index 1327 */
{    IBU_P2_PHY_AMP1_ADD15_LANE0_ADDR /* 0x1180290 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE0    /* 0x07db48 */,     8, 1,  1 }, /* Index 1328 */
{    IBU_P2_PHY_AMP1_ADD15_LANE1_ADDR /* 0x1180291 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE1    /* 0x07db50 */,     8, 1,  1 }, /* Index 1329 */
{    IBU_P2_PHY_AMP1_ADD15_LANE2_ADDR /* 0x1180292 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE2    /* 0x07db58 */,     8, 1,  1 }, /* Index 1330 */
{    IBU_P2_PHY_AMP1_ADD15_LANE3_ADDR /* 0x1180293 */, PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE3    /* 0x07db60 */,     8, 1,  1 }, /* Index 1331 */
{             IBU_P2_REMOTE_DDS0_ADDR /* 0x1180294 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS0             /* 0x07db68 */,     8, 1,  1 }, /* Index 1332 */
{             IBU_P2_REMOTE_DDS1_ADDR /* 0x1180295 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS1             /* 0x07db70 */,     8, 1,  1 }, /* Index 1333 */
{             IBU_P2_REMOTE_DDS2_ADDR /* 0x1180296 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS2             /* 0x07db78 */,     8, 1,  1 }, /* Index 1334 */
{             IBU_P2_REMOTE_DDS3_ADDR /* 0x1180297 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS3             /* 0x07db80 */,     8, 1,  1 }, /* Index 1335 */
{             IBU_P2_REMOTE_DDS4_ADDR /* 0x1180298 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS4             /* 0x07db88 */,     8, 1,  1 }, /* Index 1336 */
{             IBU_P2_REMOTE_DDS5_ADDR /* 0x1180299 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS5             /* 0x07db90 */,     8, 1,  1 }, /* Index 1337 */
{             IBU_P2_REMOTE_DDS6_ADDR /* 0x118029a */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS6             /* 0x07db98 */,     8, 1,  1 }, /* Index 1338 */
{             IBU_P2_REMOTE_DDS7_ADDR /* 0x118029b */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS7             /* 0x07dba0 */,     8, 1,  1 }, /* Index 1339 */
{             IBU_P2_REMOTE_DDS8_ADDR /* 0x118029c */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS8             /* 0x07dba8 */,     8, 1,  1 }, /* Index 1340 */
{             IBU_P2_REMOTE_DDS9_ADDR /* 0x118029d */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS9             /* 0x07dbb0 */,     8, 1,  1 }, /* Index 1341 */
{            IBU_P2_REMOTE_DDS10_ADDR /* 0x118029e */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS10            /* 0x07dbb8 */,     8, 1,  1 }, /* Index 1342 */
{            IBU_P2_REMOTE_DDS11_ADDR /* 0x118029f */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS11            /* 0x07dbc0 */,     8, 1,  1 }, /* Index 1343 */
{            IBU_P2_REMOTE_DDS12_ADDR /* 0x11802a0 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS12            /* 0x07dbc8 */,     8, 1,  1 }, /* Index 1344 */
{            IBU_P2_REMOTE_DDS13_ADDR /* 0x11802a1 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS13            /* 0x07dbd0 */,     8, 1,  1 }, /* Index 1345 */
{            IBU_P2_REMOTE_DDS14_ADDR /* 0x11802a2 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS14            /* 0x07dbd8 */,     8, 1,  1 }, /* Index 1346 */
{            IBU_P2_REMOTE_DDS15_ADDR /* 0x11802a3 */, PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS15            /* 0x07dbe0 */,     8, 1,  1 }, /* Index 1347 */
{                 IBU_P2_BAD_CSR_ADDR /* 0x1180bad */, PSIF_CSR_ADDR_IBU_P2_BAD_CSR                 /* 0x07dbe8 */,     8, 1,  1 }, /* Index 1348 */
{     IBU_P2_CETUS_CH0_REG15_CSR_ADDR /* 0x11c000f */, PSIF_CSR_ADDR_IBU_P2_CETUS_CH0_REG15_CSR     /* 0x07dbf0 */,     8, 1,  1 }, /* Index 1349 */
{    IBU_P2_CETUS_CH0_REG102_CSR_ADDR /* 0x11c0066 */, PSIF_CSR_ADDR_IBU_P2_CETUS_CH0_REG102_CSR    /* 0x07dbf8 */,     8, 1,  1 }, /* Index 1350 */
{     IBU_P2_CETUS_CH1_REG15_CSR_ADDR /* 0x11c010f */, PSIF_CSR_ADDR_IBU_P2_CETUS_CH1_REG15_CSR     /* 0x07dc00 */,     8, 1,  1 }, /* Index 1351 */
{    IBU_P2_CETUS_CH1_REG102_CSR_ADDR /* 0x11c0166 */, PSIF_CSR_ADDR_IBU_P2_CETUS_CH1_REG102_CSR    /* 0x07dc08 */,     8, 1,  1 }, /* Index 1352 */
{    IBU_P2_CETUS_PLLA_REG24_CSR_ADDR /* 0x11c0218 */, PSIF_CSR_ADDR_IBU_P2_CETUS_PLLA_REG24_CSR    /* 0x07dc10 */,     8, 1,  1 }, /* Index 1353 */
{     IBU_P2_CETUS_CH2_REG15_CSR_ADDR /* 0x11c030f */, PSIF_CSR_ADDR_IBU_P2_CETUS_CH2_REG15_CSR     /* 0x07dc18 */,     8, 1,  1 }, /* Index 1354 */
{    IBU_P2_CETUS_CH2_REG102_CSR_ADDR /* 0x11c0366 */, PSIF_CSR_ADDR_IBU_P2_CETUS_CH2_REG102_CSR    /* 0x07dc20 */,     8, 1,  1 }, /* Index 1355 */
{     IBU_P2_CETUS_CH3_REG15_CSR_ADDR /* 0x11c040f */, PSIF_CSR_ADDR_IBU_P2_CETUS_CH3_REG15_CSR     /* 0x07dc28 */,     8, 1,  1 }, /* Index 1356 */
{    IBU_P2_CETUS_CH3_REG102_CSR_ADDR /* 0x11c0466 */, PSIF_CSR_ADDR_IBU_P2_CETUS_CH3_REG102_CSR    /* 0x07dc30 */,     8, 1,  1 }, /* Index 1357 */
{    IBU_P2_CETUS_PLLB_REG24_CSR_ADDR /* 0x11c0618 */, PSIF_CSR_ADDR_IBU_P2_CETUS_PLLB_REG24_CSR    /* 0x07dc38 */,     8, 1,  1 }, /* Index 1358 */
{           IBU_P2_PMA_RESET_CSR_ADDR /* 0x11e0000 */, PSIF_CSR_ADDR_IBU_P2_PMA_RESET_CSR           /* 0x07dc40 */,     8, 1,  1 }, /* Index 1359 */
{            IBU_P2_PMA_PLLA_CSR_ADDR /* 0x11e0001 */, PSIF_CSR_ADDR_IBU_P2_PMA_PLLA_CSR            /* 0x07dc48 */,     8, 1,  1 }, /* Index 1360 */
{            IBU_P2_PMA_PLLB_CSR_ADDR /* 0x11e0002 */, PSIF_CSR_ADDR_IBU_P2_PMA_PLLB_CSR            /* 0x07dc50 */,     8, 1,  1 }, /* Index 1361 */
{           IBU_P2_PMA_CMODE_CSR_ADDR /* 0x11e0003 */, PSIF_CSR_ADDR_IBU_P2_PMA_CMODE_CSR           /* 0x07dc58 */,     8, 1,  1 }, /* Index 1362 */
{              IBU_P2_PMA_LB_CSR_ADDR /* 0x11e0004 */, PSIF_CSR_ADDR_IBU_P2_PMA_LB_CSR              /* 0x07dc60 */,     8, 1,  1 }, /* Index 1363 */
{             IBU_P2_PMA_PWR_CSR_ADDR /* 0x11e0005 */, PSIF_CSR_ADDR_IBU_P2_PMA_PWR_CSR             /* 0x07dc68 */,     8, 1,  1 }, /* Index 1364 */
{         IBU_P2_PMA_STATUS0_CSR_ADDR /* 0x11e0006 */, PSIF_CSR_ADDR_IBU_P2_PMA_STATUS0_CSR         /* 0x07dc70 */,     8, 1,  1 }, /* Index 1365 */
{         IBU_P2_PMA_STATUS1_CSR_ADDR /* 0x11e0007 */, PSIF_CSR_ADDR_IBU_P2_PMA_STATUS1_CSR         /* 0x07dc78 */,     8, 1,  1 }, /* Index 1366 */
{         IBU_P2_PMA_STATUS2_CSR_ADDR /* 0x11e0008 */, PSIF_CSR_ADDR_IBU_P2_PMA_STATUS2_CSR         /* 0x07dc80 */,     8, 1,  1 }, /* Index 1367 */
{     IBU_P2_PMA_TXWCLK0_CNT_CSR_ADDR /* 0x11e0009 */, PSIF_CSR_ADDR_IBU_P2_PMA_TXWCLK0_CNT_CSR     /* 0x07dc88 */,     8, 1,  1 }, /* Index 1368 */
{     IBU_P2_PMA_TXWCLK0_CNT_VAL_ADDR /* 0x11e000a */, PSIF_CSR_ADDR_IBU_P2_PMA_TXWCLK0_CNT_VAL     /* 0x07dc90 */,     8, 1,  1 }, /* Index 1369 */
{     IBU_P2_PMA_RXWCLK0_CNT_CSR_ADDR /* 0x11e000b */, PSIF_CSR_ADDR_IBU_P2_PMA_RXWCLK0_CNT_CSR     /* 0x07dc98 */,     8, 1,  1 }, /* Index 1370 */
{     IBU_P2_PMA_RXWCLK0_CNT_VAL_ADDR /* 0x11e000c */, PSIF_CSR_ADDR_IBU_P2_PMA_RXWCLK0_CNT_VAL     /* 0x07dca0 */,     8, 1,  1 }, /* Index 1371 */
{      IBU_P2_PMA_IRQ_STATUS_CSR_ADDR /* 0x11e000d */, PSIF_CSR_ADDR_IBU_P2_PMA_IRQ_STATUS_CSR      /* 0x07dca8 */,     8, 1,  1 }, /* Index 1372 */
{        IBU_P2_PMA_IRQ_MASK_CSR_ADDR /* 0x11e000e */, PSIF_CSR_ADDR_IBU_P2_PMA_IRQ_MASK_CSR        /* 0x07dcb0 */,     8, 1,  1 }, /* Index 1373 */
{             IBU_P2_PMA_BAD_CSR_ADDR /* 0x11efbad */, PSIF_CSR_ADDR_IBU_P2_PMA_BAD_CSR             /* 0x07dcb8 */,     8, 1,  1 }, /* Index 1374 */
{          PEU_P_REQ_CREDIT_REG0_ADDR /* 0x1200000 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG0          /* 0x07dcc0 */,     8, 1,  1 }, /* Index 1375 */
{         PEU_NP_REQ_CREDIT_REG0_ADDR /* 0x1200001 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG0         /* 0x07dcc8 */,     8, 1,  1 }, /* Index 1376 */
{       PEU_P_RETURN_CREDIT_REG0_ADDR /* 0x1200002 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG0       /* 0x07dcd0 */,     8, 1,  1 }, /* Index 1377 */
{      PEU_NP_RETURN_CREDIT_REG0_ADDR /* 0x1200003 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG0      /* 0x07dcd8 */,     8, 1,  1 }, /* Index 1378 */
{     PEU_P_RETURN_INTERVAL_REG0_ADDR /* 0x1200004 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG0     /* 0x07dce0 */,     8, 1,  1 }, /* Index 1379 */
{    PEU_NP_RETURN_INTERVAL_REG0_ADDR /* 0x1200005 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG0    /* 0x07dce8 */,     8, 1,  1 }, /* Index 1380 */
{         PEU_Q_NP_TAG_CNT_THLD0_ADDR /* 0x1200006 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD0         /* 0x07dcf0 */,     8, 1,  1 }, /* Index 1381 */
{         PEU_XADM_PH_CDTS_THLD0_ADDR /* 0x1200007 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD0         /* 0x07dcf8 */,     8, 1,  1 }, /* Index 1382 */
{         PEU_XADM_PD_CDTS_THLD0_ADDR /* 0x1200008 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD0         /* 0x07dd00 */,     8, 1,  1 }, /* Index 1383 */
{        PEU_XADM_NPH_CDTS_THLD0_ADDR /* 0x1200009 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD0        /* 0x07dd08 */,     8, 1,  1 }, /* Index 1384 */
{        PEU_XADM_NPD_CDTS_THLD0_ADDR /* 0x120000a */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD0        /* 0x07dd10 */,     8, 1,  1 }, /* Index 1385 */
{          PEU_P_REQ_CREDIT_REG1_ADDR /* 0x120000b */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG1          /* 0x07dd18 */,     8, 1,  1 }, /* Index 1386 */
{         PEU_NP_REQ_CREDIT_REG1_ADDR /* 0x120000c */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG1         /* 0x07dd20 */,     8, 1,  1 }, /* Index 1387 */
{       PEU_P_RETURN_CREDIT_REG1_ADDR /* 0x120000d */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG1       /* 0x07dd28 */,     8, 1,  1 }, /* Index 1388 */
{      PEU_NP_RETURN_CREDIT_REG1_ADDR /* 0x120000e */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG1      /* 0x07dd30 */,     8, 1,  1 }, /* Index 1389 */
{     PEU_P_RETURN_INTERVAL_REG1_ADDR /* 0x120000f */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG1     /* 0x07dd38 */,     8, 1,  1 }, /* Index 1390 */
{    PEU_NP_RETURN_INTERVAL_REG1_ADDR /* 0x1200010 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG1    /* 0x07dd40 */,     8, 1,  1 }, /* Index 1391 */
{         PEU_Q_NP_TAG_CNT_THLD1_ADDR /* 0x1200011 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD1         /* 0x07dd48 */,     8, 1,  1 }, /* Index 1392 */
{         PEU_XADM_PH_CDTS_THLD1_ADDR /* 0x1200012 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD1         /* 0x07dd50 */,     8, 1,  1 }, /* Index 1393 */
{         PEU_XADM_PD_CDTS_THLD1_ADDR /* 0x1200013 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD1         /* 0x07dd58 */,     8, 1,  1 }, /* Index 1394 */
{        PEU_XADM_NPH_CDTS_THLD1_ADDR /* 0x1200014 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD1        /* 0x07dd60 */,     8, 1,  1 }, /* Index 1395 */
{        PEU_XADM_NPD_CDTS_THLD1_ADDR /* 0x1200015 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD1        /* 0x07dd68 */,     8, 1,  1 }, /* Index 1396 */
{          PEU_P_REQ_CREDIT_REG2_ADDR /* 0x1200016 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG2          /* 0x07dd70 */,     8, 1,  1 }, /* Index 1397 */
{         PEU_NP_REQ_CREDIT_REG2_ADDR /* 0x1200017 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG2         /* 0x07dd78 */,     8, 1,  1 }, /* Index 1398 */
{       PEU_P_RETURN_CREDIT_REG2_ADDR /* 0x1200018 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG2       /* 0x07dd80 */,     8, 1,  1 }, /* Index 1399 */
{      PEU_NP_RETURN_CREDIT_REG2_ADDR /* 0x1200019 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG2      /* 0x07dd88 */,     8, 1,  1 }, /* Index 1400 */
{     PEU_P_RETURN_INTERVAL_REG2_ADDR /* 0x120001a */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG2     /* 0x07dd90 */,     8, 1,  1 }, /* Index 1401 */
{    PEU_NP_RETURN_INTERVAL_REG2_ADDR /* 0x120001b */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG2    /* 0x07dd98 */,     8, 1,  1 }, /* Index 1402 */
{         PEU_Q_NP_TAG_CNT_THLD2_ADDR /* 0x120001c */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD2         /* 0x07dda0 */,     8, 1,  1 }, /* Index 1403 */
{         PEU_XADM_PH_CDTS_THLD2_ADDR /* 0x120001d */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD2         /* 0x07dda8 */,     8, 1,  1 }, /* Index 1404 */
{         PEU_XADM_PD_CDTS_THLD2_ADDR /* 0x120001e */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD2         /* 0x07ddb0 */,     8, 1,  1 }, /* Index 1405 */
{        PEU_XADM_NPH_CDTS_THLD2_ADDR /* 0x120001f */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD2        /* 0x07ddb8 */,     8, 1,  1 }, /* Index 1406 */
{        PEU_XADM_NPD_CDTS_THLD2_ADDR /* 0x1200020 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD2        /* 0x07ddc0 */,     8, 1,  1 }, /* Index 1407 */
{          PEU_P_REQ_CREDIT_REG3_ADDR /* 0x1200021 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG3          /* 0x07ddc8 */,     8, 1,  1 }, /* Index 1408 */
{         PEU_NP_REQ_CREDIT_REG3_ADDR /* 0x1200022 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG3         /* 0x07ddd0 */,     8, 1,  1 }, /* Index 1409 */
{       PEU_P_RETURN_CREDIT_REG3_ADDR /* 0x1200023 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG3       /* 0x07ddd8 */,     8, 1,  1 }, /* Index 1410 */
{      PEU_NP_RETURN_CREDIT_REG3_ADDR /* 0x1200024 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG3      /* 0x07dde0 */,     8, 1,  1 }, /* Index 1411 */
{     PEU_P_RETURN_INTERVAL_REG3_ADDR /* 0x1200025 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG3     /* 0x07dde8 */,     8, 1,  1 }, /* Index 1412 */
{    PEU_NP_RETURN_INTERVAL_REG3_ADDR /* 0x1200026 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG3    /* 0x07ddf0 */,     8, 1,  1 }, /* Index 1413 */
{         PEU_Q_NP_TAG_CNT_THLD3_ADDR /* 0x1200027 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD3         /* 0x07ddf8 */,     8, 1,  1 }, /* Index 1414 */
{         PEU_XADM_PH_CDTS_THLD3_ADDR /* 0x1200028 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD3         /* 0x07de00 */,     8, 1,  1 }, /* Index 1415 */
{         PEU_XADM_PD_CDTS_THLD3_ADDR /* 0x1200029 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD3         /* 0x07de08 */,     8, 1,  1 }, /* Index 1416 */
{        PEU_XADM_NPH_CDTS_THLD3_ADDR /* 0x120002a */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD3        /* 0x07de10 */,     8, 1,  1 }, /* Index 1417 */
{        PEU_XADM_NPD_CDTS_THLD3_ADDR /* 0x120002b */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD3        /* 0x07de18 */,     8, 1,  1 }, /* Index 1418 */
{          PEU_P_REQ_CREDIT_REG4_ADDR /* 0x120002c */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG4          /* 0x07de20 */,     8, 1,  1 }, /* Index 1419 */
{         PEU_NP_REQ_CREDIT_REG4_ADDR /* 0x120002d */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG4         /* 0x07de28 */,     8, 1,  1 }, /* Index 1420 */
{       PEU_P_RETURN_CREDIT_REG4_ADDR /* 0x120002e */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG4       /* 0x07de30 */,     8, 1,  1 }, /* Index 1421 */
{      PEU_NP_RETURN_CREDIT_REG4_ADDR /* 0x120002f */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG4      /* 0x07de38 */,     8, 1,  1 }, /* Index 1422 */
{     PEU_P_RETURN_INTERVAL_REG4_ADDR /* 0x1200030 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG4     /* 0x07de40 */,     8, 1,  1 }, /* Index 1423 */
{    PEU_NP_RETURN_INTERVAL_REG4_ADDR /* 0x1200031 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG4    /* 0x07de48 */,     8, 1,  1 }, /* Index 1424 */
{         PEU_Q_NP_TAG_CNT_THLD4_ADDR /* 0x1200032 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD4         /* 0x07de50 */,     8, 1,  1 }, /* Index 1425 */
{         PEU_XADM_PH_CDTS_THLD4_ADDR /* 0x1200033 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD4         /* 0x07de58 */,     8, 1,  1 }, /* Index 1426 */
{         PEU_XADM_PD_CDTS_THLD4_ADDR /* 0x1200034 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD4         /* 0x07de60 */,     8, 1,  1 }, /* Index 1427 */
{        PEU_XADM_NPH_CDTS_THLD4_ADDR /* 0x1200035 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD4        /* 0x07de68 */,     8, 1,  1 }, /* Index 1428 */
{        PEU_XADM_NPD_CDTS_THLD4_ADDR /* 0x1200036 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD4        /* 0x07de70 */,     8, 1,  1 }, /* Index 1429 */
{          PEU_P_REQ_CREDIT_REG5_ADDR /* 0x1200037 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG5          /* 0x07de78 */,     8, 1,  1 }, /* Index 1430 */
{         PEU_NP_REQ_CREDIT_REG5_ADDR /* 0x1200038 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG5         /* 0x07de80 */,     8, 1,  1 }, /* Index 1431 */
{       PEU_P_RETURN_CREDIT_REG5_ADDR /* 0x1200039 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG5       /* 0x07de88 */,     8, 1,  1 }, /* Index 1432 */
{      PEU_NP_RETURN_CREDIT_REG5_ADDR /* 0x120003a */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG5      /* 0x07de90 */,     8, 1,  1 }, /* Index 1433 */
{     PEU_P_RETURN_INTERVAL_REG5_ADDR /* 0x120003b */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG5     /* 0x07de98 */,     8, 1,  1 }, /* Index 1434 */
{    PEU_NP_RETURN_INTERVAL_REG5_ADDR /* 0x120003c */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG5    /* 0x07dea0 */,     8, 1,  1 }, /* Index 1435 */
{         PEU_Q_NP_TAG_CNT_THLD5_ADDR /* 0x120003d */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD5         /* 0x07dea8 */,     8, 1,  1 }, /* Index 1436 */
{         PEU_XADM_PH_CDTS_THLD5_ADDR /* 0x120003e */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD5         /* 0x07deb0 */,     8, 1,  1 }, /* Index 1437 */
{         PEU_XADM_PD_CDTS_THLD5_ADDR /* 0x120003f */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD5         /* 0x07deb8 */,     8, 1,  1 }, /* Index 1438 */
{        PEU_XADM_NPH_CDTS_THLD5_ADDR /* 0x1200040 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD5        /* 0x07dec0 */,     8, 1,  1 }, /* Index 1439 */
{        PEU_XADM_NPD_CDTS_THLD5_ADDR /* 0x1200041 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD5        /* 0x07dec8 */,     8, 1,  1 }, /* Index 1440 */
{          PEU_P_REQ_CREDIT_REG6_ADDR /* 0x1200042 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG6          /* 0x07ded0 */,     8, 1,  1 }, /* Index 1441 */
{         PEU_NP_REQ_CREDIT_REG6_ADDR /* 0x1200043 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG6         /* 0x07ded8 */,     8, 1,  1 }, /* Index 1442 */
{       PEU_P_RETURN_CREDIT_REG6_ADDR /* 0x1200044 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG6       /* 0x07dee0 */,     8, 1,  1 }, /* Index 1443 */
{      PEU_NP_RETURN_CREDIT_REG6_ADDR /* 0x1200045 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG6      /* 0x07dee8 */,     8, 1,  1 }, /* Index 1444 */
{     PEU_P_RETURN_INTERVAL_REG6_ADDR /* 0x1200046 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG6     /* 0x07def0 */,     8, 1,  1 }, /* Index 1445 */
{    PEU_NP_RETURN_INTERVAL_REG6_ADDR /* 0x1200047 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG6    /* 0x07def8 */,     8, 1,  1 }, /* Index 1446 */
{         PEU_Q_NP_TAG_CNT_THLD6_ADDR /* 0x1200048 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD6         /* 0x07df00 */,     8, 1,  1 }, /* Index 1447 */
{         PEU_XADM_PH_CDTS_THLD6_ADDR /* 0x1200049 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD6         /* 0x07df08 */,     8, 1,  1 }, /* Index 1448 */
{         PEU_XADM_PD_CDTS_THLD6_ADDR /* 0x120004a */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD6         /* 0x07df10 */,     8, 1,  1 }, /* Index 1449 */
{        PEU_XADM_NPH_CDTS_THLD6_ADDR /* 0x120004b */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD6        /* 0x07df18 */,     8, 1,  1 }, /* Index 1450 */
{        PEU_XADM_NPD_CDTS_THLD6_ADDR /* 0x120004c */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD6        /* 0x07df20 */,     8, 1,  1 }, /* Index 1451 */
{          PEU_P_REQ_CREDIT_REG7_ADDR /* 0x120004d */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG7          /* 0x07df28 */,     8, 1,  1 }, /* Index 1452 */
{         PEU_NP_REQ_CREDIT_REG7_ADDR /* 0x120004e */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG7         /* 0x07df30 */,     8, 1,  1 }, /* Index 1453 */
{       PEU_P_RETURN_CREDIT_REG7_ADDR /* 0x120004f */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG7       /* 0x07df38 */,     8, 1,  1 }, /* Index 1454 */
{      PEU_NP_RETURN_CREDIT_REG7_ADDR /* 0x1200050 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG7      /* 0x07df40 */,     8, 1,  1 }, /* Index 1455 */
{     PEU_P_RETURN_INTERVAL_REG7_ADDR /* 0x1200051 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG7     /* 0x07df48 */,     8, 1,  1 }, /* Index 1456 */
{    PEU_NP_RETURN_INTERVAL_REG7_ADDR /* 0x1200052 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG7    /* 0x07df50 */,     8, 1,  1 }, /* Index 1457 */
{         PEU_Q_NP_TAG_CNT_THLD7_ADDR /* 0x1200053 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD7         /* 0x07df58 */,     8, 1,  1 }, /* Index 1458 */
{         PEU_XADM_PH_CDTS_THLD7_ADDR /* 0x1200054 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD7         /* 0x07df60 */,     8, 1,  1 }, /* Index 1459 */
{         PEU_XADM_PD_CDTS_THLD7_ADDR /* 0x1200055 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD7         /* 0x07df68 */,     8, 1,  1 }, /* Index 1460 */
{        PEU_XADM_NPH_CDTS_THLD7_ADDR /* 0x1200056 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD7        /* 0x07df70 */,     8, 1,  1 }, /* Index 1461 */
{        PEU_XADM_NPD_CDTS_THLD7_ADDR /* 0x1200057 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD7        /* 0x07df78 */,     8, 1,  1 }, /* Index 1462 */
{          PEU_P_REQ_CREDIT_REG8_ADDR /* 0x1200058 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG8          /* 0x07df80 */,     8, 1,  1 }, /* Index 1463 */
{         PEU_NP_REQ_CREDIT_REG8_ADDR /* 0x1200059 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG8         /* 0x07df88 */,     8, 1,  1 }, /* Index 1464 */
{       PEU_P_RETURN_CREDIT_REG8_ADDR /* 0x120005a */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG8       /* 0x07df90 */,     8, 1,  1 }, /* Index 1465 */
{      PEU_NP_RETURN_CREDIT_REG8_ADDR /* 0x120005b */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG8      /* 0x07df98 */,     8, 1,  1 }, /* Index 1466 */
{     PEU_P_RETURN_INTERVAL_REG8_ADDR /* 0x120005c */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG8     /* 0x07dfa0 */,     8, 1,  1 }, /* Index 1467 */
{    PEU_NP_RETURN_INTERVAL_REG8_ADDR /* 0x120005d */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG8    /* 0x07dfa8 */,     8, 1,  1 }, /* Index 1468 */
{         PEU_Q_NP_TAG_CNT_THLD8_ADDR /* 0x120005e */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD8         /* 0x07dfb0 */,     8, 1,  1 }, /* Index 1469 */
{         PEU_XADM_PH_CDTS_THLD8_ADDR /* 0x120005f */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD8         /* 0x07dfb8 */,     8, 1,  1 }, /* Index 1470 */
{         PEU_XADM_PD_CDTS_THLD8_ADDR /* 0x1200060 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD8         /* 0x07dfc0 */,     8, 1,  1 }, /* Index 1471 */
{        PEU_XADM_NPH_CDTS_THLD8_ADDR /* 0x1200061 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD8        /* 0x07dfc8 */,     8, 1,  1 }, /* Index 1472 */
{        PEU_XADM_NPD_CDTS_THLD8_ADDR /* 0x1200062 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD8        /* 0x07dfd0 */,     8, 1,  1 }, /* Index 1473 */
{          PEU_P_REQ_CREDIT_REG9_ADDR /* 0x1200063 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG9          /* 0x07dfd8 */,     8, 1,  1 }, /* Index 1474 */
{         PEU_NP_REQ_CREDIT_REG9_ADDR /* 0x1200064 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG9         /* 0x07dfe0 */,     8, 1,  1 }, /* Index 1475 */
{       PEU_P_RETURN_CREDIT_REG9_ADDR /* 0x1200065 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG9       /* 0x07dfe8 */,     8, 1,  1 }, /* Index 1476 */
{      PEU_NP_RETURN_CREDIT_REG9_ADDR /* 0x1200066 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG9      /* 0x07dff0 */,     8, 1,  1 }, /* Index 1477 */
{     PEU_P_RETURN_INTERVAL_REG9_ADDR /* 0x1200067 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG9     /* 0x07dff8 */,     8, 1,  1 }, /* Index 1478 */
{    PEU_NP_RETURN_INTERVAL_REG9_ADDR /* 0x1200068 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG9    /* 0x07e000 */,     8, 1,  1 }, /* Index 1479 */
{         PEU_Q_NP_TAG_CNT_THLD9_ADDR /* 0x1200069 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD9         /* 0x07e008 */,     8, 1,  1 }, /* Index 1480 */
{         PEU_XADM_PH_CDTS_THLD9_ADDR /* 0x120006a */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD9         /* 0x07e010 */,     8, 1,  1 }, /* Index 1481 */
{         PEU_XADM_PD_CDTS_THLD9_ADDR /* 0x120006b */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD9         /* 0x07e018 */,     8, 1,  1 }, /* Index 1482 */
{        PEU_XADM_NPH_CDTS_THLD9_ADDR /* 0x120006c */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD9        /* 0x07e020 */,     8, 1,  1 }, /* Index 1483 */
{        PEU_XADM_NPD_CDTS_THLD9_ADDR /* 0x120006d */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD9        /* 0x07e028 */,     8, 1,  1 }, /* Index 1484 */
{         PEU_P_REQ_CREDIT_REG10_ADDR /* 0x120006e */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG10         /* 0x07e030 */,     8, 1,  1 }, /* Index 1485 */
{        PEU_NP_REQ_CREDIT_REG10_ADDR /* 0x120006f */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG10        /* 0x07e038 */,     8, 1,  1 }, /* Index 1486 */
{      PEU_P_RETURN_CREDIT_REG10_ADDR /* 0x1200070 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG10      /* 0x07e040 */,     8, 1,  1 }, /* Index 1487 */
{     PEU_NP_RETURN_CREDIT_REG10_ADDR /* 0x1200071 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG10     /* 0x07e048 */,     8, 1,  1 }, /* Index 1488 */
{    PEU_P_RETURN_INTERVAL_REG10_ADDR /* 0x1200072 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG10    /* 0x07e050 */,     8, 1,  1 }, /* Index 1489 */
{   PEU_NP_RETURN_INTERVAL_REG10_ADDR /* 0x1200073 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG10   /* 0x07e058 */,     8, 1,  1 }, /* Index 1490 */
{        PEU_Q_NP_TAG_CNT_THLD10_ADDR /* 0x1200074 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD10        /* 0x07e060 */,     8, 1,  1 }, /* Index 1491 */
{        PEU_XADM_PH_CDTS_THLD10_ADDR /* 0x1200075 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD10        /* 0x07e068 */,     8, 1,  1 }, /* Index 1492 */
{        PEU_XADM_PD_CDTS_THLD10_ADDR /* 0x1200076 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD10        /* 0x07e070 */,     8, 1,  1 }, /* Index 1493 */
{       PEU_XADM_NPH_CDTS_THLD10_ADDR /* 0x1200077 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD10       /* 0x07e078 */,     8, 1,  1 }, /* Index 1494 */
{       PEU_XADM_NPD_CDTS_THLD10_ADDR /* 0x1200078 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD10       /* 0x07e080 */,     8, 1,  1 }, /* Index 1495 */
{         PEU_P_REQ_CREDIT_REG11_ADDR /* 0x1200079 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG11         /* 0x07e088 */,     8, 1,  1 }, /* Index 1496 */
{        PEU_NP_REQ_CREDIT_REG11_ADDR /* 0x120007a */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG11        /* 0x07e090 */,     8, 1,  1 }, /* Index 1497 */
{      PEU_P_RETURN_CREDIT_REG11_ADDR /* 0x120007b */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG11      /* 0x07e098 */,     8, 1,  1 }, /* Index 1498 */
{     PEU_NP_RETURN_CREDIT_REG11_ADDR /* 0x120007c */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG11     /* 0x07e0a0 */,     8, 1,  1 }, /* Index 1499 */
{    PEU_P_RETURN_INTERVAL_REG11_ADDR /* 0x120007d */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG11    /* 0x07e0a8 */,     8, 1,  1 }, /* Index 1500 */
{   PEU_NP_RETURN_INTERVAL_REG11_ADDR /* 0x120007e */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG11   /* 0x07e0b0 */,     8, 1,  1 }, /* Index 1501 */
{        PEU_Q_NP_TAG_CNT_THLD11_ADDR /* 0x120007f */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD11        /* 0x07e0b8 */,     8, 1,  1 }, /* Index 1502 */
{        PEU_XADM_PH_CDTS_THLD11_ADDR /* 0x1200080 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD11        /* 0x07e0c0 */,     8, 1,  1 }, /* Index 1503 */
{        PEU_XADM_PD_CDTS_THLD11_ADDR /* 0x1200081 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD11        /* 0x07e0c8 */,     8, 1,  1 }, /* Index 1504 */
{       PEU_XADM_NPH_CDTS_THLD11_ADDR /* 0x1200082 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD11       /* 0x07e0d0 */,     8, 1,  1 }, /* Index 1505 */
{       PEU_XADM_NPD_CDTS_THLD11_ADDR /* 0x1200083 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD11       /* 0x07e0d8 */,     8, 1,  1 }, /* Index 1506 */
{         PEU_P_REQ_CREDIT_REG12_ADDR /* 0x1200084 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG12         /* 0x07e0e0 */,     8, 1,  1 }, /* Index 1507 */
{        PEU_NP_REQ_CREDIT_REG12_ADDR /* 0x1200085 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG12        /* 0x07e0e8 */,     8, 1,  1 }, /* Index 1508 */
{      PEU_P_RETURN_CREDIT_REG12_ADDR /* 0x1200086 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG12      /* 0x07e0f0 */,     8, 1,  1 }, /* Index 1509 */
{     PEU_NP_RETURN_CREDIT_REG12_ADDR /* 0x1200087 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG12     /* 0x07e0f8 */,     8, 1,  1 }, /* Index 1510 */
{    PEU_P_RETURN_INTERVAL_REG12_ADDR /* 0x1200088 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG12    /* 0x07e100 */,     8, 1,  1 }, /* Index 1511 */
{   PEU_NP_RETURN_INTERVAL_REG12_ADDR /* 0x1200089 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG12   /* 0x07e108 */,     8, 1,  1 }, /* Index 1512 */
{        PEU_Q_NP_TAG_CNT_THLD12_ADDR /* 0x120008a */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD12        /* 0x07e110 */,     8, 1,  1 }, /* Index 1513 */
{        PEU_XADM_PH_CDTS_THLD12_ADDR /* 0x120008b */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD12        /* 0x07e118 */,     8, 1,  1 }, /* Index 1514 */
{        PEU_XADM_PD_CDTS_THLD12_ADDR /* 0x120008c */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD12        /* 0x07e120 */,     8, 1,  1 }, /* Index 1515 */
{       PEU_XADM_NPH_CDTS_THLD12_ADDR /* 0x120008d */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD12       /* 0x07e128 */,     8, 1,  1 }, /* Index 1516 */
{       PEU_XADM_NPD_CDTS_THLD12_ADDR /* 0x120008e */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD12       /* 0x07e130 */,     8, 1,  1 }, /* Index 1517 */
{         PEU_P_REQ_CREDIT_REG13_ADDR /* 0x120008f */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG13         /* 0x07e138 */,     8, 1,  1 }, /* Index 1518 */
{        PEU_NP_REQ_CREDIT_REG13_ADDR /* 0x1200090 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG13        /* 0x07e140 */,     8, 1,  1 }, /* Index 1519 */
{      PEU_P_RETURN_CREDIT_REG13_ADDR /* 0x1200091 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG13      /* 0x07e148 */,     8, 1,  1 }, /* Index 1520 */
{     PEU_NP_RETURN_CREDIT_REG13_ADDR /* 0x1200092 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG13     /* 0x07e150 */,     8, 1,  1 }, /* Index 1521 */
{    PEU_P_RETURN_INTERVAL_REG13_ADDR /* 0x1200093 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG13    /* 0x07e158 */,     8, 1,  1 }, /* Index 1522 */
{   PEU_NP_RETURN_INTERVAL_REG13_ADDR /* 0x1200094 */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG13   /* 0x07e160 */,     8, 1,  1 }, /* Index 1523 */
{        PEU_Q_NP_TAG_CNT_THLD13_ADDR /* 0x1200095 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD13        /* 0x07e168 */,     8, 1,  1 }, /* Index 1524 */
{        PEU_XADM_PH_CDTS_THLD13_ADDR /* 0x1200096 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD13        /* 0x07e170 */,     8, 1,  1 }, /* Index 1525 */
{        PEU_XADM_PD_CDTS_THLD13_ADDR /* 0x1200097 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD13        /* 0x07e178 */,     8, 1,  1 }, /* Index 1526 */
{       PEU_XADM_NPH_CDTS_THLD13_ADDR /* 0x1200098 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD13       /* 0x07e180 */,     8, 1,  1 }, /* Index 1527 */
{       PEU_XADM_NPD_CDTS_THLD13_ADDR /* 0x1200099 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD13       /* 0x07e188 */,     8, 1,  1 }, /* Index 1528 */
{         PEU_P_REQ_CREDIT_REG14_ADDR /* 0x120009a */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG14         /* 0x07e190 */,     8, 1,  1 }, /* Index 1529 */
{        PEU_NP_REQ_CREDIT_REG14_ADDR /* 0x120009b */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG14        /* 0x07e198 */,     8, 1,  1 }, /* Index 1530 */
{      PEU_P_RETURN_CREDIT_REG14_ADDR /* 0x120009c */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG14      /* 0x07e1a0 */,     8, 1,  1 }, /* Index 1531 */
{     PEU_NP_RETURN_CREDIT_REG14_ADDR /* 0x120009d */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG14     /* 0x07e1a8 */,     8, 1,  1 }, /* Index 1532 */
{    PEU_P_RETURN_INTERVAL_REG14_ADDR /* 0x120009e */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG14    /* 0x07e1b0 */,     8, 1,  1 }, /* Index 1533 */
{   PEU_NP_RETURN_INTERVAL_REG14_ADDR /* 0x120009f */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG14   /* 0x07e1b8 */,     8, 1,  1 }, /* Index 1534 */
{        PEU_Q_NP_TAG_CNT_THLD14_ADDR /* 0x12000a0 */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD14        /* 0x07e1c0 */,     8, 1,  1 }, /* Index 1535 */
{        PEU_XADM_PH_CDTS_THLD14_ADDR /* 0x12000a1 */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD14        /* 0x07e1c8 */,     8, 1,  1 }, /* Index 1536 */
{        PEU_XADM_PD_CDTS_THLD14_ADDR /* 0x12000a2 */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD14        /* 0x07e1d0 */,     8, 1,  1 }, /* Index 1537 */
{       PEU_XADM_NPH_CDTS_THLD14_ADDR /* 0x12000a3 */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD14       /* 0x07e1d8 */,     8, 1,  1 }, /* Index 1538 */
{       PEU_XADM_NPD_CDTS_THLD14_ADDR /* 0x12000a4 */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD14       /* 0x07e1e0 */,     8, 1,  1 }, /* Index 1539 */
{         PEU_P_REQ_CREDIT_REG15_ADDR /* 0x12000a5 */, PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG15         /* 0x07e1e8 */,     8, 1,  1 }, /* Index 1540 */
{        PEU_NP_REQ_CREDIT_REG15_ADDR /* 0x12000a6 */, PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG15        /* 0x07e1f0 */,     8, 1,  1 }, /* Index 1541 */
{      PEU_P_RETURN_CREDIT_REG15_ADDR /* 0x12000a7 */, PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG15      /* 0x07e1f8 */,     8, 1,  1 }, /* Index 1542 */
{     PEU_NP_RETURN_CREDIT_REG15_ADDR /* 0x12000a8 */, PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG15     /* 0x07e200 */,     8, 1,  1 }, /* Index 1543 */
{    PEU_P_RETURN_INTERVAL_REG15_ADDR /* 0x12000a9 */, PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG15    /* 0x07e208 */,     8, 1,  1 }, /* Index 1544 */
{   PEU_NP_RETURN_INTERVAL_REG15_ADDR /* 0x12000aa */, PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG15   /* 0x07e210 */,     8, 1,  1 }, /* Index 1545 */
{        PEU_Q_NP_TAG_CNT_THLD15_ADDR /* 0x12000ab */, PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD15        /* 0x07e218 */,     8, 1,  1 }, /* Index 1546 */
{        PEU_XADM_PH_CDTS_THLD15_ADDR /* 0x12000ac */, PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD15        /* 0x07e220 */,     8, 1,  1 }, /* Index 1547 */
{        PEU_XADM_PD_CDTS_THLD15_ADDR /* 0x12000ad */, PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD15        /* 0x07e228 */,     8, 1,  1 }, /* Index 1548 */
{       PEU_XADM_NPH_CDTS_THLD15_ADDR /* 0x12000ae */, PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD15       /* 0x07e230 */,     8, 1,  1 }, /* Index 1549 */
{       PEU_XADM_NPD_CDTS_THLD15_ADDR /* 0x12000af */, PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD15       /* 0x07e238 */,     8, 1,  1 }, /* Index 1550 */
{                 PEU_HPRI_Q_REG_ADDR /* 0x12000b0 */, PSIF_CSR_ADDR_PEU_HPRI_Q_REG                 /* 0x07e240 */,     8, 1,  1 }, /* Index 1551 */
{         PEU_HPRI_RR_WEIGHT_REG_ADDR /* 0x12000b1 */, PSIF_CSR_ADDR_PEU_HPRI_RR_WEIGHT_REG         /* 0x07e248 */,     8, 1,  1 }, /* Index 1552 */
{        PEU_MAX_RD_REQ_SIZE_REG_ADDR /* 0x12000b2 */, PSIF_CSR_ADDR_PEU_MAX_RD_REQ_SIZE_REG        /* 0x07e250 */,     8, 1,  1 }, /* Index 1553 */
{      PEU_DIRTY_PCI_TAG_CTL_REG_ADDR /* 0x12000b3 */, PSIF_CSR_ADDR_PEU_DIRTY_PCI_TAG_CTL_REG      /* 0x07e258 */,     8, 1,  1 }, /* Index 1554 */
{          PEU_MASTER_VEC_ST_REG_ADDR /* 0x12000b4 */, PSIF_CSR_ADDR_PEU_MASTER_VEC_ST_REG          /* 0x07e260 */,     8, 1,  1 }, /* Index 1555 */
{         PEU_MASTER_VEC_MSK_REG_ADDR /* 0x12000b5 */, PSIF_CSR_ADDR_PEU_MASTER_VEC_MSK_REG         /* 0x07e268 */,     8, 1,  1 }, /* Index 1556 */
{            PEU_FLR_REQ_DBG_REG_ADDR /* 0x12000b6 */, PSIF_CSR_ADDR_PEU_FLR_REQ_DBG_REG            /* 0x07e270 */,     8, 1,  1 }, /* Index 1557 */
{           PEU_FLR_DONE_DBG_REG_ADDR /* 0x12000b7 */, PSIF_CSR_ADDR_PEU_FLR_DONE_DBG_REG           /* 0x07e278 */,     8, 1,  1 }, /* Index 1558 */
{         PEU_FLR_REQ_VEC_ST_REG_ADDR /* 0x12000b8 */, PSIF_CSR_ADDR_PEU_FLR_REQ_VEC_ST_REG         /* 0x07e280 */,     8, 1,  1 }, /* Index 1559 */
{        PEU_FLR_DONE_VEC_ST_REG_ADDR /* 0x12000b9 */, PSIF_CSR_ADDR_PEU_FLR_DONE_VEC_ST_REG        /* 0x07e288 */,     8, 1,  1 }, /* Index 1560 */
{           PEU_TAG_POOL_DBG_REG_ADDR /* 0x12000ba */, PSIF_CSR_ADDR_PEU_TAG_POOL_DBG_REG           /* 0x07e290 */,     8, 1,  1 }, /* Index 1561 */
{              PEU_LTSSM_DBG_REG_ADDR /* 0x12000bb */, PSIF_CSR_ADDR_PEU_LTSSM_DBG_REG              /* 0x07e298 */,     8, 1,  1 }, /* Index 1562 */
{            PEU_TSU_REQ_DBG_REG_ADDR /* 0x12000bc */, PSIF_CSR_ADDR_PEU_TSU_REQ_DBG_REG            /* 0x07e2a0 */,     8, 1,  1 }, /* Index 1563 */
{            PEU_EPS_REQ_DBG_REG_ADDR /* 0x12000bd */, PSIF_CSR_ADDR_PEU_EPS_REQ_DBG_REG            /* 0x07e2a8 */,     8, 1,  1 }, /* Index 1564 */
{              PEU_P_REQ_DBG_REG_ADDR /* 0x12000be */, PSIF_CSR_ADDR_PEU_P_REQ_DBG_REG              /* 0x07e2b0 */,     8, 1,  1 }, /* Index 1565 */
{             PEU_NP_REQ_DBG_REG_ADDR /* 0x12000bf */, PSIF_CSR_ADDR_PEU_NP_REQ_DBG_REG             /* 0x07e2b8 */,     8, 1,  1 }, /* Index 1566 */
{           PEU_DBI_CSR_WDAT_REG_ADDR /* 0x12000c0 */, PSIF_CSR_ADDR_PEU_DBI_CSR_WDAT_REG           /* 0x07e2c0 */,     8, 1,  1 }, /* Index 1567 */
{            PEU_DBI_CSR_CMD_REG_ADDR /* 0x12000c1 */, PSIF_CSR_ADDR_PEU_DBI_CSR_CMD_REG            /* 0x07e2c8 */,     8, 1,  1 }, /* Index 1568 */
{         PEU_DBI_CSR_STATUS_REG_ADDR /* 0x12000c2 */, PSIF_CSR_ADDR_PEU_DBI_CSR_STATUS_REG         /* 0x07e2d0 */,     8, 1,  1 }, /* Index 1569 */
{           PEU_DBI_CSR_RDAT_REG_ADDR /* 0x12000c3 */, PSIF_CSR_ADDR_PEU_DBI_CSR_RDAT_REG           /* 0x07e2d8 */,     8, 1,  1 }, /* Index 1570 */
{     PEU_CPL_BUF_WATER_MARK_REG_ADDR /* 0x12000c4 */, PSIF_CSR_ADDR_PEU_CPL_BUF_WATER_MARK_REG     /* 0x07e2e0 */,     8, 1,  1 }, /* Index 1571 */
{       PEU_ARB_CPL_BUF_THLD_REG_ADDR /* 0x12000c5 */, PSIF_CSR_ADDR_PEU_ARB_CPL_BUF_THLD_REG       /* 0x07e2e8 */,     8, 1,  1 }, /* Index 1572 */
{         PEU_CPL_BUF_CREDIT_REG_ADDR /* 0x12000c6 */, PSIF_CSR_ADDR_PEU_CPL_BUF_CREDIT_REG         /* 0x07e2f0 */,     8, 1,  1 }, /* Index 1573 */
{         PEU_CPL_MAX_CREDIT_REG_ADDR /* 0x12000c7 */, PSIF_CSR_ADDR_PEU_CPL_MAX_CREDIT_REG         /* 0x07e2f8 */,     8, 1,  1 }, /* Index 1574 */
{           PEU_PCIE_PHY_CTL_REG_ADDR /* 0x12000c8 */, PSIF_CSR_ADDR_PEU_PCIE_PHY_CTL_REG           /* 0x07e300 */,     8, 1,  1 }, /* Index 1575 */
{              PEU_FORCE_ERR_REG_ADDR /* 0x12000c9 */, PSIF_CSR_ADDR_PEU_FORCE_ERR_REG              /* 0x07e308 */,     8, 1,  1 }, /* Index 1576 */
{            PEU_MSG_GEN_QW0_REG_ADDR /* 0x12000ca */, PSIF_CSR_ADDR_PEU_MSG_GEN_QW0_REG            /* 0x07e310 */,     8, 1,  1 }, /* Index 1577 */
{            PEU_MSG_GEN_QW1_REG_ADDR /* 0x12000cb */, PSIF_CSR_ADDR_PEU_MSG_GEN_QW1_REG            /* 0x07e318 */,     8, 1,  1 }, /* Index 1578 */
{             PEU_MSG_STATUS_REG_ADDR /* 0x12000cc */, PSIF_CSR_ADDR_PEU_MSG_STATUS_REG             /* 0x07e320 */,     8, 1,  1 }, /* Index 1579 */
{            PEU_ATS_MSG_QW0_REG_ADDR /* 0x12000cd */, PSIF_CSR_ADDR_PEU_ATS_MSG_QW0_REG            /* 0x07e328 */,     8, 1,  1 }, /* Index 1580 */
{            PEU_ATS_MSG_QW1_REG_ADDR /* 0x12000ce */, PSIF_CSR_ADDR_PEU_ATS_MSG_QW1_REG            /* 0x07e330 */,     8, 1,  1 }, /* Index 1581 */
{   PEU_SRAM_CORR_ERR_STATUS_REG_ADDR /* 0x12000cf */, PSIF_CSR_ADDR_PEU_SRAM_CORR_ERR_STATUS_REG   /* 0x07e338 */,     8, 1,  1 }, /* Index 1582 */
{             PEU_HI_PRI_MSK_REG_ADDR /* 0x12000d0 */, PSIF_CSR_ADDR_PEU_HI_PRI_MSK_REG             /* 0x07e340 */,     8, 1,  1 }, /* Index 1583 */
{        PEU_HI_PRI_INTR_VEC_REG_ADDR /* 0x12000d1 */, PSIF_CSR_ADDR_PEU_HI_PRI_INTR_VEC_REG        /* 0x07e348 */,     8, 1,  1 }, /* Index 1584 */
{         PEU_FATAL_INTR_MSK_REG_ADDR /* 0x12000d2 */, PSIF_CSR_ADDR_PEU_FATAL_INTR_MSK_REG         /* 0x07e350 */,     8, 1,  1 }, /* Index 1585 */
{         PEU_FATAL_INTR_VEC_REG_ADDR /* 0x12000d3 */, PSIF_CSR_ADDR_PEU_FATAL_INTR_VEC_REG         /* 0x07e358 */,     8, 1,  1 }, /* Index 1586 */
{           PEU_INTR_REQ_DBG_REG_ADDR /* 0x12000d4 */, PSIF_CSR_ADDR_PEU_INTR_REQ_DBG_REG           /* 0x07e360 */,     8, 1,  1 }, /* Index 1587 */
{        PEU_TSU_PIO_REQ_DBG_REG_ADDR /* 0x12000d5 */, PSIF_CSR_ADDR_PEU_TSU_PIO_REQ_DBG_REG        /* 0x07e368 */,     8, 1,  1 }, /* Index 1588 */
{       PEU_EPRM_PIO_REQ_DBG_REG_ADDR /* 0x12000d6 */, PSIF_CSR_ADDR_PEU_EPRM_PIO_REQ_DBG_REG       /* 0x07e370 */,     8, 1,  1 }, /* Index 1589 */
{       PEU_INTR_PIO_REQ_DBG_REG_ADDR /* 0x12000d7 */, PSIF_CSR_ADDR_PEU_INTR_PIO_REQ_DBG_REG       /* 0x07e378 */,     8, 1,  1 }, /* Index 1590 */
{          PEU_CPL_FLUSH_DBG_REG_ADDR /* 0x12000d8 */, PSIF_CSR_ADDR_PEU_CPL_FLUSH_DBG_REG          /* 0x07e380 */,     8, 1,  1 }, /* Index 1591 */
{            PEU_EP_DIAG_DBG_REG_ADDR /* 0x12000d9 */, PSIF_CSR_ADDR_PEU_EP_DIAG_DBG_REG            /* 0x07e388 */,     8, 1,  1 }, /* Index 1592 */
{            PEU_CXPL_EI_DBG_REG_ADDR /* 0x12000da */, PSIF_CSR_ADDR_PEU_CXPL_EI_DBG_REG            /* 0x07e390 */,     8, 1,  1 }, /* Index 1593 */
{               PEU_CXPL_DBG_REG_ADDR /* 0x12000db */, PSIF_CSR_ADDR_PEU_CXPL_DBG_REG               /* 0x07e398 */,     8, 1,  1 }, /* Index 1594 */
{            PEU_FF_DC_1_DBG_REG_ADDR /* 0x12000dc */, PSIF_CSR_ADDR_PEU_FF_DC_1_DBG_REG            /* 0x07e3a0 */,     8, 1,  1 }, /* Index 1595 */
{            PEU_FF_DC_2_DBG_REG_ADDR /* 0x12000dd */, PSIF_CSR_ADDR_PEU_FF_DC_2_DBG_REG            /* 0x07e3a8 */,     8, 1,  1 }, /* Index 1596 */
{              PEU_FORCE_FLR_REG_ADDR /* 0x12000de */, PSIF_CSR_ADDR_PEU_FORCE_FLR_REG              /* 0x07e3b0 */,     8, 1,  1 }, /* Index 1597 */
{         PEU_CSR_PEU_CTL_ST_REG_ADDR /* 0x1200100 */, PSIF_CSR_ADDR_PEU_CSR_PEU_CTL_ST_REG         /* 0x07e3b8 */,     8, 1,  1 }, /* Index 1598 */
{         PEU_CSR_PEU_INT_ST_REG_ADDR /* 0x1200101 */, PSIF_CSR_ADDR_PEU_CSR_PEU_INT_ST_REG         /* 0x07e3c0 */,     8, 1,  1 }, /* Index 1599 */
{        PEU_CSR_PEU_INT_MSK_REG_ADDR /* 0x1200102 */, PSIF_CSR_ADDR_PEU_CSR_PEU_INT_MSK_REG        /* 0x07e3c8 */,     8, 1,  1 }, /* Index 1600 */
{        PEU_CSR_LP_INTR_VEC_REG_ADDR /* 0x1200103 */, PSIF_CSR_ADDR_PEU_CSR_LP_INTR_VEC_REG        /* 0x07e3d0 */,     8, 1,  1 }, /* Index 1601 */
{       PEU_CSR_LPRI_INT_MSK_REG_ADDR /* 0x1200104 */, PSIF_CSR_ADDR_PEU_CSR_LPRI_INT_MSK_REG       /* 0x07e3d8 */,     8, 1,  1 }, /* Index 1602 */
{         PEU_CSR_SER_INT_ST_REG_ADDR /* 0x1200105 */, PSIF_CSR_ADDR_PEU_CSR_SER_INT_ST_REG         /* 0x07e3e0 */,     8, 1,  1 }, /* Index 1603 */
{        PEU_TSU_FLR_REQ_DBG_REG_ADDR /* 0x12001b0 */, PSIF_CSR_ADDR_PEU_TSU_FLR_REQ_DBG_REG        /* 0x07e3e8 */,     8, 1,  1 }, /* Index 1604 */
{       PEU_TSU_FLR_DONE_DBG_REG_ADDR /* 0x12001b1 */, PSIF_CSR_ADDR_PEU_TSU_FLR_DONE_DBG_REG       /* 0x07e3f0 */,     8, 1,  1 }, /* Index 1605 */
{        PEU_EPS_FLR_REQ_DBG_REG_ADDR /* 0x12001b2 */, PSIF_CSR_ADDR_PEU_EPS_FLR_REQ_DBG_REG        /* 0x07e3f8 */,     8, 1,  1 }, /* Index 1606 */
{       PEU_EPS_FLR_DONE_DBG_REG_ADDR /* 0x12001b3 */, PSIF_CSR_ADDR_PEU_EPS_FLR_DONE_DBG_REG       /* 0x07e400 */,     8, 1,  1 }, /* Index 1607 */
{          PEU_PIPE_CSR_WDAT_REG_ADDR /* 0x12001b4 */, PSIF_CSR_ADDR_PEU_PIPE_CSR_WDAT_REG          /* 0x07e408 */,     8, 1,  1 }, /* Index 1608 */
{           PEU_PIPE_CSR_CMD_REG_ADDR /* 0x12001b5 */, PSIF_CSR_ADDR_PEU_PIPE_CSR_CMD_REG           /* 0x07e410 */,     8, 1,  1 }, /* Index 1609 */
{        PEU_PIPE_CSR_STATUS_REG_ADDR /* 0x12001b6 */, PSIF_CSR_ADDR_PEU_PIPE_CSR_STATUS_REG        /* 0x07e418 */,     8, 1,  1 }, /* Index 1610 */
{          PEU_PIPE_CSR_RDAT_REG_ADDR /* 0x12001b7 */, PSIF_CSR_ADDR_PEU_PIPE_CSR_RDAT_REG          /* 0x07e420 */,     8, 1,  1 }, /* Index 1611 */
{           PEU_SER_CSR_WDAT_REG_ADDR /* 0x12001b8 */, PSIF_CSR_ADDR_PEU_SER_CSR_WDAT_REG           /* 0x07e428 */,     8, 1,  1 }, /* Index 1612 */
{            PEU_SER_CSR_CMD_REG_ADDR /* 0x12001b9 */, PSIF_CSR_ADDR_PEU_SER_CSR_CMD_REG            /* 0x07e430 */,     8, 1,  1 }, /* Index 1613 */
{         PEU_SER_CSR_STATUS_REG_ADDR /* 0x12001ba */, PSIF_CSR_ADDR_PEU_SER_CSR_STATUS_REG         /* 0x07e438 */,     8, 1,  1 }, /* Index 1614 */
{           PEU_SER_CSR_RDAT_REG_ADDR /* 0x12001bb */, PSIF_CSR_ADDR_PEU_SER_CSR_RDAT_REG           /* 0x07e440 */,     8, 1,  1 }, /* Index 1615 */
{         PEU_SER_1_CSR_WDAT_REG_ADDR /* 0x12001bc */, PSIF_CSR_ADDR_PEU_SER_1_CSR_WDAT_REG         /* 0x07e448 */,     8, 1,  1 }, /* Index 1616 */
{          PEU_SER_1_CSR_CMD_REG_ADDR /* 0x12001bd */, PSIF_CSR_ADDR_PEU_SER_1_CSR_CMD_REG          /* 0x07e450 */,     8, 1,  1 }, /* Index 1617 */
{       PEU_SER_1_CSR_STATUS_REG_ADDR /* 0x12001be */, PSIF_CSR_ADDR_PEU_SER_1_CSR_STATUS_REG       /* 0x07e458 */,     8, 1,  1 }, /* Index 1618 */
{         PEU_SER_1_CSR_RDAT_REG_ADDR /* 0x12001bf */, PSIF_CSR_ADDR_PEU_SER_1_CSR_RDAT_REG         /* 0x07e460 */,     8, 1,  1 }, /* Index 1619 */
{         PEU_SER_DFE_ST_SEL_REG_ADDR /* 0x12001c0 */, PSIF_CSR_ADDR_PEU_SER_DFE_ST_SEL_REG         /* 0x07e468 */,     8, 1,  1 }, /* Index 1620 */
{           PEU_SER_DFE_ST_0_REG_ADDR /* 0x12001c1 */, PSIF_CSR_ADDR_PEU_SER_DFE_ST_0_REG           /* 0x07e470 */,     8, 1,  1 }, /* Index 1621 */
{           PEU_SER_DFE_ST_1_REG_ADDR /* 0x12001c2 */, PSIF_CSR_ADDR_PEU_SER_DFE_ST_1_REG           /* 0x07e478 */,     8, 1,  1 }, /* Index 1622 */
{           PEU_SER_DFE_ST_2_REG_ADDR /* 0x12001c3 */, PSIF_CSR_ADDR_PEU_SER_DFE_ST_2_REG           /* 0x07e480 */,     8, 1,  1 }, /* Index 1623 */
{           PEU_SER_DFE_ST_3_REG_ADDR /* 0x12001c4 */, PSIF_CSR_ADDR_PEU_SER_DFE_ST_3_REG           /* 0x07e488 */,     8, 1,  1 }, /* Index 1624 */
{      PEU_SER_POWERDOWN_CTL_REG_ADDR /* 0x12001f0 */, PSIF_CSR_ADDR_PEU_SER_POWERDOWN_CTL_REG      /* 0x07e490 */,     8, 1,  1 }, /* Index 1625 */
{               PEU_SER_CFG0_REG_ADDR /* 0x12001f1 */, PSIF_CSR_ADDR_PEU_SER_CFG0_REG               /* 0x07e498 */,     8, 1,  1 }, /* Index 1626 */
{               PEU_SER_CFG1_REG_ADDR /* 0x12001f2 */, PSIF_CSR_ADDR_PEU_SER_CFG1_REG               /* 0x07e4a0 */,     8, 1,  1 }, /* Index 1627 */
{               PEU_SER_CFG2_REG_ADDR /* 0x12001f3 */, PSIF_CSR_ADDR_PEU_SER_CFG2_REG               /* 0x07e4a8 */,     8, 1,  1 }, /* Index 1628 */
{               PEU_SER_CFG3_REG_ADDR /* 0x12001f4 */, PSIF_CSR_ADDR_PEU_SER_CFG3_REG               /* 0x07e4b0 */,     8, 1,  1 }, /* Index 1629 */
{            PEU_CSR_SER_CTL_REG_ADDR /* 0x12001f5 */, PSIF_CSR_ADDR_PEU_CSR_SER_CTL_REG            /* 0x07e4b8 */,     8, 1,  1 }, /* Index 1630 */
{             PEU_CSR_SER_ST_REG_ADDR /* 0x12001f6 */, PSIF_CSR_ADDR_PEU_CSR_SER_ST_REG             /* 0x07e4c0 */,     8, 1,  1 }, /* Index 1631 */
{ 00000000, 0x7e4c8,     0, 0 }, /* Index 1632 */
}; /* psif_csr_mapping */ 

#define	PSIF_CSR_ADDR_ELEMENTS 1632

/* Convert enum psif_csr_map to string */
inline static const char* str_psif_csr_map(enum psif_csr_map val) {
	switch (val) {
		case PSIF_CSR_ADDR_HOST_TVL_TABLE:
			return ("PSIF_CSR_ADDR_HOST_TVL_TABLE");
		case PSIF_CSR_ADDR_HOST_MAX_GLOBAL_TVL_CRDTS:
			return ("PSIF_CSR_ADDR_HOST_MAX_GLOBAL_TVL_CRDTS");
		case PSIF_CSR_ADDR_HOST_PRIVATE_TVL_CRDTS:
			return ("PSIF_CSR_ADDR_HOST_PRIVATE_TVL_CRDTS");
		case PSIF_CSR_ADDR_HOST_TOTAL_GLOBAL_TVL_CRDTS:
			return ("PSIF_CSR_ADDR_HOST_TOTAL_GLOBAL_TVL_CRDTS");
		case PSIF_CSR_ADDR_HOST_XIU_ARBITER:
			return ("PSIF_CSR_ADDR_HOST_XIU_ARBITER");
		case PSIF_CSR_ADDR_HOST_EPS_ARBITER:
			return ("PSIF_CSR_ADDR_HOST_EPS_ARBITER");
		case PSIF_CSR_ADDR_HOST_ERROR_CRDTS:
			return ("PSIF_CSR_ADDR_HOST_ERROR_CRDTS");
		case PSIF_CSR_ADDR_HOST_DATA_LATENCY:
			return ("PSIF_CSR_ADDR_HOST_DATA_LATENCY");
		case PSIF_CSR_ADDR_HOST_TVL_CRDTS_USED:
			return ("PSIF_CSR_ADDR_HOST_TVL_CRDTS_USED");
		case PSIF_CSR_ADDR_HOST_GLOBAL_CRDTS_USED:
			return ("PSIF_CSR_ADDR_HOST_GLOBAL_CRDTS_USED");
		case PSIF_CSR_ADDR_HOST_HCA_MODE:
			return ("PSIF_CSR_ADDR_HOST_HCA_MODE");
		case PSIF_CSR_ADDR_HOST_ENABLE_PCIE_SWAP:
			return ("PSIF_CSR_ADDR_HOST_ENABLE_PCIE_SWAP");
		case PSIF_CSR_ADDR_HOST_LITTLE_ENDIAN_MODE:
			return ("PSIF_CSR_ADDR_HOST_LITTLE_ENDIAN_MODE");
		case PSIF_CSR_ADDR_HOST_XIU_LLQ_GLOBAL_CREDITS:
			return ("PSIF_CSR_ADDR_HOST_XIU_LLQ_GLOBAL_CREDITS");
		case PSIF_CSR_ADDR_BASE_ADDR_QP:
			return ("PSIF_CSR_ADDR_BASE_ADDR_QP");
		case PSIF_CSR_ADDR_HOST_MRS_CREDIT_CNT:
			return ("PSIF_CSR_ADDR_HOST_MRS_CREDIT_CNT");
		case PSIF_CSR_ADDR_HOST_ERR_CREDIT_CNT:
			return ("PSIF_CSR_ADDR_HOST_ERR_CREDIT_CNT");
		case PSIF_CSR_ADDR_HOST_LLQ_CNT:
			return ("PSIF_CSR_ADDR_HOST_LLQ_CNT");
		case PSIF_CSR_ADDR_HOST_INT_STATUS:
			return ("PSIF_CSR_ADDR_HOST_INT_STATUS");
		case PSIF_CSR_ADDR_HOST_INT_MASK:
			return ("PSIF_CSR_ADDR_HOST_INT_MASK");
		case PSIF_CSR_ADDR_HOST_INT_PRI:
			return ("PSIF_CSR_ADDR_HOST_INT_PRI");
		case PSIF_CSR_ADDR_HOST_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_HOST_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_HOST_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_HOST_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_HOST_EPS_ADDRESS:
			return ("PSIF_CSR_ADDR_HOST_EPS_ADDRESS");
		case PSIF_CSR_ADDR_HOST_ECC_PARITY_ERRS:
			return ("PSIF_CSR_ADDR_HOST_ECC_PARITY_ERRS");
		case PSIF_CSR_ADDR_HOST_FATAL_INT_MASK:
			return ("PSIF_CSR_ADDR_HOST_FATAL_INT_MASK");
		case PSIF_CSR_ADDR_HOST_INT_CTRL:
			return ("PSIF_CSR_ADDR_HOST_INT_CTRL");
		case PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_0:
			return ("PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_0");
		case PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_1:
			return ("PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_1");
		case PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_2:
			return ("PSIF_CSR_ADDR_HOST_INT_CHAN_CTRL_2");
		case PSIF_CSR_ADDR_MMU_CONFIG:
			return ("PSIF_CSR_ADDR_MMU_CONFIG");
		case PSIF_CSR_ADDR_MMU_CREDIT_CONFIG:
			return ("PSIF_CSR_ADDR_MMU_CREDIT_CONFIG");
		case PSIF_CSR_ADDR_MMU_PA_MASK:
			return ("PSIF_CSR_ADDR_MMU_PA_MASK");
		case PSIF_CSR_ADDR_MMU_FLUSH_CACHES:
			return ("PSIF_CSR_ADDR_MMU_FLUSH_CACHES");
		case PSIF_CSR_ADDR_MMU_STAT_COUNTERS:
			return ("PSIF_CSR_ADDR_MMU_STAT_COUNTERS");
		case PSIF_CSR_ADDR_MMU_ECC_PARITY_ERRS:
			return ("PSIF_CSR_ADDR_MMU_ECC_PARITY_ERRS");
		case PSIF_CSR_ADDR_MMU_UF_CONTROL:
			return ("PSIF_CSR_ADDR_MMU_UF_CONTROL");
		case PSIF_CSR_ADDR_MMU_UF_CONTROL_KICK:
			return ("PSIF_CSR_ADDR_MMU_UF_CONTROL_KICK");
		case PSIF_CSR_ADDR_MMU_INT_STATUS:
			return ("PSIF_CSR_ADDR_MMU_INT_STATUS");
		case PSIF_CSR_ADDR_MMU_INT_MASK:
			return ("PSIF_CSR_ADDR_MMU_INT_MASK");
		case PSIF_CSR_ADDR_MMU_INT_PRI:
			return ("PSIF_CSR_ADDR_MMU_INT_PRI");
		case PSIF_CSR_ADDR_MMU_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_MMU_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_MMU_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_MMU_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_MMU_UNCOR_ERR_MASK:
			return ("PSIF_CSR_ADDR_MMU_UNCOR_ERR_MASK");
		case PSIF_CSR_ADDR_TVL_TABLE:
			return ("PSIF_CSR_ADDR_TVL_TABLE");
		case PSIF_CSR_ADDR_SUB_BAR_ADDR:
			return ("PSIF_CSR_ADDR_SUB_BAR_ADDR");
		case PSIF_CSR_ADDR_VCB_START:
			return ("PSIF_CSR_ADDR_VCB_START");
		case PSIF_CSR_ADDR_PCB_ALLOC_HIGH:
			return ("PSIF_CSR_ADDR_PCB_ALLOC_HIGH");
		case PSIF_CSR_ADDR_PCB_ALLOC_LOW:
			return ("PSIF_CSR_ADDR_PCB_ALLOC_LOW");
		case PSIF_CSR_ADDR_PCB_AVAILABLE:
			return ("PSIF_CSR_ADDR_PCB_AVAILABLE");
		case PSIF_CSR_ADDR_PCB_USED_HIGH:
			return ("PSIF_CSR_ADDR_PCB_USED_HIGH");
		case PSIF_CSR_ADDR_PCB_USED_LOW:
			return ("PSIF_CSR_ADDR_PCB_USED_LOW");
		case PSIF_CSR_ADDR_SCBD_INIT:
			return ("PSIF_CSR_ADDR_SCBD_INIT");
		case PSIF_CSR_ADDR_SCBD_FINI:
			return ("PSIF_CSR_ADDR_SCBD_FINI");
		case PSIF_CSR_ADDR_DCB_START_OFFSET_HOST:
			return ("PSIF_CSR_ADDR_DCB_START_OFFSET_HOST");
		case PSIF_CSR_ADDR_DCB_START_OFFSET_EPS:
			return ("PSIF_CSR_ADDR_DCB_START_OFFSET_EPS");
		case PSIF_CSR_ADDR_DCB_START_OFFSET_SQS:
			return ("PSIF_CSR_ADDR_DCB_START_OFFSET_SQS");
		case PSIF_CSR_ADDR_CBU_COLLECT_LEN_ROUNDUP:
			return ("PSIF_CSR_ADDR_CBU_COLLECT_LEN_ROUNDUP");
		case PSIF_CSR_ADDR_CBU_ECC_ERR_CTRL:
			return ("PSIF_CSR_ADDR_CBU_ECC_ERR_CTRL");
		case PSIF_CSR_ADDR_CBU_ECC_ERR_STATUS:
			return ("PSIF_CSR_ADDR_CBU_ECC_ERR_STATUS");
		case PSIF_CSR_ADDR_CBU_ECC_ERR_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_CBU_ECC_ERR_STATUS_CLEAR");
		case PSIF_CSR_ADDR_CBU_CHOKE:
			return ("PSIF_CSR_ADDR_CBU_CHOKE");
		case PSIF_CSR_ADDR_CBU_UF_STATUS:
			return ("PSIF_CSR_ADDR_CBU_UF_STATUS");
		case PSIF_CSR_ADDR_CBU_VCB_CLEAR_NUM:
			return ("PSIF_CSR_ADDR_CBU_VCB_CLEAR_NUM");
		case PSIF_CSR_ADDR_CBU_VCB_CLEAR:
			return ("PSIF_CSR_ADDR_CBU_VCB_CLEAR");
		case PSIF_CSR_ADDR_CBU_DCB_START_OFFSET:
			return ("PSIF_CSR_ADDR_CBU_DCB_START_OFFSET");
		case PSIF_CSR_ADDR_DCB_UF_TABLE:
			return ("PSIF_CSR_ADDR_DCB_UF_TABLE");
		case PSIF_CSR_ADDR_CBU_DCB_STATUS_HW_LOCK:
			return ("PSIF_CSR_ADDR_CBU_DCB_STATUS_HW_LOCK");
		case PSIF_CSR_ADDR_DCB_STATUS:
			return ("PSIF_CSR_ADDR_DCB_STATUS");
		case PSIF_CSR_ADDR_CBU_DCB_CLEAR:
			return ("PSIF_CSR_ADDR_CBU_DCB_CLEAR");
		case PSIF_CSR_ADDR_CBU_DCB_DOORBELL:
			return ("PSIF_CSR_ADDR_CBU_DCB_DOORBELL");
		case PSIF_CSR_ADDR_CMPL_CREDIT_PRIVATE:
			return ("PSIF_CSR_ADDR_CMPL_CREDIT_PRIVATE");
		case PSIF_CSR_ADDR_CMPL_CREDIT_TVL_CONSUMED:
			return ("PSIF_CSR_ADDR_CMPL_CREDIT_TVL_CONSUMED");
		case PSIF_CSR_ADDR_CMPL_CREDIT_COMMON:
			return ("PSIF_CSR_ADDR_CMPL_CREDIT_COMMON");
		case PSIF_CSR_ADDR_CMPL_CREDIT_COMMON_CONSUMED:
			return ("PSIF_CSR_ADDR_CMPL_CREDIT_COMMON_CONSUMED");
		case PSIF_CSR_ADDR_RQS_COMMON_CMPL_CREDIT_ENABLE_0:
			return ("PSIF_CSR_ADDR_RQS_COMMON_CMPL_CREDIT_ENABLE_0");
		case PSIF_CSR_ADDR_EXEC_CREDIT_PRIVATE:
			return ("PSIF_CSR_ADDR_EXEC_CREDIT_PRIVATE");
		case PSIF_CSR_ADDR_EXEC_CREDIT_TVL_CONSUMED:
			return ("PSIF_CSR_ADDR_EXEC_CREDIT_TVL_CONSUMED");
		case PSIF_CSR_ADDR_EXEC_CREDIT_COMMON:
			return ("PSIF_CSR_ADDR_EXEC_CREDIT_COMMON");
		case PSIF_CSR_ADDR_EXEC_CREDIT_COMMON_CONSUMED:
			return ("PSIF_CSR_ADDR_EXEC_CREDIT_COMMON_CONSUMED");
		case PSIF_CSR_ADDR_RQS_COMMON_EXEC_CREDIT_ENABLE_0:
			return ("PSIF_CSR_ADDR_RQS_COMMON_EXEC_CREDIT_ENABLE_0");
		case PSIF_CSR_ADDR_P1_SL2VL:
			return ("PSIF_CSR_ADDR_P1_SL2VL");
		case PSIF_CSR_ADDR_P2_SL2VL:
			return ("PSIF_CSR_ADDR_P2_SL2VL");
		case PSIF_CSR_ADDR_P1_OWN_LID_BASE:
			return ("PSIF_CSR_ADDR_P1_OWN_LID_BASE");
		case PSIF_CSR_ADDR_P2_OWN_LID_BASE:
			return ("PSIF_CSR_ADDR_P2_OWN_LID_BASE");
		case PSIF_CSR_ADDR_P1_PORT_ENABLE:
			return ("PSIF_CSR_ADDR_P1_PORT_ENABLE");
		case PSIF_CSR_ADDR_P2_PORT_ENABLE:
			return ("PSIF_CSR_ADDR_P2_PORT_ENABLE");
		case PSIF_CSR_ADDR_RQS_P1_SMP_ALLOWED:
			return ("PSIF_CSR_ADDR_RQS_P1_SMP_ALLOWED");
		case PSIF_CSR_ADDR_RQS_P2_SMP_ALLOWED:
			return ("PSIF_CSR_ADDR_RQS_P2_SMP_ALLOWED");
		case PSIF_CSR_ADDR_RQS_KICK_FIFO_UF_INUSE:
			return ("PSIF_CSR_ADDR_RQS_KICK_FIFO_UF_INUSE");
		case PSIF_CSR_ADDR_RQS_P1_GID_FORWARDING_TABLE:
			return ("PSIF_CSR_ADDR_RQS_P1_GID_FORWARDING_TABLE");
		case PSIF_CSR_ADDR_RQS_P2_GID_FORWARDING_TABLE:
			return ("PSIF_CSR_ADDR_RQS_P2_GID_FORWARDING_TABLE");
		case PSIF_CSR_ADDR_VL_BUFF_MAX_ALLOC:
			return ("PSIF_CSR_ADDR_VL_BUFF_MAX_ALLOC");
		case PSIF_CSR_ADDR_VL_BUFF_PRIVATE:
			return ("PSIF_CSR_ADDR_VL_BUFF_PRIVATE");
		case PSIF_CSR_ADDR_VL_BUFF_USED:
			return ("PSIF_CSR_ADDR_VL_BUFF_USED");
		case PSIF_CSR_ADDR_GLOBAL_BUFF_USED:
			return ("PSIF_CSR_ADDR_GLOBAL_BUFF_USED");
		case PSIF_CSR_ADDR_NUM_OF_DMA_BUF_CO:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_BUF_CO");
		case PSIF_CSR_ADDR_NUM_OF_DMA_BUF_CI:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_BUF_CI");
		case PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_INBUN:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_INBUN");
		case PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_POP:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_POP");
		case PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_R2G:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_CNTXTLLQ_R2G");
		case PSIF_CSR_ADDR_NUM_OF_DMA_IBPB_CMD:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_IBPB_CMD");
		case PSIF_CSR_ADDR_NUM_OF_DMA_CMPL_CMD:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_CMPL_CMD");
		case PSIF_CSR_ADDR_NUM_OF_DMA_QPS_RD_CMD:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_QPS_RD_CMD");
		case PSIF_CSR_ADDR_NUM_OF_DMA_QPS_RD_RSP:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_QPS_RD_RSP");
		case PSIF_CSR_ADDR_NUM_OF_DMA_QPS_WR_CMD:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_QPS_WR_CMD");
		case PSIF_CSR_ADDR_NUM_OF_DMA_QPS_WR_RSP:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_QPS_WR_RSP");
		case PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_INBUN:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_INBUN");
		case PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_POP:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_POP");
		case PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_R2G:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_PKTLLQ_R2G");
		case PSIF_CSR_ADDR_NUM_OF_DMA_PYLD_CMD:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_PYLD_CMD");
		case PSIF_CSR_ADDR_NUM_OF_DMA_PYLD_RSP:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_PYLD_RSP");
		case PSIF_CSR_ADDR_NUM_OF_DMA_SGE_CMD:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_SGE_CMD");
		case PSIF_CSR_ADDR_NUM_OF_DMA_SGE_RSP:
			return ("PSIF_CSR_ADDR_NUM_OF_DMA_SGE_RSP");
		case PSIF_CSR_ADDR_DMA_LSO_BUF_USED:
			return ("PSIF_CSR_ADDR_DMA_LSO_BUF_USED");
		case PSIF_CSR_ADDR_DMA_ECC_ERR_CTRL:
			return ("PSIF_CSR_ADDR_DMA_ECC_ERR_CTRL");
		case PSIF_CSR_ADDR_DMA_ECC_ERR_STATUS:
			return ("PSIF_CSR_ADDR_DMA_ECC_ERR_STATUS");
		case PSIF_CSR_ADDR_DMA_ECC_ERR_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_DMA_ECC_ERR_STATUS_CLEAR");
		case PSIF_CSR_ADDR_LINK_SPEED:
			return ("PSIF_CSR_ADDR_LINK_SPEED");
		case PSIF_CSR_ADDR_LINK_WIDTH:
			return ("PSIF_CSR_ADDR_LINK_WIDTH");
		case PSIF_CSR_ADDR_DMA_UF_TRANS_MAX:
			return ("PSIF_CSR_ADDR_DMA_UF_TRANS_MAX");
		case PSIF_CSR_ADDR_DMA_UF_TRANS_USED:
			return ("PSIF_CSR_ADDR_DMA_UF_TRANS_USED");
		case PSIF_CSR_ADDR_DMA_MAC_ADDR0_TABLE:
			return ("PSIF_CSR_ADDR_DMA_MAC_ADDR0_TABLE");
		case PSIF_CSR_ADDR_DMA_MAC_ADDR1_TABLE:
			return ("PSIF_CSR_ADDR_DMA_MAC_ADDR1_TABLE");
		case PSIF_CSR_ADDR_DMA_VID_TABLE:
			return ("PSIF_CSR_ADDR_DMA_VID_TABLE");
		case PSIF_CSR_ADDR_DMA_MAC_CTRL:
			return ("PSIF_CSR_ADDR_DMA_MAC_CTRL");
		case PSIF_CSR_ADDR_DMA_PPTY_HDR_LENGTH:
			return ("PSIF_CSR_ADDR_DMA_PPTY_HDR_LENGTH");
		case PSIF_CSR_ADDR_DMA_TCP_FLAGS_MASK:
			return ("PSIF_CSR_ADDR_DMA_TCP_FLAGS_MASK");
		case PSIF_CSR_ADDR_DMA_OFFLOAD_CTRL:
			return ("PSIF_CSR_ADDR_DMA_OFFLOAD_CTRL");
		case PSIF_CSR_ADDR_DMA_VLAN_MEMBER_TABLE:
			return ("PSIF_CSR_ADDR_DMA_VLAN_MEMBER_TABLE");
		case PSIF_CSR_ADDR_DMA_OUTER_VLAN_TYPE:
			return ("PSIF_CSR_ADDR_DMA_OUTER_VLAN_TYPE");
		case PSIF_CSR_ADDR_DMA_INNER_VLAN_TYPE:
			return ("PSIF_CSR_ADDR_DMA_INNER_VLAN_TYPE");
		case PSIF_CSR_ADDR_P1_SND_PKEY_TABLE:
			return ("PSIF_CSR_ADDR_P1_SND_PKEY_TABLE");
		case PSIF_CSR_ADDR_IBPB_P1_GID_UPPER:
			return ("PSIF_CSR_ADDR_IBPB_P1_GID_UPPER");
		case PSIF_CSR_ADDR_IBPB_P1_GID_LOWER:
			return ("PSIF_CSR_ADDR_IBPB_P1_GID_LOWER");
		case PSIF_CSR_ADDR_P1_SND_LID:
			return ("PSIF_CSR_ADDR_P1_SND_LID");
		case PSIF_CSR_ADDR_P1_SND_PKEY_UF_STRIDE:
			return ("PSIF_CSR_ADDR_P1_SND_PKEY_UF_STRIDE");
		case PSIF_CSR_ADDR_P2_SND_PKEY_TABLE:
			return ("PSIF_CSR_ADDR_P2_SND_PKEY_TABLE");
		case PSIF_CSR_ADDR_IBPB_P2_GID_UPPER:
			return ("PSIF_CSR_ADDR_IBPB_P2_GID_UPPER");
		case PSIF_CSR_ADDR_IBPB_P2_GID_LOWER:
			return ("PSIF_CSR_ADDR_IBPB_P2_GID_LOWER");
		case PSIF_CSR_ADDR_P2_SND_LID:
			return ("PSIF_CSR_ADDR_P2_SND_LID");
		case PSIF_CSR_ADDR_P2_SND_PKEY_UF_STRIDE:
			return ("PSIF_CSR_ADDR_P2_SND_PKEY_UF_STRIDE");
		case PSIF_CSR_ADDR_BASE_ADDR_AH:
			return ("PSIF_CSR_ADDR_BASE_ADDR_AH");
		case PSIF_CSR_ADDR_BASE_ADDR_QP_QPS:
			return ("PSIF_CSR_ADDR_BASE_ADDR_QP_QPS");
		case PSIF_CSR_ADDR_QPS_UF_CONTROL:
			return ("PSIF_CSR_ADDR_QPS_UF_CONTROL");
		case PSIF_CSR_ADDR_QPS_UF_CONTROL_KICK:
			return ("PSIF_CSR_ADDR_QPS_UF_CONTROL_KICK");
		case PSIF_CSR_ADDR_UF_EMPTY:
			return ("PSIF_CSR_ADDR_UF_EMPTY");
		case PSIF_CSR_ADDR_QPS_INT_STATUS:
			return ("PSIF_CSR_ADDR_QPS_INT_STATUS");
		case PSIF_CSR_ADDR_QPS_INT_MASK:
			return ("PSIF_CSR_ADDR_QPS_INT_MASK");
		case PSIF_CSR_ADDR_QPS_INT_PRI:
			return ("PSIF_CSR_ADDR_QPS_INT_PRI");
		case PSIF_CSR_ADDR_QPS_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_QPS_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_QPS_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_QPS_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_QPS_UF_STOP_TIMEOUT_KICK:
			return ("PSIF_CSR_ADDR_QPS_UF_STOP_TIMEOUT_KICK");
		case PSIF_CSR_ADDR_MODIFY_QP_CTRL:
			return ("PSIF_CSR_ADDR_MODIFY_QP_CTRL");
		case PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_0:
			return ("PSIF_CSR_ADDR_QPS_MODIFY_QP_DATA_0");
		case PSIF_CSR_ADDR_MODIFY_QP_KICK:
			return ("PSIF_CSR_ADDR_MODIFY_QP_KICK");
		case PSIF_CSR_ADDR_QPS_MODIFY_QP_STATUS:
			return ("PSIF_CSR_ADDR_QPS_MODIFY_QP_STATUS");
		case PSIF_CSR_ADDR_QPS_QUERY_QP_DATA:
			return ("PSIF_CSR_ADDR_QPS_QUERY_QP_DATA");
		case PSIF_CSR_ADDR_QPS_WR_QP_DATA:
			return ("PSIF_CSR_ADDR_QPS_WR_QP_DATA");
		case PSIF_CSR_ADDR_QPS_WR_QP_PATH:
			return ("PSIF_CSR_ADDR_QPS_WR_QP_PATH");
		case PSIF_CSR_ADDR_QPS_WR_QP_INDEX:
			return ("PSIF_CSR_ADDR_QPS_WR_QP_INDEX");
		case PSIF_CSR_ADDR_QPS_WR_QP_KICK:
			return ("PSIF_CSR_ADDR_QPS_WR_QP_KICK");
		case PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_INIT_RTR:
			return ("PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_INIT_RTR");
		case PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_RTR_RTS:
			return ("PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_RTR_RTS");
		case PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_RTS_RTS:
			return ("PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_RTS_RTS");
		case PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET:
			return ("PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET");
		case PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_SQERR_RTS:
			return ("PSIF_CSR_ADDR_QPS_MODIFY_ATTR_MASK_SQERR_RTS");
		case PSIF_CSR_ADDR_QPS_REF_COUNT:
			return ("PSIF_CSR_ADDR_QPS_REF_COUNT");
		case PSIF_CSR_ADDR_CMPL_UF_CONTROL:
			return ("PSIF_CSR_ADDR_CMPL_UF_CONTROL");
		case PSIF_CSR_ADDR_CMPL_UF_CONTROL_KICK:
			return ("PSIF_CSR_ADDR_CMPL_UF_CONTROL_KICK");
		case PSIF_CSR_ADDR_CMPL_INT_STATUS:
			return ("PSIF_CSR_ADDR_CMPL_INT_STATUS");
		case PSIF_CSR_ADDR_CMPL_INT_MASK:
			return ("PSIF_CSR_ADDR_CMPL_INT_MASK");
		case PSIF_CSR_ADDR_CMPL_INT_PRI:
			return ("PSIF_CSR_ADDR_CMPL_INT_PRI");
		case PSIF_CSR_ADDR_CMPL_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_CMPL_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_CMPL_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_CMPL_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_BASE_ADDR_SQ_CMPL:
			return ("PSIF_CSR_ADDR_BASE_ADDR_SQ_CMPL");
		case PSIF_CSR_ADDR_BASE_ADDR_KEY:
			return ("PSIF_CSR_ADDR_BASE_ADDR_KEY");
		case PSIF_CSR_ADDR_VAL_UF_CONTROL:
			return ("PSIF_CSR_ADDR_VAL_UF_CONTROL");
		case PSIF_CSR_ADDR_VAL_UF_CONTROL_KICK:
			return ("PSIF_CSR_ADDR_VAL_UF_CONTROL_KICK");
		case PSIF_CSR_ADDR_VAL_INT_STATUS:
			return ("PSIF_CSR_ADDR_VAL_INT_STATUS");
		case PSIF_CSR_ADDR_VAL_INT_MASK:
			return ("PSIF_CSR_ADDR_VAL_INT_MASK");
		case PSIF_CSR_ADDR_VAL_INT_PRI:
			return ("PSIF_CSR_ADDR_VAL_INT_PRI");
		case PSIF_CSR_ADDR_VAL_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_VAL_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_VAL_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_VAL_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_RQH_UF_CONTROL:
			return ("PSIF_CSR_ADDR_RQH_UF_CONTROL");
		case PSIF_CSR_ADDR_RQH_UF_CONTROL_KICK:
			return ("PSIF_CSR_ADDR_RQH_UF_CONTROL_KICK");
		case PSIF_CSR_ADDR_RQH_INT_STATUS:
			return ("PSIF_CSR_ADDR_RQH_INT_STATUS");
		case PSIF_CSR_ADDR_RQH_INT_MASK:
			return ("PSIF_CSR_ADDR_RQH_INT_MASK");
		case PSIF_CSR_ADDR_RQH_INT_PRI:
			return ("PSIF_CSR_ADDR_RQH_INT_PRI");
		case PSIF_CSR_ADDR_RQH_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_RQH_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_RQH_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_RQH_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_BASE_ADDR_QP_RQH:
			return ("PSIF_CSR_ADDR_BASE_ADDR_QP_RQH");
		case PSIF_CSR_ADDR_RQH_INDIRECT_EQ_SW_INDEX_WR:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_EQ_SW_INDEX_WR");
		case PSIF_CSR_ADDR_RQH_INDIRECT_EQ_HW_INDEX_WR:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_EQ_HW_INDEX_WR");
		case PSIF_CSR_ADDR_RQH_INDIRECT_EQ_CTRL_WR:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_EQ_CTRL_WR");
		case PSIF_CSR_ADDR_RQH_INDIRECT_EQ_BASE_ADDR_WR:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_EQ_BASE_ADDR_WR");
		case PSIF_CSR_ADDR_RQH_INDIRECT_MMU_CONTEXT_WR:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_MMU_CONTEXT_WR");
		case PSIF_CSR_ADDR_RQH_INDIRECTION_ADDR_WR:
			return ("PSIF_CSR_ADDR_RQH_INDIRECTION_ADDR_WR");
		case PSIF_CSR_ADDR_RQH_INDIRECT_WR_KICK:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_WR_KICK");
		case PSIF_CSR_ADDR_RQH_INDIRECT_EQ_SW_INDEX_RD:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_EQ_SW_INDEX_RD");
		case PSIF_CSR_ADDR_RQH_INDIRECT_EQ_HW_INDEX_RD:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_EQ_HW_INDEX_RD");
		case PSIF_CSR_ADDR_RQH_INDIRECT_EQ_CTRL_RD:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_EQ_CTRL_RD");
		case PSIF_CSR_ADDR_RQH_INDIRECT_EQ_BASE_ADDR_RD:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_EQ_BASE_ADDR_RD");
		case PSIF_CSR_ADDR_RQH_INDIRECT_MMU_CONTEXT_RD:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_MMU_CONTEXT_RD");
		case PSIF_CSR_ADDR_RQH_INDIRECTION_ADDR_RD:
			return ("PSIF_CSR_ADDR_RQH_INDIRECTION_ADDR_RD");
		case PSIF_CSR_ADDR_RQH_INDIRECT_RD_KICK:
			return ("PSIF_CSR_ADDR_RQH_INDIRECT_RD_KICK");
		case PSIF_CSR_ADDR_RQH_EQ_SW_INDEX:
			return ("PSIF_CSR_ADDR_RQH_EQ_SW_INDEX");
		case PSIF_CSR_ADDR_RQH_EQ_HW_INDEX:
			return ("PSIF_CSR_ADDR_RQH_EQ_HW_INDEX");
		case PSIF_CSR_ADDR_RQH_EQ_MAPPING_TABLE:
			return ("PSIF_CSR_ADDR_RQH_EQ_MAPPING_TABLE");
		case PSIF_CSR_ADDR_RQH_EQ_OVERFLOW_STATUS_0:
			return ("PSIF_CSR_ADDR_RQH_EQ_OVERFLOW_STATUS_0");
		case PSIF_CSR_ADDR_RQH_EQ_OVERFLOW_STATUS_1:
			return ("PSIF_CSR_ADDR_RQH_EQ_OVERFLOW_STATUS_1");
		case PSIF_CSR_ADDR_RQH_EQ_INVALID_STATUS_0:
			return ("PSIF_CSR_ADDR_RQH_EQ_INVALID_STATUS_0");
		case PSIF_CSR_ADDR_RQH_EQ_INVALID_STATUS_1:
			return ("PSIF_CSR_ADDR_RQH_EQ_INVALID_STATUS_1");
		case PSIF_CSR_ADDR_RQH_EQ_OUT_OF_RANGE_STATUS:
			return ("PSIF_CSR_ADDR_RQH_EQ_OUT_OF_RANGE_STATUS");
		case PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_0:
			return ("PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_0");
		case PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_1:
			return ("PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_1");
		case PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_KICK:
			return ("PSIF_CSR_ADDR_RQH_CLEAR_EQ_STATUS_KICK");
		case PSIF_CSR_ADDR_RQH_CLEAR_EQ_UF_STATUS:
			return ("PSIF_CSR_ADDR_RQH_CLEAR_EQ_UF_STATUS");
		case PSIF_CSR_ADDR_RQH_CLEAR_EQ_UF_STATUS_KICK:
			return ("PSIF_CSR_ADDR_RQH_CLEAR_EQ_UF_STATUS_KICK");
		case PSIF_CSR_ADDR_BASE_ADDR_CQ_SW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_CQ_SW");
		case PSIF_CSR_ADDR_BASE_ADDR_CQ_HW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_CQ_HW");
		case PSIF_CSR_ADDR_BASE_ADDR_RB_SW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_RB_SW");
		case PSIF_CSR_ADDR_BASE_ADDR_RB_HW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_RB_HW");
		case PSIF_CSR_ADDR_BASE_ADDR_RQ_SW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_RQ_SW");
		case PSIF_CSR_ADDR_BASE_ADDR_RQ_HW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_RQ_HW");
		case PSIF_CSR_ADDR_BASE_ADDR_XRQ_SW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_XRQ_SW");
		case PSIF_CSR_ADDR_BASE_ADDR_XRQ_HW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_XRQ_HW");
		case PSIF_CSR_ADDR_DSCR_UF_CONTROL:
			return ("PSIF_CSR_ADDR_DSCR_UF_CONTROL");
		case PSIF_CSR_ADDR_DSCR_UF_CONTROL_KICK:
			return ("PSIF_CSR_ADDR_DSCR_UF_CONTROL_KICK");
		case PSIF_CSR_ADDR_DSCR_INT_STATUS:
			return ("PSIF_CSR_ADDR_DSCR_INT_STATUS");
		case PSIF_CSR_ADDR_DSCR_INT_MASK:
			return ("PSIF_CSR_ADDR_DSCR_INT_MASK");
		case PSIF_CSR_ADDR_DSCR_INT_PRI:
			return ("PSIF_CSR_ADDR_DSCR_INT_PRI");
		case PSIF_CSR_ADDR_DSCR_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_DSCR_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_DSCR_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_DSCR_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_STATUS:
			return ("PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_STATUS");
		case PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_AFFILIATED:
			return ("PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_AFFILIATED");
		case PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_POP:
			return ("PSIF_CSR_ADDR_DSCR_ASYNC_EVENT_POP");
		case PSIF_CSR_ADDR_DSCR_DIAGNOSTIC:
			return ("PSIF_CSR_ADDR_DSCR_DIAGNOSTIC");
		case PSIF_CSR_ADDR_DSCR_FATAL_INTERRUPT:
			return ("PSIF_CSR_ADDR_DSCR_FATAL_INTERRUPT");
		case PSIF_CSR_ADDR_DSCR_FATAL_INTERRUPT_CLEAR:
			return ("PSIF_CSR_ADDR_DSCR_FATAL_INTERRUPT_CLEAR");
		case PSIF_CSR_ADDR_RCV_RSS_EOIB_TABLE:
			return ("PSIF_CSR_ADDR_RCV_RSS_EOIB_TABLE");
		case PSIF_CSR_ADDR_RCV_RSS_CTRL_EOIB_TABLE:
			return ("PSIF_CSR_ADDR_RCV_RSS_CTRL_EOIB_TABLE");
		case PSIF_CSR_ADDR_RCV_RSS_IPOIB_TABLE:
			return ("PSIF_CSR_ADDR_RCV_RSS_IPOIB_TABLE");
		case PSIF_CSR_ADDR_RCV_RSS_CTRL_IPOIB_TABLE:
			return ("PSIF_CSR_ADDR_RCV_RSS_CTRL_IPOIB_TABLE");
		case PSIF_CSR_ADDR_RCV_PROXY_SIZE:
			return ("PSIF_CSR_ADDR_RCV_PROXY_SIZE");
		case PSIF_CSR_ADDR_RCV_MAD_SIZE:
			return ("PSIF_CSR_ADDR_RCV_MAD_SIZE");
		case PSIF_CSR_ADDR_RCV_EOIB_MCAST_REJECT:
			return ("PSIF_CSR_ADDR_RCV_EOIB_MCAST_REJECT");
		case PSIF_CSR_ADDR_RCV_EOIB_BCAST_REJECT:
			return ("PSIF_CSR_ADDR_RCV_EOIB_BCAST_REJECT");
		case PSIF_CSR_ADDR_RCV_EOIB_UCAST_REJECT:
			return ("PSIF_CSR_ADDR_RCV_EOIB_UCAST_REJECT");
		case PSIF_CSR_ADDR_RCV_EIOB_FRAGMENT_REJECT:
			return ("PSIF_CSR_ADDR_RCV_EIOB_FRAGMENT_REJECT");
		case PSIF_CSR_ADDR_RCV_EIOB_RUNTS_REJECT:
			return ("PSIF_CSR_ADDR_RCV_EIOB_RUNTS_REJECT");
		case PSIF_CSR_ADDR_RCV_EIOB_OUTER_VLAN_REJECT:
			return ("PSIF_CSR_ADDR_RCV_EIOB_OUTER_VLAN_REJECT");
		case PSIF_CSR_ADDR_RCV_EIOB_VLAN_TAG_REJECT:
			return ("PSIF_CSR_ADDR_RCV_EIOB_VLAN_TAG_REJECT");
		case PSIF_CSR_ADDR_RCV_EIOB_VID_REJECT:
			return ("PSIF_CSR_ADDR_RCV_EIOB_VID_REJECT");
		case PSIF_CSR_ADDR_RCV_NO_MCAST_DUPLICATION:
			return ("PSIF_CSR_ADDR_RCV_NO_MCAST_DUPLICATION");
		case PSIF_CSR_ADDR_RCV_KEY_TRAP_SGID_UPPER:
			return ("PSIF_CSR_ADDR_RCV_KEY_TRAP_SGID_UPPER");
		case PSIF_CSR_ADDR_RCV_KEY_TRAP_SGID_LOWER:
			return ("PSIF_CSR_ADDR_RCV_KEY_TRAP_SGID_LOWER");
		case PSIF_CSR_ADDR_RCV_KEY_TRAP_DGID_UPPER:
			return ("PSIF_CSR_ADDR_RCV_KEY_TRAP_DGID_UPPER");
		case PSIF_CSR_ADDR_RCV_KEY_TRAP_DGID_LOWER:
			return ("PSIF_CSR_ADDR_RCV_KEY_TRAP_DGID_LOWER");
		case PSIF_CSR_ADDR_RCV_KEY_TRAP_QP:
			return ("PSIF_CSR_ADDR_RCV_KEY_TRAP_QP");
		case PSIF_CSR_ADDR_RCV_KEY_TRAP_LID_KEY:
			return ("PSIF_CSR_ADDR_RCV_KEY_TRAP_LID_KEY");
		case PSIF_CSR_ADDR_RCV_KEY_TRAP_POP:
			return ("PSIF_CSR_ADDR_RCV_KEY_TRAP_POP");
		case PSIF_CSR_ADDR_RCV_KEY_TRAP_BACKPRESSURE:
			return ("PSIF_CSR_ADDR_RCV_KEY_TRAP_BACKPRESSURE");
		case PSIF_CSR_ADDR_RCV_INT_STATUS:
			return ("PSIF_CSR_ADDR_RCV_INT_STATUS");
		case PSIF_CSR_ADDR_RCV_INT_MASK:
			return ("PSIF_CSR_ADDR_RCV_INT_MASK");
		case PSIF_CSR_ADDR_RCV_INT_PRI:
			return ("PSIF_CSR_ADDR_RCV_INT_PRI");
		case PSIF_CSR_ADDR_RCV_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_RCV_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_RCV_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_RCV_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_P1_RCV_PKEY_TABLE:
			return ("PSIF_CSR_ADDR_P1_RCV_PKEY_TABLE");
		case PSIF_CSR_ADDR_P1_RCV_LID:
			return ("PSIF_CSR_ADDR_P1_RCV_LID");
		case PSIF_CSR_ADDR_P1_RCV_PKEY_UF_STRIDE:
			return ("PSIF_CSR_ADDR_P1_RCV_PKEY_UF_STRIDE");
		case PSIF_CSR_ADDR_IBPR_P1_DEFAULT_VSWITCH_PORT:
			return ("PSIF_CSR_ADDR_IBPR_P1_DEFAULT_VSWITCH_PORT");
		case PSIF_CSR_ADDR_IBPR_P1_DEFAULT_SM_HCA:
			return ("PSIF_CSR_ADDR_IBPR_P1_DEFAULT_SM_HCA");
		case PSIF_CSR_ADDR_IBPR_P1_GSI_FORWARDING_TABLE:
			return ("PSIF_CSR_ADDR_IBPR_P1_GSI_FORWARDING_TABLE");
		case PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED:
			return ("PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED");
		case PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR");
		case PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED_DROP_STATUS:
			return ("PSIF_CSR_ADDR_IBPR_P1_SMP_ALLOWED_DROP_STATUS");
		case PSIF_CSR_ADDR_P2_RCV_PKEY_TABLE:
			return ("PSIF_CSR_ADDR_P2_RCV_PKEY_TABLE");
		case PSIF_CSR_ADDR_P2_RCV_LID:
			return ("PSIF_CSR_ADDR_P2_RCV_LID");
		case PSIF_CSR_ADDR_P2_RCV_PKEY_UF_STRIDE:
			return ("PSIF_CSR_ADDR_P2_RCV_PKEY_UF_STRIDE");
		case PSIF_CSR_ADDR_IBPR_P2_DEFAULT_VSWITCH_PORT:
			return ("PSIF_CSR_ADDR_IBPR_P2_DEFAULT_VSWITCH_PORT");
		case PSIF_CSR_ADDR_IBPR_P2_DEFAULT_SM_HCA:
			return ("PSIF_CSR_ADDR_IBPR_P2_DEFAULT_SM_HCA");
		case PSIF_CSR_ADDR_IBPR_P2_GSI_FORWARDING_TABLE:
			return ("PSIF_CSR_ADDR_IBPR_P2_GSI_FORWARDING_TABLE");
		case PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED:
			return ("PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED");
		case PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR");
		case PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED_DROP_STATUS:
			return ("PSIF_CSR_ADDR_IBPR_P2_SMP_ALLOWED_DROP_STATUS");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_INTERVAL:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_INTERVAL");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_START:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_START");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_COUNT:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_COUNT");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_PORT:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_PORT");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTSAMPLE_START:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTSAMPLE_START");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_STATUS:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_SAMPLE_STATUS");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_INTERVAL:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_INTERVAL");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_START:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_START");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_COUNT:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_COUNT");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_PORT:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_PORT");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_PORTSAMPLE_START:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_PORTSAMPLE_START");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_STATUS:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_SAMPLE_STATUS");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_INTERVAL:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_INTERVAL");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_START:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_START");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_COUNT:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_COUNT");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_PORT:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_PORT");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTSAMPLE_START:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTSAMPLE_START");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_STATUS:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_SAMPLE_STATUS");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_INTERVAL:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_INTERVAL");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_START:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_START");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_COUNT:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_COUNT");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_PORT:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_PORT");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_PORTSAMPLE_START:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_PORTSAMPLE_START");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_STATUS:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_SAMPLE_STATUS");
		case PSIF_CSR_ADDR_IBPR_SET_VLINK_STATE:
			return ("PSIF_CSR_ADDR_IBPR_SET_VLINK_STATE");
		case PSIF_CSR_ADDR_IBPR_VLINK_STATE_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VLINK_STATE_REGISTER");
		case PSIF_CSR_ADDR_IBPR_P1_VLINK_STATE:
			return ("PSIF_CSR_ADDR_IBPR_P1_VLINK_STATE");
		case PSIF_CSR_ADDR_IBPR_P2_VLINK_STATE:
			return ("PSIF_CSR_ADDR_IBPR_P2_VLINK_STATE");
		case PSIF_CSR_ADDR_IBPR_P1_MCAST_GID_UPPER:
			return ("PSIF_CSR_ADDR_IBPR_P1_MCAST_GID_UPPER");
		case PSIF_CSR_ADDR_IBPR_P1_MCAST_GID_LOWER:
			return ("PSIF_CSR_ADDR_IBPR_P1_MCAST_GID_LOWER");
		case PSIF_CSR_ADDR_IBPR_P1_MCAST_GIDHASH_LID:
			return ("PSIF_CSR_ADDR_IBPR_P1_MCAST_GIDHASH_LID");
		case PSIF_CSR_ADDR_IBPR_P1_MCAST_POP:
			return ("PSIF_CSR_ADDR_IBPR_P1_MCAST_POP");
		case PSIF_CSR_ADDR_IBPR_P1_MCAST_MAX_PKTS:
			return ("PSIF_CSR_ADDR_IBPR_P1_MCAST_MAX_PKTS");
		case PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_CREDIT:
			return ("PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_CREDIT");
		case PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_FIFO:
			return ("PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_FIFO");
		case PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_FIFO_KICK:
			return ("PSIF_CSR_ADDR_IBPR_P1_MCAST_WR_FIFO_KICK");
		case PSIF_CSR_ADDR_IBPR_P2_MCAST_GID_UPPER:
			return ("PSIF_CSR_ADDR_IBPR_P2_MCAST_GID_UPPER");
		case PSIF_CSR_ADDR_IBPR_P2_MCAST_GID_LOWER:
			return ("PSIF_CSR_ADDR_IBPR_P2_MCAST_GID_LOWER");
		case PSIF_CSR_ADDR_IBPR_P2_MCAST_GIDHASH_LID:
			return ("PSIF_CSR_ADDR_IBPR_P2_MCAST_GIDHASH_LID");
		case PSIF_CSR_ADDR_IBPR_P2_MCAST_POP:
			return ("PSIF_CSR_ADDR_IBPR_P2_MCAST_POP");
		case PSIF_CSR_ADDR_IBPR_P2_MCAST_MAX_PKTS:
			return ("PSIF_CSR_ADDR_IBPR_P2_MCAST_MAX_PKTS");
		case PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_CREDIT:
			return ("PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_CREDIT");
		case PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_FIFO:
			return ("PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_FIFO");
		case PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_FIFO_KICK:
			return ("PSIF_CSR_ADDR_IBPR_P2_MCAST_WR_FIFO_KICK");
		case PSIF_CSR_ADDR_IBPR_INT_STATUS:
			return ("PSIF_CSR_ADDR_IBPR_INT_STATUS");
		case PSIF_CSR_ADDR_IBPR_INT_MASK:
			return ("PSIF_CSR_ADDR_IBPR_INT_MASK");
		case PSIF_CSR_ADDR_IBPR_INT_PRI:
			return ("PSIF_CSR_ADDR_IBPR_INT_PRI");
		case PSIF_CSR_ADDR_IBPR_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_IBPR_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_IBPR_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_IBPR_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_IBPR_P1_RX_CHOKE:
			return ("PSIF_CSR_ADDR_IBPR_P1_RX_CHOKE");
		case PSIF_CSR_ADDR_IBPR_P2_RX_CHOKE:
			return ("PSIF_CSR_ADDR_IBPR_P2_RX_CHOKE");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_XMIT_DISCARDS:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_XMIT_DISCARDS");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_RCV_PKTS_DROP:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_RCV_PKTS_DROP");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTCOUNTER_CLEAR:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTCOUNTER_CLEAR");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DISCARDS:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DISCARDS");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_DATA:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_DATA");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_PKTS:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_PKTS");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DATA:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DATA");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_DROP:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_DROP");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_PORTCOUNTER_CLEAR:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_PORTCOUNTER_CLEAR");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_XMIT_DISCARDS:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_XMIT_DISCARDS");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_RCV_PKTS_DROP:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_RCV_PKTS_DROP");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTCOUNTER_CLEAR:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTCOUNTER_CLEAR");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DISCARDS:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DISCARDS");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_DATA:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_DATA");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_PKTS:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_PKTS");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DATA:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DATA");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_DROP:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_DROP");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_PORTCOUNTER_CLEAR:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_PORTCOUNTER_CLEAR");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER:
			return ("PSIF_CSR_ADDR_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER");
		case PSIF_CSR_ADDR_IBPR_RSS_CONTROL:
			return ("PSIF_CSR_ADDR_IBPR_RSS_CONTROL");
		case PSIF_CSR_ADDR_IBPR_RSS_IPV4_SECRET_KEY:
			return ("PSIF_CSR_ADDR_IBPR_RSS_IPV4_SECRET_KEY");
		case PSIF_CSR_ADDR_IBPR_RSS_IPV6_SECRET_KEY:
			return ("PSIF_CSR_ADDR_IBPR_RSS_IPV6_SECRET_KEY");
		case PSIF_CSR_ADDR_P1_RCV_GID_UPPER:
			return ("PSIF_CSR_ADDR_P1_RCV_GID_UPPER");
		case PSIF_CSR_ADDR_P1_RCV_GID_LOWER:
			return ("PSIF_CSR_ADDR_P1_RCV_GID_LOWER");
		case PSIF_CSR_ADDR_IBPR_P1_GID_FORWARDING_TABLE:
			return ("PSIF_CSR_ADDR_IBPR_P1_GID_FORWARDING_TABLE");
		case PSIF_CSR_ADDR_P2_RCV_GID_UPPER:
			return ("PSIF_CSR_ADDR_P2_RCV_GID_UPPER");
		case PSIF_CSR_ADDR_P2_RCV_GID_LOWER:
			return ("PSIF_CSR_ADDR_P2_RCV_GID_LOWER");
		case PSIF_CSR_ADDR_IBPR_P2_GID_FORWARDING_TABLE:
			return ("PSIF_CSR_ADDR_IBPR_P2_GID_FORWARDING_TABLE");
		case PSIF_CSR_ADDR_IBPR_P1_EOIB_MAC1:
			return ("PSIF_CSR_ADDR_IBPR_P1_EOIB_MAC1");
		case PSIF_CSR_ADDR_IBPR_P1_EOIB_MAC2:
			return ("PSIF_CSR_ADDR_IBPR_P1_EOIB_MAC2");
		case PSIF_CSR_ADDR_IBPR_P2_EOIB_MAC1:
			return ("PSIF_CSR_ADDR_IBPR_P2_EOIB_MAC1");
		case PSIF_CSR_ADDR_IBPR_P2_EOIB_MAC2:
			return ("PSIF_CSR_ADDR_IBPR_P2_EOIB_MAC2");
		case PSIF_CSR_ADDR_IBPR_EOIB_CONTROL:
			return ("PSIF_CSR_ADDR_IBPR_EOIB_CONTROL");
		case PSIF_CSR_ADDR_IBPR_DMAC_SEED:
			return ("PSIF_CSR_ADDR_IBPR_DMAC_SEED");
		case PSIF_CSR_ADDR_IBPR_EOIB_VLAN_ETHERTYPES:
			return ("PSIF_CSR_ADDR_IBPR_EOIB_VLAN_ETHERTYPES");
		case PSIF_CSR_ADDR_IBPR_EOIB_PF_CONTROL:
			return ("PSIF_CSR_ADDR_IBPR_EOIB_PF_CONTROL");
		case PSIF_CSR_ADDR_IBPR_EOIB_UNICAST_OVERFLOW_TABLE:
			return ("PSIF_CSR_ADDR_IBPR_EOIB_UNICAST_OVERFLOW_TABLE");
		case PSIF_CSR_ADDR_IBPR_EOIB_MULTICAST_TABLE:
			return ("PSIF_CSR_ADDR_IBPR_EOIB_MULTICAST_TABLE");
		case PSIF_CSR_ADDR_IBPR_HDR_SPLIT_EOIB:
			return ("PSIF_CSR_ADDR_IBPR_HDR_SPLIT_EOIB");
		case PSIF_CSR_ADDR_IBPR_HDR_SPLIT_IPOIB_UD:
			return ("PSIF_CSR_ADDR_IBPR_HDR_SPLIT_IPOIB_UD");
		case PSIF_CSR_ADDR_IBPR_TRACE_BUFFER_SETUP:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_BUFFER_SETUP");
		case PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER1:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER1");
		case PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER2:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER2");
		case PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER1_MASK:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER1_MASK");
		case PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER2_MASK:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_STORE_QUALIFIER2_MASK");
		case PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER1:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER1");
		case PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER2:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER2");
		case PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER1_MASK:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER1_MASK");
		case PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER2_MASK:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_TRIGGER2_MASK");
		case PSIF_CSR_ADDR_IBPR_TRACE_START:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_START");
		case PSIF_CSR_ADDR_IBPR_TRACE_STOP:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_STOP");
		case PSIF_CSR_ADDR_IBPR_TRACE_BUFFER_STATUS:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_BUFFER_STATUS");
		case PSIF_CSR_ADDR_IBPR_EOIB_VID_TABLE:
			return ("PSIF_CSR_ADDR_IBPR_EOIB_VID_TABLE");
		case PSIF_CSR_ADDR_IBPR_TRACE_BUFFER:
			return ("PSIF_CSR_ADDR_IBPR_TRACE_BUFFER");
		case PSIF_CSR_ADDR_BASE_ADDR_SQ_SW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_SQ_SW");
		case PSIF_CSR_ADDR_BASE_ADDR_SQ_HW:
			return ("PSIF_CSR_ADDR_BASE_ADDR_SQ_HW");
		case PSIF_CSR_ADDR_SQS_SQS_LIST_TABLE:
			return ("PSIF_CSR_ADDR_SQS_SQS_LIST_TABLE");
		case PSIF_CSR_ADDR_SQS_UF_CONTROL:
			return ("PSIF_CSR_ADDR_SQS_UF_CONTROL");
		case PSIF_CSR_ADDR_SQS_UF_CONTROL_KICK:
			return ("PSIF_CSR_ADDR_SQS_UF_CONTROL_KICK");
		case PSIF_CSR_ADDR_SQS_INT_STATUS:
			return ("PSIF_CSR_ADDR_SQS_INT_STATUS");
		case PSIF_CSR_ADDR_SQS_INT_MASK:
			return ("PSIF_CSR_ADDR_SQS_INT_MASK");
		case PSIF_CSR_ADDR_SQS_INT_PRI:
			return ("PSIF_CSR_ADDR_SQS_INT_PRI");
		case PSIF_CSR_ADDR_SQS_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_SQS_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_SQS_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_SQS_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_SQS_SQS_LIST_STATUS0:
			return ("PSIF_CSR_ADDR_SQS_SQS_LIST_STATUS0");
		case PSIF_CSR_ADDR_SQS_SQS_LIST_STATUS1:
			return ("PSIF_CSR_ADDR_SQS_SQS_LIST_STATUS1");
		case PSIF_CSR_ADDR_SQS_HASH_CTRL:
			return ("PSIF_CSR_ADDR_SQS_HASH_CTRL");
		case PSIF_CSR_ADDR_SQS_ATOMIC_DISABLE:
			return ("PSIF_CSR_ADDR_SQS_ATOMIC_DISABLE");
		case PSIF_CSR_ADDR_SQS_SQ_BURST_READ_SIZE:
			return ("PSIF_CSR_ADDR_SQS_SQ_BURST_READ_SIZE");
		case PSIF_CSR_ADDR_SQS_CBU_DB_CNT:
			return ("PSIF_CSR_ADDR_SQS_CBU_DB_CNT");
		case PSIF_CSR_ADDR_SQS_ERR_DB_CNT:
			return ("PSIF_CSR_ADDR_SQS_ERR_DB_CNT");
		case PSIF_CSR_ADDR_SQS_LLQ_PUSH_CNT:
			return ("PSIF_CSR_ADDR_SQS_LLQ_PUSH_CNT");
		case PSIF_CSR_ADDR_SQS_LLQ_POP_CNT:
			return ("PSIF_CSR_ADDR_SQS_LLQ_POP_CNT");
		case PSIF_CSR_ADDR_SQS_LLQ_PEEK_CNT:
			return ("PSIF_CSR_ADDR_SQS_LLQ_PEEK_CNT");
		case PSIF_CSR_ADDR_SQS_SQ_RD_CNT:
			return ("PSIF_CSR_ADDR_SQS_SQ_RD_CNT");
		case PSIF_CSR_ADDR_SQS_DSCR_REQ_CNT:
			return ("PSIF_CSR_ADDR_SQS_DSCR_REQ_CNT");
		case PSIF_CSR_ADDR_SQS_DSCR_RSP_CNT:
			return ("PSIF_CSR_ADDR_SQS_DSCR_RSP_CNT");
		case PSIF_CSR_ADDR_SQS_ATM_REQ_CNT:
			return ("PSIF_CSR_ADDR_SQS_ATM_REQ_CNT");
		case PSIF_CSR_ADDR_SQS_ATM_RSP_CNT:
			return ("PSIF_CSR_ADDR_SQS_ATM_RSP_CNT");
		case PSIF_CSR_ADDR_SQS_PUSH_SQS_LIST_CNT:
			return ("PSIF_CSR_ADDR_SQS_PUSH_SQS_LIST_CNT");
		case PSIF_CSR_ADDR_SQS_RING_TIMER:
			return ("PSIF_CSR_ADDR_SQS_RING_TIMER");
		case PSIF_CSR_ADDR_SQS_PADDED_SQ_DSCR_HW:
			return ("PSIF_CSR_ADDR_SQS_PADDED_SQ_DSCR_HW");
		case PSIF_CSR_ADDR_SQS_PADDED_RING_BUFFER:
			return ("PSIF_CSR_ADDR_SQS_PADDED_RING_BUFFER");
		case PSIF_CSR_ADDR_SQS_ECC_ERR_CTRL:
			return ("PSIF_CSR_ADDR_SQS_ECC_ERR_CTRL");
		case PSIF_CSR_ADDR_SQS_ECC_ERR_STATUS:
			return ("PSIF_CSR_ADDR_SQS_ECC_ERR_STATUS");
		case PSIF_CSR_ADDR_SQS_ECC_ERR_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_SQS_ECC_ERR_STATUS_CLEAR");
		case PSIF_CSR_ADDR_BASE_ADDR_SQ_RING:
			return ("PSIF_CSR_ADDR_BASE_ADDR_SQ_RING");
		case PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_WR_PTR:
			return ("PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_WR_PTR");
		case PSIF_CSR_ADDR_SQS_SQS_LIST_ERR_STATUS:
			return ("PSIF_CSR_ADDR_SQS_SQS_LIST_ERR_STATUS");
		case PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_RD_PTR:
			return ("PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_RD_PTR");
		case PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_PENDING_CNT:
			return ("PSIF_CSR_ADDR_SQS_PIO_RING_BUFFER_PENDING_CNT");
		case PSIF_CSR_ADDR_ERR_INT_STATUS:
			return ("PSIF_CSR_ADDR_ERR_INT_STATUS");
		case PSIF_CSR_ADDR_ERR_INT_MASK:
			return ("PSIF_CSR_ADDR_ERR_INT_MASK");
		case PSIF_CSR_ADDR_ERR_INT_PRI:
			return ("PSIF_CSR_ADDR_ERR_INT_PRI");
		case PSIF_CSR_ADDR_ERR_INT_STATUS_CLEAR:
			return ("PSIF_CSR_ADDR_ERR_INT_STATUS_CLEAR");
		case PSIF_CSR_ADDR_ERR_INT_STATUS_CLEAR_KICK:
			return ("PSIF_CSR_ADDR_ERR_INT_STATUS_CLEAR_KICK");
		case PSIF_CSR_ADDR_ERR_ASYNC_EVENT_STATUS:
			return ("PSIF_CSR_ADDR_ERR_ASYNC_EVENT_STATUS");
		case PSIF_CSR_ADDR_ERR_ASYNC_EVENT_AFFILIATED:
			return ("PSIF_CSR_ADDR_ERR_ASYNC_EVENT_AFFILIATED");
		case PSIF_CSR_ADDR_ERR_ASYNC_EVENT_POP:
			return ("PSIF_CSR_ADDR_ERR_ASYNC_EVENT_POP");
		case PSIF_CSR_ADDR_ERR_HOST_ERROR_TYPE:
			return ("PSIF_CSR_ADDR_ERR_HOST_ERROR_TYPE");
		case PSIF_CSR_ADDR_ERR_HOST_COUNTER:
			return ("PSIF_CSR_ADDR_ERR_HOST_COUNTER");
		case PSIF_CSR_ADDR_ERR_CLEAR_HOST_COUNTER:
			return ("PSIF_CSR_ADDR_ERR_CLEAR_HOST_COUNTER");
		case PSIF_CSR_ADDR_ERR_CMPL_ERROR_TYPE:
			return ("PSIF_CSR_ADDR_ERR_CMPL_ERROR_TYPE");
		case PSIF_CSR_ADDR_ERR_CMPL_COUNTER:
			return ("PSIF_CSR_ADDR_ERR_CMPL_COUNTER");
		case PSIF_CSR_ADDR_ERR_CLEAR_CMPL_COUNTER:
			return ("PSIF_CSR_ADDR_ERR_CLEAR_CMPL_COUNTER");
		case PSIF_CSR_ADDR_ERR_CLEAR_DIAG_RAM:
			return ("PSIF_CSR_ADDR_ERR_CLEAR_DIAG_RAM");
		case PSIF_CSR_ADDR_ERR_CLEAR_DIAG_RAM_KICK:
			return ("PSIF_CSR_ADDR_ERR_CLEAR_DIAG_RAM_KICK");
		case PSIF_CSR_ADDR_ERR_DIAG_RAM_ADDR:
			return ("PSIF_CSR_ADDR_ERR_DIAG_RAM_ADDR");
		case PSIF_CSR_ADDR_ERR_DIAG_RAM_READ_ADDR:
			return ("PSIF_CSR_ADDR_ERR_DIAG_RAM_READ_ADDR");
		case PSIF_CSR_ADDR_ERR_DIAG_RAM_READ_KICK:
			return ("PSIF_CSR_ADDR_ERR_DIAG_RAM_READ_KICK");
		case PSIF_CSR_ADDR_ERR_FENCE_TIME_TO_WAIT:
			return ("PSIF_CSR_ADDR_ERR_FENCE_TIME_TO_WAIT");
		case PSIF_CSR_ADDR_ERR_DIAG_RAM_DATA:
			return ("PSIF_CSR_ADDR_ERR_DIAG_RAM_DATA");
		case PSIF_CSR_ADDR_ERR_CLEAR_ERROR_COUNTERS:
			return ("PSIF_CSR_ADDR_ERR_CLEAR_ERROR_COUNTERS");
		case PSIF_CSR_ADDR_ERR_CLEAR_ERROR_COUNTERS_KICK:
			return ("PSIF_CSR_ADDR_ERR_CLEAR_ERROR_COUNTERS_KICK");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_0:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_0");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_1:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_1");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_2:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_2");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_3:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_3");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_4:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_4");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_5:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_5");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_6:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_6");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_7:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_7");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_8:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_8");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_9:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_9");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_10:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_10");
		case PSIF_CSR_ADDR_ERR_ERROR_COUNTER_11:
			return ("PSIF_CSR_ADDR_ERR_ERROR_COUNTER_11");
		case PSIF_CSR_ADDR_IBU_P1_CNT1US_CNT124US:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT1US_CNT124US");
		case PSIF_CSR_ADDR_IBU_P1_CNT2MS:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT2MS");
		case PSIF_CSR_ADDR_IBU_P1_CNT10MS:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT10MS");
		case PSIF_CSR_ADDR_IBU_P1_CNT100MS:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT100MS");
		case PSIF_CSR_ADDR_IBU_P1_CNT150MS:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT150MS");
		case PSIF_CSR_ADDR_IBU_P1_CNT400MS:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT400MS");
		case PSIF_CSR_ADDR_IBU_P1_SKP_TO_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_SKP_TO_CNT");
		case PSIF_CSR_ADDR_IBU_P1_TGT_VAL:
			return ("PSIF_CSR_ADDR_IBU_P1_TGT_VAL");
		case PSIF_CSR_ADDR_IBU_P1_PHY_VCONFIG:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_VCONFIG");
		case PSIF_CSR_ADDR_IBU_P1_PHY_DISP_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_DISP_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PHY_CODE_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_CODE_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PHY_EVENT_LOG:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_EVENT_LOG");
		case PSIF_CSR_ADDR_IBU_P1_PORT_TRAIN_FSM:
			return ("PSIF_CSR_ADDR_IBU_P1_PORT_TRAIN_FSM");
		case PSIF_CSR_ADDR_IBU_P1_PHY_TRAIN_SMTIMER_VS1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_TRAIN_SMTIMER_VS1");
		case PSIF_CSR_ADDR_IBU_P1_MASK:
			return ("PSIF_CSR_ADDR_IBU_P1_MASK");
		case PSIF_CSR_ADDR_IBU_P1_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_ENABLED:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_ENABLED");
		case PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_SUPPORTED:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_SUPPORTED");
		case PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_ACTIVE:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_WIDTH_ACTIVE");
		case PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_SUPPORTED:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_SUPPORTED");
		case PSIF_CSR_ADDR_IBU_P1_PORT_PHYSICAL_STATE:
			return ("PSIF_CSR_ADDR_IBU_P1_PORT_PHYSICAL_STATE");
		case PSIF_CSR_ADDR_IBU_P1_LINK_DOWN_DEFAULT_STATE:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_DOWN_DEFAULT_STATE");
		case PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_ACTIVE:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_ACTIVE");
		case PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_ENABLED:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_SPEED_ENABLED");
		case PSIF_CSR_ADDR_IBU_P1_PCPHY_CNT_RST:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPHY_CNT_RST");
		case PSIF_CSR_ADDR_IBU_P1_PCPHY_CNT_LOAD:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPHY_CNT_LOAD");
		case PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCLINK_ERR_REC_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCLINK_ERR_REC_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCLINK_DOWNED_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCLINK_DOWNED_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PCSYMB_ERR_CNT_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT0_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT0_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT1_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT1_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT2_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT2_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT3_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT3_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ALIGN_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ALIGN_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PHY_PAD_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_PAD_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PHY_EDR_FDR_CONFIG0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_EDR_FDR_CONFIG0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_EDR_FDR_CONFIG1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_EDR_FDR_CONFIG1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_LEAKY_BKT_THRSH:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_LEAKY_BKT_THRSH");
		case PSIF_CSR_ADDR_IBU_P1_RCV_TS3_STATUS_LOW:
			return ("PSIF_CSR_ADDR_IBU_P1_RCV_TS3_STATUS_LOW");
		case PSIF_CSR_ADDR_IBU_P1_RCV_TS3_STATUS_HIGH:
			return ("PSIF_CSR_ADDR_IBU_P1_RCV_TS3_STATUS_HIGH");
		case PSIF_CSR_ADDR_IBU_P1_GUID0:
			return ("PSIF_CSR_ADDR_IBU_P1_GUID0");
		case PSIF_CSR_ADDR_IBU_P1_GUID1:
			return ("PSIF_CSR_ADDR_IBU_P1_GUID1");
		case PSIF_CSR_ADDR_IBU_P1_PNUM:
			return ("PSIF_CSR_ADDR_IBU_P1_PNUM");
		case PSIF_CSR_ADDR_IBU_P1_CNT4MS:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT4MS");
		case PSIF_CSR_ADDR_IBU_P1_CNT36MS:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT36MS");
		case PSIF_CSR_ADDR_IBU_P1_PHY_TS3_CONFIG:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_TS3_CONFIG");
		case PSIF_CSR_ADDR_IBU_P1_DDS_WINDOW_START:
			return ("PSIF_CSR_ADDR_IBU_P1_DDS_WINDOW_START");
		case PSIF_CSR_ADDR_IBU_P1_DDS_WINDOW_END:
			return ("PSIF_CSR_ADDR_IBU_P1_DDS_WINDOW_END");
		case PSIF_CSR_ADDR_IBU_P1_DDS_DEFAULT_WINDOW_END:
			return ("PSIF_CSR_ADDR_IBU_P1_DDS_DEFAULT_WINDOW_END");
		case PSIF_CSR_ADDR_IBU_P1_RX_TS3DDS_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TS3DDS_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_TX_TS3DDS_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TS3DDS_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_CNT16MS:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT16MS");
		case PSIF_CSR_ADDR_IBU_P1_CONF_TEST4MS_SCT:
			return ("PSIF_CSR_ADDR_IBU_P1_CONF_TEST4MS_SCT");
		case PSIF_CSR_ADDR_IBU_P1_CONF_TEST16MS_SCT:
			return ("PSIF_CSR_ADDR_IBU_P1_CONF_TEST16MS_SCT");
		case PSIF_CSR_ADDR_IBU_P1_LOCAL_ADDTEST_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P1_LOCAL_ADDTEST_LIMIT");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_ADDTEST_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_ADDTEST_LIMIT");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT4_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT4_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT5_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT5_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT6_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT6_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT7_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT7_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT8_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT8_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT9_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT9_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT10_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT10_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT11_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT11_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT12_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT12_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT13_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT13_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT14_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT14_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT15_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TS3_REV1_TT15_COUNTER");
		case PSIF_CSR_ADDR_IBU_P1_CONF_TEST_LANE_ERROR_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P1_CONF_TEST_LANE_ERROR_LIMIT");
		case PSIF_CSR_ADDR_IBU_P1_CONF_TEST_IDLE_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P1_CONF_TEST_IDLE_LIMIT");
		case PSIF_CSR_ADDR_IBU_P1_CONF_TEST2MS_SCT:
			return ("PSIF_CSR_ADDR_IBU_P1_CONF_TEST2MS_SCT");
		case PSIF_CSR_ADDR_IBU_P1_CNT100_MS_HBR:
			return ("PSIF_CSR_ADDR_IBU_P1_CNT100_MS_HBR");
		case PSIF_CSR_ADDR_IBU_P1_PMAEQULANE0_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PMAEQULANE0_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PMAEQULANE1_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PMAEQULANE1_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PMAEQULANE2_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PMAEQULANE2_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PMAEQULANE3_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PMAEQULANE3_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PMADDSLANE0_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PMADDSLANE0_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PMADDSLANE1_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PMADDSLANE1_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PMADDSLANE2_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PMADDSLANE2_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PMADDSLANE3_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PMADDSLANE3_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_EDPL_ERR3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_BLK_TYPE_ERR:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_BLK_TYPE_ERR");
		case PSIF_CSR_ADDR_IBU_P1_PHY_BLK_EOP_ERR:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_BLK_EOP_ERR");
		case PSIF_CSR_ADDR_IBU_P1_PHY_CIN_PKT_ERR:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_CIN_PKT_ERR");
		case PSIF_CSR_ADDR_IBU_P1_PHY_SYN_HDR_ERR:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_SYN_HDR_ERR");
		case PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_PRBS_ERR3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_DESKEW_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_DESKEW_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FECUNC_ERR3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FECCOR_ERR3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_SMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_SMSTATUS");
		case PSIF_CSR_ADDR_IBU_P1_PHY_TS3_NEGOTIATED_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_TS3_NEGOTIATED_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_PHY_TEST:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_TEST");
		case PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG0:
			return ("PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG0");
		case PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG1:
			return ("PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG1");
		case PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG2:
			return ("PSIF_CSR_ADDR_IBU_P1_EDR_FDR_RX_STATUS_REG2");
		case PSIF_CSR_ADDR_IBU_P1_EDR_FDR_TX_STATUS_REG0:
			return ("PSIF_CSR_ADDR_IBU_P1_EDR_FDR_TX_STATUS_REG0");
		case PSIF_CSR_ADDR_IBU_P1_INT_PRIORITY:
			return ("PSIF_CSR_ADDR_IBU_P1_INT_PRIORITY");
		case PSIF_CSR_ADDR_IBU_P1_INT_FATAL:
			return ("PSIF_CSR_ADDR_IBU_P1_INT_FATAL");
		case PSIF_CSR_ADDR_IBU_P1_LINK_ROUND_TRIP_LATENCY:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_ROUND_TRIP_LATENCY");
		case PSIF_CSR_ADDR_IBU_P1_PHY_FORCE_LEGACY_MODE:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_FORCE_LEGACY_MODE");
		case PSIF_CSR_ADDR_IBU_P1_LID:
			return ("PSIF_CSR_ADDR_IBU_P1_LID");
		case PSIF_CSR_ADDR_IBU_P1_LMC:
			return ("PSIF_CSR_ADDR_IBU_P1_LMC");
		case PSIF_CSR_ADDR_IBU_P1_PORT_STATE:
			return ("PSIF_CSR_ADDR_IBU_P1_PORT_STATE");
		case PSIF_CSR_ADDR_IBU_P1_VLCAP:
			return ("PSIF_CSR_ADDR_IBU_P1_VLCAP");
		case PSIF_CSR_ADDR_IBU_P1_NEIGHBOR_MTU:
			return ("PSIF_CSR_ADDR_IBU_P1_NEIGHBOR_MTU");
		case PSIF_CSR_ADDR_IBU_P1_VLHIGH_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P1_VLHIGH_LIMIT");
		case PSIF_CSR_ADDR_IBU_P1_VLARBITRATION_HIGH_CAP:
			return ("PSIF_CSR_ADDR_IBU_P1_VLARBITRATION_HIGH_CAP");
		case PSIF_CSR_ADDR_IBU_P1_VLARBITRATION_LOW_CAP:
			return ("PSIF_CSR_ADDR_IBU_P1_VLARBITRATION_LOW_CAP");
		case PSIF_CSR_ADDR_IBU_P1_MTUCAP:
			return ("PSIF_CSR_ADDR_IBU_P1_MTUCAP");
		case PSIF_CSR_ADDR_IBU_P1_OPERATIONAL_VLS:
			return ("PSIF_CSR_ADDR_IBU_P1_OPERATIONAL_VLS");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_ERROR:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_ERROR");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_DISCARDS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_DISCARDS");
		case PSIF_CSR_ADDR_IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCVL15_DROPPED:
			return ("PSIF_CSR_ADDR_IBU_P1_PCVL15_DROPPED");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_DATA_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_DATA_LSQW");
		case PSIF_CSR_ADDR_IBU_P1_LINK_ERROR_CHECK_ENABLE:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_ERROR_CHECK_ENABLE");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_DATA_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_DATA_LSQW");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_RCV_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_UCXMIT_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_UCXMIT_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_MCXMIT_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_MCXMIT_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_UCRCV_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_UCRCV_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_MCRCV_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_MCRCV_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL0:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL0");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL1:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL1");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL2:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL2");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL3:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL3");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL4:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL4");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL5:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL5");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL6:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL6");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL7:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL7");
		case PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL15:
			return ("PSIF_CSR_ADDR_IBU_P1_PCPORT_XMIT_WAIT_VL15");
		case PSIF_CSR_ADDR_IBU_P1_PCRX_LINK_CNT_RST:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRX_LINK_CNT_RST");
		case PSIF_CSR_ADDR_IBU_P1_PCRX_LINK_CNT_LOAD:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRX_LINK_CNT_LOAD");
		case PSIF_CSR_ADDR_IBU_P1_LOCAL_PHY_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_LOCAL_PHY_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_OVERRUN_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_OVERRUN_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PSLINK_DLID:
			return ("PSIF_CSR_ADDR_IBU_P1_PSLINK_DLID");
		case PSIF_CSR_ADDR_IBU_P1_PSTICK:
			return ("PSIF_CSR_ADDR_IBU_P1_PSTICK");
		case PSIF_CSR_ADDR_IBU_P1_PSSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_PSSTATUS");
		case PSIF_CSR_ADDR_IBU_P1_PSSTART_DELAY:
			return ("PSIF_CSR_ADDR_IBU_P1_PSSTART_DELAY");
		case PSIF_CSR_ADDR_IBU_P1_PSINTERVAL:
			return ("PSIF_CSR_ADDR_IBU_P1_PSINTERVAL");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL0:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL0");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL1:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL1");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL2:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL2");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL3:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT_SEL3");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT0:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT0");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT1:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT1");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT2:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT2");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT3:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT3");
		case PSIF_CSR_ADDR_IBU_P1_PSINIT_SAMPLING:
			return ("PSIF_CSR_ADDR_IBU_P1_PSINIT_SAMPLING");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT_LOAD:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT_LOAD");
		case PSIF_CSR_ADDR_IBU_P1_PORT_STATE_CHANGE:
			return ("PSIF_CSR_ADDR_IBU_P1_PORT_STATE_CHANGE");
		case PSIF_CSR_ADDR_IBU_P1_TRAP_REGISTER:
			return ("PSIF_CSR_ADDR_IBU_P1_TRAP_REGISTER");
		case PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG0:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG0");
		case PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG1:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG1");
		case PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG2:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_VCONFIG2");
		case PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL1_0:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL1_0");
		case PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL3_2:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL3_2");
		case PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL5_4:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL5_4");
		case PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL7_6:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_RX_CREDIT_VL7_6");
		case PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL1_0:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL1_0");
		case PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL3_2:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL3_2");
		case PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL5_4:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL5_4");
		case PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL7_6:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_TX_CREDIT_VL7_6");
		case PSIF_CSR_ADDR_IBU_P1_PCTX_LINK_CNT_RST:
			return ("PSIF_CSR_ADDR_IBU_P1_PCTX_LINK_CNT_RST");
		case PSIF_CSR_ADDR_IBU_P1_PCTX_LINK_CNT_LOAD:
			return ("PSIF_CSR_ADDR_IBU_P1_PCTX_LINK_CNT_LOAD");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT_WIDTH:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT_WIDTH");
		case PSIF_CSR_ADDR_IBU_P1_PSCNT_MASK:
			return ("PSIF_CSR_ADDR_IBU_P1_PSCNT_MASK");
		case PSIF_CSR_ADDR_IBU_P1_PCICRC_RCV_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCICRC_RCV_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCVCRC_RCV_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCVCRC_RCV_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCLEN_RCV_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCLEN_RCV_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCDLID_RCV_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCDLID_RCV_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCRCV_FCLEN_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRCV_FCLEN_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCRCV_FCVL_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRCV_FCVL_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCRCV_FCCRC_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRCV_FCCRC_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCMAL_FORMED_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCMAL_FORMED_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCBUF_OVER_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCBUF_OVER_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCVLMAP_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P1_PCVLMAP_ERRORS");
		case PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL1_VL0:
			return ("PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL1_VL0");
		case PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL3_VL2:
			return ("PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL3_VL2");
		case PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL5_VL4:
			return ("PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL5_VL4");
		case PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL7_VL6:
			return ("PSIF_CSR_ADDR_IBU_P1_PCVLINIT_CREDIT_VL7_VL6");
		case PSIF_CSR_ADDR_IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCECCENA_ERR:
			return ("PSIF_CSR_ADDR_IBU_P1_PCECCENA_ERR");
		case PSIF_CSR_ADDR_IBU_P1_PCTX_ECC_COR_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCTX_ECC_COR_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_PCTX_ECC_UNC_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P1_PCTX_ECC_UNC_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P1_TX_SRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_SRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P1_TX_CACHE_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_CACHE_STATUS");
		case PSIF_CSR_ADDR_IBU_P1_TX_DEBUG:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_DEBUG");
		case PSIF_CSR_ADDR_IBU_P1_RX_VL07_SRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_VL07_SRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P1_RX_VL15_SRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_VL15_SRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P1_LOOPSRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_LOOPSRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P1_RX_DEBUG:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_DEBUG");
		case PSIF_CSR_ADDR_IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P1_VLARB_HI_PRI_TABLE:
			return ("PSIF_CSR_ADDR_IBU_P1_VLARB_HI_PRI_TABLE");
		case PSIF_CSR_ADDR_IBU_P1_VLARB_LO_PRI_TABLE:
			return ("PSIF_CSR_ADDR_IBU_P1_VLARB_LO_PRI_TABLE");
		case PSIF_CSR_ADDR_IBU_P1_TX_TBSVL10:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TBSVL10");
		case PSIF_CSR_ADDR_IBU_P1_TX_TBSVL32:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TBSVL32");
		case PSIF_CSR_ADDR_IBU_P1_TX_TBSVL54:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TBSVL54");
		case PSIF_CSR_ADDR_IBU_P1_TX_TBSVL76:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TBSVL76");
		case PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL10:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL10");
		case PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL32:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL32");
		case PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL54:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL54");
		case PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL76:
			return ("PSIF_CSR_ADDR_IBU_P1_TX_TBSARB_VL76");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_ENABLE:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_ENABLE");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_MODE:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_MODE");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_RDY:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_RDY");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_TIMER:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_TIMER");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_START:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_START");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA1:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA1");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA2:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA2");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA3:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA3");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA4:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA4");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA5:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA5");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA6:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA6");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA7:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA7");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA8:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA8");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA9:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA9");
		case PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA10:
			return ("PSIF_CSR_ADDR_IBU_P1_RX_TRACE_CAPTURE_DATA10");
		case PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL1_0:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL1_0");
		case PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL3_2:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL3_2");
		case PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL5_4:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL5_4");
		case PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL7_6:
			return ("PSIF_CSR_ADDR_IBU_P1_LINK_RX_FCCL_VL7_6");
		case PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_ADD_DEFAULT_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD0_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD1_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD2_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD3_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD4_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD5_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD6_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD7_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD8_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD9_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD10_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD11_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD12_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD13_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD14_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_ADD15_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD0_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD1_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD2_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD3_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD4_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD5_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD6_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD7_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD8_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD9_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD10_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD11_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD12_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD13_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD14_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE0");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE1");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE2");
		case PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P1_PHY_AMP1_ADD15_LANE3");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS0:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS0");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS1:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS1");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS2:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS2");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS3:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS3");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS4:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS4");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS5:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS5");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS6:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS6");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS7:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS7");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS8:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS8");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS9:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS9");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS10:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS10");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS11:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS11");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS12:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS12");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS13:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS13");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS14:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS14");
		case PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS15:
			return ("PSIF_CSR_ADDR_IBU_P1_REMOTE_DDS15");
		case PSIF_CSR_ADDR_IBU_P1_BAD_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_BAD_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_CH0_REG15_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_CH0_REG15_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_CH0_REG102_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_CH0_REG102_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_CH1_REG15_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_CH1_REG15_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_CH1_REG102_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_CH1_REG102_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_PLLA_REG24_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_PLLA_REG24_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_CH2_REG15_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_CH2_REG15_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_CH2_REG102_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_CH2_REG102_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_CH3_REG15_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_CH3_REG15_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_CH3_REG102_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_CH3_REG102_CSR");
		case PSIF_CSR_ADDR_IBU_P1_CETUS_PLLB_REG24_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_CETUS_PLLB_REG24_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_RESET_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_RESET_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_PLLA_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_PLLA_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_PLLB_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_PLLB_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_CMODE_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_CMODE_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_LB_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_LB_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_PWR_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_PWR_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_STATUS0_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_STATUS0_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_STATUS1_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_STATUS1_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_STATUS2_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_STATUS2_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_TXWCLK0_CNT_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_TXWCLK0_CNT_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_TXWCLK0_CNT_VAL:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_TXWCLK0_CNT_VAL");
		case PSIF_CSR_ADDR_IBU_P1_PMA_RXWCLK0_CNT_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_RXWCLK0_CNT_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_RXWCLK0_CNT_VAL:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_RXWCLK0_CNT_VAL");
		case PSIF_CSR_ADDR_IBU_P1_PMA_IRQ_STATUS_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_IRQ_STATUS_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_IRQ_MASK_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_IRQ_MASK_CSR");
		case PSIF_CSR_ADDR_IBU_P1_PMA_BAD_CSR:
			return ("PSIF_CSR_ADDR_IBU_P1_PMA_BAD_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CNT1US_CNT124US:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT1US_CNT124US");
		case PSIF_CSR_ADDR_IBU_P2_CNT2MS:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT2MS");
		case PSIF_CSR_ADDR_IBU_P2_CNT10MS:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT10MS");
		case PSIF_CSR_ADDR_IBU_P2_CNT100MS:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT100MS");
		case PSIF_CSR_ADDR_IBU_P2_CNT150MS:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT150MS");
		case PSIF_CSR_ADDR_IBU_P2_CNT400MS:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT400MS");
		case PSIF_CSR_ADDR_IBU_P2_SKP_TO_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_SKP_TO_CNT");
		case PSIF_CSR_ADDR_IBU_P2_TGT_VAL:
			return ("PSIF_CSR_ADDR_IBU_P2_TGT_VAL");
		case PSIF_CSR_ADDR_IBU_P2_PHY_VCONFIG:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_VCONFIG");
		case PSIF_CSR_ADDR_IBU_P2_PHY_DISP_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_DISP_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PHY_CODE_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_CODE_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PHY_EVENT_LOG:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_EVENT_LOG");
		case PSIF_CSR_ADDR_IBU_P2_PORT_TRAIN_FSM:
			return ("PSIF_CSR_ADDR_IBU_P2_PORT_TRAIN_FSM");
		case PSIF_CSR_ADDR_IBU_P2_PHY_TRAIN_SMTIMER_VS1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_TRAIN_SMTIMER_VS1");
		case PSIF_CSR_ADDR_IBU_P2_MASK:
			return ("PSIF_CSR_ADDR_IBU_P2_MASK");
		case PSIF_CSR_ADDR_IBU_P2_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_ENABLED:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_ENABLED");
		case PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_SUPPORTED:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_SUPPORTED");
		case PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_ACTIVE:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_WIDTH_ACTIVE");
		case PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_SUPPORTED:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_SUPPORTED");
		case PSIF_CSR_ADDR_IBU_P2_PORT_PHYSICAL_STATE:
			return ("PSIF_CSR_ADDR_IBU_P2_PORT_PHYSICAL_STATE");
		case PSIF_CSR_ADDR_IBU_P2_LINK_DOWN_DEFAULT_STATE:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_DOWN_DEFAULT_STATE");
		case PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_ACTIVE:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_ACTIVE");
		case PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_ENABLED:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_SPEED_ENABLED");
		case PSIF_CSR_ADDR_IBU_P2_PCPHY_CNT_RST:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPHY_CNT_RST");
		case PSIF_CSR_ADDR_IBU_P2_PCPHY_CNT_LOAD:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPHY_CNT_LOAD");
		case PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCLINK_ERR_REC_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCLINK_ERR_REC_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCLINK_DOWNED_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCLINK_DOWNED_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PCSYMB_ERR_CNT_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT0_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT0_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT1_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT1_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT2_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT2_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT3_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT3_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ALIGN_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ALIGN_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PHY_PAD_ERROR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_PAD_ERROR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PHY_EDR_FDR_CONFIG0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_EDR_FDR_CONFIG0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_EDR_FDR_CONFIG1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_EDR_FDR_CONFIG1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_LEAKY_BKT_THRSH:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_LEAKY_BKT_THRSH");
		case PSIF_CSR_ADDR_IBU_P2_RCV_TS3_STATUS_LOW:
			return ("PSIF_CSR_ADDR_IBU_P2_RCV_TS3_STATUS_LOW");
		case PSIF_CSR_ADDR_IBU_P2_RCV_TS3_STATUS_HIGH:
			return ("PSIF_CSR_ADDR_IBU_P2_RCV_TS3_STATUS_HIGH");
		case PSIF_CSR_ADDR_IBU_P2_GUID0:
			return ("PSIF_CSR_ADDR_IBU_P2_GUID0");
		case PSIF_CSR_ADDR_IBU_P2_GUID1:
			return ("PSIF_CSR_ADDR_IBU_P2_GUID1");
		case PSIF_CSR_ADDR_IBU_P2_PNUM:
			return ("PSIF_CSR_ADDR_IBU_P2_PNUM");
		case PSIF_CSR_ADDR_IBU_P2_CNT4MS:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT4MS");
		case PSIF_CSR_ADDR_IBU_P2_CNT36MS:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT36MS");
		case PSIF_CSR_ADDR_IBU_P2_PHY_TS3_CONFIG:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_TS3_CONFIG");
		case PSIF_CSR_ADDR_IBU_P2_DDS_WINDOW_START:
			return ("PSIF_CSR_ADDR_IBU_P2_DDS_WINDOW_START");
		case PSIF_CSR_ADDR_IBU_P2_DDS_WINDOW_END:
			return ("PSIF_CSR_ADDR_IBU_P2_DDS_WINDOW_END");
		case PSIF_CSR_ADDR_IBU_P2_DDS_DEFAULT_WINDOW_END:
			return ("PSIF_CSR_ADDR_IBU_P2_DDS_DEFAULT_WINDOW_END");
		case PSIF_CSR_ADDR_IBU_P2_RX_TS3DDS_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TS3DDS_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_TX_TS3DDS_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TS3DDS_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_CNT16MS:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT16MS");
		case PSIF_CSR_ADDR_IBU_P2_CONF_TEST4MS_SCT:
			return ("PSIF_CSR_ADDR_IBU_P2_CONF_TEST4MS_SCT");
		case PSIF_CSR_ADDR_IBU_P2_CONF_TEST16MS_SCT:
			return ("PSIF_CSR_ADDR_IBU_P2_CONF_TEST16MS_SCT");
		case PSIF_CSR_ADDR_IBU_P2_LOCAL_ADDTEST_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P2_LOCAL_ADDTEST_LIMIT");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_ADDTEST_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_ADDTEST_LIMIT");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT4_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT4_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT5_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT5_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT6_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT6_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT7_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT7_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT8_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT8_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT9_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT9_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT10_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT10_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT11_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT11_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT12_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT12_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT13_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT13_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT14_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT14_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT15_COUNTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TS3_REV1_TT15_COUNTER");
		case PSIF_CSR_ADDR_IBU_P2_CONF_TEST_LANE_ERROR_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P2_CONF_TEST_LANE_ERROR_LIMIT");
		case PSIF_CSR_ADDR_IBU_P2_CONF_TEST_IDLE_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P2_CONF_TEST_IDLE_LIMIT");
		case PSIF_CSR_ADDR_IBU_P2_CONF_TEST2MS_SCT:
			return ("PSIF_CSR_ADDR_IBU_P2_CONF_TEST2MS_SCT");
		case PSIF_CSR_ADDR_IBU_P2_CNT100_MS_HBR:
			return ("PSIF_CSR_ADDR_IBU_P2_CNT100_MS_HBR");
		case PSIF_CSR_ADDR_IBU_P2_PMAEQULANE0_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PMAEQULANE0_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PMAEQULANE1_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PMAEQULANE1_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PMAEQULANE2_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PMAEQULANE2_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PMAEQULANE3_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PMAEQULANE3_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PMADDSLANE0_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PMADDSLANE0_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PMADDSLANE1_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PMADDSLANE1_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PMADDSLANE2_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PMADDSLANE2_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PMADDSLANE3_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PMADDSLANE3_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_EDPL_ERR3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_BLK_TYPE_ERR:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_BLK_TYPE_ERR");
		case PSIF_CSR_ADDR_IBU_P2_PHY_BLK_EOP_ERR:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_BLK_EOP_ERR");
		case PSIF_CSR_ADDR_IBU_P2_PHY_CIN_PKT_ERR:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_CIN_PKT_ERR");
		case PSIF_CSR_ADDR_IBU_P2_PHY_SYN_HDR_ERR:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_SYN_HDR_ERR");
		case PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_PRBS_ERR3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_DESKEW_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_DESKEW_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FECUNC_ERR3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FECCOR_ERR3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_SMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_SMSTATUS");
		case PSIF_CSR_ADDR_IBU_P2_PHY_TS3_NEGOTIATED_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_TS3_NEGOTIATED_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_PHY_TEST:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_TEST");
		case PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG0:
			return ("PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG0");
		case PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG1:
			return ("PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG1");
		case PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG2:
			return ("PSIF_CSR_ADDR_IBU_P2_EDR_FDR_RX_STATUS_REG2");
		case PSIF_CSR_ADDR_IBU_P2_EDR_FDR_TX_STATUS_REG0:
			return ("PSIF_CSR_ADDR_IBU_P2_EDR_FDR_TX_STATUS_REG0");
		case PSIF_CSR_ADDR_IBU_P2_INT_PRIORITY:
			return ("PSIF_CSR_ADDR_IBU_P2_INT_PRIORITY");
		case PSIF_CSR_ADDR_IBU_P2_INT_FATAL:
			return ("PSIF_CSR_ADDR_IBU_P2_INT_FATAL");
		case PSIF_CSR_ADDR_IBU_P2_LINK_ROUND_TRIP_LATENCY:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_ROUND_TRIP_LATENCY");
		case PSIF_CSR_ADDR_IBU_P2_PHY_FORCE_LEGACY_MODE:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_FORCE_LEGACY_MODE");
		case PSIF_CSR_ADDR_IBU_P2_LID:
			return ("PSIF_CSR_ADDR_IBU_P2_LID");
		case PSIF_CSR_ADDR_IBU_P2_LMC:
			return ("PSIF_CSR_ADDR_IBU_P2_LMC");
		case PSIF_CSR_ADDR_IBU_P2_PORT_STATE:
			return ("PSIF_CSR_ADDR_IBU_P2_PORT_STATE");
		case PSIF_CSR_ADDR_IBU_P2_VLCAP:
			return ("PSIF_CSR_ADDR_IBU_P2_VLCAP");
		case PSIF_CSR_ADDR_IBU_P2_NEIGHBOR_MTU:
			return ("PSIF_CSR_ADDR_IBU_P2_NEIGHBOR_MTU");
		case PSIF_CSR_ADDR_IBU_P2_VLHIGH_LIMIT:
			return ("PSIF_CSR_ADDR_IBU_P2_VLHIGH_LIMIT");
		case PSIF_CSR_ADDR_IBU_P2_VLARBITRATION_HIGH_CAP:
			return ("PSIF_CSR_ADDR_IBU_P2_VLARBITRATION_HIGH_CAP");
		case PSIF_CSR_ADDR_IBU_P2_VLARBITRATION_LOW_CAP:
			return ("PSIF_CSR_ADDR_IBU_P2_VLARBITRATION_LOW_CAP");
		case PSIF_CSR_ADDR_IBU_P2_MTUCAP:
			return ("PSIF_CSR_ADDR_IBU_P2_MTUCAP");
		case PSIF_CSR_ADDR_IBU_P2_OPERATIONAL_VLS:
			return ("PSIF_CSR_ADDR_IBU_P2_OPERATIONAL_VLS");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_ERROR:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_ERROR");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_DISCARDS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_DISCARDS");
		case PSIF_CSR_ADDR_IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCVL15_DROPPED:
			return ("PSIF_CSR_ADDR_IBU_P2_PCVL15_DROPPED");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_DATA_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_DATA_LSQW");
		case PSIF_CSR_ADDR_IBU_P2_LINK_ERROR_CHECK_ENABLE:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_ERROR_CHECK_ENABLE");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_DATA_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_DATA_LSQW");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_RCV_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_UCXMIT_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_UCXMIT_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_MCXMIT_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_MCXMIT_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_UCRCV_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_UCRCV_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_MCRCV_PKTS_LSQW:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_MCRCV_PKTS_LSQW");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL0:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL0");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL1:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL1");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL2:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL2");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL3:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL3");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL4:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL4");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL5:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL5");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL6:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL6");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL7:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL7");
		case PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL15:
			return ("PSIF_CSR_ADDR_IBU_P2_PCPORT_XMIT_WAIT_VL15");
		case PSIF_CSR_ADDR_IBU_P2_PCRX_LINK_CNT_RST:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRX_LINK_CNT_RST");
		case PSIF_CSR_ADDR_IBU_P2_PCRX_LINK_CNT_LOAD:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRX_LINK_CNT_LOAD");
		case PSIF_CSR_ADDR_IBU_P2_LOCAL_PHY_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_LOCAL_PHY_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_OVERRUN_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_OVERRUN_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PSLINK_DLID:
			return ("PSIF_CSR_ADDR_IBU_P2_PSLINK_DLID");
		case PSIF_CSR_ADDR_IBU_P2_PSTICK:
			return ("PSIF_CSR_ADDR_IBU_P2_PSTICK");
		case PSIF_CSR_ADDR_IBU_P2_PSSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_PSSTATUS");
		case PSIF_CSR_ADDR_IBU_P2_PSSTART_DELAY:
			return ("PSIF_CSR_ADDR_IBU_P2_PSSTART_DELAY");
		case PSIF_CSR_ADDR_IBU_P2_PSINTERVAL:
			return ("PSIF_CSR_ADDR_IBU_P2_PSINTERVAL");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL0:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL0");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL1:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL1");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL2:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL2");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL3:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT_SEL3");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT0:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT0");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT1:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT1");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT2:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT2");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT3:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT3");
		case PSIF_CSR_ADDR_IBU_P2_PSINIT_SAMPLING:
			return ("PSIF_CSR_ADDR_IBU_P2_PSINIT_SAMPLING");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT_LOAD:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT_LOAD");
		case PSIF_CSR_ADDR_IBU_P2_PORT_STATE_CHANGE:
			return ("PSIF_CSR_ADDR_IBU_P2_PORT_STATE_CHANGE");
		case PSIF_CSR_ADDR_IBU_P2_TRAP_REGISTER:
			return ("PSIF_CSR_ADDR_IBU_P2_TRAP_REGISTER");
		case PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG0:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG0");
		case PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG1:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG1");
		case PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG2:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_VCONFIG2");
		case PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL1_0:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL1_0");
		case PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL3_2:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL3_2");
		case PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL5_4:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL5_4");
		case PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL7_6:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_RX_CREDIT_VL7_6");
		case PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL1_0:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL1_0");
		case PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL3_2:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL3_2");
		case PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL5_4:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL5_4");
		case PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL7_6:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_TX_CREDIT_VL7_6");
		case PSIF_CSR_ADDR_IBU_P2_PCTX_LINK_CNT_RST:
			return ("PSIF_CSR_ADDR_IBU_P2_PCTX_LINK_CNT_RST");
		case PSIF_CSR_ADDR_IBU_P2_PCTX_LINK_CNT_LOAD:
			return ("PSIF_CSR_ADDR_IBU_P2_PCTX_LINK_CNT_LOAD");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT_WIDTH:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT_WIDTH");
		case PSIF_CSR_ADDR_IBU_P2_PSCNT_MASK:
			return ("PSIF_CSR_ADDR_IBU_P2_PSCNT_MASK");
		case PSIF_CSR_ADDR_IBU_P2_PCICRC_RCV_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCICRC_RCV_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCVCRC_RCV_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCVCRC_RCV_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCLEN_RCV_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCLEN_RCV_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCDLID_RCV_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCDLID_RCV_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCRCV_FCLEN_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRCV_FCLEN_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCRCV_FCVL_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRCV_FCVL_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCRCV_FCCRC_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRCV_FCCRC_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCMAL_FORMED_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCMAL_FORMED_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCBUF_OVER_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCBUF_OVER_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCVLMAP_ERRORS:
			return ("PSIF_CSR_ADDR_IBU_P2_PCVLMAP_ERRORS");
		case PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL1_VL0:
			return ("PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL1_VL0");
		case PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL3_VL2:
			return ("PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL3_VL2");
		case PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL5_VL4:
			return ("PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL5_VL4");
		case PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL7_VL6:
			return ("PSIF_CSR_ADDR_IBU_P2_PCVLINIT_CREDIT_VL7_VL6");
		case PSIF_CSR_ADDR_IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCECCENA_ERR:
			return ("PSIF_CSR_ADDR_IBU_P2_PCECCENA_ERR");
		case PSIF_CSR_ADDR_IBU_P2_PCTX_ECC_COR_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCTX_ECC_COR_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_PCTX_ECC_UNC_ERR_CNT:
			return ("PSIF_CSR_ADDR_IBU_P2_PCTX_ECC_UNC_ERR_CNT");
		case PSIF_CSR_ADDR_IBU_P2_TX_SRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_SRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P2_TX_CACHE_STATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_CACHE_STATUS");
		case PSIF_CSR_ADDR_IBU_P2_TX_DEBUG:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_DEBUG");
		case PSIF_CSR_ADDR_IBU_P2_RX_VL07_SRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_VL07_SRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P2_RX_VL15_SRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_VL15_SRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P2_LOOPSRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_LOOPSRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P2_RX_DEBUG:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_DEBUG");
		case PSIF_CSR_ADDR_IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS");
		case PSIF_CSR_ADDR_IBU_P2_VLARB_HI_PRI_TABLE:
			return ("PSIF_CSR_ADDR_IBU_P2_VLARB_HI_PRI_TABLE");
		case PSIF_CSR_ADDR_IBU_P2_VLARB_LO_PRI_TABLE:
			return ("PSIF_CSR_ADDR_IBU_P2_VLARB_LO_PRI_TABLE");
		case PSIF_CSR_ADDR_IBU_P2_TX_TBSVL10:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TBSVL10");
		case PSIF_CSR_ADDR_IBU_P2_TX_TBSVL32:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TBSVL32");
		case PSIF_CSR_ADDR_IBU_P2_TX_TBSVL54:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TBSVL54");
		case PSIF_CSR_ADDR_IBU_P2_TX_TBSVL76:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TBSVL76");
		case PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL10:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL10");
		case PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL32:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL32");
		case PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL54:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL54");
		case PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL76:
			return ("PSIF_CSR_ADDR_IBU_P2_TX_TBSARB_VL76");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_ENABLE:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_ENABLE");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_MODE:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_MODE");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_RDY:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_RDY");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_TIMER:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_TIMER");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_START:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_START");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA1:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA1");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA2:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA2");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA3:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA3");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA4:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA4");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA5:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA5");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA6:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA6");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA7:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA7");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA8:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA8");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA9:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA9");
		case PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA10:
			return ("PSIF_CSR_ADDR_IBU_P2_RX_TRACE_CAPTURE_DATA10");
		case PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL1_0:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL1_0");
		case PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL3_2:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL3_2");
		case PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL5_4:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL5_4");
		case PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL7_6:
			return ("PSIF_CSR_ADDR_IBU_P2_LINK_RX_FCCL_VL7_6");
		case PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_ADD_DEFAULT_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD0_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD1_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD2_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD3_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD4_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD5_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD6_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD7_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD8_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD9_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD10_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD11_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD12_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD13_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD14_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_ADD15_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD0_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD1_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD2_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD3_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD4_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD5_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD6_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD7_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD8_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD9_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD10_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD11_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD12_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD13_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD14_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE0:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE0");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE1:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE1");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE2:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE2");
		case PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE3:
			return ("PSIF_CSR_ADDR_IBU_P2_PHY_AMP1_ADD15_LANE3");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS0:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS0");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS1:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS1");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS2:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS2");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS3:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS3");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS4:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS4");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS5:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS5");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS6:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS6");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS7:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS7");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS8:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS8");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS9:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS9");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS10:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS10");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS11:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS11");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS12:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS12");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS13:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS13");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS14:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS14");
		case PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS15:
			return ("PSIF_CSR_ADDR_IBU_P2_REMOTE_DDS15");
		case PSIF_CSR_ADDR_IBU_P2_BAD_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_BAD_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_CH0_REG15_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_CH0_REG15_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_CH0_REG102_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_CH0_REG102_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_CH1_REG15_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_CH1_REG15_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_CH1_REG102_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_CH1_REG102_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_PLLA_REG24_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_PLLA_REG24_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_CH2_REG15_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_CH2_REG15_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_CH2_REG102_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_CH2_REG102_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_CH3_REG15_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_CH3_REG15_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_CH3_REG102_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_CH3_REG102_CSR");
		case PSIF_CSR_ADDR_IBU_P2_CETUS_PLLB_REG24_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_CETUS_PLLB_REG24_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_RESET_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_RESET_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_PLLA_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_PLLA_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_PLLB_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_PLLB_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_CMODE_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_CMODE_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_LB_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_LB_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_PWR_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_PWR_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_STATUS0_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_STATUS0_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_STATUS1_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_STATUS1_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_STATUS2_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_STATUS2_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_TXWCLK0_CNT_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_TXWCLK0_CNT_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_TXWCLK0_CNT_VAL:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_TXWCLK0_CNT_VAL");
		case PSIF_CSR_ADDR_IBU_P2_PMA_RXWCLK0_CNT_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_RXWCLK0_CNT_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_RXWCLK0_CNT_VAL:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_RXWCLK0_CNT_VAL");
		case PSIF_CSR_ADDR_IBU_P2_PMA_IRQ_STATUS_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_IRQ_STATUS_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_IRQ_MASK_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_IRQ_MASK_CSR");
		case PSIF_CSR_ADDR_IBU_P2_PMA_BAD_CSR:
			return ("PSIF_CSR_ADDR_IBU_P2_PMA_BAD_CSR");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG0:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG0");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG0:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG0");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG0:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG0");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG0:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG0");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG0:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG0");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG0:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG0");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD0:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD0");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD0:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD0");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD0:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD0");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD0:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD0");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD0:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD0");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG1:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG1");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG1:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG1");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG1:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG1");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG1:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG1");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG1:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG1");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG1:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG1");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD1:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD1");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD1:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD1");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD1:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD1");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD1:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD1");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD1:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD1");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG2:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG2");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG2:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG2");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG2:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG2");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG2:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG2");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG2:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG2");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG2:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG2");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD2:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD2");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD2:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD2");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD2:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD2");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD2:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD2");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD2:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD2");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG3:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG3");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG3:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG3");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG3:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG3");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG3:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG3");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG3:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG3");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG3:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG3");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD3:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD3");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD3:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD3");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD3:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD3");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD3:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD3");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD3:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD3");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG4:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG4");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG4:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG4");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG4:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG4");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG4:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG4");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG4:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG4");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG4:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG4");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD4:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD4");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD4:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD4");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD4:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD4");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD4:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD4");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD4:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD4");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG5:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG5");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG5:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG5");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG5:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG5");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG5:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG5");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG5:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG5");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG5:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG5");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD5:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD5");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD5:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD5");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD5:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD5");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD5:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD5");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD5:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD5");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG6:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG6");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG6:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG6");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG6:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG6");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG6:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG6");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG6:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG6");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG6:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG6");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD6:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD6");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD6:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD6");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD6:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD6");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD6:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD6");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD6:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD6");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG7:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG7");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG7:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG7");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG7:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG7");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG7:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG7");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG7:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG7");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG7:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG7");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD7:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD7");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD7:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD7");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD7:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD7");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD7:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD7");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD7:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD7");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG8:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG8");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG8:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG8");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG8:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG8");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG8:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG8");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG8:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG8");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG8:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG8");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD8:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD8");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD8:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD8");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD8:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD8");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD8:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD8");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD8:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD8");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG9:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG9");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG9:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG9");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG9:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG9");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG9:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG9");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG9:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG9");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG9:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG9");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD9:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD9");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD9:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD9");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD9:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD9");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD9:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD9");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD9:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD9");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG10:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG10");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG10:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG10");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG10:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG10");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG10:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG10");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG10:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG10");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG10:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG10");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD10:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD10");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD10:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD10");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD10:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD10");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD10:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD10");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD10:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD10");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG11:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG11");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG11:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG11");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG11:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG11");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG11:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG11");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG11:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG11");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG11:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG11");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD11:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD11");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD11:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD11");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD11:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD11");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD11:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD11");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD11:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD11");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG12:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG12");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG12:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG12");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG12:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG12");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG12:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG12");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG12:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG12");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG12:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG12");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD12:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD12");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD12:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD12");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD12:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD12");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD12:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD12");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD12:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD12");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG13:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG13");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG13:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG13");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG13:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG13");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG13:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG13");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG13:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG13");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG13:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG13");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD13:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD13");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD13:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD13");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD13:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD13");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD13:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD13");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD13:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD13");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG14:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG14");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG14:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG14");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG14:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG14");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG14:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG14");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG14:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG14");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG14:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG14");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD14:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD14");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD14:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD14");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD14:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD14");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD14:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD14");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD14:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD14");
		case PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG15:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_CREDIT_REG15");
		case PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG15:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_CREDIT_REG15");
		case PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG15:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_CREDIT_REG15");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG15:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_CREDIT_REG15");
		case PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG15:
			return ("PSIF_CSR_ADDR_PEU_P_RETURN_INTERVAL_REG15");
		case PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG15:
			return ("PSIF_CSR_ADDR_PEU_NP_RETURN_INTERVAL_REG15");
		case PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD15:
			return ("PSIF_CSR_ADDR_PEU_Q_NP_TAG_CNT_THLD15");
		case PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD15:
			return ("PSIF_CSR_ADDR_PEU_XADM_PH_CDTS_THLD15");
		case PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD15:
			return ("PSIF_CSR_ADDR_PEU_XADM_PD_CDTS_THLD15");
		case PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD15:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPH_CDTS_THLD15");
		case PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD15:
			return ("PSIF_CSR_ADDR_PEU_XADM_NPD_CDTS_THLD15");
		case PSIF_CSR_ADDR_PEU_HPRI_Q_REG:
			return ("PSIF_CSR_ADDR_PEU_HPRI_Q_REG");
		case PSIF_CSR_ADDR_PEU_HPRI_RR_WEIGHT_REG:
			return ("PSIF_CSR_ADDR_PEU_HPRI_RR_WEIGHT_REG");
		case PSIF_CSR_ADDR_PEU_MAX_RD_REQ_SIZE_REG:
			return ("PSIF_CSR_ADDR_PEU_MAX_RD_REQ_SIZE_REG");
		case PSIF_CSR_ADDR_PEU_DIRTY_PCI_TAG_CTL_REG:
			return ("PSIF_CSR_ADDR_PEU_DIRTY_PCI_TAG_CTL_REG");
		case PSIF_CSR_ADDR_PEU_MASTER_VEC_ST_REG:
			return ("PSIF_CSR_ADDR_PEU_MASTER_VEC_ST_REG");
		case PSIF_CSR_ADDR_PEU_MASTER_VEC_MSK_REG:
			return ("PSIF_CSR_ADDR_PEU_MASTER_VEC_MSK_REG");
		case PSIF_CSR_ADDR_PEU_FLR_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_FLR_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_FLR_DONE_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_FLR_DONE_DBG_REG");
		case PSIF_CSR_ADDR_PEU_FLR_REQ_VEC_ST_REG:
			return ("PSIF_CSR_ADDR_PEU_FLR_REQ_VEC_ST_REG");
		case PSIF_CSR_ADDR_PEU_FLR_DONE_VEC_ST_REG:
			return ("PSIF_CSR_ADDR_PEU_FLR_DONE_VEC_ST_REG");
		case PSIF_CSR_ADDR_PEU_TAG_POOL_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_TAG_POOL_DBG_REG");
		case PSIF_CSR_ADDR_PEU_LTSSM_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_LTSSM_DBG_REG");
		case PSIF_CSR_ADDR_PEU_TSU_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_TSU_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_EPS_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_EPS_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_P_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_P_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_NP_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_NP_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_DBI_CSR_WDAT_REG:
			return ("PSIF_CSR_ADDR_PEU_DBI_CSR_WDAT_REG");
		case PSIF_CSR_ADDR_PEU_DBI_CSR_CMD_REG:
			return ("PSIF_CSR_ADDR_PEU_DBI_CSR_CMD_REG");
		case PSIF_CSR_ADDR_PEU_DBI_CSR_STATUS_REG:
			return ("PSIF_CSR_ADDR_PEU_DBI_CSR_STATUS_REG");
		case PSIF_CSR_ADDR_PEU_DBI_CSR_RDAT_REG:
			return ("PSIF_CSR_ADDR_PEU_DBI_CSR_RDAT_REG");
		case PSIF_CSR_ADDR_PEU_CPL_BUF_WATER_MARK_REG:
			return ("PSIF_CSR_ADDR_PEU_CPL_BUF_WATER_MARK_REG");
		case PSIF_CSR_ADDR_PEU_ARB_CPL_BUF_THLD_REG:
			return ("PSIF_CSR_ADDR_PEU_ARB_CPL_BUF_THLD_REG");
		case PSIF_CSR_ADDR_PEU_CPL_BUF_CREDIT_REG:
			return ("PSIF_CSR_ADDR_PEU_CPL_BUF_CREDIT_REG");
		case PSIF_CSR_ADDR_PEU_CPL_MAX_CREDIT_REG:
			return ("PSIF_CSR_ADDR_PEU_CPL_MAX_CREDIT_REG");
		case PSIF_CSR_ADDR_PEU_PCIE_PHY_CTL_REG:
			return ("PSIF_CSR_ADDR_PEU_PCIE_PHY_CTL_REG");
		case PSIF_CSR_ADDR_PEU_FORCE_ERR_REG:
			return ("PSIF_CSR_ADDR_PEU_FORCE_ERR_REG");
		case PSIF_CSR_ADDR_PEU_MSG_GEN_QW0_REG:
			return ("PSIF_CSR_ADDR_PEU_MSG_GEN_QW0_REG");
		case PSIF_CSR_ADDR_PEU_MSG_GEN_QW1_REG:
			return ("PSIF_CSR_ADDR_PEU_MSG_GEN_QW1_REG");
		case PSIF_CSR_ADDR_PEU_MSG_STATUS_REG:
			return ("PSIF_CSR_ADDR_PEU_MSG_STATUS_REG");
		case PSIF_CSR_ADDR_PEU_ATS_MSG_QW0_REG:
			return ("PSIF_CSR_ADDR_PEU_ATS_MSG_QW0_REG");
		case PSIF_CSR_ADDR_PEU_ATS_MSG_QW1_REG:
			return ("PSIF_CSR_ADDR_PEU_ATS_MSG_QW1_REG");
		case PSIF_CSR_ADDR_PEU_SRAM_CORR_ERR_STATUS_REG:
			return ("PSIF_CSR_ADDR_PEU_SRAM_CORR_ERR_STATUS_REG");
		case PSIF_CSR_ADDR_PEU_HI_PRI_MSK_REG:
			return ("PSIF_CSR_ADDR_PEU_HI_PRI_MSK_REG");
		case PSIF_CSR_ADDR_PEU_HI_PRI_INTR_VEC_REG:
			return ("PSIF_CSR_ADDR_PEU_HI_PRI_INTR_VEC_REG");
		case PSIF_CSR_ADDR_PEU_FATAL_INTR_MSK_REG:
			return ("PSIF_CSR_ADDR_PEU_FATAL_INTR_MSK_REG");
		case PSIF_CSR_ADDR_PEU_FATAL_INTR_VEC_REG:
			return ("PSIF_CSR_ADDR_PEU_FATAL_INTR_VEC_REG");
		case PSIF_CSR_ADDR_PEU_INTR_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_INTR_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_TSU_PIO_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_TSU_PIO_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_EPRM_PIO_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_EPRM_PIO_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_INTR_PIO_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_INTR_PIO_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_CPL_FLUSH_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_CPL_FLUSH_DBG_REG");
		case PSIF_CSR_ADDR_PEU_EP_DIAG_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_EP_DIAG_DBG_REG");
		case PSIF_CSR_ADDR_PEU_CXPL_EI_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_CXPL_EI_DBG_REG");
		case PSIF_CSR_ADDR_PEU_CXPL_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_CXPL_DBG_REG");
		case PSIF_CSR_ADDR_PEU_FF_DC_1_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_FF_DC_1_DBG_REG");
		case PSIF_CSR_ADDR_PEU_FF_DC_2_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_FF_DC_2_DBG_REG");
		case PSIF_CSR_ADDR_PEU_FORCE_FLR_REG:
			return ("PSIF_CSR_ADDR_PEU_FORCE_FLR_REG");
		case PSIF_CSR_ADDR_PEU_CSR_PEU_CTL_ST_REG:
			return ("PSIF_CSR_ADDR_PEU_CSR_PEU_CTL_ST_REG");
		case PSIF_CSR_ADDR_PEU_CSR_PEU_INT_ST_REG:
			return ("PSIF_CSR_ADDR_PEU_CSR_PEU_INT_ST_REG");
		case PSIF_CSR_ADDR_PEU_CSR_PEU_INT_MSK_REG:
			return ("PSIF_CSR_ADDR_PEU_CSR_PEU_INT_MSK_REG");
		case PSIF_CSR_ADDR_PEU_CSR_LP_INTR_VEC_REG:
			return ("PSIF_CSR_ADDR_PEU_CSR_LP_INTR_VEC_REG");
		case PSIF_CSR_ADDR_PEU_CSR_LPRI_INT_MSK_REG:
			return ("PSIF_CSR_ADDR_PEU_CSR_LPRI_INT_MSK_REG");
		case PSIF_CSR_ADDR_PEU_CSR_SER_INT_ST_REG:
			return ("PSIF_CSR_ADDR_PEU_CSR_SER_INT_ST_REG");
		case PSIF_CSR_ADDR_PEU_TSU_FLR_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_TSU_FLR_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_TSU_FLR_DONE_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_TSU_FLR_DONE_DBG_REG");
		case PSIF_CSR_ADDR_PEU_EPS_FLR_REQ_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_EPS_FLR_REQ_DBG_REG");
		case PSIF_CSR_ADDR_PEU_EPS_FLR_DONE_DBG_REG:
			return ("PSIF_CSR_ADDR_PEU_EPS_FLR_DONE_DBG_REG");
		case PSIF_CSR_ADDR_PEU_PIPE_CSR_WDAT_REG:
			return ("PSIF_CSR_ADDR_PEU_PIPE_CSR_WDAT_REG");
		case PSIF_CSR_ADDR_PEU_PIPE_CSR_CMD_REG:
			return ("PSIF_CSR_ADDR_PEU_PIPE_CSR_CMD_REG");
		case PSIF_CSR_ADDR_PEU_PIPE_CSR_STATUS_REG:
			return ("PSIF_CSR_ADDR_PEU_PIPE_CSR_STATUS_REG");
		case PSIF_CSR_ADDR_PEU_PIPE_CSR_RDAT_REG:
			return ("PSIF_CSR_ADDR_PEU_PIPE_CSR_RDAT_REG");
		case PSIF_CSR_ADDR_PEU_SER_CSR_WDAT_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_CSR_WDAT_REG");
		case PSIF_CSR_ADDR_PEU_SER_CSR_CMD_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_CSR_CMD_REG");
		case PSIF_CSR_ADDR_PEU_SER_CSR_STATUS_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_CSR_STATUS_REG");
		case PSIF_CSR_ADDR_PEU_SER_CSR_RDAT_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_CSR_RDAT_REG");
		case PSIF_CSR_ADDR_PEU_SER_1_CSR_WDAT_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_1_CSR_WDAT_REG");
		case PSIF_CSR_ADDR_PEU_SER_1_CSR_CMD_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_1_CSR_CMD_REG");
		case PSIF_CSR_ADDR_PEU_SER_1_CSR_STATUS_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_1_CSR_STATUS_REG");
		case PSIF_CSR_ADDR_PEU_SER_1_CSR_RDAT_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_1_CSR_RDAT_REG");
		case PSIF_CSR_ADDR_PEU_SER_DFE_ST_SEL_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_DFE_ST_SEL_REG");
		case PSIF_CSR_ADDR_PEU_SER_DFE_ST_0_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_DFE_ST_0_REG");
		case PSIF_CSR_ADDR_PEU_SER_DFE_ST_1_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_DFE_ST_1_REG");
		case PSIF_CSR_ADDR_PEU_SER_DFE_ST_2_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_DFE_ST_2_REG");
		case PSIF_CSR_ADDR_PEU_SER_DFE_ST_3_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_DFE_ST_3_REG");
		case PSIF_CSR_ADDR_PEU_SER_POWERDOWN_CTL_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_POWERDOWN_CTL_REG");
		case PSIF_CSR_ADDR_PEU_SER_CFG0_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_CFG0_REG");
		case PSIF_CSR_ADDR_PEU_SER_CFG1_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_CFG1_REG");
		case PSIF_CSR_ADDR_PEU_SER_CFG2_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_CFG2_REG");
		case PSIF_CSR_ADDR_PEU_SER_CFG3_REG:
			return ("PSIF_CSR_ADDR_PEU_SER_CFG3_REG");
		case PSIF_CSR_ADDR_PEU_CSR_SER_CTL_REG:
			return ("PSIF_CSR_ADDR_PEU_CSR_SER_CTL_REG");
		case PSIF_CSR_ADDR_PEU_CSR_SER_ST_REG:
			return ("PSIF_CSR_ADDR_PEU_CSR_SER_ST_REG");
		default:
			return ("PSIF_CSR_ADDR_UNKNOWN");
	}
}


/* Convert CSR addresses to string */
inline static const char* str_csr_base_addr(unsigned long addr) {
	/*
	 * TSU VL mapping table for requests. Inputs/addressing to this table are
	 * {UF(35 UFs), tsu_qosl (High/Low BAR), tsu_sl, port}.
	 */
	if ((addr >= TSU_HOST_TVL_TABLE_ADDR) &&
	    (addr <  TSU_HOST_TVL_TABLE_ADDR + 
	             TSU_HOST_TVL_TABLE_STRIDE * 
	             TSU_HOST_TVL_TABLE_DEPTH)) {
		return("TSU_HOST_TVL_TABLE");
	}
	/* Per TVL register.Maximum global credits a particular TVL can get. */
	if ((addr >= TSU_HOST_MAX_GLOBAL_TVL_CRDTS_ADDR) &&
	    (addr <  TSU_HOST_MAX_GLOBAL_TVL_CRDTS_ADDR + 
	             TSU_HOST_MAX_GLOBAL_TVL_CRDTS_STRIDE * 
	             TSU_HOST_MAX_GLOBAL_TVL_CRDTS_DEPTH)) {
		return("TSU_HOST_MAX_GLOBAL_TVL_CRDTS");
	}
	/*
	 * Per TVL register.Maximum private credits a particular TVL can get. The
	 * amount of credits dedicated to this TVL.
	 */
	if ((addr >= TSU_HOST_PRIVATE_TVL_CRDTS_ADDR) &&
	    (addr <  TSU_HOST_PRIVATE_TVL_CRDTS_ADDR + 
	             TSU_HOST_PRIVATE_TVL_CRDTS_STRIDE * 
	             TSU_HOST_PRIVATE_TVL_CRDTS_DEPTH)) {
		return("TSU_HOST_PRIVATE_TVL_CRDTS");
	}
	/* Total number of global credits assign to TVLs. */
	if ((addr >= TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS_ADDR) &&
	    (addr <  TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS_ADDR + 
	             TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS_STRIDE * 
	             TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS_DEPTH)) {
		return("TSU_HOST_TOTAL_GLOBAL_TVL_CRDTS");
	}
	/* weight given for round robin arbitration for xiu commands. */
	if ((addr >= TSU_HOST_XIU_ARBITER_ADDR) &&
	    (addr <  TSU_HOST_XIU_ARBITER_ADDR + 
	             TSU_HOST_XIU_ARBITER_STRIDE * 
	             TSU_HOST_XIU_ARBITER_DEPTH)) {
		return("TSU_HOST_XIU_ARBITER");
	}
	/* weight given for round robin arbitration for eps commands. */
	if ((addr >= TSU_HOST_EPS_ARBITER_ADDR) &&
	    (addr <  TSU_HOST_EPS_ARBITER_ADDR + 
	             TSU_HOST_EPS_ARBITER_STRIDE * 
	             TSU_HOST_EPS_ARBITER_DEPTH)) {
		return("TSU_HOST_EPS_ARBITER");
	}
	/* Number of error credits reserved in the tsu_host llq. */
	if ((addr >= TSU_HOST_ERROR_CRDTS_ADDR) &&
	    (addr <  TSU_HOST_ERROR_CRDTS_ADDR + 
	             TSU_HOST_ERROR_CRDTS_STRIDE * 
	             TSU_HOST_ERROR_CRDTS_DEPTH)) {
		return("TSU_HOST_ERROR_CRDTS");
	}
	/* Data Latency skew from all clients to tsu_host. */
	if ((addr >= TSU_HOST_DATA_LATENCY_ADDR) &&
	    (addr <  TSU_HOST_DATA_LATENCY_ADDR + 
	             TSU_HOST_DATA_LATENCY_STRIDE * 
	             TSU_HOST_DATA_LATENCY_DEPTH)) {
		return("TSU_HOST_DATA_LATENCY");
	}
	/*
	 * Per TVL register. The amount of private and global credits used to this
	 * TVL.
	 */
	if ((addr >= TSU_HOST_TVL_CRDTS_USED_ADDR) &&
	    (addr <  TSU_HOST_TVL_CRDTS_USED_ADDR + 
	             TSU_HOST_TVL_CRDTS_USED_STRIDE * 
	             TSU_HOST_TVL_CRDTS_USED_DEPTH)) {
		return("TSU_HOST_TVL_CRDTS_USED");
	}
	/* Amount of global credits used shared among all TVLs. */
	if ((addr >= TSU_HOST_GLOBAL_CRDTS_USED_ADDR) &&
	    (addr <  TSU_HOST_GLOBAL_CRDTS_USED_ADDR + 
	             TSU_HOST_GLOBAL_CRDTS_USED_STRIDE * 
	             TSU_HOST_GLOBAL_CRDTS_USED_DEPTH)) {
		return("TSU_HOST_GLOBAL_CRDTS_USED");
	}
	/* when set puts the tsu_host in hca mode for Atomics. */
	if ((addr >= TSU_HOST_HCA_MODE_ADDR) &&
	    (addr <  TSU_HOST_HCA_MODE_ADDR + 
	             TSU_HOST_HCA_MODE_STRIDE * 
	             TSU_HOST_HCA_MODE_DEPTH)) {
		return("TSU_HOST_HCA_MODE");
	}
	/*
	 * when set flips the compare and swap field in xiu meta_data bus in PCIe
	 * mode.
	 */
	if ((addr >= TSU_HOST_ENABLE_PCIE_SWAP_ADDR) &&
	    (addr <  TSU_HOST_ENABLE_PCIE_SWAP_ADDR + 
	             TSU_HOST_ENABLE_PCIE_SWAP_STRIDE * 
	             TSU_HOST_ENABLE_PCIE_SWAP_DEPTH)) {
		return("TSU_HOST_ENABLE_PCIE_SWAP");
	}
	/* Handling Endianess of host Processor. */
	if ((addr >= TSU_HOST_LITTLE_ENDIAN_MODE_ADDR) &&
	    (addr <  TSU_HOST_LITTLE_ENDIAN_MODE_ADDR + 
	             TSU_HOST_LITTLE_ENDIAN_MODE_STRIDE * 
	             TSU_HOST_LITTLE_ENDIAN_MODE_DEPTH)) {
		return("TSU_HOST_LITTLE_ENDIAN_MODE");
	}
	/* allocating global credits to llq in XIU */
	if ((addr >= TSU_HOST_XIU_LLQ_GLOBAL_CREDITS_ADDR) &&
	    (addr <  TSU_HOST_XIU_LLQ_GLOBAL_CREDITS_ADDR + 
	             TSU_HOST_XIU_LLQ_GLOBAL_CREDITS_STRIDE * 
	             TSU_HOST_XIU_LLQ_GLOBAL_CREDITS_DEPTH)) {
		return("TSU_HOST_XIU_LLQ_GLOBAL_CREDITS");
	}
	if ((addr >= TSU_HOST_QP_BASE_ADDR_0_ADDR) &&
	    (addr <  TSU_HOST_QP_BASE_ADDR_0_ADDR + 
	             TSU_HOST_QP_BASE_ADDR_0_STRIDE * 
	             TSU_HOST_QP_BASE_ADDR_0_DEPTH)) {
		return("TSU_HOST_QP_BASE_ADDR_0");
	}
	if ((addr >= TSU_HOST_QP_BASE_ADDR_1_ADDR) &&
	    (addr <  TSU_HOST_QP_BASE_ADDR_1_ADDR + 
	             TSU_HOST_QP_BASE_ADDR_1_STRIDE * 
	             TSU_HOST_QP_BASE_ADDR_1_DEPTH)) {
		return("TSU_HOST_QP_BASE_ADDR_1");
	}
	if ((addr >= TSU_HOST_QP_BASE_ADDR_2_ADDR) &&
	    (addr <  TSU_HOST_QP_BASE_ADDR_2_ADDR + 
	             TSU_HOST_QP_BASE_ADDR_2_STRIDE * 
	             TSU_HOST_QP_BASE_ADDR_2_DEPTH)) {
		return("TSU_HOST_QP_BASE_ADDR_2");
	}
	/* MRS credit debug counter. */
	if ((addr >= TSU_HOST_MRS_CREDIT_CNT_ADDR) &&
	    (addr <  TSU_HOST_MRS_CREDIT_CNT_ADDR + 
	             TSU_HOST_MRS_CREDIT_CNT_STRIDE * 
	             TSU_HOST_MRS_CREDIT_CNT_DEPTH)) {
		return("TSU_HOST_MRS_CREDIT_CNT");
	}
	/* ERR credit debug counter. */
	if ((addr >= TSU_HOST_ERR_CREDIT_CNT_ADDR) &&
	    (addr <  TSU_HOST_ERR_CREDIT_CNT_ADDR + 
	             TSU_HOST_ERR_CREDIT_CNT_STRIDE * 
	             TSU_HOST_ERR_CREDIT_CNT_DEPTH)) {
		return("TSU_HOST_ERR_CREDIT_CNT");
	}
	/* LLQ debug counter. */
	if ((addr >= TSU_HOST_LLQ_CNT_ADDR) &&
	    (addr <  TSU_HOST_LLQ_CNT_ADDR + 
	             TSU_HOST_LLQ_CNT_STRIDE * 
	             TSU_HOST_LLQ_CNT_DEPTH)) {
		return("TSU_HOST_LLQ_CNT");
	}
	/*
	 * EPS Address Error Interrupt status register. 1b per source (1=int
	 * triggered).
	 */
	if ((addr >= TSU_HOST_INT_STATUS_ADDR) &&
	    (addr <  TSU_HOST_INT_STATUS_ADDR + 
	             TSU_HOST_INT_STATUS_STRIDE * 
	             TSU_HOST_INT_STATUS_DEPTH)) {
		return("TSU_HOST_INT_STATUS");
	}
	/* EPS Address Error Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_HOST_INT_MASK_ADDR) &&
	    (addr <  TSU_HOST_INT_MASK_ADDR + 
	             TSU_HOST_INT_MASK_STRIDE * 
	             TSU_HOST_INT_MASK_DEPTH)) {
		return("TSU_HOST_INT_MASK");
	}
	/*
	 * EPS Address Error Interrupt priority register. 1b per source (1=high,
	 * 0=low).
	 */
	if ((addr >= TSU_HOST_INT_PRI_ADDR) &&
	    (addr <  TSU_HOST_INT_PRI_ADDR + 
	             TSU_HOST_INT_PRI_STRIDE * 
	             TSU_HOST_INT_PRI_DEPTH)) {
		return("TSU_HOST_INT_PRI");
	}
	/*
	 * EPS Address Error Interrupt status clear register. 1b per source (1=source
	 * will be cleared from int_status register when kick is called).
	 */
	if ((addr >= TSU_HOST_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_HOST_INT_STATUS_CLEAR_ADDR + 
	             TSU_HOST_INT_STATUS_CLEAR_STRIDE * 
	             TSU_HOST_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_HOST_INT_STATUS_CLEAR");
	}
	/* Trigger the EPS Address Error int_status clear operation. */
	if ((addr >= TSU_HOST_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_HOST_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_HOST_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_HOST_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_HOST_INT_STATUS_CLEAR_KICK");
	}
	/*
	 * EPS address which caused the int_status.eps_address_invalid to get set.
	 */
	if ((addr >= TSU_HOST_EPS_ADDRESS_ADDR) &&
	    (addr <  TSU_HOST_EPS_ADDRESS_ADDR + 
	             TSU_HOST_EPS_ADDRESS_STRIDE * 
	             TSU_HOST_EPS_ADDRESS_DEPTH)) {
		return("TSU_HOST_EPS_ADDRESS");
	}
	/* ECC and Parity Errors status register. */
	if ((addr >= TSU_HOST_ECC_PARITY_ERRS_ADDR) &&
	    (addr <  TSU_HOST_ECC_PARITY_ERRS_ADDR + 
	             TSU_HOST_ECC_PARITY_ERRS_STRIDE * 
	             TSU_HOST_ECC_PARITY_ERRS_DEPTH)) {
		return("TSU_HOST_ECC_PARITY_ERRS");
	}
	/*
	 * Fatal Interrupt and Stop Mask register. 1b per source (interrupt masks:
	 * 1=masked, stop-masks: 1=error does not cause host to stop processing) ECC,
	 * or CAM Parity error if enabled, will cause a fatal interrupt. Decide
	 * whether or not to stop all host processing when this error occurs.
	 */
	if ((addr >= TSU_HOST_FATAL_INT_MASK_ADDR) &&
	    (addr <  TSU_HOST_FATAL_INT_MASK_ADDR + 
	             TSU_HOST_FATAL_INT_MASK_STRIDE * 
	             TSU_HOST_FATAL_INT_MASK_DEPTH)) {
		return("TSU_HOST_FATAL_INT_MASK");
	}
	/* Interrupt Total Moderation */
	if ((addr >= TSU_HOST_INT_CTRL_ADDR) &&
	    (addr <  TSU_HOST_INT_CTRL_ADDR + 
	             TSU_HOST_INT_CTRL_STRIDE * 
	             TSU_HOST_INT_CTRL_DEPTH)) {
		return("TSU_HOST_INT_CTRL");
	}
	/* Interrupt Channel Control 0 */
	if ((addr >= TSU_HOST_INT_CHAN_CTRL_0_ADDR) &&
	    (addr <  TSU_HOST_INT_CHAN_CTRL_0_ADDR + 
	             TSU_HOST_INT_CHAN_CTRL_0_STRIDE * 
	             TSU_HOST_INT_CHAN_CTRL_0_DEPTH)) {
		return("TSU_HOST_INT_CHAN_CTRL_0");
	}
	/* Interrupt Channel Control 1 */
	if ((addr >= TSU_HOST_INT_CHAN_CTRL_1_ADDR) &&
	    (addr <  TSU_HOST_INT_CHAN_CTRL_1_ADDR + 
	             TSU_HOST_INT_CHAN_CTRL_1_STRIDE * 
	             TSU_HOST_INT_CHAN_CTRL_1_DEPTH)) {
		return("TSU_HOST_INT_CHAN_CTRL_1");
	}
	/* Interrupt Channel Control 2 */
	if ((addr >= TSU_HOST_INT_CHAN_CTRL_2_ADDR) &&
	    (addr <  TSU_HOST_INT_CHAN_CTRL_2_ADDR + 
	             TSU_HOST_INT_CHAN_CTRL_2_STRIDE * 
	             TSU_HOST_INT_CHAN_CTRL_2_DEPTH)) {
		return("TSU_HOST_INT_CHAN_CTRL_2");
	}
	/* MMU Static-Configuration and Status */
	if ((addr >= TSU_MMU_MMU_CONFIG_ADDR) &&
	    (addr <  TSU_MMU_MMU_CONFIG_ADDR + 
	             TSU_MMU_MMU_CONFIG_STRIDE * 
	             TSU_MMU_MMU_CONFIG_DEPTH)) {
		return("TSU_MMU_MMU_CONFIG");
	}
	/* MMU Credit Configuration */
	if ((addr >= TSU_MMU_CREDIT_CONFIG_ADDR) &&
	    (addr <  TSU_MMU_CREDIT_CONFIG_ADDR + 
	             TSU_MMU_CREDIT_CONFIG_STRIDE * 
	             TSU_MMU_CREDIT_CONFIG_DEPTH)) {
		return("TSU_MMU_CREDIT_CONFIG");
	}
	/* PA Address Size Configuration */
	if ((addr >= TSU_MMU_PA_MASK_ADDR) &&
	    (addr <  TSU_MMU_PA_MASK_ADDR + 
	             TSU_MMU_PA_MASK_STRIDE * 
	             TSU_MMU_PA_MASK_DEPTH)) {
		return("TSU_MMU_PA_MASK");
	}
	/* Flush MMU and-or PTW Caches. */
	if ((addr >= TSU_MMU_FLUSH_CACHES_ADDR) &&
	    (addr <  TSU_MMU_FLUSH_CACHES_ADDR + 
	             TSU_MMU_FLUSH_CACHES_STRIDE * 
	             TSU_MMU_FLUSH_CACHES_DEPTH)) {
		return("TSU_MMU_FLUSH_CACHES");
	}
	/* Statistic Counters. */
	if ((addr >= TSU_MMU_STAT_COUNTERS_ADDR) &&
	    (addr <  TSU_MMU_STAT_COUNTERS_ADDR + 
	             TSU_MMU_STAT_COUNTERS_STRIDE * 
	             TSU_MMU_STAT_COUNTERS_DEPTH)) {
		return("TSU_MMU_STAT_COUNTERS");
	}
	/* ECC and Parity Errors. */
	if ((addr >= TSU_MMU_ECC_PARITY_ERRS_ADDR) &&
	    (addr <  TSU_MMU_ECC_PARITY_ERRS_ADDR + 
	             TSU_MMU_ECC_PARITY_ERRS_STRIDE * 
	             TSU_MMU_ECC_PARITY_ERRS_DEPTH)) {
		return("TSU_MMU_ECC_PARITY_ERRS");
	}
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	if ((addr >= TSU_MMU_UF_CONTROL_ADDR) &&
	    (addr <  TSU_MMU_UF_CONTROL_ADDR + 
	             TSU_MMU_UF_CONTROL_STRIDE * 
	             TSU_MMU_UF_CONTROL_DEPTH)) {
		return("TSU_MMU_UF_CONTROL");
	}
	/* Starts operation defined in uf_control. */
	if ((addr >= TSU_MMU_UF_CONTROL_KICK_ADDR) &&
	    (addr <  TSU_MMU_UF_CONTROL_KICK_ADDR + 
	             TSU_MMU_UF_CONTROL_KICK_STRIDE * 
	             TSU_MMU_UF_CONTROL_KICK_DEPTH)) {
		return("TSU_MMU_UF_CONTROL_KICK");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_MMU_INT_STATUS_ADDR) &&
	    (addr <  TSU_MMU_INT_STATUS_ADDR + 
	             TSU_MMU_INT_STATUS_STRIDE * 
	             TSU_MMU_INT_STATUS_DEPTH)) {
		return("TSU_MMU_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_MMU_INT_MASK_ADDR) &&
	    (addr <  TSU_MMU_INT_MASK_ADDR + 
	             TSU_MMU_INT_MASK_STRIDE * 
	             TSU_MMU_INT_MASK_DEPTH)) {
		return("TSU_MMU_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_MMU_INT_PRI_ADDR) &&
	    (addr <  TSU_MMU_INT_PRI_ADDR + 
	             TSU_MMU_INT_PRI_STRIDE * 
	             TSU_MMU_INT_PRI_DEPTH)) {
		return("TSU_MMU_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_MMU_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_MMU_INT_STATUS_CLEAR_ADDR + 
	             TSU_MMU_INT_STATUS_CLEAR_STRIDE * 
	             TSU_MMU_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_MMU_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_MMU_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_MMU_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_MMU_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_MMU_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_MMU_INT_STATUS_CLEAR_KICK");
	}
	/* Uncorrectable-Fatal Error Mask */
	if ((addr >= TSU_MMU_UNCOR_ERR_MASK_ADDR) &&
	    (addr <  TSU_MMU_UNCOR_ERR_MASK_ADDR + 
	             TSU_MMU_UNCOR_ERR_MASK_STRIDE * 
	             TSU_MMU_UNCOR_ERR_MASK_DEPTH)) {
		return("TSU_MMU_UNCOR_ERR_MASK");
	}
	/*
	 * TSU VL mapping table for requests. Inputs/addressing to this table are
	 * {UF, tsu_qosl (High/Low BAR), tsu_sl}.
	 */
	if ((addr >= TSU_CBU_TVL_TABLE_ADDR) &&
	    (addr <  TSU_CBU_TVL_TABLE_ADDR + 
	             TSU_CBU_TVL_TABLE_STRIDE * 
	             TSU_CBU_TVL_TABLE_DEPTH)) {
		return("TSU_CBU_TVL_TABLE");
	}
	/*
	 * Below dcb_bar address is a write to the VCB, else write to the DCB.
	 * dcb_bar = 0 applies no VCB. Below this qosl_bar address is low BAR, else
	 * is high BAR. Inputs/addressing to this table is UF.
	 */
	if ((addr >= TSU_CBU_SUB_BAR_ADDR_ADDR) &&
	    (addr <  TSU_CBU_SUB_BAR_ADDR_ADDR + 
	             TSU_CBU_SUB_BAR_ADDR_STRIDE * 
	             TSU_CBU_SUB_BAR_ADDR_DEPTH)) {
		return("TSU_CBU_SUB_BAR_ADDR");
	}
	/*
	 * Virtual collect buffer start offset. VCB#=vcb_start_offset + pio
	 * address[25:12]. Inputs/addressing to this table is UF.
	 */
	if ((addr >= TSU_CBU_VCB_START_OFFSET_ADDR) &&
	    (addr <  TSU_CBU_VCB_START_OFFSET_ADDR + 
	             TSU_CBU_VCB_START_OFFSET_STRIDE * 
	             TSU_CBU_VCB_START_OFFSET_DEPTH)) {
		return("TSU_CBU_VCB_START_OFFSET");
	}
	/*
	 * How many physical collect buffers are allocated to the high BAR.
	 * Inputs/addressing to this table is UF.
	 */
	if ((addr >= TSU_CBU_PCB_ALLOC_HIGH_ADDR) &&
	    (addr <  TSU_CBU_PCB_ALLOC_HIGH_ADDR + 
	             TSU_CBU_PCB_ALLOC_HIGH_STRIDE * 
	             TSU_CBU_PCB_ALLOC_HIGH_DEPTH)) {
		return("TSU_CBU_PCB_ALLOC_HIGH");
	}
	/*
	 * How many physical collect buffers are allocated to the low BAR.
	 * Inputs/addressing to this table is UF.
	 */
	if ((addr >= TSU_CBU_PCB_ALLOC_LOW_ADDR) &&
	    (addr <  TSU_CBU_PCB_ALLOC_LOW_ADDR + 
	             TSU_CBU_PCB_ALLOC_LOW_STRIDE * 
	             TSU_CBU_PCB_ALLOC_LOW_DEPTH)) {
		return("TSU_CBU_PCB_ALLOC_LOW");
	}
	/*
	 * How many physical collect buffers are available. Inputs/addressing to this
	 * table is UF.
	 */
	if ((addr >= TSU_CBU_PCB_AVAILABLE_ADDR) &&
	    (addr <  TSU_CBU_PCB_AVAILABLE_ADDR + 
	             TSU_CBU_PCB_AVAILABLE_STRIDE * 
	             TSU_CBU_PCB_AVAILABLE_DEPTH)) {
		return("TSU_CBU_PCB_AVAILABLE");
	}
	/*
	 * How many physical collect buffers are used in high BAR. Inputs/addressing
	 * to this table is UF.
	 */
	if ((addr >= TSU_CBU_PCB_HIGH_USED_ADDR) &&
	    (addr <  TSU_CBU_PCB_HIGH_USED_ADDR + 
	             TSU_CBU_PCB_HIGH_USED_STRIDE * 
	             TSU_CBU_PCB_HIGH_USED_DEPTH)) {
		return("TSU_CBU_PCB_HIGH_USED");
	}
	/*
	 * How many physical collect buffers are used in low BAR. Inputs/addressing
	 * to this table is UF.
	 */
	if ((addr >= TSU_CBU_PCB_LOW_USED_ADDR) &&
	    (addr <  TSU_CBU_PCB_LOW_USED_ADDR + 
	             TSU_CBU_PCB_LOW_USED_STRIDE * 
	             TSU_CBU_PCB_LOW_USED_DEPTH)) {
		return("TSU_CBU_PCB_LOW_USED");
	}
	/* scoreboard init. */
	if ((addr >= TSU_CBU_SCBD_INIT_ADDR) &&
	    (addr <  TSU_CBU_SCBD_INIT_ADDR + 
	             TSU_CBU_SCBD_INIT_STRIDE * 
	             TSU_CBU_SCBD_INIT_DEPTH)) {
		return("TSU_CBU_SCBD_INIT");
	}
	/* scoreboard init done status. */
	if ((addr >= TSU_CBU_SCBD_INIT_DONE_ADDR) &&
	    (addr <  TSU_CBU_SCBD_INIT_DONE_ADDR + 
	             TSU_CBU_SCBD_INIT_DONE_STRIDE * 
	             TSU_CBU_SCBD_INIT_DONE_DEPTH)) {
		return("TSU_CBU_SCBD_INIT_DONE");
	}
	/* Start offset of dedicated collect buffers number for the host driver. */
	if ((addr >= TSU_CBU_DCB_START_OFFSET_HOST_ADDR) &&
	    (addr <  TSU_CBU_DCB_START_OFFSET_HOST_ADDR + 
	             TSU_CBU_DCB_START_OFFSET_HOST_STRIDE * 
	             TSU_CBU_DCB_START_OFFSET_HOST_DEPTH)) {
		return("TSU_CBU_DCB_START_OFFSET_HOST");
	}
	/* Start offset of dedicated collect buffers number for the eps. */
	if ((addr >= TSU_CBU_DCB_START_OFFSET_EPS_ADDR) &&
	    (addr <  TSU_CBU_DCB_START_OFFSET_EPS_ADDR + 
	             TSU_CBU_DCB_START_OFFSET_EPS_STRIDE * 
	             TSU_CBU_DCB_START_OFFSET_EPS_DEPTH)) {
		return("TSU_CBU_DCB_START_OFFSET_EPS");
	}
	/*
	 * Start offset of dedicated collect buffers number for the send queue
	 * scheduler.
	 */
	if ((addr >= TSU_CBU_DCB_START_OFFSET_SQS_ADDR) &&
	    (addr <  TSU_CBU_DCB_START_OFFSET_SQS_ADDR + 
	             TSU_CBU_DCB_START_OFFSET_SQS_STRIDE * 
	             TSU_CBU_DCB_START_OFFSET_SQS_DEPTH)) {
		return("TSU_CBU_DCB_START_OFFSET_SQS");
	}
	/* Collect length round up to 64B for scoreboard. */
	if ((addr >= TSU_CBU_COLLECT_LEN_ROUNDUP_ADDR) &&
	    (addr <  TSU_CBU_COLLECT_LEN_ROUNDUP_ADDR + 
	             TSU_CBU_COLLECT_LEN_ROUNDUP_STRIDE * 
	             TSU_CBU_COLLECT_LEN_ROUNDUP_DEPTH)) {
		return("TSU_CBU_COLLECT_LEN_ROUNDUP");
	}
	/* ECC error control */
	if ((addr >= TSU_CBU_ECC_ERR_CTRL_ADDR) &&
	    (addr <  TSU_CBU_ECC_ERR_CTRL_ADDR + 
	             TSU_CBU_ECC_ERR_CTRL_STRIDE * 
	             TSU_CBU_ECC_ERR_CTRL_DEPTH)) {
		return("TSU_CBU_ECC_ERR_CTRL");
	}
	/* ECC status */
	if ((addr >= TSU_CBU_ECC_ERR_STATUS_ADDR) &&
	    (addr <  TSU_CBU_ECC_ERR_STATUS_ADDR + 
	             TSU_CBU_ECC_ERR_STATUS_STRIDE * 
	             TSU_CBU_ECC_ERR_STATUS_DEPTH)) {
		return("TSU_CBU_ECC_ERR_STATUS");
	}
	/* ECC status */
	if ((addr >= TSU_CBU_ECC_ERR_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_CBU_ECC_ERR_STATUS_CLEAR_ADDR + 
	             TSU_CBU_ECC_ERR_STATUS_CLEAR_STRIDE * 
	             TSU_CBU_ECC_ERR_STATUS_CLEAR_DEPTH)) {
		return("TSU_CBU_ECC_ERR_STATUS_CLEAR");
	}
	/* Per UF to drop PIO. Inputs/addressing to this table is UF. */
	if ((addr >= TSU_CBU_CHOKE_ADDR) &&
	    (addr <  TSU_CBU_CHOKE_ADDR + 
	             TSU_CBU_CHOKE_STRIDE * 
	             TSU_CBU_CHOKE_DEPTH)) {
		return("TSU_CBU_CHOKE");
	}
	/* UF choke status. Inputs/addressing to this table is UF. */
	if ((addr >= TSU_CBU_UF_STATUS_ADDR) &&
	    (addr <  TSU_CBU_UF_STATUS_ADDR + 
	             TSU_CBU_UF_STATUS_STRIDE * 
	             TSU_CBU_UF_STATUS_DEPTH)) {
		return("TSU_CBU_UF_STATUS");
	}
	/* vcb clear CB number. Inputs/addressing to this table is scoreboard table. */
	if ((addr >= TSU_CBU_VCB_CLEAR_NUM_ADDR) &&
	    (addr <  TSU_CBU_VCB_CLEAR_NUM_ADDR + 
	             TSU_CBU_VCB_CLEAR_NUM_STRIDE * 
	             TSU_CBU_VCB_CLEAR_NUM_DEPTH)) {
		return("TSU_CBU_VCB_CLEAR_NUM");
	}
	/*
	 * vcb clear. Inputs/addressing to this table is scoreboard table. Write to
	 * clear VCB, Read to get the scoreboard status
	 */
	if ((addr >= TSU_CBU_VCB_CLEAR_ADDR) &&
	    (addr <  TSU_CBU_VCB_CLEAR_ADDR + 
	             TSU_CBU_VCB_CLEAR_STRIDE * 
	             TSU_CBU_VCB_CLEAR_DEPTH)) {
		return("TSU_CBU_VCB_CLEAR");
	}
	/* PIO DCB start_offset. Inputs/addressing to this table is UF. */
	if ((addr >= TSU_CBU_DCB_START_OFFSET_ADDR) &&
	    (addr <  TSU_CBU_DCB_START_OFFSET_ADDR + 
	             TSU_CBU_DCB_START_OFFSET_STRIDE * 
	             TSU_CBU_DCB_START_OFFSET_DEPTH)) {
		return("TSU_CBU_DCB_START_OFFSET");
	}
	/*
	 * Table to contain UF number for each DCB. EPS/Host drive has to write UF #
	 * to this table before it writes to the DCB. Inputs/addressing to this table
	 * is DCB#
	 */
	if ((addr >= TSU_CBU_DCB_UF_TABLE_ADDR) &&
	    (addr <  TSU_CBU_DCB_UF_TABLE_ADDR + 
	             TSU_CBU_DCB_UF_TABLE_STRIDE * 
	             TSU_CBU_DCB_UF_TABLE_DEPTH)) {
		return("TSU_CBU_DCB_UF_TABLE");
	}
	/*
	 * Status state of each DCB. The EPS/Host drive has to read this table to
	 * claim a DCB. Inputs/addressing to this table is DCB#
	 */
	if ((addr >= TSU_CBU_DCB_STATUS_HW_LOCK_ADDR) &&
	    (addr <  TSU_CBU_DCB_STATUS_HW_LOCK_ADDR + 
	             TSU_CBU_DCB_STATUS_HW_LOCK_STRIDE * 
	             TSU_CBU_DCB_STATUS_HW_LOCK_DEPTH)) {
		return("TSU_CBU_DCB_STATUS_HW_LOCK");
	}
	/* Status state of each DCB. Inputs/addressing to this table is DCB# */
	if ((addr >= TSU_CBU_DCB_STATUS_ADDR) &&
	    (addr <  TSU_CBU_DCB_STATUS_ADDR + 
	             TSU_CBU_DCB_STATUS_STRIDE * 
	             TSU_CBU_DCB_STATUS_DEPTH)) {
		return("TSU_CBU_DCB_STATUS");
	}
	/* dcb clear. Inputs/addressing to this table is scoreboard table. */
	if ((addr >= TSU_CBU_DCB_CLEAR_ADDR) &&
	    (addr <  TSU_CBU_DCB_CLEAR_ADDR + 
	             TSU_CBU_DCB_CLEAR_STRIDE * 
	             TSU_CBU_DCB_CLEAR_DEPTH)) {
		return("TSU_CBU_DCB_CLEAR");
	}
	/*
	 * DCB doorbell header/payload memory from EPS-C. Address[13:6] = DCB number
	 * and Address[5:0] = 8 bytes offset into the DCB.
	 */
	if ((addr >= TSU_CBU_DCB_DOORBELL_ADDR) &&
	    (addr <  TSU_CBU_DCB_DOORBELL_ADDR + 
	             TSU_CBU_DCB_DOORBELL_STRIDE * 
	             TSU_CBU_DCB_DOORBELL_DEPTH)) {
		return("TSU_CBU_DCB_DOORBELL");
	}
	/*
	 * Initial completion credit per TVL. This is private credit for the
	 * particular TVL and can only be used by this TVL. The private completion
	 * credit indicates how many entries in tsu_cmpl are reserved for requests on
	 * this TVL.
	 */
	if ((addr >= TSU_RQS_PRIVATE_CMPL_CREDIT_ADDR) &&
	    (addr <  TSU_RQS_PRIVATE_CMPL_CREDIT_ADDR + 
	             TSU_RQS_PRIVATE_CMPL_CREDIT_STRIDE * 
	             TSU_RQS_PRIVATE_CMPL_CREDIT_DEPTH)) {
		return("TSU_RQS_PRIVATE_CMPL_CREDIT");
	}
	/*
	 * Current completion credits used per TVL. This is credit currently used by
	 * a particular TVL. This register is updated by hardware and can be read by
	 * software.
	 */
	if ((addr >= TSU_RQS_TVL_CMPL_CREDIT_CONSUMED_ADDR) &&
	    (addr <  TSU_RQS_TVL_CMPL_CREDIT_CONSUMED_ADDR + 
	             TSU_RQS_TVL_CMPL_CREDIT_CONSUMED_STRIDE * 
	             TSU_RQS_TVL_CMPL_CREDIT_CONSUMED_DEPTH)) {
		return("TSU_RQS_TVL_CMPL_CREDIT_CONSUMED");
	}
	/*
	 * Initial completion credit for the free pool. The free pool can be used by
	 * anyone being set up to use common credits. This is additional credits
	 * which can be used in addition to the private TVL completion credit. The
	 * common completion credit indicates how many entries in tsu_cmpl can be
	 * used by any TVL. It is a restriction that the TVL is set up to use common
	 * credit.
	 */
	if ((addr >= TSU_RQS_COMMON_CMPL_CREDIT_ADDR) &&
	    (addr <  TSU_RQS_COMMON_CMPL_CREDIT_ADDR + 
	             TSU_RQS_COMMON_CMPL_CREDIT_STRIDE * 
	             TSU_RQS_COMMON_CMPL_CREDIT_DEPTH)) {
		return("TSU_RQS_COMMON_CMPL_CREDIT");
	}
	/*
	 * This is register contain the number of currently consumed common
	 * completion credits. This register is updated by hardware and can be read
	 * from software.
	 */
	if ((addr >= TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED_ADDR) &&
	    (addr <  TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED_ADDR + 
	             TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED_STRIDE * 
	             TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED_DEPTH)) {
		return("TSU_RQS_COMMON_CMPL_CREDIT_CONSUMED");
	}
	if ((addr >= TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0_ADDR) &&
	    (addr <  TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0_ADDR + 
	             TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0_STRIDE * 
	             TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0_DEPTH)) {
		return("TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_0");
	}
	if ((addr >= TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1_ADDR) &&
	    (addr <  TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1_ADDR + 
	             TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1_STRIDE * 
	             TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1_DEPTH)) {
		return("TSU_RQS_COMMON_CMPL_CREDIT_ENABLE_1");
	}
	/*
	 * Initial execution credit per TVL. This is private credit for the
	 * particular TVL and can only be used by this TVL. The credit indicates how
	 * many DMA contexts are reserved for this particular TVL
	 */
	if ((addr >= TSU_RQS_PRIVATE_EXEC_CREDIT_ADDR) &&
	    (addr <  TSU_RQS_PRIVATE_EXEC_CREDIT_ADDR + 
	             TSU_RQS_PRIVATE_EXEC_CREDIT_STRIDE * 
	             TSU_RQS_PRIVATE_EXEC_CREDIT_DEPTH)) {
		return("TSU_RQS_PRIVATE_EXEC_CREDIT");
	}
	/*
	 * Current execution credit used per TVL. This is credit used by a particular
	 * TVL. This register is updated by hardware and can be read by software.
	 */
	if ((addr >= TSU_RQS_TVL_EXEC_CREDIT_CONSUMED_ADDR) &&
	    (addr <  TSU_RQS_TVL_EXEC_CREDIT_CONSUMED_ADDR + 
	             TSU_RQS_TVL_EXEC_CREDIT_CONSUMED_STRIDE * 
	             TSU_RQS_TVL_EXEC_CREDIT_CONSUMED_DEPTH)) {
		return("TSU_RQS_TVL_EXEC_CREDIT_CONSUMED");
	}
	/*
	 * Initial execution credit for the free pool. The free pool can be used by
	 * anyone being set up to use common credits. This is additional credits
	 * which can be used in addition to the private TVL execution credit. The
	 * common execution credit indicates how many DMA contexts can be used by any
	 * TVL. It is a restriction that the TVL is set up to use common credit.
	 */
	if ((addr >= TSU_RQS_COMMON_EXEC_CREDIT_ADDR) &&
	    (addr <  TSU_RQS_COMMON_EXEC_CREDIT_ADDR + 
	             TSU_RQS_COMMON_EXEC_CREDIT_STRIDE * 
	             TSU_RQS_COMMON_EXEC_CREDIT_DEPTH)) {
		return("TSU_RQS_COMMON_EXEC_CREDIT");
	}
	/*
	 * This register contain the number of currently consumed common execution
	 * credits. The register is updated by hardware and can be read from
	 * software.
	 */
	if ((addr >= TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED_ADDR) &&
	    (addr <  TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED_ADDR + 
	             TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED_STRIDE * 
	             TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED_DEPTH)) {
		return("TSU_RQS_COMMON_EXEC_CREDIT_CONSUMED");
	}
	if ((addr >= TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0_ADDR) &&
	    (addr <  TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0_ADDR + 
	             TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0_STRIDE * 
	             TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0_DEPTH)) {
		return("TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_0");
	}
	if ((addr >= TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1_ADDR) &&
	    (addr <  TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1_ADDR + 
	             TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1_STRIDE * 
	             TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1_DEPTH)) {
		return("TSU_RQS_COMMON_EXEC_CREDIT_ENABLE_1");
	}
	/*
	 * Port1 SL to VL mapping tables. One entry in this table is the SL to VL
	 * mapping table for one UF.
	 */
	if ((addr >= TSU_RQS_P1_SL2VL_ADDR) &&
	    (addr <  TSU_RQS_P1_SL2VL_ADDR + 
	             TSU_RQS_P1_SL2VL_STRIDE * 
	             TSU_RQS_P1_SL2VL_DEPTH)) {
		return("TSU_RQS_P1_SL2VL");
	}
	/*
	 * Port2 SL to VL mapping tables. There is one table per UF. The table is
	 * implemented as one register.
	 */
	if ((addr >= TSU_RQS_P2_SL2VL_ADDR) &&
	    (addr <  TSU_RQS_P2_SL2VL_ADDR + 
	             TSU_RQS_P2_SL2VL_STRIDE * 
	             TSU_RQS_P2_SL2VL_DEPTH)) {
		return("TSU_RQS_P2_SL2VL");
	}
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	if ((addr >= TSU_RQS_P1_OWN_LID_BASE_ADDR) &&
	    (addr <  TSU_RQS_P1_OWN_LID_BASE_ADDR + 
	             TSU_RQS_P1_OWN_LID_BASE_STRIDE * 
	             TSU_RQS_P1_OWN_LID_BASE_DEPTH)) {
		return("TSU_RQS_P1_OWN_LID_BASE");
	}
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	if ((addr >= TSU_RQS_P2_OWN_LID_BASE_ADDR) &&
	    (addr <  TSU_RQS_P2_OWN_LID_BASE_ADDR + 
	             TSU_RQS_P2_OWN_LID_BASE_STRIDE * 
	             TSU_RQS_P2_OWN_LID_BASE_DEPTH)) {
		return("TSU_RQS_P2_OWN_LID_BASE");
	}
	/*
	 * Port1 enable bits per UF. If bit is set, the corresponding GID and LID
	 * table entries are valid.
	 */
	if ((addr >= TSU_RQS_P1_PORT_ENABLE_ADDR) &&
	    (addr <  TSU_RQS_P1_PORT_ENABLE_ADDR + 
	             TSU_RQS_P1_PORT_ENABLE_STRIDE * 
	             TSU_RQS_P1_PORT_ENABLE_DEPTH)) {
		return("TSU_RQS_P1_PORT_ENABLE");
	}
	/*
	 * Port2 enable bits per UF. If bit is set, the corresponding GID and LID
	 * table entries are valid.
	 */
	if ((addr >= TSU_RQS_P2_PORT_ENABLE_ADDR) &&
	    (addr <  TSU_RQS_P2_PORT_ENABLE_ADDR + 
	             TSU_RQS_P2_PORT_ENABLE_STRIDE * 
	             TSU_RQS_P2_PORT_ENABLE_DEPTH)) {
		return("TSU_RQS_P2_PORT_ENABLE");
	}
	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
	if ((addr >= TSU_RQS_P1_SMP_ALLOWED_ADDR) &&
	    (addr <  TSU_RQS_P1_SMP_ALLOWED_ADDR + 
	             TSU_RQS_P1_SMP_ALLOWED_STRIDE * 
	             TSU_RQS_P1_SMP_ALLOWED_DEPTH)) {
		return("TSU_RQS_P1_SMP_ALLOWED");
	}
	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
	if ((addr >= TSU_RQS_P2_SMP_ALLOWED_ADDR) &&
	    (addr <  TSU_RQS_P2_SMP_ALLOWED_ADDR + 
	             TSU_RQS_P2_SMP_ALLOWED_STRIDE * 
	             TSU_RQS_P2_SMP_ALLOWED_DEPTH)) {
		return("TSU_RQS_P2_SMP_ALLOWED");
	}
	/* Kick FIFO entries in use per UF */
	if ((addr >= TSU_RQS_KICK_FIFO_UF_INUSE_ADDR) &&
	    (addr <  TSU_RQS_KICK_FIFO_UF_INUSE_ADDR + 
	             TSU_RQS_KICK_FIFO_UF_INUSE_STRIDE * 
	             TSU_RQS_KICK_FIFO_UF_INUSE_DEPTH)) {
		return("TSU_RQS_KICK_FIFO_UF_INUSE");
	}
	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
	if ((addr >= TSU_RQS_P1_GID_FORWARDING_TABLE_ADDR) &&
	    (addr <  TSU_RQS_P1_GID_FORWARDING_TABLE_ADDR + 
	             TSU_RQS_P1_GID_FORWARDING_TABLE_STRIDE * 
	             TSU_RQS_P1_GID_FORWARDING_TABLE_DEPTH)) {
		return("TSU_RQS_P1_GID_FORWARDING_TABLE");
	}
	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
	if ((addr >= TSU_RQS_P2_GID_FORWARDING_TABLE_ADDR) &&
	    (addr <  TSU_RQS_P2_GID_FORWARDING_TABLE_ADDR + 
	             TSU_RQS_P2_GID_FORWARDING_TABLE_STRIDE * 
	             TSU_RQS_P2_GID_FORWARDING_TABLE_DEPTH)) {
		return("TSU_RQS_P2_GID_FORWARDING_TABLE");
	}
	/*
	 * Per VL register (0-7: Port 0 VL0-7, 8: Port 0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). Maximum global buffer a particular VL can get.
	 */
	if ((addr >= TSU_DMA_MAX_ALLOC_VL_BUFF_ADDR) &&
	    (addr <  TSU_DMA_MAX_ALLOC_VL_BUFF_ADDR + 
	             TSU_DMA_MAX_ALLOC_VL_BUFF_STRIDE * 
	             TSU_DMA_MAX_ALLOC_VL_BUFF_DEPTH)) {
		return("TSU_DMA_MAX_ALLOC_VL_BUFF");
	}
	/*
	 * Per VL register (0-7: Port0 VL0-7, 8: Port0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). The amount of buffer dedicated to this VL.
	 */
	if ((addr >= TSU_DMA_PRIVATE_VL_BUFF_ADDR) &&
	    (addr <  TSU_DMA_PRIVATE_VL_BUFF_ADDR + 
	             TSU_DMA_PRIVATE_VL_BUFF_STRIDE * 
	             TSU_DMA_PRIVATE_VL_BUFF_DEPTH)) {
		return("TSU_DMA_PRIVATE_VL_BUFF");
	}
	/*
	 * Per VL register (0-7: Port0 VL0-7, 8: Port0 VL15, 9: Port0 loopback.
	 * 10-19: Port 1). The amount of dedicated and global buffer used to this VL.
	 */
	if ((addr >= TSU_DMA_VL_BUFF_USED_ADDR) &&
	    (addr <  TSU_DMA_VL_BUFF_USED_ADDR + 
	             TSU_DMA_VL_BUFF_USED_STRIDE * 
	             TSU_DMA_VL_BUFF_USED_DEPTH)) {
		return("TSU_DMA_VL_BUFF_USED");
	}
	/* Amount of global buffer used shared among all VLs. */
	if ((addr >= TSU_DMA_GLOBAL_BUFF_USED_ADDR) &&
	    (addr <  TSU_DMA_GLOBAL_BUFF_USED_ADDR + 
	             TSU_DMA_GLOBAL_BUFF_USED_STRIDE * 
	             TSU_DMA_GLOBAL_BUFF_USED_DEPTH)) {
		return("TSU_DMA_GLOBAL_BUFF_USED");
	}
	/* Num of 256B block DMA buffer check-out */
	if ((addr >= TSU_DMA_NUM_OF_BUF_CO_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_BUF_CO_ADDR + 
	             TSU_DMA_NUM_OF_BUF_CO_STRIDE * 
	             TSU_DMA_NUM_OF_BUF_CO_DEPTH)) {
		return("TSU_DMA_NUM_OF_BUF_CO");
	}
	/* Num of 256B block DMA buffer check-in */
	if ((addr >= TSU_DMA_NUM_OF_BUF_CI_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_BUF_CI_ADDR + 
	             TSU_DMA_NUM_OF_BUF_CI_STRIDE * 
	             TSU_DMA_NUM_OF_BUF_CI_DEPTH)) {
		return("TSU_DMA_NUM_OF_BUF_CI");
	}
	/* Number of RQS command to DMA */
	if ((addr >= TSU_DMA_NUM_OF_CNTXTLLQ_INBUN_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_CNTXTLLQ_INBUN_ADDR + 
	             TSU_DMA_NUM_OF_CNTXTLLQ_INBUN_STRIDE * 
	             TSU_DMA_NUM_OF_CNTXTLLQ_INBUN_DEPTH)) {
		return("TSU_DMA_NUM_OF_CNTXTLLQ_INBUN");
	}
	/* Number of Context LLQ pop */
	if ((addr >= TSU_DMA_NUM_OF_CNTXTLLQ_POP_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_CNTXTLLQ_POP_ADDR + 
	             TSU_DMA_NUM_OF_CNTXTLLQ_POP_STRIDE * 
	             TSU_DMA_NUM_OF_CNTXTLLQ_POP_DEPTH)) {
		return("TSU_DMA_NUM_OF_CNTXTLLQ_POP");
	}
	/* Number of Context LLQ ready to go set */
	if ((addr >= TSU_DMA_NUM_OF_CNTXTLLQ_R2G_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_CNTXTLLQ_R2G_ADDR + 
	             TSU_DMA_NUM_OF_CNTXTLLQ_R2G_STRIDE * 
	             TSU_DMA_NUM_OF_CNTXTLLQ_R2G_DEPTH)) {
		return("TSU_DMA_NUM_OF_CNTXTLLQ_R2G");
	}
	/* Number of IBPB command from DMA */
	if ((addr >= TSU_DMA_NUM_OF_IBPB_CMD_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_IBPB_CMD_ADDR + 
	             TSU_DMA_NUM_OF_IBPB_CMD_STRIDE * 
	             TSU_DMA_NUM_OF_IBPB_CMD_DEPTH)) {
		return("TSU_DMA_NUM_OF_IBPB_CMD");
	}
	/* Number of CMPL command from DMA */
	if ((addr >= TSU_DMA_NUM_OF_CMPL_CMD_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_CMPL_CMD_ADDR + 
	             TSU_DMA_NUM_OF_CMPL_CMD_STRIDE * 
	             TSU_DMA_NUM_OF_CMPL_CMD_DEPTH)) {
		return("TSU_DMA_NUM_OF_CMPL_CMD");
	}
	/* Number of QPS RD command from DMA */
	if ((addr >= TSU_DMA_NUM_OF_QPS_RD_CMD_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_QPS_RD_CMD_ADDR + 
	             TSU_DMA_NUM_OF_QPS_RD_CMD_STRIDE * 
	             TSU_DMA_NUM_OF_QPS_RD_CMD_DEPTH)) {
		return("TSU_DMA_NUM_OF_QPS_RD_CMD");
	}
	/* Number of QPS RD response from QPS */
	if ((addr >= TSU_DMA_NUM_OF_QPS_RD_RSP_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_QPS_RD_RSP_ADDR + 
	             TSU_DMA_NUM_OF_QPS_RD_RSP_STRIDE * 
	             TSU_DMA_NUM_OF_QPS_RD_RSP_DEPTH)) {
		return("TSU_DMA_NUM_OF_QPS_RD_RSP");
	}
	/* Number of QPS WR command from DMA */
	if ((addr >= TSU_DMA_NUM_OF_QPS_WR_CMD_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_QPS_WR_CMD_ADDR + 
	             TSU_DMA_NUM_OF_QPS_WR_CMD_STRIDE * 
	             TSU_DMA_NUM_OF_QPS_WR_CMD_DEPTH)) {
		return("TSU_DMA_NUM_OF_QPS_WR_CMD");
	}
	/* Number of QPS WR response from QPS */
	if ((addr >= TSU_DMA_NUM_OF_QPS_WR_RSP_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_QPS_WR_RSP_ADDR + 
	             TSU_DMA_NUM_OF_QPS_WR_RSP_STRIDE * 
	             TSU_DMA_NUM_OF_QPS_WR_RSP_DEPTH)) {
		return("TSU_DMA_NUM_OF_QPS_WR_RSP");
	}
	/* Number of packet in the packet LLQ */
	if ((addr >= TSU_DMA_NUM_OF_PKTLLQ_INBUN_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_PKTLLQ_INBUN_ADDR + 
	             TSU_DMA_NUM_OF_PKTLLQ_INBUN_STRIDE * 
	             TSU_DMA_NUM_OF_PKTLLQ_INBUN_DEPTH)) {
		return("TSU_DMA_NUM_OF_PKTLLQ_INBUN");
	}
	/* Number of Packet LLQ pop */
	if ((addr >= TSU_DMA_NUM_OF_PKTLLQ_POP_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_PKTLLQ_POP_ADDR + 
	             TSU_DMA_NUM_OF_PKTLLQ_POP_STRIDE * 
	             TSU_DMA_NUM_OF_PKTLLQ_POP_DEPTH)) {
		return("TSU_DMA_NUM_OF_PKTLLQ_POP");
	}
	/* Number of Packet LLQ ready to go set */
	if ((addr >= TSU_DMA_NUM_OF_PKTLLQ_R2G_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_PKTLLQ_R2G_ADDR + 
	             TSU_DMA_NUM_OF_PKTLLQ_R2G_STRIDE * 
	             TSU_DMA_NUM_OF_PKTLLQ_R2G_DEPTH)) {
		return("TSU_DMA_NUM_OF_PKTLLQ_R2G");
	}
	/* Num of payload DMA command */
	if ((addr >= TSU_DMA_NUM_OF_PYLD_CMD_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_PYLD_CMD_ADDR + 
	             TSU_DMA_NUM_OF_PYLD_CMD_STRIDE * 
	             TSU_DMA_NUM_OF_PYLD_CMD_DEPTH)) {
		return("TSU_DMA_NUM_OF_PYLD_CMD");
	}
	/* Num of payload DMA response */
	if ((addr >= TSU_DMA_NUM_OF_PYLD_RSP_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_PYLD_RSP_ADDR + 
	             TSU_DMA_NUM_OF_PYLD_RSP_STRIDE * 
	             TSU_DMA_NUM_OF_PYLD_RSP_DEPTH)) {
		return("TSU_DMA_NUM_OF_PYLD_RSP");
	}
	/* Num of sge DMA command */
	if ((addr >= TSU_DMA_NUM_OF_SGE_CMD_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_SGE_CMD_ADDR + 
	             TSU_DMA_NUM_OF_SGE_CMD_STRIDE * 
	             TSU_DMA_NUM_OF_SGE_CMD_DEPTH)) {
		return("TSU_DMA_NUM_OF_SGE_CMD");
	}
	/* Num of sge DMA response */
	if ((addr >= TSU_DMA_NUM_OF_SGE_RSP_ADDR) &&
	    (addr <  TSU_DMA_NUM_OF_SGE_RSP_ADDR + 
	             TSU_DMA_NUM_OF_SGE_RSP_STRIDE * 
	             TSU_DMA_NUM_OF_SGE_RSP_DEPTH)) {
		return("TSU_DMA_NUM_OF_SGE_RSP");
	}
	/* Num of LSO buffer used */
	if ((addr >= TSU_DMA_LSO_BUF_USED_ADDR) &&
	    (addr <  TSU_DMA_LSO_BUF_USED_ADDR + 
	             TSU_DMA_LSO_BUF_USED_STRIDE * 
	             TSU_DMA_LSO_BUF_USED_DEPTH)) {
		return("TSU_DMA_LSO_BUF_USED");
	}
	/* ECC error control */
	if ((addr >= TSU_DMA_ECC_ERR_CTRL_ADDR) &&
	    (addr <  TSU_DMA_ECC_ERR_CTRL_ADDR + 
	             TSU_DMA_ECC_ERR_CTRL_STRIDE * 
	             TSU_DMA_ECC_ERR_CTRL_DEPTH)) {
		return("TSU_DMA_ECC_ERR_CTRL");
	}
	/* ECC status */
	if ((addr >= TSU_DMA_ECC_ERR_STATUS_ADDR) &&
	    (addr <  TSU_DMA_ECC_ERR_STATUS_ADDR + 
	             TSU_DMA_ECC_ERR_STATUS_STRIDE * 
	             TSU_DMA_ECC_ERR_STATUS_DEPTH)) {
		return("TSU_DMA_ECC_ERR_STATUS");
	}
	/* ECC status */
	if ((addr >= TSU_DMA_ECC_ERR_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_DMA_ECC_ERR_STATUS_CLEAR_ADDR + 
	             TSU_DMA_ECC_ERR_STATUS_CLEAR_STRIDE * 
	             TSU_DMA_ECC_ERR_STATUS_CLEAR_DEPTH)) {
		return("TSU_DMA_ECC_ERR_STATUS_CLEAR");
	}
	/*
	 * IB link speed per port. 0=EDR, 1=QDR, 2=DDR, 3=SDR. Address to the
	 * Register Table: {uf, port}
	 */
	if ((addr >= TSU_DMA_LINK_SPEED_ADDR) &&
	    (addr <  TSU_DMA_LINK_SPEED_ADDR + 
	             TSU_DMA_LINK_SPEED_STRIDE * 
	             TSU_DMA_LINK_SPEED_DEPTH)) {
		return("TSU_DMA_LINK_SPEED");
	}
	/*
	 * IB link width per port. 0=X4 and 1=X1. Address to the Register Table: {uf,
	 * port}
	 */
	if ((addr >= TSU_DMA_LINK_WIDTH_ADDR) &&
	    (addr <  TSU_DMA_LINK_WIDTH_ADDR + 
	             TSU_DMA_LINK_WIDTH_STRIDE * 
	             TSU_DMA_LINK_WIDTH_DEPTH)) {
		return("TSU_DMA_LINK_WIDTH");
	}
	/*
	 * Maximum number of payload read 256B buffer per UF. Address to the Register
	 * Table:uf
	 */
	if ((addr >= TSU_DMA_UF_TRANS_MAX_ADDR) &&
	    (addr <  TSU_DMA_UF_TRANS_MAX_ADDR + 
	             TSU_DMA_UF_TRANS_MAX_STRIDE * 
	             TSU_DMA_UF_TRANS_MAX_DEPTH)) {
		return("TSU_DMA_UF_TRANS_MAX");
	}
	/* Number of payload read transaction per UF. Address to the Register Table:uf */
	if ((addr >= TSU_DMA_UF_TRANS_USED_ADDR) &&
	    (addr <  TSU_DMA_UF_TRANS_USED_ADDR + 
	             TSU_DMA_UF_TRANS_USED_STRIDE * 
	             TSU_DMA_UF_TRANS_USED_DEPTH)) {
		return("TSU_DMA_UF_TRANS_USED");
	}
	/*
	 * MAC address #0 table for uf 0-33. Inputs/addressing to this table are {UF,
	 * port}.
	 */
	if ((addr >= TSU_DMA_MAC_ADDR0_TABLE_ADDR) &&
	    (addr <  TSU_DMA_MAC_ADDR0_TABLE_ADDR + 
	             TSU_DMA_MAC_ADDR0_TABLE_STRIDE * 
	             TSU_DMA_MAC_ADDR0_TABLE_DEPTH)) {
		return("TSU_DMA_MAC_ADDR0_TABLE");
	}
	/*
	 * MAC address #1 table for uf 0-33. Inputs/addressing to this table are {UF,
	 * port}.
	 */
	if ((addr >= TSU_DMA_MAC_ADDR1_TABLE_ADDR) &&
	    (addr <  TSU_DMA_MAC_ADDR1_TABLE_ADDR + 
	             TSU_DMA_MAC_ADDR1_TABLE_STRIDE * 
	             TSU_DMA_MAC_ADDR1_TABLE_DEPTH)) {
		return("TSU_DMA_MAC_ADDR1_TABLE");
	}
	/*
	 * VID table for uf 0-33. Inputs/addressing to this table are {UF, port,
	 * index}.
	 */
	if ((addr >= TSU_DMA_VID_TABLE_ADDR) &&
	    (addr <  TSU_DMA_VID_TABLE_ADDR + 
	             TSU_DMA_VID_TABLE_STRIDE * 
	             TSU_DMA_VID_TABLE_DEPTH)) {
		return("TSU_DMA_VID_TABLE");
	}
	/* MAC control per port per UF 0-33. Address to the Register Table: {uf port} */
	if ((addr >= TSU_DMA_MAC_CTRL_ADDR) &&
	    (addr <  TSU_DMA_MAC_CTRL_ADDR + 
	             TSU_DMA_MAC_CTRL_STRIDE * 
	             TSU_DMA_MAC_CTRL_DEPTH)) {
		return("TSU_DMA_MAC_CTRL");
	}
	/* Size of the EoIB and IPoIB header */
	if ((addr >= TSU_DMA_PPTY_HDR_LENGTH_ADDR) &&
	    (addr <  TSU_DMA_PPTY_HDR_LENGTH_ADDR + 
	             TSU_DMA_PPTY_HDR_LENGTH_STRIDE * 
	             TSU_DMA_PPTY_HDR_LENGTH_DEPTH)) {
		return("TSU_DMA_PPTY_HDR_LENGTH");
	}
	/* Mask bit to the TCP flags for the LSO segments */
	if ((addr >= TSU_DMA_TCP_FLAGS_MASK_ADDR) &&
	    (addr <  TSU_DMA_TCP_FLAGS_MASK_ADDR + 
	             TSU_DMA_TCP_FLAGS_MASK_STRIDE * 
	             TSU_DMA_TCP_FLAGS_MASK_DEPTH)) {
		return("TSU_DMA_TCP_FLAGS_MASK");
	}
	/* Control for ip checksum tcp checksum udp checksum and ethernet padding */
	if ((addr >= TSU_DMA_OFFLOAD_CTRL_ADDR) &&
	    (addr <  TSU_DMA_OFFLOAD_CTRL_ADDR + 
	             TSU_DMA_OFFLOAD_CTRL_STRIDE * 
	             TSU_DMA_OFFLOAD_CTRL_DEPTH)) {
		return("TSU_DMA_OFFLOAD_CTRL");
	}
	/*
	 * VLAN membership table per UF 0-33. Inputs/addressing to this table is {UF,
	 * vid[11:6}}.
	 */
	if ((addr >= TSU_DMA_VLAN_MEMBER_TABLE_ADDR) &&
	    (addr <  TSU_DMA_VLAN_MEMBER_TABLE_ADDR + 
	             TSU_DMA_VLAN_MEMBER_TABLE_STRIDE * 
	             TSU_DMA_VLAN_MEMBER_TABLE_DEPTH)) {
		return("TSU_DMA_VLAN_MEMBER_TABLE");
	}
	/* Outer VLAN Ethernet type */
	if ((addr >= TSU_DMA_OUTER_VLAN_TYPE_ADDR) &&
	    (addr <  TSU_DMA_OUTER_VLAN_TYPE_ADDR + 
	             TSU_DMA_OUTER_VLAN_TYPE_STRIDE * 
	             TSU_DMA_OUTER_VLAN_TYPE_DEPTH)) {
		return("TSU_DMA_OUTER_VLAN_TYPE");
	}
	/* Outer VLAN Ethernet type */
	if ((addr >= TSU_DMA_INNER_VLAN_TYPE_ADDR) &&
	    (addr <  TSU_DMA_INNER_VLAN_TYPE_ADDR + 
	             TSU_DMA_INNER_VLAN_TYPE_STRIDE * 
	             TSU_DMA_INNER_VLAN_TYPE_DEPTH)) {
		return("TSU_DMA_INNER_VLAN_TYPE");
	}
	/* Shared P-Key table for all UFs on this port. */
	if ((addr >= TSU_IBPB_P1_PKEY_TABLE_ADDR) &&
	    (addr <  TSU_IBPB_P1_PKEY_TABLE_ADDR + 
	             TSU_IBPB_P1_PKEY_TABLE_STRIDE * 
	             TSU_IBPB_P1_PKEY_TABLE_DEPTH)) {
		return("TSU_IBPB_P1_PKEY_TABLE");
	}
	/*
	 * Upper 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	if ((addr >= TSU_IBPB_P1_GID_UPPER_ADDR) &&
	    (addr <  TSU_IBPB_P1_GID_UPPER_ADDR + 
	             TSU_IBPB_P1_GID_UPPER_STRIDE * 
	             TSU_IBPB_P1_GID_UPPER_DEPTH)) {
		return("TSU_IBPB_P1_GID_UPPER");
	}
	/*
	 * Lower 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	if ((addr >= TSU_IBPB_P1_GID_LOWER_ADDR) &&
	    (addr <  TSU_IBPB_P1_GID_LOWER_ADDR + 
	             TSU_IBPB_P1_GID_LOWER_STRIDE * 
	             TSU_IBPB_P1_GID_LOWER_DEPTH)) {
		return("TSU_IBPB_P1_GID_LOWER");
	}
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	if ((addr >= TSU_IBPB_P1_OWN_LID_BASE_ADDR) &&
	    (addr <  TSU_IBPB_P1_OWN_LID_BASE_ADDR + 
	             TSU_IBPB_P1_OWN_LID_BASE_STRIDE * 
	             TSU_IBPB_P1_OWN_LID_BASE_DEPTH)) {
		return("TSU_IBPB_P1_OWN_LID_BASE");
	}
	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
	if ((addr >= TSU_IBPB_P1_PKEY_UF_STRIDE_ADDR) &&
	    (addr <  TSU_IBPB_P1_PKEY_UF_STRIDE_ADDR + 
	             TSU_IBPB_P1_PKEY_UF_STRIDE_STRIDE * 
	             TSU_IBPB_P1_PKEY_UF_STRIDE_DEPTH)) {
		return("TSU_IBPB_P1_PKEY_UF_STRIDE");
	}
	/* Shared P-Key table for all UFs on this port. */
	if ((addr >= TSU_IBPB_P2_PKEY_TABLE_ADDR) &&
	    (addr <  TSU_IBPB_P2_PKEY_TABLE_ADDR + 
	             TSU_IBPB_P2_PKEY_TABLE_STRIDE * 
	             TSU_IBPB_P2_PKEY_TABLE_DEPTH)) {
		return("TSU_IBPB_P2_PKEY_TABLE");
	}
	/*
	 * Upper 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	if ((addr >= TSU_IBPB_P2_GID_UPPER_ADDR) &&
	    (addr <  TSU_IBPB_P2_GID_UPPER_ADDR + 
	             TSU_IBPB_P2_GID_UPPER_STRIDE * 
	             TSU_IBPB_P2_GID_UPPER_DEPTH)) {
		return("TSU_IBPB_P2_GID_UPPER");
	}
	/* Lower 64 bits of GID for port2. The table is per UF. */
	if ((addr >= TSU_IBPB_P2_GID_LOWER_ADDR) &&
	    (addr <  TSU_IBPB_P2_GID_LOWER_ADDR + 
	             TSU_IBPB_P2_GID_LOWER_STRIDE * 
	             TSU_IBPB_P2_GID_LOWER_DEPTH)) {
		return("TSU_IBPB_P2_GID_LOWER");
	}
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	if ((addr >= TSU_IBPB_P2_OWN_LID_BASE_ADDR) &&
	    (addr <  TSU_IBPB_P2_OWN_LID_BASE_ADDR + 
	             TSU_IBPB_P2_OWN_LID_BASE_STRIDE * 
	             TSU_IBPB_P2_OWN_LID_BASE_DEPTH)) {
		return("TSU_IBPB_P2_OWN_LID_BASE");
	}
	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
	if ((addr >= TSU_IBPB_P2_PKEY_UF_STRIDE_ADDR) &&
	    (addr <  TSU_IBPB_P2_PKEY_UF_STRIDE_ADDR + 
	             TSU_IBPB_P2_PKEY_UF_STRIDE_STRIDE * 
	             TSU_IBPB_P2_PKEY_UF_STRIDE_DEPTH)) {
		return("TSU_IBPB_P2_PKEY_UF_STRIDE");
	}
	if ((addr >= TSU_QPS_AHA_BASE_ADDR_0_ADDR) &&
	    (addr <  TSU_QPS_AHA_BASE_ADDR_0_ADDR + 
	             TSU_QPS_AHA_BASE_ADDR_0_STRIDE * 
	             TSU_QPS_AHA_BASE_ADDR_0_DEPTH)) {
		return("TSU_QPS_AHA_BASE_ADDR_0");
	}
	if ((addr >= TSU_QPS_AHA_BASE_ADDR_1_ADDR) &&
	    (addr <  TSU_QPS_AHA_BASE_ADDR_1_ADDR + 
	             TSU_QPS_AHA_BASE_ADDR_1_STRIDE * 
	             TSU_QPS_AHA_BASE_ADDR_1_DEPTH)) {
		return("TSU_QPS_AHA_BASE_ADDR_1");
	}
	if ((addr >= TSU_QPS_AHA_BASE_ADDR_2_ADDR) &&
	    (addr <  TSU_QPS_AHA_BASE_ADDR_2_ADDR + 
	             TSU_QPS_AHA_BASE_ADDR_2_STRIDE * 
	             TSU_QPS_AHA_BASE_ADDR_2_DEPTH)) {
		return("TSU_QPS_AHA_BASE_ADDR_2");
	}
	if ((addr >= TSU_QPS_QP_BASE_ADDR_0_ADDR) &&
	    (addr <  TSU_QPS_QP_BASE_ADDR_0_ADDR + 
	             TSU_QPS_QP_BASE_ADDR_0_STRIDE * 
	             TSU_QPS_QP_BASE_ADDR_0_DEPTH)) {
		return("TSU_QPS_QP_BASE_ADDR_0");
	}
	if ((addr >= TSU_QPS_QP_BASE_ADDR_1_ADDR) &&
	    (addr <  TSU_QPS_QP_BASE_ADDR_1_ADDR + 
	             TSU_QPS_QP_BASE_ADDR_1_STRIDE * 
	             TSU_QPS_QP_BASE_ADDR_1_DEPTH)) {
		return("TSU_QPS_QP_BASE_ADDR_1");
	}
	if ((addr >= TSU_QPS_QP_BASE_ADDR_2_ADDR) &&
	    (addr <  TSU_QPS_QP_BASE_ADDR_2_ADDR + 
	             TSU_QPS_QP_BASE_ADDR_2_STRIDE * 
	             TSU_QPS_QP_BASE_ADDR_2_DEPTH)) {
		return("TSU_QPS_QP_BASE_ADDR_2");
	}
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	if ((addr >= TSU_QPS_UF_CONTROL_ADDR) &&
	    (addr <  TSU_QPS_UF_CONTROL_ADDR + 
	             TSU_QPS_UF_CONTROL_STRIDE * 
	             TSU_QPS_UF_CONTROL_DEPTH)) {
		return("TSU_QPS_UF_CONTROL");
	}
	/* Starts operation defined in uf_control. */
	if ((addr >= TSU_QPS_UF_CONTROL_KICK_ADDR) &&
	    (addr <  TSU_QPS_UF_CONTROL_KICK_ADDR + 
	             TSU_QPS_UF_CONTROL_KICK_STRIDE * 
	             TSU_QPS_UF_CONTROL_KICK_DEPTH)) {
		return("TSU_QPS_UF_CONTROL_KICK");
	}
	/*
	 * Bitvector indicating (one bit per UF) if a UF has entries in tsu_qps or
	 * not. This could be used to verify that a UF flush has happened. XXX:
	 * Should there be multiple registers or one register per UF?
	 */
	if ((addr >= TSU_QPS_UF_EMPTY_ADDR) &&
	    (addr <  TSU_QPS_UF_EMPTY_ADDR + 
	             TSU_QPS_UF_EMPTY_STRIDE * 
	             TSU_QPS_UF_EMPTY_DEPTH)) {
		return("TSU_QPS_UF_EMPTY");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_QPS_INT_STATUS_ADDR) &&
	    (addr <  TSU_QPS_INT_STATUS_ADDR + 
	             TSU_QPS_INT_STATUS_STRIDE * 
	             TSU_QPS_INT_STATUS_DEPTH)) {
		return("TSU_QPS_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_QPS_INT_MASK_ADDR) &&
	    (addr <  TSU_QPS_INT_MASK_ADDR + 
	             TSU_QPS_INT_MASK_STRIDE * 
	             TSU_QPS_INT_MASK_DEPTH)) {
		return("TSU_QPS_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_QPS_INT_PRI_ADDR) &&
	    (addr <  TSU_QPS_INT_PRI_ADDR + 
	             TSU_QPS_INT_PRI_STRIDE * 
	             TSU_QPS_INT_PRI_DEPTH)) {
		return("TSU_QPS_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_QPS_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_QPS_INT_STATUS_CLEAR_ADDR + 
	             TSU_QPS_INT_STATUS_CLEAR_STRIDE * 
	             TSU_QPS_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_QPS_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_QPS_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_QPS_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_QPS_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_QPS_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_QPS_INT_STATUS_CLEAR_KICK");
	}
	/*
	 * Stops timeout checking for UF in the uf_control register. This register
	 * must be kicked in order to make sure refcounts are not incremented for the
	 * UF to be flushed/invalidated.
	 */
	if ((addr >= TSU_QPS_UF_STOP_TIMEOUT_KICK_ADDR) &&
	    (addr <  TSU_QPS_UF_STOP_TIMEOUT_KICK_ADDR + 
	             TSU_QPS_UF_STOP_TIMEOUT_KICK_STRIDE * 
	             TSU_QPS_UF_STOP_TIMEOUT_KICK_DEPTH)) {
		return("TSU_QPS_UF_STOP_TIMEOUT_KICK");
	}
	/*
	 * Per UF modify/query QP command/attribute register. Only one register is
	 * implemented in hardware - one at a time. EPS implements one register per
	 * UF. When one is written, the modify data is written to modify_qp_data
	 * register before this register is written. The Modify or Query QP command
	 * is autmatically kicked when this register is written. Is one outstanding
	 * modify/query QP per UF ok, or do we need more?
	 */
	if ((addr >= TSU_QPS_MODIFY_QP_CTRL_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_CTRL_ADDR + 
	             TSU_QPS_MODIFY_QP_CTRL_STRIDE * 
	             TSU_QPS_MODIFY_QP_CTRL_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_CTRL");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_0_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_0_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_0_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_0_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_0");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_1_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_1_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_1_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_1_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_1");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_2_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_2_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_2_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_2_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_2");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_3_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_3_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_3_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_3_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_3");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_4_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_4_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_4_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_4_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_4");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_5_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_5_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_5_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_5_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_5");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_6_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_6_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_6_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_6_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_6");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_7_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_7_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_7_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_7_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_7");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_8_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_8_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_8_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_8_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_8");
	}
	if ((addr >= TSU_QPS_MODIFY_QP_DATA_9_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_DATA_9_ADDR + 
	             TSU_QPS_MODIFY_QP_DATA_9_STRIDE * 
	             TSU_QPS_MODIFY_QP_DATA_9_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_DATA_9");
	}
	/*
	 * Kick register to start a new modify or query command. This register is
	 * written by EPS.
	 */
	if ((addr >= TSU_QPS_MODIFY_QP_KICK_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_KICK_ADDR + 
	             TSU_QPS_MODIFY_QP_KICK_STRIDE * 
	             TSU_QPS_MODIFY_QP_KICK_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_KICK");
	}
	/*
	 * Status register indicating status of modify QP and query QP commands. This
	 * register is read by the EPS only.
	 */
	if ((addr >= TSU_QPS_MODIFY_QP_STATUS_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_QP_STATUS_ADDR + 
	             TSU_QPS_MODIFY_QP_STATUS_STRIDE * 
	             TSU_QPS_MODIFY_QP_STATUS_DEPTH)) {
		return("TSU_QPS_MODIFY_QP_STATUS");
	}
	/*
	 * Data register containing data for the query QP command. This is read by
	 * the EPS only. The register is laid out to contain QP, primary_path and
	 * alternate path - same as it is in host memory. This is only a data bus,
	 * not using the structure psif_verbs_pkg::query_qp_t. When data is queried,
	 * and written to this register the psif_verbs_pkg::query_qp_t is cast to
	 * this structure. Please look at psif_verbs_pkg::query_qp_t for details.
	 */
	if ((addr >= TSU_QPS_QUERY_QP_DATA_ADDR) &&
	    (addr <  TSU_QPS_QUERY_QP_DATA_ADDR + 
	             TSU_QPS_QUERY_QP_DATA_STRIDE * 
	             TSU_QPS_QUERY_QP_DATA_DEPTH)) {
		return("TSU_QPS_QUERY_QP_DATA");
	}
	/*
	 * QP data register - see psif_verbs_pkg::qp_t for details on layout. This
	 * register contain the QP data information to write to QP index (HW cache
	 * index) given by the wr_qp_index CSR. This register is used to initialize
	 * QP 0/1, and is not accessible from user space. It could also be used for
	 * diagnostics.
	 */
	if ((addr >= TSU_QPS_WR_QP_DATA_ADDR) &&
	    (addr <  TSU_QPS_WR_QP_DATA_ADDR + 
	             TSU_QPS_WR_QP_DATA_STRIDE * 
	             TSU_QPS_WR_QP_DATA_DEPTH)) {
		return("TSU_QPS_WR_QP_DATA");
	}
	/*
	 * QP data register - see psif_verbs_pkg::path_info_t for details on layout.
	 * This register contain the path data to write to QP index (HW cache index)
	 * given by the wr_qp_index CSR. This register is used to initialize QP 0/1,
	 * and is not accessible from user space.
	 */
	if ((addr >= TSU_QPS_WR_QP_PATH_ADDR) &&
	    (addr <  TSU_QPS_WR_QP_PATH_ADDR + 
	             TSU_QPS_WR_QP_PATH_STRIDE * 
	             TSU_QPS_WR_QP_PATH_DEPTH)) {
		return("TSU_QPS_WR_QP_PATH");
	}
	/*
	 * QP index register. This register contain the QP index where the QP
	 * information is written to. This register is used to initialize QP 0/1, and
	 * is not accessible from user space. Set this to 0 for QP0 and 1 for QP1.
	 */
	if ((addr >= TSU_QPS_WR_QP_INDEX_ADDR) &&
	    (addr <  TSU_QPS_WR_QP_INDEX_ADDR + 
	             TSU_QPS_WR_QP_INDEX_STRIDE * 
	             TSU_QPS_WR_QP_INDEX_DEPTH)) {
		return("TSU_QPS_WR_QP_INDEX");
	}
	/*
	 * Kick register to start a new writing the QP information in wr_qp_data and
	 * wr_qp_path to QP index given in wr_qp_index CSR. This register is .
	 */
	if ((addr >= TSU_QPS_WR_QP_KICK_ADDR) &&
	    (addr <  TSU_QPS_WR_QP_KICK_ADDR + 
	             TSU_QPS_WR_QP_KICK_STRIDE * 
	             TSU_QPS_WR_QP_KICK_DEPTH)) {
		return("TSU_QPS_WR_QP_KICK");
	}
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition INIT to RTR.
	 */
	if ((addr >= TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR_ADDR + 
	             TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR_STRIDE * 
	             TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR_DEPTH)) {
		return("TSU_QPS_MODIFY_ATTR_MASK_INIT_RTR");
	}
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition RTR to RTS.
	 */
	if ((addr >= TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS_ADDR + 
	             TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS_STRIDE * 
	             TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS_DEPTH)) {
		return("TSU_QPS_MODIFY_ATTR_MASK_RTR_RTS");
	}
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition RTS to RTS.
	 */
	if ((addr >= TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS_ADDR + 
	             TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS_STRIDE * 
	             TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS_DEPTH)) {
		return("TSU_QPS_MODIFY_ATTR_MASK_RTS_RTS");
	}
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. The register contain legal attribute masks for
	 * QP modification for state transition from any state to RESET or ERROR.
	 */
	if ((addr >= TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET_ADDR + 
	             TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET_STRIDE * 
	             TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET_DEPTH)) {
		return("TSU_QPS_MODIFY_ATTR_MASK_ANY_ERR_RESET");
	}
	/*
	 * DO NOT USE!! This register gives the option to change fields which can be
	 * changed in a QP modify command. It is not to be accessed by users, and is
	 * only here for flexibility. Legal attribute masks for QP modification for
	 * state transition from SQERR to RTS.
	 */
	if ((addr >= TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS_ADDR) &&
	    (addr <  TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS_ADDR + 
	             TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS_STRIDE * 
	             TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS_DEPTH)) {
		return("TSU_QPS_MODIFY_ATTR_MASK_SQERR_RTS");
	}
	/* Per UF refcount register. This is used for UF flushing. */
	if ((addr >= TSU_QPS_REF_COUNT_ADDR) &&
	    (addr <  TSU_QPS_REF_COUNT_ADDR + 
	             TSU_QPS_REF_COUNT_STRIDE * 
	             TSU_QPS_REF_COUNT_DEPTH)) {
		return("TSU_QPS_REF_COUNT");
	}
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	if ((addr >= TSU_CMPL_UF_CONTROL_ADDR) &&
	    (addr <  TSU_CMPL_UF_CONTROL_ADDR + 
	             TSU_CMPL_UF_CONTROL_STRIDE * 
	             TSU_CMPL_UF_CONTROL_DEPTH)) {
		return("TSU_CMPL_UF_CONTROL");
	}
	/* Starts operation defined in uf_control. */
	if ((addr >= TSU_CMPL_UF_CONTROL_KICK_ADDR) &&
	    (addr <  TSU_CMPL_UF_CONTROL_KICK_ADDR + 
	             TSU_CMPL_UF_CONTROL_KICK_STRIDE * 
	             TSU_CMPL_UF_CONTROL_KICK_DEPTH)) {
		return("TSU_CMPL_UF_CONTROL_KICK");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_CMPL_INT_STATUS_ADDR) &&
	    (addr <  TSU_CMPL_INT_STATUS_ADDR + 
	             TSU_CMPL_INT_STATUS_STRIDE * 
	             TSU_CMPL_INT_STATUS_DEPTH)) {
		return("TSU_CMPL_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_CMPL_INT_MASK_ADDR) &&
	    (addr <  TSU_CMPL_INT_MASK_ADDR + 
	             TSU_CMPL_INT_MASK_STRIDE * 
	             TSU_CMPL_INT_MASK_DEPTH)) {
		return("TSU_CMPL_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_CMPL_INT_PRI_ADDR) &&
	    (addr <  TSU_CMPL_INT_PRI_ADDR + 
	             TSU_CMPL_INT_PRI_STRIDE * 
	             TSU_CMPL_INT_PRI_DEPTH)) {
		return("TSU_CMPL_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_CMPL_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_CMPL_INT_STATUS_CLEAR_ADDR + 
	             TSU_CMPL_INT_STATUS_CLEAR_STRIDE * 
	             TSU_CMPL_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_CMPL_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_CMPL_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_CMPL_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_CMPL_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_CMPL_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_CMPL_INT_STATUS_CLEAR_KICK");
	}
	/* Base address. */
	if ((addr >= TSU_CMPL_SQ_BASE_ADDR_0_ADDR) &&
	    (addr <  TSU_CMPL_SQ_BASE_ADDR_0_ADDR + 
	             TSU_CMPL_SQ_BASE_ADDR_0_STRIDE * 
	             TSU_CMPL_SQ_BASE_ADDR_0_DEPTH)) {
		return("TSU_CMPL_SQ_BASE_ADDR_0");
	}
	/* MMU context. */
	if ((addr >= TSU_CMPL_SQ_BASE_ADDR_1_ADDR) &&
	    (addr <  TSU_CMPL_SQ_BASE_ADDR_1_ADDR + 
	             TSU_CMPL_SQ_BASE_ADDR_1_STRIDE * 
	             TSU_CMPL_SQ_BASE_ADDR_1_DEPTH)) {
		return("TSU_CMPL_SQ_BASE_ADDR_1");
	}
	/* Num entries and extent. */
	if ((addr >= TSU_CMPL_SQ_BASE_ADDR_2_ADDR) &&
	    (addr <  TSU_CMPL_SQ_BASE_ADDR_2_ADDR + 
	             TSU_CMPL_SQ_BASE_ADDR_2_STRIDE * 
	             TSU_CMPL_SQ_BASE_ADDR_2_DEPTH)) {
		return("TSU_CMPL_SQ_BASE_ADDR_2");
	}
	if ((addr >= TSU_VAL_KEY_BASE_ADDR_0_ADDR) &&
	    (addr <  TSU_VAL_KEY_BASE_ADDR_0_ADDR + 
	             TSU_VAL_KEY_BASE_ADDR_0_STRIDE * 
	             TSU_VAL_KEY_BASE_ADDR_0_DEPTH)) {
		return("TSU_VAL_KEY_BASE_ADDR_0");
	}
	if ((addr >= TSU_VAL_KEY_BASE_ADDR_1_ADDR) &&
	    (addr <  TSU_VAL_KEY_BASE_ADDR_1_ADDR + 
	             TSU_VAL_KEY_BASE_ADDR_1_STRIDE * 
	             TSU_VAL_KEY_BASE_ADDR_1_DEPTH)) {
		return("TSU_VAL_KEY_BASE_ADDR_1");
	}
	if ((addr >= TSU_VAL_KEY_BASE_ADDR_2_ADDR) &&
	    (addr <  TSU_VAL_KEY_BASE_ADDR_2_ADDR + 
	             TSU_VAL_KEY_BASE_ADDR_2_STRIDE * 
	             TSU_VAL_KEY_BASE_ADDR_2_DEPTH)) {
		return("TSU_VAL_KEY_BASE_ADDR_2");
	}
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	if ((addr >= TSU_VAL_UF_CONTROL_ADDR) &&
	    (addr <  TSU_VAL_UF_CONTROL_ADDR + 
	             TSU_VAL_UF_CONTROL_STRIDE * 
	             TSU_VAL_UF_CONTROL_DEPTH)) {
		return("TSU_VAL_UF_CONTROL");
	}
	/* Starts operation defined in uf_control. */
	if ((addr >= TSU_VAL_UF_CONTROL_KICK_ADDR) &&
	    (addr <  TSU_VAL_UF_CONTROL_KICK_ADDR + 
	             TSU_VAL_UF_CONTROL_KICK_STRIDE * 
	             TSU_VAL_UF_CONTROL_KICK_DEPTH)) {
		return("TSU_VAL_UF_CONTROL_KICK");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_VAL_INT_STATUS_ADDR) &&
	    (addr <  TSU_VAL_INT_STATUS_ADDR + 
	             TSU_VAL_INT_STATUS_STRIDE * 
	             TSU_VAL_INT_STATUS_DEPTH)) {
		return("TSU_VAL_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_VAL_INT_MASK_ADDR) &&
	    (addr <  TSU_VAL_INT_MASK_ADDR + 
	             TSU_VAL_INT_MASK_STRIDE * 
	             TSU_VAL_INT_MASK_DEPTH)) {
		return("TSU_VAL_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_VAL_INT_PRI_ADDR) &&
	    (addr <  TSU_VAL_INT_PRI_ADDR + 
	             TSU_VAL_INT_PRI_STRIDE * 
	             TSU_VAL_INT_PRI_DEPTH)) {
		return("TSU_VAL_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_VAL_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_VAL_INT_STATUS_CLEAR_ADDR + 
	             TSU_VAL_INT_STATUS_CLEAR_STRIDE * 
	             TSU_VAL_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_VAL_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_VAL_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_VAL_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_VAL_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_VAL_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_VAL_INT_STATUS_CLEAR_KICK");
	}
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	if ((addr >= TSU_RQH_UF_CONTROL_ADDR) &&
	    (addr <  TSU_RQH_UF_CONTROL_ADDR + 
	             TSU_RQH_UF_CONTROL_STRIDE * 
	             TSU_RQH_UF_CONTROL_DEPTH)) {
		return("TSU_RQH_UF_CONTROL");
	}
	/* Starts operation defined in uf_control. */
	if ((addr >= TSU_RQH_UF_CONTROL_KICK_ADDR) &&
	    (addr <  TSU_RQH_UF_CONTROL_KICK_ADDR + 
	             TSU_RQH_UF_CONTROL_KICK_STRIDE * 
	             TSU_RQH_UF_CONTROL_KICK_DEPTH)) {
		return("TSU_RQH_UF_CONTROL_KICK");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_RQH_INT_STATUS_ADDR) &&
	    (addr <  TSU_RQH_INT_STATUS_ADDR + 
	             TSU_RQH_INT_STATUS_STRIDE * 
	             TSU_RQH_INT_STATUS_DEPTH)) {
		return("TSU_RQH_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_RQH_INT_MASK_ADDR) &&
	    (addr <  TSU_RQH_INT_MASK_ADDR + 
	             TSU_RQH_INT_MASK_STRIDE * 
	             TSU_RQH_INT_MASK_DEPTH)) {
		return("TSU_RQH_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_RQH_INT_PRI_ADDR) &&
	    (addr <  TSU_RQH_INT_PRI_ADDR + 
	             TSU_RQH_INT_PRI_STRIDE * 
	             TSU_RQH_INT_PRI_DEPTH)) {
		return("TSU_RQH_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_RQH_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_RQH_INT_STATUS_CLEAR_ADDR + 
	             TSU_RQH_INT_STATUS_CLEAR_STRIDE * 
	             TSU_RQH_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_RQH_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_RQH_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_RQH_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_RQH_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_RQH_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_RQH_INT_STATUS_CLEAR_KICK");
	}
	if ((addr >= TSU_RQH_QP_BASE_ADDR_0_ADDR) &&
	    (addr <  TSU_RQH_QP_BASE_ADDR_0_ADDR + 
	             TSU_RQH_QP_BASE_ADDR_0_STRIDE * 
	             TSU_RQH_QP_BASE_ADDR_0_DEPTH)) {
		return("TSU_RQH_QP_BASE_ADDR_0");
	}
	if ((addr >= TSU_RQH_QP_BASE_ADDR_1_ADDR) &&
	    (addr <  TSU_RQH_QP_BASE_ADDR_1_ADDR + 
	             TSU_RQH_QP_BASE_ADDR_1_STRIDE * 
	             TSU_RQH_QP_BASE_ADDR_1_DEPTH)) {
		return("TSU_RQH_QP_BASE_ADDR_1");
	}
	if ((addr >= TSU_RQH_QP_BASE_ADDR_2_ADDR) &&
	    (addr <  TSU_RQH_QP_BASE_ADDR_2_ADDR + 
	             TSU_RQH_QP_BASE_ADDR_2_STRIDE * 
	             TSU_RQH_QP_BASE_ADDR_2_DEPTH)) {
		return("TSU_RQH_QP_BASE_ADDR_2");
	}
	/*
	 * Head index register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_EQ_SW_INDEX_WR_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_EQ_SW_INDEX_WR_ADDR + 
	             TSU_RQH_INDIRECT_EQ_SW_INDEX_WR_STRIDE * 
	             TSU_RQH_INDIRECT_EQ_SW_INDEX_WR_DEPTH)) {
		return("TSU_RQH_INDIRECT_EQ_SW_INDEX_WR");
	}
	/*
	 * Tail index register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_EQ_HW_INDEX_WR_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_EQ_HW_INDEX_WR_ADDR + 
	             TSU_RQH_INDIRECT_EQ_HW_INDEX_WR_STRIDE * 
	             TSU_RQH_INDIRECT_EQ_HW_INDEX_WR_DEPTH)) {
		return("TSU_RQH_INDIRECT_EQ_HW_INDEX_WR");
	}
	/*
	 * MMU context and descriptor control register. Indirect register to write in
	 * order to get a consistent view of the complete descriptor. This is used
	 * along with the address and write register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_EQ_CTRL_WR_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_EQ_CTRL_WR_ADDR + 
	             TSU_RQH_INDIRECT_EQ_CTRL_WR_STRIDE * 
	             TSU_RQH_INDIRECT_EQ_CTRL_WR_DEPTH)) {
		return("TSU_RQH_INDIRECT_EQ_CTRL_WR");
	}
	/*
	 * Base address register. Indirect register to write in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and write register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR_ADDR + 
	             TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR_STRIDE * 
	             TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR_DEPTH)) {
		return("TSU_RQH_INDIRECT_EQ_BASE_ADDR_WR");
	}
	/*
	 * Max number of entries and sequence number register. Indirect register to
	 * write in order to get a consistent view of the complete descriptor. This
	 * is used along with the address and write register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_MMU_CONTEXT_WR_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_MMU_CONTEXT_WR_ADDR + 
	             TSU_RQH_INDIRECT_MMU_CONTEXT_WR_STRIDE * 
	             TSU_RQH_INDIRECT_MMU_CONTEXT_WR_DEPTH)) {
		return("TSU_RQH_INDIRECT_MMU_CONTEXT_WR");
	}
	/*
	 * This register must be set prior to kicking a write of the indirect event
	 * queue registers.
	 */
	if ((addr >= TSU_RQH_INDIRECTION_ADDR_WR_ADDR) &&
	    (addr <  TSU_RQH_INDIRECTION_ADDR_WR_ADDR + 
	             TSU_RQH_INDIRECTION_ADDR_WR_STRIDE * 
	             TSU_RQH_INDIRECTION_ADDR_WR_DEPTH)) {
		return("TSU_RQH_INDIRECTION_ADDR_WR");
	}
	/*
	 * When this register is written to, the content of indirect_eq_sw_index_wr,
	 * indirect_eq_hw_index_wr, indirect_eq_ctrl_wr, indirect_eq_base_addr_wr,
	 * indirect_eq_size_wr is written to event queue entry number defined by the
	 * value in the indirect_addr.
	 */
	if ((addr >= TSU_RQH_INDIRECT_WR_KICK_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_WR_KICK_ADDR + 
	             TSU_RQH_INDIRECT_WR_KICK_STRIDE * 
	             TSU_RQH_INDIRECT_WR_KICK_DEPTH)) {
		return("TSU_RQH_INDIRECT_WR_KICK");
	}
	/*
	 * Head index register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_EQ_SW_INDEX_RD_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_EQ_SW_INDEX_RD_ADDR + 
	             TSU_RQH_INDIRECT_EQ_SW_INDEX_RD_STRIDE * 
	             TSU_RQH_INDIRECT_EQ_SW_INDEX_RD_DEPTH)) {
		return("TSU_RQH_INDIRECT_EQ_SW_INDEX_RD");
	}
	/*
	 * Tail index register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_EQ_HW_INDEX_RD_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_EQ_HW_INDEX_RD_ADDR + 
	             TSU_RQH_INDIRECT_EQ_HW_INDEX_RD_STRIDE * 
	             TSU_RQH_INDIRECT_EQ_HW_INDEX_RD_DEPTH)) {
		return("TSU_RQH_INDIRECT_EQ_HW_INDEX_RD");
	}
	/*
	 * MMU context and descriptor control register. Indirect register to read in
	 * order to get a consistent view of the complete descriptor. This is used
	 * along with the address and write register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_EQ_CTRL_RD_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_EQ_CTRL_RD_ADDR + 
	             TSU_RQH_INDIRECT_EQ_CTRL_RD_STRIDE * 
	             TSU_RQH_INDIRECT_EQ_CTRL_RD_DEPTH)) {
		return("TSU_RQH_INDIRECT_EQ_CTRL_RD");
	}
	/*
	 * Base address register. Indirect register to read in order to get a
	 * consistent view of the complete descriptor. This is used along with the
	 * address and read register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD_ADDR + 
	             TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD_STRIDE * 
	             TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD_DEPTH)) {
		return("TSU_RQH_INDIRECT_EQ_BASE_ADDR_RD");
	}
	/*
	 * Max number of entries and sequence number register. Indirect register to
	 * read in order to get a consistent view of the complete descriptor. This is
	 * used along with the address and read register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_MMU_CONTEXT_RD_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_MMU_CONTEXT_RD_ADDR + 
	             TSU_RQH_INDIRECT_MMU_CONTEXT_RD_STRIDE * 
	             TSU_RQH_INDIRECT_MMU_CONTEXT_RD_DEPTH)) {
		return("TSU_RQH_INDIRECT_MMU_CONTEXT_RD");
	}
	/*
	 * This register must be set prior to kicking a read of the indirect event
	 * queue registers.
	 */
	if ((addr >= TSU_RQH_INDIRECTION_ADDR_RD_ADDR) &&
	    (addr <  TSU_RQH_INDIRECTION_ADDR_RD_ADDR + 
	             TSU_RQH_INDIRECTION_ADDR_RD_STRIDE * 
	             TSU_RQH_INDIRECTION_ADDR_RD_DEPTH)) {
		return("TSU_RQH_INDIRECTION_ADDR_RD");
	}
	/*
	 * When this register is written to, the content of event queue entry in
	 * indirect_addr is written to indirect_eq_sw_index_rd,
	 * indirect_eq_hw_index_rd, indirect_eq_ctrl_rd, indirect_eq_base_addr_rd,
	 * indirect_eq_size_rd. These registers can now be read as one consistent
	 * register.
	 */
	if ((addr >= TSU_RQH_INDIRECT_RD_KICK_ADDR) &&
	    (addr <  TSU_RQH_INDIRECT_RD_KICK_ADDR + 
	             TSU_RQH_INDIRECT_RD_KICK_STRIDE * 
	             TSU_RQH_INDIRECT_RD_KICK_DEPTH)) {
		return("TSU_RQH_INDIRECT_RD_KICK");
	}
	/*
	 * Directly accessible software index. Software can update this directly
	 * without having to go through a staging read/write register.
	 */
	if ((addr >= TSU_RQH_EQ_SW_INDEX_ADDR) &&
	    (addr <  TSU_RQH_EQ_SW_INDEX_ADDR + 
	             TSU_RQH_EQ_SW_INDEX_STRIDE * 
	             TSU_RQH_EQ_SW_INDEX_DEPTH)) {
		return("TSU_RQH_EQ_SW_INDEX");
	}
	/*
	 * Directly accessible software index. Software can update this directly
	 * without having to go through a staging read/write register.
	 */
	if ((addr >= TSU_RQH_EQ_HW_INDEX_ADDR) &&
	    (addr <  TSU_RQH_EQ_HW_INDEX_ADDR + 
	             TSU_RQH_EQ_HW_INDEX_STRIDE * 
	             TSU_RQH_EQ_HW_INDEX_DEPTH)) {
		return("TSU_RQH_EQ_HW_INDEX");
	}
	/*
	 * Used for translating each vHCA's EQ number to the physical EQ number.
	 */
	if ((addr >= TSU_RQH_EQ_MAPPING_TABLE_ADDR) &&
	    (addr <  TSU_RQH_EQ_MAPPING_TABLE_ADDR + 
	             TSU_RQH_EQ_MAPPING_TABLE_STRIDE * 
	             TSU_RQH_EQ_MAPPING_TABLE_DEPTH)) {
		return("TSU_RQH_EQ_MAPPING_TABLE");
	}
	/* EQ Overflow Status 0 EQs 0-63 */
	if ((addr >= TSU_RQH_EQ_OVERFLOW_STATUS_0_ADDR) &&
	    (addr <  TSU_RQH_EQ_OVERFLOW_STATUS_0_ADDR + 
	             TSU_RQH_EQ_OVERFLOW_STATUS_0_STRIDE * 
	             TSU_RQH_EQ_OVERFLOW_STATUS_0_DEPTH)) {
		return("TSU_RQH_EQ_OVERFLOW_STATUS_0");
	}
	/* EQ Overflow Status 1 EQs 64-127 */
	if ((addr >= TSU_RQH_EQ_OVERFLOW_STATUS_1_ADDR) &&
	    (addr <  TSU_RQH_EQ_OVERFLOW_STATUS_1_ADDR + 
	             TSU_RQH_EQ_OVERFLOW_STATUS_1_STRIDE * 
	             TSU_RQH_EQ_OVERFLOW_STATUS_1_DEPTH)) {
		return("TSU_RQH_EQ_OVERFLOW_STATUS_1");
	}
	/* EQ Invavlid Status 0 EQs 0-63 */
	if ((addr >= TSU_RQH_EQ_INVALID_STATUS_0_ADDR) &&
	    (addr <  TSU_RQH_EQ_INVALID_STATUS_0_ADDR + 
	             TSU_RQH_EQ_INVALID_STATUS_0_STRIDE * 
	             TSU_RQH_EQ_INVALID_STATUS_0_DEPTH)) {
		return("TSU_RQH_EQ_INVALID_STATUS_0");
	}
	/* EQ Overflow Status 1 EQs 64-127 */
	if ((addr >= TSU_RQH_EQ_INVALID_STATUS_1_ADDR) &&
	    (addr <  TSU_RQH_EQ_INVALID_STATUS_1_ADDR + 
	             TSU_RQH_EQ_INVALID_STATUS_1_STRIDE * 
	             TSU_RQH_EQ_INVALID_STATUS_1_DEPTH)) {
		return("TSU_RQH_EQ_INVALID_STATUS_1");
	}
	/* EQ out of range status */
	if ((addr >= TSU_RQH_EQ_OUT_OF_RANGE_STATUS_ADDR) &&
	    (addr <  TSU_RQH_EQ_OUT_OF_RANGE_STATUS_ADDR + 
	             TSU_RQH_EQ_OUT_OF_RANGE_STATUS_STRIDE * 
	             TSU_RQH_EQ_OUT_OF_RANGE_STATUS_DEPTH)) {
		return("TSU_RQH_EQ_OUT_OF_RANGE_STATUS");
	}
	/* Clear EQ Status 0 EQs 0-63 */
	if ((addr >= TSU_RQH_CLEAR_EQ_STATUS_0_ADDR) &&
	    (addr <  TSU_RQH_CLEAR_EQ_STATUS_0_ADDR + 
	             TSU_RQH_CLEAR_EQ_STATUS_0_STRIDE * 
	             TSU_RQH_CLEAR_EQ_STATUS_0_DEPTH)) {
		return("TSU_RQH_CLEAR_EQ_STATUS_0");
	}
	/* Clear EQ Status 1 EQs 64-127 */
	if ((addr >= TSU_RQH_CLEAR_EQ_STATUS_1_ADDR) &&
	    (addr <  TSU_RQH_CLEAR_EQ_STATUS_1_ADDR + 
	             TSU_RQH_CLEAR_EQ_STATUS_1_STRIDE * 
	             TSU_RQH_CLEAR_EQ_STATUS_1_DEPTH)) {
		return("TSU_RQH_CLEAR_EQ_STATUS_1");
	}
	/* Initiates clear of EQ status bits as indicated in Clear EQ Status 0/1. */
	if ((addr >= TSU_RQH_CLEAR_EQ_STATUS_KICK_ADDR) &&
	    (addr <  TSU_RQH_CLEAR_EQ_STATUS_KICK_ADDR + 
	             TSU_RQH_CLEAR_EQ_STATUS_KICK_STRIDE * 
	             TSU_RQH_CLEAR_EQ_STATUS_KICK_DEPTH)) {
		return("TSU_RQH_CLEAR_EQ_STATUS_KICK");
	}
	/* Clear per UF EQ out of range Status */
	if ((addr >= TSU_RQH_CLEAR_EQ_UF_STATUS_ADDR) &&
	    (addr <  TSU_RQH_CLEAR_EQ_UF_STATUS_ADDR + 
	             TSU_RQH_CLEAR_EQ_UF_STATUS_STRIDE * 
	             TSU_RQH_CLEAR_EQ_UF_STATUS_DEPTH)) {
		return("TSU_RQH_CLEAR_EQ_UF_STATUS");
	}
	/* Initiates clear of per UF out of range EQ status bits */
	if ((addr >= TSU_RQH_CLEAR_EQ_UF_STATUS_KICK_ADDR) &&
	    (addr <  TSU_RQH_CLEAR_EQ_UF_STATUS_KICK_ADDR + 
	             TSU_RQH_CLEAR_EQ_UF_STATUS_KICK_STRIDE * 
	             TSU_RQH_CLEAR_EQ_UF_STATUS_KICK_DEPTH)) {
		return("TSU_RQH_CLEAR_EQ_UF_STATUS_KICK");
	}
	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * completion queue descriptors.
	 */
	if ((addr >= TSU_DSCR_CQ_BASE_ADDR_SW_0_ADDR) &&
	    (addr <  TSU_DSCR_CQ_BASE_ADDR_SW_0_ADDR + 
	             TSU_DSCR_CQ_BASE_ADDR_SW_0_STRIDE * 
	             TSU_DSCR_CQ_BASE_ADDR_SW_0_DEPTH)) {
		return("TSU_DSCR_CQ_BASE_ADDR_SW_0");
	}
	if ((addr >= TSU_DSCR_CQ_BASE_ADDR_SW_1_ADDR) &&
	    (addr <  TSU_DSCR_CQ_BASE_ADDR_SW_1_ADDR + 
	             TSU_DSCR_CQ_BASE_ADDR_SW_1_STRIDE * 
	             TSU_DSCR_CQ_BASE_ADDR_SW_1_DEPTH)) {
		return("TSU_DSCR_CQ_BASE_ADDR_SW_1");
	}
	if ((addr >= TSU_DSCR_CQ_BASE_ADDR_SW_2_ADDR) &&
	    (addr <  TSU_DSCR_CQ_BASE_ADDR_SW_2_ADDR + 
	             TSU_DSCR_CQ_BASE_ADDR_SW_2_STRIDE * 
	             TSU_DSCR_CQ_BASE_ADDR_SW_2_DEPTH)) {
		return("TSU_DSCR_CQ_BASE_ADDR_SW_2");
	}
	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * completion queue descriptors.
	 */
	if ((addr >= TSU_DSCR_CQ_BASE_ADDR_HW_0_ADDR) &&
	    (addr <  TSU_DSCR_CQ_BASE_ADDR_HW_0_ADDR + 
	             TSU_DSCR_CQ_BASE_ADDR_HW_0_STRIDE * 
	             TSU_DSCR_CQ_BASE_ADDR_HW_0_DEPTH)) {
		return("TSU_DSCR_CQ_BASE_ADDR_HW_0");
	}
	if ((addr >= TSU_DSCR_CQ_BASE_ADDR_HW_1_ADDR) &&
	    (addr <  TSU_DSCR_CQ_BASE_ADDR_HW_1_ADDR + 
	             TSU_DSCR_CQ_BASE_ADDR_HW_1_STRIDE * 
	             TSU_DSCR_CQ_BASE_ADDR_HW_1_DEPTH)) {
		return("TSU_DSCR_CQ_BASE_ADDR_HW_1");
	}
	if ((addr >= TSU_DSCR_CQ_BASE_ADDR_HW_2_ADDR) &&
	    (addr <  TSU_DSCR_CQ_BASE_ADDR_HW_2_ADDR + 
	             TSU_DSCR_CQ_BASE_ADDR_HW_2_STRIDE * 
	             TSU_DSCR_CQ_BASE_ADDR_HW_2_DEPTH)) {
		return("TSU_DSCR_CQ_BASE_ADDR_HW_2");
	}
	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * ring buffer descriptors.
	 */
	if ((addr >= TSU_DSCR_RB_BASE_ADDR_SW_0_ADDR) &&
	    (addr <  TSU_DSCR_RB_BASE_ADDR_SW_0_ADDR + 
	             TSU_DSCR_RB_BASE_ADDR_SW_0_STRIDE * 
	             TSU_DSCR_RB_BASE_ADDR_SW_0_DEPTH)) {
		return("TSU_DSCR_RB_BASE_ADDR_SW_0");
	}
	if ((addr >= TSU_DSCR_RB_BASE_ADDR_SW_1_ADDR) &&
	    (addr <  TSU_DSCR_RB_BASE_ADDR_SW_1_ADDR + 
	             TSU_DSCR_RB_BASE_ADDR_SW_1_STRIDE * 
	             TSU_DSCR_RB_BASE_ADDR_SW_1_DEPTH)) {
		return("TSU_DSCR_RB_BASE_ADDR_SW_1");
	}
	if ((addr >= TSU_DSCR_RB_BASE_ADDR_SW_2_ADDR) &&
	    (addr <  TSU_DSCR_RB_BASE_ADDR_SW_2_ADDR + 
	             TSU_DSCR_RB_BASE_ADDR_SW_2_STRIDE * 
	             TSU_DSCR_RB_BASE_ADDR_SW_2_DEPTH)) {
		return("TSU_DSCR_RB_BASE_ADDR_SW_2");
	}
	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * ring buffer descriptors.
	 */
	if ((addr >= TSU_DSCR_RB_BASE_ADDR_HW_0_ADDR) &&
	    (addr <  TSU_DSCR_RB_BASE_ADDR_HW_0_ADDR + 
	             TSU_DSCR_RB_BASE_ADDR_HW_0_STRIDE * 
	             TSU_DSCR_RB_BASE_ADDR_HW_0_DEPTH)) {
		return("TSU_DSCR_RB_BASE_ADDR_HW_0");
	}
	if ((addr >= TSU_DSCR_RB_BASE_ADDR_HW_1_ADDR) &&
	    (addr <  TSU_DSCR_RB_BASE_ADDR_HW_1_ADDR + 
	             TSU_DSCR_RB_BASE_ADDR_HW_1_STRIDE * 
	             TSU_DSCR_RB_BASE_ADDR_HW_1_DEPTH)) {
		return("TSU_DSCR_RB_BASE_ADDR_HW_1");
	}
	if ((addr >= TSU_DSCR_RB_BASE_ADDR_HW_2_ADDR) &&
	    (addr <  TSU_DSCR_RB_BASE_ADDR_HW_2_ADDR + 
	             TSU_DSCR_RB_BASE_ADDR_HW_2_STRIDE * 
	             TSU_DSCR_RB_BASE_ADDR_HW_2_DEPTH)) {
		return("TSU_DSCR_RB_BASE_ADDR_HW_2");
	}
	/*
	 * Base address registers per UF for software owned descriptor portion of
	 * receive queue descriptors.
	 */
	if ((addr >= TSU_DSCR_RQ_BASE_ADDR_SW_0_ADDR) &&
	    (addr <  TSU_DSCR_RQ_BASE_ADDR_SW_0_ADDR + 
	             TSU_DSCR_RQ_BASE_ADDR_SW_0_STRIDE * 
	             TSU_DSCR_RQ_BASE_ADDR_SW_0_DEPTH)) {
		return("TSU_DSCR_RQ_BASE_ADDR_SW_0");
	}
	if ((addr >= TSU_DSCR_RQ_BASE_ADDR_SW_1_ADDR) &&
	    (addr <  TSU_DSCR_RQ_BASE_ADDR_SW_1_ADDR + 
	             TSU_DSCR_RQ_BASE_ADDR_SW_1_STRIDE * 
	             TSU_DSCR_RQ_BASE_ADDR_SW_1_DEPTH)) {
		return("TSU_DSCR_RQ_BASE_ADDR_SW_1");
	}
	if ((addr >= TSU_DSCR_RQ_BASE_ADDR_SW_2_ADDR) &&
	    (addr <  TSU_DSCR_RQ_BASE_ADDR_SW_2_ADDR + 
	             TSU_DSCR_RQ_BASE_ADDR_SW_2_STRIDE * 
	             TSU_DSCR_RQ_BASE_ADDR_SW_2_DEPTH)) {
		return("TSU_DSCR_RQ_BASE_ADDR_SW_2");
	}
	/*
	 * Base address registers per UF for hardware owned descriptor portion of
	 * receive queue descriptors.
	 */
	if ((addr >= TSU_DSCR_RQ_BASE_ADDR_HW_0_ADDR) &&
	    (addr <  TSU_DSCR_RQ_BASE_ADDR_HW_0_ADDR + 
	             TSU_DSCR_RQ_BASE_ADDR_HW_0_STRIDE * 
	             TSU_DSCR_RQ_BASE_ADDR_HW_0_DEPTH)) {
		return("TSU_DSCR_RQ_BASE_ADDR_HW_0");
	}
	if ((addr >= TSU_DSCR_RQ_BASE_ADDR_HW_1_ADDR) &&
	    (addr <  TSU_DSCR_RQ_BASE_ADDR_HW_1_ADDR + 
	             TSU_DSCR_RQ_BASE_ADDR_HW_1_STRIDE * 
	             TSU_DSCR_RQ_BASE_ADDR_HW_1_DEPTH)) {
		return("TSU_DSCR_RQ_BASE_ADDR_HW_1");
	}
	if ((addr >= TSU_DSCR_RQ_BASE_ADDR_HW_2_ADDR) &&
	    (addr <  TSU_DSCR_RQ_BASE_ADDR_HW_2_ADDR + 
	             TSU_DSCR_RQ_BASE_ADDR_HW_2_STRIDE * 
	             TSU_DSCR_RQ_BASE_ADDR_HW_2_DEPTH)) {
		return("TSU_DSCR_RQ_BASE_ADDR_HW_2");
	}
	/*
	 * Base address registers per UF for software owned descriptor portion of XRC
	 * SRQ descriptors.
	 */
	if ((addr >= TSU_DSCR_XRQ_BASE_ADDR_SW_0_ADDR) &&
	    (addr <  TSU_DSCR_XRQ_BASE_ADDR_SW_0_ADDR + 
	             TSU_DSCR_XRQ_BASE_ADDR_SW_0_STRIDE * 
	             TSU_DSCR_XRQ_BASE_ADDR_SW_0_DEPTH)) {
		return("TSU_DSCR_XRQ_BASE_ADDR_SW_0");
	}
	if ((addr >= TSU_DSCR_XRQ_BASE_ADDR_SW_1_ADDR) &&
	    (addr <  TSU_DSCR_XRQ_BASE_ADDR_SW_1_ADDR + 
	             TSU_DSCR_XRQ_BASE_ADDR_SW_1_STRIDE * 
	             TSU_DSCR_XRQ_BASE_ADDR_SW_1_DEPTH)) {
		return("TSU_DSCR_XRQ_BASE_ADDR_SW_1");
	}
	if ((addr >= TSU_DSCR_XRQ_BASE_ADDR_SW_2_ADDR) &&
	    (addr <  TSU_DSCR_XRQ_BASE_ADDR_SW_2_ADDR + 
	             TSU_DSCR_XRQ_BASE_ADDR_SW_2_STRIDE * 
	             TSU_DSCR_XRQ_BASE_ADDR_SW_2_DEPTH)) {
		return("TSU_DSCR_XRQ_BASE_ADDR_SW_2");
	}
	/*
	 * Base address registers per UF for hardware owned descriptor portion of XRC
	 * SRQ descriptors.
	 */
	if ((addr >= TSU_DSCR_XRQ_BASE_ADDR_HW_0_ADDR) &&
	    (addr <  TSU_DSCR_XRQ_BASE_ADDR_HW_0_ADDR + 
	             TSU_DSCR_XRQ_BASE_ADDR_HW_0_STRIDE * 
	             TSU_DSCR_XRQ_BASE_ADDR_HW_0_DEPTH)) {
		return("TSU_DSCR_XRQ_BASE_ADDR_HW_0");
	}
	if ((addr >= TSU_DSCR_XRQ_BASE_ADDR_HW_1_ADDR) &&
	    (addr <  TSU_DSCR_XRQ_BASE_ADDR_HW_1_ADDR + 
	             TSU_DSCR_XRQ_BASE_ADDR_HW_1_STRIDE * 
	             TSU_DSCR_XRQ_BASE_ADDR_HW_1_DEPTH)) {
		return("TSU_DSCR_XRQ_BASE_ADDR_HW_1");
	}
	if ((addr >= TSU_DSCR_XRQ_BASE_ADDR_HW_2_ADDR) &&
	    (addr <  TSU_DSCR_XRQ_BASE_ADDR_HW_2_ADDR + 
	             TSU_DSCR_XRQ_BASE_ADDR_HW_2_STRIDE * 
	             TSU_DSCR_XRQ_BASE_ADDR_HW_2_DEPTH)) {
		return("TSU_DSCR_XRQ_BASE_ADDR_HW_2");
	}
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	if ((addr >= TSU_DSCR_UF_CONTROL_ADDR) &&
	    (addr <  TSU_DSCR_UF_CONTROL_ADDR + 
	             TSU_DSCR_UF_CONTROL_STRIDE * 
	             TSU_DSCR_UF_CONTROL_DEPTH)) {
		return("TSU_DSCR_UF_CONTROL");
	}
	/* Starts operation defined in uf_control. */
	if ((addr >= TSU_DSCR_UF_CONTROL_KICK_ADDR) &&
	    (addr <  TSU_DSCR_UF_CONTROL_KICK_ADDR + 
	             TSU_DSCR_UF_CONTROL_KICK_STRIDE * 
	             TSU_DSCR_UF_CONTROL_KICK_DEPTH)) {
		return("TSU_DSCR_UF_CONTROL_KICK");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_DSCR_INT_STATUS_ADDR) &&
	    (addr <  TSU_DSCR_INT_STATUS_ADDR + 
	             TSU_DSCR_INT_STATUS_STRIDE * 
	             TSU_DSCR_INT_STATUS_DEPTH)) {
		return("TSU_DSCR_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_DSCR_INT_MASK_ADDR) &&
	    (addr <  TSU_DSCR_INT_MASK_ADDR + 
	             TSU_DSCR_INT_MASK_STRIDE * 
	             TSU_DSCR_INT_MASK_DEPTH)) {
		return("TSU_DSCR_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_DSCR_INT_PRI_ADDR) &&
	    (addr <  TSU_DSCR_INT_PRI_ADDR + 
	             TSU_DSCR_INT_PRI_STRIDE * 
	             TSU_DSCR_INT_PRI_DEPTH)) {
		return("TSU_DSCR_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_DSCR_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_DSCR_INT_STATUS_CLEAR_ADDR + 
	             TSU_DSCR_INT_STATUS_CLEAR_STRIDE * 
	             TSU_DSCR_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_DSCR_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_DSCR_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_DSCR_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_DSCR_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_DSCR_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_DSCR_INT_STATUS_CLEAR_KICK");
	}
	/* Async event FIFO - status portion. */
	if ((addr >= TSU_DSCR_ASYNC_EVENT_STATUS_ADDR) &&
	    (addr <  TSU_DSCR_ASYNC_EVENT_STATUS_ADDR + 
	             TSU_DSCR_ASYNC_EVENT_STATUS_STRIDE * 
	             TSU_DSCR_ASYNC_EVENT_STATUS_DEPTH)) {
		return("TSU_DSCR_ASYNC_EVENT_STATUS");
	}
	/* Async event FIFO - affiliated data portion. */
	if ((addr >= TSU_DSCR_ASYNC_EVENT_AFFILIATED_ADDR) &&
	    (addr <  TSU_DSCR_ASYNC_EVENT_AFFILIATED_ADDR + 
	             TSU_DSCR_ASYNC_EVENT_AFFILIATED_STRIDE * 
	             TSU_DSCR_ASYNC_EVENT_AFFILIATED_DEPTH)) {
		return("TSU_DSCR_ASYNC_EVENT_AFFILIATED");
	}
	/* This pop register is written after async event register is read. */
	if ((addr >= TSU_DSCR_ASYNC_EVENT_POP_ADDR) &&
	    (addr <  TSU_DSCR_ASYNC_EVENT_POP_ADDR + 
	             TSU_DSCR_ASYNC_EVENT_POP_STRIDE * 
	             TSU_DSCR_ASYNC_EVENT_POP_DEPTH)) {
		return("TSU_DSCR_ASYNC_EVENT_POP");
	}
	/* Various diagnostic control bits */
	if ((addr >= TSU_DSCR_DIAGNOSTIC_ADDR) &&
	    (addr <  TSU_DSCR_DIAGNOSTIC_ADDR + 
	             TSU_DSCR_DIAGNOSTIC_STRIDE * 
	             TSU_DSCR_DIAGNOSTIC_DEPTH)) {
		return("TSU_DSCR_DIAGNOSTIC");
	}
	/* Fatal interrupt bits */
	if ((addr >= TSU_DSCR_FATAL_INTERRUPT_ADDR) &&
	    (addr <  TSU_DSCR_FATAL_INTERRUPT_ADDR + 
	             TSU_DSCR_FATAL_INTERRUPT_STRIDE * 
	             TSU_DSCR_FATAL_INTERRUPT_DEPTH)) {
		return("TSU_DSCR_FATAL_INTERRUPT");
	}
	/* Clear fatal interrupt status. */
	if ((addr >= TSU_DSCR_FATAL_INTERRUPT_CLEAR_ADDR) &&
	    (addr <  TSU_DSCR_FATAL_INTERRUPT_CLEAR_ADDR + 
	             TSU_DSCR_FATAL_INTERRUPT_CLEAR_STRIDE * 
	             TSU_DSCR_FATAL_INTERRUPT_CLEAR_DEPTH)) {
		return("TSU_DSCR_FATAL_INTERRUPT_CLEAR");
	}
	/* RSS table containing CQ and RQ. This table is used for EoIB RSS. */
	if ((addr >= TSU_RCV_RSS_EOIB_TABLE_ADDR) &&
	    (addr <  TSU_RCV_RSS_EOIB_TABLE_ADDR + 
	             TSU_RCV_RSS_EOIB_TABLE_STRIDE * 
	             TSU_RCV_RSS_EOIB_TABLE_DEPTH)) {
		return("TSU_RCV_RSS_EOIB_TABLE");
	}
	/*
	 * Control register for RSS per vHCA (UF0-UF32). Containing the bit masks to
	 * use when masking hashes.
	 */
	if ((addr >= TSU_RCV_RSS_CTRL_EOIB_TABLE_ADDR) &&
	    (addr <  TSU_RCV_RSS_CTRL_EOIB_TABLE_ADDR + 
	             TSU_RCV_RSS_CTRL_EOIB_TABLE_STRIDE * 
	             TSU_RCV_RSS_CTRL_EOIB_TABLE_DEPTH)) {
		return("TSU_RCV_RSS_CTRL_EOIB_TABLE");
	}
	/* RSS table containing CQ and RQ. This table is used for IPoIB RSS. */
	if ((addr >= TSU_RCV_RSS_IPOIB_TABLE_ADDR) &&
	    (addr <  TSU_RCV_RSS_IPOIB_TABLE_ADDR + 
	             TSU_RCV_RSS_IPOIB_TABLE_STRIDE * 
	             TSU_RCV_RSS_IPOIB_TABLE_DEPTH)) {
		return("TSU_RCV_RSS_IPOIB_TABLE");
	}
	/*
	 * Control register for RSS per vHCA (UF0-UF32). Containing the bit masks to
	 * use when masking hashes.
	 */
	if ((addr >= TSU_RCV_RSS_CTRL_IPOIB_TABLE_ADDR) &&
	    (addr <  TSU_RCV_RSS_CTRL_IPOIB_TABLE_ADDR + 
	             TSU_RCV_RSS_CTRL_IPOIB_TABLE_STRIDE * 
	             TSU_RCV_RSS_CTRL_IPOIB_TABLE_DEPTH)) {
		return("TSU_RCV_RSS_CTRL_IPOIB_TABLE");
	}
	/*
	 * Control register for EPS-A offloading per vHCA (UF0-UF32). It is
	 * containing the size which is the limit for sending packets to EPS-A.
	 */
	if ((addr >= TSU_RCV_PROXY_SIZE_ADDR) &&
	    (addr <  TSU_RCV_PROXY_SIZE_ADDR + 
	             TSU_RCV_PROXY_SIZE_STRIDE * 
	             TSU_RCV_PROXY_SIZE_DEPTH)) {
		return("TSU_RCV_PROXY_SIZE");
	}
	/* Maximum MAD packet size supported. */
	if ((addr >= TSU_RCV_MAD_SIZE_ADDR) &&
	    (addr <  TSU_RCV_MAD_SIZE_ADDR + 
	             TSU_RCV_MAD_SIZE_STRIDE * 
	             TSU_RCV_MAD_SIZE_DEPTH)) {
		return("TSU_RCV_MAD_SIZE");
	}
	/*
	 * Error counter for multicast rejects. There is one register per vHCA port.
	 */
	if ((addr >= TSU_RCV_EOIB_MCAST_REJECT_ADDR) &&
	    (addr <  TSU_RCV_EOIB_MCAST_REJECT_ADDR + 
	             TSU_RCV_EOIB_MCAST_REJECT_STRIDE * 
	             TSU_RCV_EOIB_MCAST_REJECT_DEPTH)) {
		return("TSU_RCV_EOIB_MCAST_REJECT");
	}
	/*
	 * Error counter for broadcast rejects. There is one register per vHCA port.
	 */
	if ((addr >= TSU_RCV_EOIB_BCAST_REJECT_ADDR) &&
	    (addr <  TSU_RCV_EOIB_BCAST_REJECT_ADDR + 
	             TSU_RCV_EOIB_BCAST_REJECT_STRIDE * 
	             TSU_RCV_EOIB_BCAST_REJECT_DEPTH)) {
		return("TSU_RCV_EOIB_BCAST_REJECT");
	}
	/*
	 * Error counter for unicast rejects. There is one register per vHCA port.
	 */
	if ((addr >= TSU_RCV_EOIB_UCAST_REJECT_ADDR) &&
	    (addr <  TSU_RCV_EOIB_UCAST_REJECT_ADDR + 
	             TSU_RCV_EOIB_UCAST_REJECT_STRIDE * 
	             TSU_RCV_EOIB_UCAST_REJECT_DEPTH)) {
		return("TSU_RCV_EOIB_UCAST_REJECT");
	}
	/*
	 * Error counter for fragment rejects. There is one register per vHCA port.
	 */
	if ((addr >= TSU_RCV_EIOB_FRAGMENT_REJECT_ADDR) &&
	    (addr <  TSU_RCV_EIOB_FRAGMENT_REJECT_ADDR + 
	             TSU_RCV_EIOB_FRAGMENT_REJECT_STRIDE * 
	             TSU_RCV_EIOB_FRAGMENT_REJECT_DEPTH)) {
		return("TSU_RCV_EIOB_FRAGMENT_REJECT");
	}
	/*
	 * Error counter for runt rejects. There is one register per vHCA port.
	 */
	if ((addr >= TSU_RCV_EIOB_RUNTS_REJECT_ADDR) &&
	    (addr <  TSU_RCV_EIOB_RUNTS_REJECT_ADDR + 
	             TSU_RCV_EIOB_RUNTS_REJECT_STRIDE * 
	             TSU_RCV_EIOB_RUNTS_REJECT_DEPTH)) {
		return("TSU_RCV_EIOB_RUNTS_REJECT");
	}
	/*
	 * Error counter for outer VLAN rejects. There is one register per vHCA port.
	 */
	if ((addr >= TSU_RCV_EIOB_OUTER_VLAN_REJECT_ADDR) &&
	    (addr <  TSU_RCV_EIOB_OUTER_VLAN_REJECT_ADDR + 
	             TSU_RCV_EIOB_OUTER_VLAN_REJECT_STRIDE * 
	             TSU_RCV_EIOB_OUTER_VLAN_REJECT_DEPTH)) {
		return("TSU_RCV_EIOB_OUTER_VLAN_REJECT");
	}
	/*
	 * Error counter for VALN tag rejects. There is one register per vHCA port.
	 */
	if ((addr >= TSU_RCV_EIOB_VLAN_TAG_REJECT_ADDR) &&
	    (addr <  TSU_RCV_EIOB_VLAN_TAG_REJECT_ADDR + 
	             TSU_RCV_EIOB_VLAN_TAG_REJECT_STRIDE * 
	             TSU_RCV_EIOB_VLAN_TAG_REJECT_DEPTH)) {
		return("TSU_RCV_EIOB_VLAN_TAG_REJECT");
	}
	/*
	 * Error counter for VID rejects. There is one register per vHCA port.
	 */
	if ((addr >= TSU_RCV_EIOB_VID_REJECT_ADDR) &&
	    (addr <  TSU_RCV_EIOB_VID_REJECT_ADDR + 
	             TSU_RCV_EIOB_VID_REJECT_STRIDE * 
	             TSU_RCV_EIOB_VID_REJECT_DEPTH)) {
		return("TSU_RCV_EIOB_VID_REJECT");
	}
	/*
	 * Control if multicast packets should be forwarded to yourself or not when
	 * the QP is a IPoIB or EoIB QP.
	 */
	if ((addr >= TSU_RCV_NO_MCAST_DUPLICATION_ADDR) &&
	    (addr <  TSU_RCV_NO_MCAST_DUPLICATION_ADDR + 
	             TSU_RCV_NO_MCAST_DUPLICATION_STRIDE * 
	             TSU_RCV_NO_MCAST_DUPLICATION_DEPTH)) {
		return("TSU_RCV_NO_MCAST_DUPLICATION");
	}
	/* Trap register for P-Key and Q-Key traps. */
	if ((addr >= TSU_RCV_KEY_TRAP_SGID_UPPER_ADDR) &&
	    (addr <  TSU_RCV_KEY_TRAP_SGID_UPPER_ADDR + 
	             TSU_RCV_KEY_TRAP_SGID_UPPER_STRIDE * 
	             TSU_RCV_KEY_TRAP_SGID_UPPER_DEPTH)) {
		return("TSU_RCV_KEY_TRAP_SGID_UPPER");
	}
	/* Trap register for P-Key and Q-Key traps. */
	if ((addr >= TSU_RCV_KEY_TRAP_SGID_LOWER_ADDR) &&
	    (addr <  TSU_RCV_KEY_TRAP_SGID_LOWER_ADDR + 
	             TSU_RCV_KEY_TRAP_SGID_LOWER_STRIDE * 
	             TSU_RCV_KEY_TRAP_SGID_LOWER_DEPTH)) {
		return("TSU_RCV_KEY_TRAP_SGID_LOWER");
	}
	/* Trap register for P-Key and Q-Key traps. */
	if ((addr >= TSU_RCV_KEY_TRAP_DGID_UPPER_ADDR) &&
	    (addr <  TSU_RCV_KEY_TRAP_DGID_UPPER_ADDR + 
	             TSU_RCV_KEY_TRAP_DGID_UPPER_STRIDE * 
	             TSU_RCV_KEY_TRAP_DGID_UPPER_DEPTH)) {
		return("TSU_RCV_KEY_TRAP_DGID_UPPER");
	}
	/* Trap register for P-Key and Q-Key traps. */
	if ((addr >= TSU_RCV_KEY_TRAP_DGID_LOWER_ADDR) &&
	    (addr <  TSU_RCV_KEY_TRAP_DGID_LOWER_ADDR + 
	             TSU_RCV_KEY_TRAP_DGID_LOWER_STRIDE * 
	             TSU_RCV_KEY_TRAP_DGID_LOWER_DEPTH)) {
		return("TSU_RCV_KEY_TRAP_DGID_LOWER");
	}
	/* Trap register for P-Key and Q-Key traps. */
	if ((addr >= TSU_RCV_KEY_TRAP_QP_ADDR) &&
	    (addr <  TSU_RCV_KEY_TRAP_QP_ADDR + 
	             TSU_RCV_KEY_TRAP_QP_STRIDE * 
	             TSU_RCV_KEY_TRAP_QP_DEPTH)) {
		return("TSU_RCV_KEY_TRAP_QP");
	}
	/* Trap register for P-Key and Q-Key traps. */
	if ((addr >= TSU_RCV_KEY_TRAP_LID_KEY_ADDR) &&
	    (addr <  TSU_RCV_KEY_TRAP_LID_KEY_ADDR + 
	             TSU_RCV_KEY_TRAP_LID_KEY_STRIDE * 
	             TSU_RCV_KEY_TRAP_LID_KEY_DEPTH)) {
		return("TSU_RCV_KEY_TRAP_LID_KEY");
	}
	/* Pop register for P-Key and Q-Key trap FIFO. */
	if ((addr >= TSU_RCV_KEY_TRAP_POP_ADDR) &&
	    (addr <  TSU_RCV_KEY_TRAP_POP_ADDR + 
	             TSU_RCV_KEY_TRAP_POP_STRIDE * 
	             TSU_RCV_KEY_TRAP_POP_DEPTH)) {
		return("TSU_RCV_KEY_TRAP_POP");
	}
	/* Register indicating what to do if the trap FIFO is full. */
	if ((addr >= TSU_RCV_KEY_TRAP_BACKPRESSURE_ADDR) &&
	    (addr <  TSU_RCV_KEY_TRAP_BACKPRESSURE_ADDR + 
	             TSU_RCV_KEY_TRAP_BACKPRESSURE_STRIDE * 
	             TSU_RCV_KEY_TRAP_BACKPRESSURE_DEPTH)) {
		return("TSU_RCV_KEY_TRAP_BACKPRESSURE");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_RCV_INT_STATUS_ADDR) &&
	    (addr <  TSU_RCV_INT_STATUS_ADDR + 
	             TSU_RCV_INT_STATUS_STRIDE * 
	             TSU_RCV_INT_STATUS_DEPTH)) {
		return("TSU_RCV_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_RCV_INT_MASK_ADDR) &&
	    (addr <  TSU_RCV_INT_MASK_ADDR + 
	             TSU_RCV_INT_MASK_STRIDE * 
	             TSU_RCV_INT_MASK_DEPTH)) {
		return("TSU_RCV_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_RCV_INT_PRI_ADDR) &&
	    (addr <  TSU_RCV_INT_PRI_ADDR + 
	             TSU_RCV_INT_PRI_STRIDE * 
	             TSU_RCV_INT_PRI_DEPTH)) {
		return("TSU_RCV_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_RCV_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_RCV_INT_STATUS_CLEAR_ADDR + 
	             TSU_RCV_INT_STATUS_CLEAR_STRIDE * 
	             TSU_RCV_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_RCV_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_RCV_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_RCV_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_RCV_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_RCV_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_RCV_INT_STATUS_CLEAR_KICK");
	}
	/* Shared P-Key table for all UFs on this port. */
	if ((addr >= TSU_IBPR_P1_PKEY_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_P1_PKEY_TABLE_ADDR + 
	             TSU_IBPR_P1_PKEY_TABLE_STRIDE * 
	             TSU_IBPR_P1_PKEY_TABLE_DEPTH)) {
		return("TSU_IBPR_P1_PKEY_TABLE");
	}
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	if ((addr >= TSU_IBPR_P1_OWN_LID_BASE_ADDR) &&
	    (addr <  TSU_IBPR_P1_OWN_LID_BASE_ADDR + 
	             TSU_IBPR_P1_OWN_LID_BASE_STRIDE * 
	             TSU_IBPR_P1_OWN_LID_BASE_DEPTH)) {
		return("TSU_IBPR_P1_OWN_LID_BASE");
	}
	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
	if ((addr >= TSU_IBPR_P1_PKEY_UF_STRIDE_ADDR) &&
	    (addr <  TSU_IBPR_P1_PKEY_UF_STRIDE_ADDR + 
	             TSU_IBPR_P1_PKEY_UF_STRIDE_STRIDE * 
	             TSU_IBPR_P1_PKEY_UF_STRIDE_DEPTH)) {
		return("TSU_IBPR_P1_PKEY_UF_STRIDE");
	}
	/* Default vSwitch port for vSwitch1. */
	if ((addr >= TSU_IBPR_P1_DEFAULT_VSWITCH_PORT_ADDR) &&
	    (addr <  TSU_IBPR_P1_DEFAULT_VSWITCH_PORT_ADDR + 
	             TSU_IBPR_P1_DEFAULT_VSWITCH_PORT_STRIDE * 
	             TSU_IBPR_P1_DEFAULT_VSWITCH_PORT_DEPTH)) {
		return("TSU_IBPR_P1_DEFAULT_VSWITCH_PORT");
	}
	/* Default SM HCA. Indicating which vHCA to send SM packets to. */
	if ((addr >= TSU_IBPR_P1_DEFAULT_SM_HCA_ADDR) &&
	    (addr <  TSU_IBPR_P1_DEFAULT_SM_HCA_ADDR + 
	             TSU_IBPR_P1_DEFAULT_SM_HCA_STRIDE * 
	             TSU_IBPR_P1_DEFAULT_SM_HCA_DEPTH)) {
		return("TSU_IBPR_P1_DEFAULT_SM_HCA");
	}
	/*
	 * When a bit is set, the TSU will forward the particular management class to
	 * EPS-C. Per UF0-UF32.
	 */
	if ((addr >= TSU_IBPR_P1_GSI_FORWARDING_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_P1_GSI_FORWARDING_TABLE_ADDR + 
	             TSU_IBPR_P1_GSI_FORWARDING_TABLE_STRIDE * 
	             TSU_IBPR_P1_GSI_FORWARDING_TABLE_DEPTH)) {
		return("TSU_IBPR_P1_GSI_FORWARDING_TABLE");
	}
	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
	if ((addr >= TSU_IBPR_P1_SMP_ALLOWED_ADDR) &&
	    (addr <  TSU_IBPR_P1_SMP_ALLOWED_ADDR + 
	             TSU_IBPR_P1_SMP_ALLOWED_STRIDE * 
	             TSU_IBPR_P1_SMP_ALLOWED_DEPTH)) {
		return("TSU_IBPR_P1_SMP_ALLOWED");
	}
	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet drop status is cleared.
	 */
	if ((addr >= TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR_ADDR + 
	             TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR_STRIDE * 
	             TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR_DEPTH)) {
		return("TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_CLEAR");
	}
	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet is dropped.
	 */
	if ((addr >= TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_ADDR) &&
	    (addr <  TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_ADDR + 
	             TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_STRIDE * 
	             TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS_DEPTH)) {
		return("TSU_IBPR_P1_SMP_ALLOWED_DROP_STATUS");
	}
	/* Shared P-Key table for all UFs on this port. */
	if ((addr >= TSU_IBPR_P2_PKEY_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_P2_PKEY_TABLE_ADDR + 
	             TSU_IBPR_P2_PKEY_TABLE_STRIDE * 
	             TSU_IBPR_P2_PKEY_TABLE_DEPTH)) {
		return("TSU_IBPR_P2_PKEY_TABLE");
	}
	/*
	 * Own LIDs base and LMC. Potentially all own LID bits come from the QP state
	 * entry. The number of bits to use is based on the LMC. Per UF register.
	 */
	if ((addr >= TSU_IBPR_P2_OWN_LID_BASE_ADDR) &&
	    (addr <  TSU_IBPR_P2_OWN_LID_BASE_ADDR + 
	             TSU_IBPR_P2_OWN_LID_BASE_STRIDE * 
	             TSU_IBPR_P2_OWN_LID_BASE_DEPTH)) {
		return("TSU_IBPR_P2_OWN_LID_BASE");
	}
	/*
	 * Size of individual P-Key tables per UF. All UFs have the same size or if
	 * set to 0, it means one common table.
	 */
	if ((addr >= TSU_IBPR_P2_PKEY_UF_STRIDE_ADDR) &&
	    (addr <  TSU_IBPR_P2_PKEY_UF_STRIDE_ADDR + 
	             TSU_IBPR_P2_PKEY_UF_STRIDE_STRIDE * 
	             TSU_IBPR_P2_PKEY_UF_STRIDE_DEPTH)) {
		return("TSU_IBPR_P2_PKEY_UF_STRIDE");
	}
	/* Default vSwitch port for vSwitch2. */
	if ((addr >= TSU_IBPR_P2_DEFAULT_VSWITCH_PORT_ADDR) &&
	    (addr <  TSU_IBPR_P2_DEFAULT_VSWITCH_PORT_ADDR + 
	             TSU_IBPR_P2_DEFAULT_VSWITCH_PORT_STRIDE * 
	             TSU_IBPR_P2_DEFAULT_VSWITCH_PORT_DEPTH)) {
		return("TSU_IBPR_P2_DEFAULT_VSWITCH_PORT");
	}
	/* Default SM HCA. Indicating which vHCA to send SM packets to. */
	if ((addr >= TSU_IBPR_P2_DEFAULT_SM_HCA_ADDR) &&
	    (addr <  TSU_IBPR_P2_DEFAULT_SM_HCA_ADDR + 
	             TSU_IBPR_P2_DEFAULT_SM_HCA_STRIDE * 
	             TSU_IBPR_P2_DEFAULT_SM_HCA_DEPTH)) {
		return("TSU_IBPR_P2_DEFAULT_SM_HCA");
	}
	/*
	 * When a bit is set, the TSU will forward the particular management class to
	 * EPS-C. Per UF0-UF32.
	 */
	if ((addr >= TSU_IBPR_P2_GSI_FORWARDING_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_P2_GSI_FORWARDING_TABLE_ADDR + 
	             TSU_IBPR_P2_GSI_FORWARDING_TABLE_STRIDE * 
	             TSU_IBPR_P2_GSI_FORWARDING_TABLE_DEPTH)) {
		return("TSU_IBPR_P2_GSI_FORWARDING_TABLE");
	}
	/*
	 * Register with a bit per UF/VHCA indicating if the UF/VHCA is allowed to
	 * send SMPs.
	 */
	if ((addr >= TSU_IBPR_P2_SMP_ALLOWED_ADDR) &&
	    (addr <  TSU_IBPR_P2_SMP_ALLOWED_ADDR + 
	             TSU_IBPR_P2_SMP_ALLOWED_STRIDE * 
	             TSU_IBPR_P2_SMP_ALLOWED_DEPTH)) {
		return("TSU_IBPR_P2_SMP_ALLOWED");
	}
	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet drop status is cleared.
	 */
	if ((addr >= TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR_ADDR + 
	             TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR_STRIDE * 
	             TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR_DEPTH)) {
		return("TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_CLEAR");
	}
	/*
	 * Status register with a bit per UF/VHCA indicating if an UF/VHCA SMP not
	 * allowed packet is dropped.
	 */
	if ((addr >= TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_ADDR) &&
	    (addr <  TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_ADDR + 
	             TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_STRIDE * 
	             TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS_DEPTH)) {
		return("TSU_IBPR_P2_SMP_ALLOWED_DROP_STATUS");
	}
	/* Sample interval register. */
	if ((addr >= TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL_ADDR + 
	             TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL_STRIDE * 
	             TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_SAMPLE_INTERVAL");
	}
	/* Sample start delay register. */
	if ((addr >= TSU_IBPR_VSWITCH1_SAMPLE_START_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_SAMPLE_START_ADDR + 
	             TSU_IBPR_VSWITCH1_SAMPLE_START_STRIDE * 
	             TSU_IBPR_VSWITCH1_SAMPLE_START_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_SAMPLE_START");
	}
	/* Sample count register. This register contain the counted values. */
	if ((addr >= TSU_IBPR_VSWITCH1_SAMPLE_COUNT_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_SAMPLE_COUNT_ADDR + 
	             TSU_IBPR_VSWITCH1_SAMPLE_COUNT_STRIDE * 
	             TSU_IBPR_VSWITCH1_SAMPLE_COUNT_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_SAMPLE_COUNT");
	}
	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
	if ((addr >= TSU_IBPR_VSWITCH1_SAMPLE_PORT_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_SAMPLE_PORT_ADDR + 
	             TSU_IBPR_VSWITCH1_SAMPLE_PORT_STRIDE * 
	             TSU_IBPR_VSWITCH1_SAMPLE_PORT_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_SAMPLE_PORT");
	}
	/* Start port Sampling. */
	if ((addr >= TSU_IBPR_VSWITCH1_PORTSAMPLE_START_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_PORTSAMPLE_START_ADDR + 
	             TSU_IBPR_VSWITCH1_PORTSAMPLE_START_STRIDE * 
	             TSU_IBPR_VSWITCH1_PORTSAMPLE_START_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_PORTSAMPLE_START");
	}
	/* Sample status register. */
	if ((addr >= TSU_IBPR_VSWITCH1_SAMPLE_STATUS_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_SAMPLE_STATUS_ADDR + 
	             TSU_IBPR_VSWITCH1_SAMPLE_STATUS_STRIDE * 
	             TSU_IBPR_VSWITCH1_SAMPLE_STATUS_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_SAMPLE_STATUS");
	}
	/* Sample interval register. */
	if ((addr >= TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL_ADDR + 
	             TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL_STRIDE * 
	             TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_SAMPLE_INTERVAL");
	}
	/* Sample start delay register. */
	if ((addr >= TSU_IBPR_VHCA_P1_SAMPLE_START_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_SAMPLE_START_ADDR + 
	             TSU_IBPR_VHCA_P1_SAMPLE_START_STRIDE * 
	             TSU_IBPR_VHCA_P1_SAMPLE_START_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_SAMPLE_START");
	}
	/* Sample count register. This register contain the counted values. */
	if ((addr >= TSU_IBPR_VHCA_P1_SAMPLE_COUNT_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_SAMPLE_COUNT_ADDR + 
	             TSU_IBPR_VHCA_P1_SAMPLE_COUNT_STRIDE * 
	             TSU_IBPR_VHCA_P1_SAMPLE_COUNT_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_SAMPLE_COUNT");
	}
	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_SAMPLE_PORT_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_SAMPLE_PORT_ADDR + 
	             TSU_IBPR_VHCA_P1_SAMPLE_PORT_STRIDE * 
	             TSU_IBPR_VHCA_P1_SAMPLE_PORT_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_SAMPLE_PORT");
	}
	/* Start port Sampling. */
	if ((addr >= TSU_IBPR_VHCA_P1_PORTSAMPLE_START_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_PORTSAMPLE_START_ADDR + 
	             TSU_IBPR_VHCA_P1_PORTSAMPLE_START_STRIDE * 
	             TSU_IBPR_VHCA_P1_PORTSAMPLE_START_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_PORTSAMPLE_START");
	}
	/* Sample status register. */
	if ((addr >= TSU_IBPR_VHCA_P1_SAMPLE_STATUS_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_SAMPLE_STATUS_ADDR + 
	             TSU_IBPR_VHCA_P1_SAMPLE_STATUS_STRIDE * 
	             TSU_IBPR_VHCA_P1_SAMPLE_STATUS_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_SAMPLE_STATUS");
	}
	/* Sample interval register. */
	if ((addr >= TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL_ADDR + 
	             TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL_STRIDE * 
	             TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_SAMPLE_INTERVAL");
	}
	/* Sample start delay register. */
	if ((addr >= TSU_IBPR_VSWITCH2_SAMPLE_START_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_SAMPLE_START_ADDR + 
	             TSU_IBPR_VSWITCH2_SAMPLE_START_STRIDE * 
	             TSU_IBPR_VSWITCH2_SAMPLE_START_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_SAMPLE_START");
	}
	/* Sample count register. This register contain the counted values. */
	if ((addr >= TSU_IBPR_VSWITCH2_SAMPLE_COUNT_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_SAMPLE_COUNT_ADDR + 
	             TSU_IBPR_VSWITCH2_SAMPLE_COUNT_STRIDE * 
	             TSU_IBPR_VSWITCH2_SAMPLE_COUNT_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_SAMPLE_COUNT");
	}
	/*
	 * Sample UF register. Indicating which UF this entry is counting for and
	 * what type it is counting.
	 */
	if ((addr >= TSU_IBPR_VSWITCH2_SAMPLE_PORT_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_SAMPLE_PORT_ADDR + 
	             TSU_IBPR_VSWITCH2_SAMPLE_PORT_STRIDE * 
	             TSU_IBPR_VSWITCH2_SAMPLE_PORT_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_SAMPLE_PORT");
	}
	/* Start port Sampling. */
	if ((addr >= TSU_IBPR_VSWITCH2_PORTSAMPLE_START_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_PORTSAMPLE_START_ADDR + 
	             TSU_IBPR_VSWITCH2_PORTSAMPLE_START_STRIDE * 
	             TSU_IBPR_VSWITCH2_PORTSAMPLE_START_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_PORTSAMPLE_START");
	}
	/* Sample status register. */
	if ((addr >= TSU_IBPR_VSWITCH2_SAMPLE_STATUS_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_SAMPLE_STATUS_ADDR + 
	             TSU_IBPR_VSWITCH2_SAMPLE_STATUS_STRIDE * 
	             TSU_IBPR_VSWITCH2_SAMPLE_STATUS_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_SAMPLE_STATUS");
	}
	/* Sample interval register. */
	if ((addr >= TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL_ADDR + 
	             TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL_STRIDE * 
	             TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_SAMPLE_INTERVAL");
	}
	/* Sample start delay register. */
	if ((addr >= TSU_IBPR_VHCA_P2_SAMPLE_START_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_SAMPLE_START_ADDR + 
	             TSU_IBPR_VHCA_P2_SAMPLE_START_STRIDE * 
	             TSU_IBPR_VHCA_P2_SAMPLE_START_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_SAMPLE_START");
	}
	/* Sample count register. This register contain the counted values. */
	if ((addr >= TSU_IBPR_VHCA_P2_SAMPLE_COUNT_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_SAMPLE_COUNT_ADDR + 
	             TSU_IBPR_VHCA_P2_SAMPLE_COUNT_STRIDE * 
	             TSU_IBPR_VHCA_P2_SAMPLE_COUNT_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_SAMPLE_COUNT");
	}
	/*
	 * Sample UF register. Indicating which port this entry is counting for and
	 * what type it is counting.
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_SAMPLE_PORT_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_SAMPLE_PORT_ADDR + 
	             TSU_IBPR_VHCA_P2_SAMPLE_PORT_STRIDE * 
	             TSU_IBPR_VHCA_P2_SAMPLE_PORT_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_SAMPLE_PORT");
	}
	/* Start port Sampling. */
	if ((addr >= TSU_IBPR_VHCA_P2_PORTSAMPLE_START_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_PORTSAMPLE_START_ADDR + 
	             TSU_IBPR_VHCA_P2_PORTSAMPLE_START_STRIDE * 
	             TSU_IBPR_VHCA_P2_PORTSAMPLE_START_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_PORTSAMPLE_START");
	}
	/* Sample status register. */
	if ((addr >= TSU_IBPR_VHCA_P2_SAMPLE_STATUS_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_SAMPLE_STATUS_ADDR + 
	             TSU_IBPR_VHCA_P2_SAMPLE_STATUS_STRIDE * 
	             TSU_IBPR_VHCA_P2_SAMPLE_STATUS_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_SAMPLE_STATUS");
	}
	/* Set link state for the vHCA or the vSwitch. */
	if ((addr >= TSU_IBPR_SET_VLINK_STATE_ADDR) &&
	    (addr <  TSU_IBPR_SET_VLINK_STATE_ADDR + 
	             TSU_IBPR_SET_VLINK_STATE_STRIDE * 
	             TSU_IBPR_SET_VLINK_STATE_DEPTH)) {
		return("TSU_IBPR_SET_VLINK_STATE");
	}
	/* link state for the vHCA or the vSwitch. */
	if ((addr >= TSU_IBPR_VLINK_STATE_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VLINK_STATE_REGISTER_ADDR + 
	             TSU_IBPR_VLINK_STATE_REGISTER_STRIDE * 
	             TSU_IBPR_VLINK_STATE_REGISTER_DEPTH)) {
		return("TSU_IBPR_VLINK_STATE_REGISTER");
	}
	/*
	 * Get vlink state for the vHCA and the vSwitch. It is up to the firmware to
	 * report correct physical link states when one side is set to disabled and
	 * the other side is down.
	 */
	if ((addr >= TSU_IBPR_P1_VLINK_STATE_ADDR) &&
	    (addr <  TSU_IBPR_P1_VLINK_STATE_ADDR + 
	             TSU_IBPR_P1_VLINK_STATE_STRIDE * 
	             TSU_IBPR_P1_VLINK_STATE_DEPTH)) {
		return("TSU_IBPR_P1_VLINK_STATE");
	}
	/*
	 * Get vlink state for the vHCA and the vSwitch. It is up to the firmware to
	 * report correct physical link states when one side is set to disabled and
	 * the other side is down.
	 */
	if ((addr >= TSU_IBPR_P2_VLINK_STATE_ADDR) &&
	    (addr <  TSU_IBPR_P2_VLINK_STATE_ADDR + 
	             TSU_IBPR_P2_VLINK_STATE_STRIDE * 
	             TSU_IBPR_P2_VLINK_STATE_DEPTH)) {
		return("TSU_IBPR_P2_VLINK_STATE");
	}
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
	if ((addr >= TSU_IBPR_P1_MCAST_GID_UPPER_ADDR) &&
	    (addr <  TSU_IBPR_P1_MCAST_GID_UPPER_ADDR + 
	             TSU_IBPR_P1_MCAST_GID_UPPER_STRIDE * 
	             TSU_IBPR_P1_MCAST_GID_UPPER_DEPTH)) {
		return("TSU_IBPR_P1_MCAST_GID_UPPER");
	}
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
	if ((addr >= TSU_IBPR_P1_MCAST_GID_LOWER_ADDR) &&
	    (addr <  TSU_IBPR_P1_MCAST_GID_LOWER_ADDR + 
	             TSU_IBPR_P1_MCAST_GID_LOWER_STRIDE * 
	             TSU_IBPR_P1_MCAST_GID_LOWER_DEPTH)) {
		return("TSU_IBPR_P1_MCAST_GID_LOWER");
	}
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p1_mcast_pop is written.
	 */
	if ((addr >= TSU_IBPR_P1_MCAST_GIDHASH_LID_ADDR) &&
	    (addr <  TSU_IBPR_P1_MCAST_GIDHASH_LID_ADDR + 
	             TSU_IBPR_P1_MCAST_GIDHASH_LID_STRIDE * 
	             TSU_IBPR_P1_MCAST_GIDHASH_LID_DEPTH)) {
		return("TSU_IBPR_P1_MCAST_GIDHASH_LID");
	}
	/*
	 * This pop register is written after data in p1_mcast_gid_upper,
	 * p1_mcast_gid_lower and p1_mcast_lid is read. Writing this register will
	 * pop the FIFO.
	 */
	if ((addr >= TSU_IBPR_P1_MCAST_POP_ADDR) &&
	    (addr <  TSU_IBPR_P1_MCAST_POP_ADDR + 
	             TSU_IBPR_P1_MCAST_POP_STRIDE * 
	             TSU_IBPR_P1_MCAST_POP_DEPTH)) {
		return("TSU_IBPR_P1_MCAST_POP");
	}
	/*
	 * This registers indicate how many multicast packets this port can hold
	 * before starting drop packets.
	 */
	if ((addr >= TSU_IBPR_P1_MCAST_MAX_PKTS_ADDR) &&
	    (addr <  TSU_IBPR_P1_MCAST_MAX_PKTS_ADDR + 
	             TSU_IBPR_P1_MCAST_MAX_PKTS_STRIDE * 
	             TSU_IBPR_P1_MCAST_MAX_PKTS_DEPTH)) {
		return("TSU_IBPR_P1_MCAST_MAX_PKTS");
	}
	/*
	 * This register contain the credit for writing to the CSR FIFO for multicast
	 * packets.
	 */
	if ((addr >= TSU_IBPR_P1_MCAST_WR_CREDIT_ADDR) &&
	    (addr <  TSU_IBPR_P1_MCAST_WR_CREDIT_ADDR + 
	             TSU_IBPR_P1_MCAST_WR_CREDIT_STRIDE * 
	             TSU_IBPR_P1_MCAST_WR_CREDIT_DEPTH)) {
		return("TSU_IBPR_P1_MCAST_WR_CREDIT");
	}
	/* Write to multicast FIFO. */
	if ((addr >= TSU_IBPR_P1_MCAST_WR_FIFO_ADDR) &&
	    (addr <  TSU_IBPR_P1_MCAST_WR_FIFO_ADDR + 
	             TSU_IBPR_P1_MCAST_WR_FIFO_STRIDE * 
	             TSU_IBPR_P1_MCAST_WR_FIFO_DEPTH)) {
		return("TSU_IBPR_P1_MCAST_WR_FIFO");
	}
	/* Kick multicast FIFO - data is valid in the multicast FIFO. */
	if ((addr >= TSU_IBPR_P1_MCAST_WR_FIFO_KICK_ADDR) &&
	    (addr <  TSU_IBPR_P1_MCAST_WR_FIFO_KICK_ADDR + 
	             TSU_IBPR_P1_MCAST_WR_FIFO_KICK_STRIDE * 
	             TSU_IBPR_P1_MCAST_WR_FIFO_KICK_DEPTH)) {
		return("TSU_IBPR_P1_MCAST_WR_FIFO_KICK");
	}
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
	if ((addr >= TSU_IBPR_P2_MCAST_GID_UPPER_ADDR) &&
	    (addr <  TSU_IBPR_P2_MCAST_GID_UPPER_ADDR + 
	             TSU_IBPR_P2_MCAST_GID_UPPER_STRIDE * 
	             TSU_IBPR_P2_MCAST_GID_UPPER_DEPTH)) {
		return("TSU_IBPR_P2_MCAST_GID_UPPER");
	}
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
	if ((addr >= TSU_IBPR_P2_MCAST_GID_LOWER_ADDR) &&
	    (addr <  TSU_IBPR_P2_MCAST_GID_LOWER_ADDR + 
	             TSU_IBPR_P2_MCAST_GID_LOWER_STRIDE * 
	             TSU_IBPR_P2_MCAST_GID_LOWER_DEPTH)) {
		return("TSU_IBPR_P2_MCAST_GID_LOWER");
	}
	/*
	 * When data is present, this register should be read for processing.
	 * Hardware multicast FIFO is popped when p2_mcast_pop is written.
	 */
	if ((addr >= TSU_IBPR_P2_MCAST_GIDHASH_LID_ADDR) &&
	    (addr <  TSU_IBPR_P2_MCAST_GIDHASH_LID_ADDR + 
	             TSU_IBPR_P2_MCAST_GIDHASH_LID_STRIDE * 
	             TSU_IBPR_P2_MCAST_GIDHASH_LID_DEPTH)) {
		return("TSU_IBPR_P2_MCAST_GIDHASH_LID");
	}
	/*
	 * This pop register is written after data in p2_mcast_gid_upper,
	 * p2_mcast_gid_lower and p2_mcast_lid is read. Writing this register will
	 * pop the FIFO.
	 */
	if ((addr >= TSU_IBPR_P2_MCAST_POP_ADDR) &&
	    (addr <  TSU_IBPR_P2_MCAST_POP_ADDR + 
	             TSU_IBPR_P2_MCAST_POP_STRIDE * 
	             TSU_IBPR_P2_MCAST_POP_DEPTH)) {
		return("TSU_IBPR_P2_MCAST_POP");
	}
	/*
	 * This registers indicate how many multicast packets this port can hold
	 * before starting drop packets.
	 */
	if ((addr >= TSU_IBPR_P2_MCAST_MAX_PKTS_ADDR) &&
	    (addr <  TSU_IBPR_P2_MCAST_MAX_PKTS_ADDR + 
	             TSU_IBPR_P2_MCAST_MAX_PKTS_STRIDE * 
	             TSU_IBPR_P2_MCAST_MAX_PKTS_DEPTH)) {
		return("TSU_IBPR_P2_MCAST_MAX_PKTS");
	}
	/*
	 * This register contain the credit for writing to the CSR FIFO for multicast
	 * packets.
	 */
	if ((addr >= TSU_IBPR_P2_MCAST_WR_CREDIT_ADDR) &&
	    (addr <  TSU_IBPR_P2_MCAST_WR_CREDIT_ADDR + 
	             TSU_IBPR_P2_MCAST_WR_CREDIT_STRIDE * 
	             TSU_IBPR_P2_MCAST_WR_CREDIT_DEPTH)) {
		return("TSU_IBPR_P2_MCAST_WR_CREDIT");
	}
	/* Write to multicast FIFO. */
	if ((addr >= TSU_IBPR_P2_MCAST_WR_FIFO_ADDR) &&
	    (addr <  TSU_IBPR_P2_MCAST_WR_FIFO_ADDR + 
	             TSU_IBPR_P2_MCAST_WR_FIFO_STRIDE * 
	             TSU_IBPR_P2_MCAST_WR_FIFO_DEPTH)) {
		return("TSU_IBPR_P2_MCAST_WR_FIFO");
	}
	/* Kick multicast FIFO - data is valid in the multicast FIFO. */
	if ((addr >= TSU_IBPR_P2_MCAST_WR_FIFO_KICK_ADDR) &&
	    (addr <  TSU_IBPR_P2_MCAST_WR_FIFO_KICK_ADDR + 
	             TSU_IBPR_P2_MCAST_WR_FIFO_KICK_STRIDE * 
	             TSU_IBPR_P2_MCAST_WR_FIFO_KICK_DEPTH)) {
		return("TSU_IBPR_P2_MCAST_WR_FIFO_KICK");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_IBPR_INT_STATUS_ADDR) &&
	    (addr <  TSU_IBPR_INT_STATUS_ADDR + 
	             TSU_IBPR_INT_STATUS_STRIDE * 
	             TSU_IBPR_INT_STATUS_DEPTH)) {
		return("TSU_IBPR_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_IBPR_INT_MASK_ADDR) &&
	    (addr <  TSU_IBPR_INT_MASK_ADDR + 
	             TSU_IBPR_INT_MASK_STRIDE * 
	             TSU_IBPR_INT_MASK_DEPTH)) {
		return("TSU_IBPR_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_IBPR_INT_PRI_ADDR) &&
	    (addr <  TSU_IBPR_INT_PRI_ADDR + 
	             TSU_IBPR_INT_PRI_STRIDE * 
	             TSU_IBPR_INT_PRI_DEPTH)) {
		return("TSU_IBPR_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_IBPR_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_IBPR_INT_STATUS_CLEAR_ADDR + 
	             TSU_IBPR_INT_STATUS_CLEAR_STRIDE * 
	             TSU_IBPR_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_IBPR_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_IBPR_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_IBPR_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_IBPR_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_IBPR_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_IBPR_INT_STATUS_CLEAR_KICK");
	}
	/* Rx choke register */
	if ((addr >= TSU_IBPR_P1_RX_CHOKE_ADDR) &&
	    (addr <  TSU_IBPR_P1_RX_CHOKE_ADDR + 
	             TSU_IBPR_P1_RX_CHOKE_STRIDE * 
	             TSU_IBPR_P1_RX_CHOKE_DEPTH)) {
		return("TSU_IBPR_P1_RX_CHOKE");
	}
	/* Rx choke register */
	if ((addr >= TSU_IBPR_P2_RX_CHOKE_ADDR) &&
	    (addr <  TSU_IBPR_P2_RX_CHOKE_ADDR + 
	             TSU_IBPR_P2_RX_CHOKE_STRIDE * 
	             TSU_IBPR_P2_RX_CHOKE_DEPTH)) {
		return("TSU_IBPR_P2_RX_CHOKE");
	}
	/* Port counter PortXmitDiscards. This is per vSwitch port [32:0]. */
	if ((addr >= TSU_IBPR_VSWITCH1_XMIT_DISCARDS_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_XMIT_DISCARDS_ADDR + 
	             TSU_IBPR_VSWITCH1_XMIT_DISCARDS_STRIDE * 
	             TSU_IBPR_VSWITCH1_XMIT_DISCARDS_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_XMIT_DISCARDS");
	}
	/*
	 * Port counter PortRcvSwitchRelayErrors. This register entry is associated
	 * with the corresponding register entry in all other sample register per
	 * port.
	 */
	if ((addr >= TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS_ADDR + 
	             TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS_STRIDE * 
	             TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_RCV_SWITCH_RELAY_ERRORS");
	}
	/* Vendor Port counter receive packets drop. This is per vSwitch. */
	if ((addr >= TSU_IBPR_VSWITCH1_RCV_PKTS_DROP_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_RCV_PKTS_DROP_ADDR + 
	             TSU_IBPR_VSWITCH1_RCV_PKTS_DROP_STRIDE * 
	             TSU_IBPR_VSWITCH1_RCV_PKTS_DROP_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_RCV_PKTS_DROP");
	}
	/*
	 * Clear portcounter according to setting in portcounter_clear registers
	 */
	if ((addr >= TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_ADDR + 
	             TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_STRIDE * 
	             TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR");
	}
	/* Clear register for the the PortXmitDiscard */
	if ((addr >= TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_XMIT_DISCARD_CLEAR_REGISTER");
	}
	/* Clear register for portcounters (single instance) */
	if ((addr >= TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VSWITCH1_PORTCOUNTER_CLEAR_REGISTER");
	}
	/* Port counter PortXmitDiscards. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P1_XMIT_DISCARDS_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_XMIT_DISCARDS_ADDR + 
	             TSU_IBPR_VHCA_P1_XMIT_DISCARDS_STRIDE * 
	             TSU_IBPR_VHCA_P1_XMIT_DISCARDS_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_XMIT_DISCARDS");
	}
	/* Port counter Port Receive data. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P1_RCV_DATA_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_RCV_DATA_ADDR + 
	             TSU_IBPR_VHCA_P1_RCV_DATA_STRIDE * 
	             TSU_IBPR_VHCA_P1_RCV_DATA_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_RCV_DATA");
	}
	/* Port counter Port Receive Packets. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P1_RCV_PKTS_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_RCV_PKTS_ADDR + 
	             TSU_IBPR_VHCA_P1_RCV_PKTS_STRIDE * 
	             TSU_IBPR_VHCA_P1_RCV_PKTS_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_RCV_PKTS");
	}
	/* Port counter Port Xmit data. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P1_XMIT_DATA_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_XMIT_DATA_ADDR + 
	             TSU_IBPR_VHCA_P1_XMIT_DATA_STRIDE * 
	             TSU_IBPR_VHCA_P1_XMIT_DATA_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_XMIT_DATA");
	}
	/* Port counter Port Xmit Packets. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P1_XMIT_PKTS_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_XMIT_PKTS_ADDR + 
	             TSU_IBPR_VHCA_P1_XMIT_PKTS_STRIDE * 
	             TSU_IBPR_VHCA_P1_XMIT_PKTS_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_XMIT_PKTS");
	}
	/*
	 * Port counter counting packets dropped (marked p_error) in Xmit path.
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_ADDR + 
	             TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_STRIDE * 
	             TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP");
	}
	/*
	 * Clear vhca portcounters according to vhca port counter clear registers.
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR_ADDR + 
	             TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR_STRIDE * 
	             TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_PORTCOUNTER_CLEAR");
	}
	/*
	 * Register specifying clear on the the PortXmitDiscards counter. This is per
	 * vSwitch port.
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_XMIT_DISCARDS_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_RCV_DATA_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortRcvPkts counter. This is per vHCA
	 * port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_RCV_PKTS_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_XMIT_DATA_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortXmitPkts counter. This is per
	 * vHCA port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_XMIT_PKTS_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortXmitPkts drop counter. This is
	 * per vHCA port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P1_XMIT_PKTS_DROP_CLEAR_REGISTER");
	}
	/* Port counter PortXmitDiscards. This is per vSwitch port [32:0]. */
	if ((addr >= TSU_IBPR_VSWITCH2_XMIT_DISCARDS_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_XMIT_DISCARDS_ADDR + 
	             TSU_IBPR_VSWITCH2_XMIT_DISCARDS_STRIDE * 
	             TSU_IBPR_VSWITCH2_XMIT_DISCARDS_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_XMIT_DISCARDS");
	}
	/*
	 * Port counter PortRcvSwitchRelayErrors. This register entry is associated
	 * with the corresponding register entry in all other sample register per
	 * port.
	 */
	if ((addr >= TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS_ADDR + 
	             TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS_STRIDE * 
	             TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_RCV_SWITCH_RELAY_ERRORS");
	}
	/* Vendor Port counter receive packets drop. This is per vSwitch. */
	if ((addr >= TSU_IBPR_VSWITCH2_RCV_PKTS_DROP_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_RCV_PKTS_DROP_ADDR + 
	             TSU_IBPR_VSWITCH2_RCV_PKTS_DROP_STRIDE * 
	             TSU_IBPR_VSWITCH2_RCV_PKTS_DROP_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_RCV_PKTS_DROP");
	}
	/*
	 * Clear portcounter according to setting in portcounter_clear registers
	 */
	if ((addr >= TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_ADDR + 
	             TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_STRIDE * 
	             TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR");
	}
	/* Clear register for the the PortXmitDiscard */
	if ((addr >= TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_XMIT_DISCARD_CLEAR_REGISTER");
	}
	/* Clear register for portcounters (single instance) */
	if ((addr >= TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VSWITCH2_PORTCOUNTER_CLEAR_REGISTER");
	}
	/* Port counter PortXmitDiscards. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P2_XMIT_DISCARDS_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_XMIT_DISCARDS_ADDR + 
	             TSU_IBPR_VHCA_P2_XMIT_DISCARDS_STRIDE * 
	             TSU_IBPR_VHCA_P2_XMIT_DISCARDS_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_XMIT_DISCARDS");
	}
	/* Port counter Port Receive data. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P2_RCV_DATA_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_RCV_DATA_ADDR + 
	             TSU_IBPR_VHCA_P2_RCV_DATA_STRIDE * 
	             TSU_IBPR_VHCA_P2_RCV_DATA_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_RCV_DATA");
	}
	/* Port counter Port Receive Packets. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P2_RCV_PKTS_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_RCV_PKTS_ADDR + 
	             TSU_IBPR_VHCA_P2_RCV_PKTS_STRIDE * 
	             TSU_IBPR_VHCA_P2_RCV_PKTS_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_RCV_PKTS");
	}
	/* Port counter Port Xmit data. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P2_XMIT_DATA_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_XMIT_DATA_ADDR + 
	             TSU_IBPR_VHCA_P2_XMIT_DATA_STRIDE * 
	             TSU_IBPR_VHCA_P2_XMIT_DATA_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_XMIT_DATA");
	}
	/* Port counter Port Xmit Packets. This is per vSwitch port. */
	if ((addr >= TSU_IBPR_VHCA_P2_XMIT_PKTS_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_XMIT_PKTS_ADDR + 
	             TSU_IBPR_VHCA_P2_XMIT_PKTS_STRIDE * 
	             TSU_IBPR_VHCA_P2_XMIT_PKTS_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_XMIT_PKTS");
	}
	/*
	 * Port counter counting packets dropped (marked p_error) in Xmit path.
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_ADDR + 
	             TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_STRIDE * 
	             TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP");
	}
	/*
	 * Clear vhca portcounters according to vhca port counter clear registers.
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR_ADDR + 
	             TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR_STRIDE * 
	             TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_PORTCOUNTER_CLEAR");
	}
	/*
	 * Register specifying clear on the the PortXmitDiscards counter. This is per
	 * vSwitch port.
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_XMIT_DISCARDS_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_RCV_DATA_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortRcvPkts counter. This is per vHCA
	 * port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_RCV_PKTS_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortRcvData counter. This is per vHCA
	 * port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_XMIT_DATA_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortXmitPkts counter. This is per
	 * vHCA port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_XMIT_PKTS_CLEAR_REGISTER");
	}
	/*
	 * Register specifying clear on the the PortXmitPkts drop counter. This is
	 * per vHCA port[32:0].
	 */
	if ((addr >= TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER_ADDR) &&
	    (addr <  TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER_ADDR + 
	             TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER_STRIDE * 
	             TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER_DEPTH)) {
		return("TSU_IBPR_VHCA_P2_XMIT_PKTS_DROP_CLEAR_REGISTER");
	}
	/*
	 * Per vHCA (UF0-32) register. This table contain valid RSS combinations to
	 * calculate for this UF.
	 */
	if ((addr >= TSU_IBPR_RSS_CONTROL_ADDR) &&
	    (addr <  TSU_IBPR_RSS_CONTROL_ADDR + 
	             TSU_IBPR_RSS_CONTROL_STRIDE * 
	             TSU_IBPR_RSS_CONTROL_DEPTH)) {
		return("TSU_IBPR_RSS_CONTROL");
	}
	/* 16B Secret key for RSS generation for IPv4. */
	if ((addr >= TSU_IBPR_RSS_IPV4_SECRET_KEY_ADDR) &&
	    (addr <  TSU_IBPR_RSS_IPV4_SECRET_KEY_ADDR + 
	             TSU_IBPR_RSS_IPV4_SECRET_KEY_STRIDE * 
	             TSU_IBPR_RSS_IPV4_SECRET_KEY_DEPTH)) {
		return("TSU_IBPR_RSS_IPV4_SECRET_KEY");
	}
	/* 40B Secret key for RSS generation for IPv6. */
	if ((addr >= TSU_IBPR_RSS_IPV6_SECRET_KEY_ADDR) &&
	    (addr <  TSU_IBPR_RSS_IPV6_SECRET_KEY_ADDR + 
	             TSU_IBPR_RSS_IPV6_SECRET_KEY_STRIDE * 
	             TSU_IBPR_RSS_IPV6_SECRET_KEY_DEPTH)) {
		return("TSU_IBPR_RSS_IPV6_SECRET_KEY");
	}
	/*
	 * Upper 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	if ((addr >= TSU_IBPR_P1_GID_UPPER_ADDR) &&
	    (addr <  TSU_IBPR_P1_GID_UPPER_ADDR + 
	             TSU_IBPR_P1_GID_UPPER_STRIDE * 
	             TSU_IBPR_P1_GID_UPPER_DEPTH)) {
		return("TSU_IBPR_P1_GID_UPPER");
	}
	/*
	 * Lower 64 bits of GID for port1. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	if ((addr >= TSU_IBPR_P1_GID_LOWER_ADDR) &&
	    (addr <  TSU_IBPR_P1_GID_LOWER_ADDR + 
	             TSU_IBPR_P1_GID_LOWER_STRIDE * 
	             TSU_IBPR_P1_GID_LOWER_DEPTH)) {
		return("TSU_IBPR_P1_GID_LOWER");
	}
	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
	if ((addr >= TSU_IBPR_P1_GID_FORWARDING_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_P1_GID_FORWARDING_TABLE_ADDR + 
	             TSU_IBPR_P1_GID_FORWARDING_TABLE_STRIDE * 
	             TSU_IBPR_P1_GID_FORWARDING_TABLE_DEPTH)) {
		return("TSU_IBPR_P1_GID_FORWARDING_TABLE");
	}
	/*
	 * Upper 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	if ((addr >= TSU_IBPR_P2_GID_UPPER_ADDR) &&
	    (addr <  TSU_IBPR_P2_GID_UPPER_ADDR + 
	             TSU_IBPR_P2_GID_UPPER_STRIDE * 
	             TSU_IBPR_P2_GID_UPPER_DEPTH)) {
		return("TSU_IBPR_P2_GID_UPPER");
	}
	/*
	 * Lower 64 bits of GID for port2. There are (2 * NUM_VHCA + 1) 67 GIDs per
	 * physical IB port.
	 */
	if ((addr >= TSU_IBPR_P2_GID_LOWER_ADDR) &&
	    (addr <  TSU_IBPR_P2_GID_LOWER_ADDR + 
	             TSU_IBPR_P2_GID_LOWER_STRIDE * 
	             TSU_IBPR_P2_GID_LOWER_DEPTH)) {
		return("TSU_IBPR_P2_GID_LOWER");
	}
	/*
	 * GID forwarding table. The forwarding table is used to figure out if a
	 * packet should be sent in loopback or not. There are (2 * NUM_VHCA + 1) 67
	 * GIDs per physical IB port.
	 */
	if ((addr >= TSU_IBPR_P2_GID_FORWARDING_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_P2_GID_FORWARDING_TABLE_ADDR + 
	             TSU_IBPR_P2_GID_FORWARDING_TABLE_STRIDE * 
	             TSU_IBPR_P2_GID_FORWARDING_TABLE_DEPTH)) {
		return("TSU_IBPR_P2_GID_FORWARDING_TABLE");
	}
	/* Per vHCA + EPS-C ethernet MAC address register. */
	if ((addr >= TSU_IBPR_P1_EOIB_MAC1_ADDR) &&
	    (addr <  TSU_IBPR_P1_EOIB_MAC1_ADDR + 
	             TSU_IBPR_P1_EOIB_MAC1_STRIDE * 
	             TSU_IBPR_P1_EOIB_MAC1_DEPTH)) {
		return("TSU_IBPR_P1_EOIB_MAC1");
	}
	/* Per vHCA + EPS-C ethernet MAC address register. */
	if ((addr >= TSU_IBPR_P1_EOIB_MAC2_ADDR) &&
	    (addr <  TSU_IBPR_P1_EOIB_MAC2_ADDR + 
	             TSU_IBPR_P1_EOIB_MAC2_STRIDE * 
	             TSU_IBPR_P1_EOIB_MAC2_DEPTH)) {
		return("TSU_IBPR_P1_EOIB_MAC2");
	}
	/* Per vHCA + EPS-C ethernet MAC address register. */
	if ((addr >= TSU_IBPR_P2_EOIB_MAC1_ADDR) &&
	    (addr <  TSU_IBPR_P2_EOIB_MAC1_ADDR + 
	             TSU_IBPR_P2_EOIB_MAC1_STRIDE * 
	             TSU_IBPR_P2_EOIB_MAC1_DEPTH)) {
		return("TSU_IBPR_P2_EOIB_MAC1");
	}
	/* Per vHCA + EPS-C ethernet MAC address register. */
	if ((addr >= TSU_IBPR_P2_EOIB_MAC2_ADDR) &&
	    (addr <  TSU_IBPR_P2_EOIB_MAC2_ADDR + 
	             TSU_IBPR_P2_EOIB_MAC2_STRIDE * 
	             TSU_IBPR_P2_EOIB_MAC2_DEPTH)) {
		return("TSU_IBPR_P2_EOIB_MAC2");
	}
	/* Per vHCA + EPS-C ethernet control register. */
	if ((addr >= TSU_IBPR_EOIB_CONTROL_ADDR) &&
	    (addr <  TSU_IBPR_EOIB_CONTROL_ADDR + 
	             TSU_IBPR_EOIB_CONTROL_STRIDE * 
	             TSU_IBPR_EOIB_CONTROL_DEPTH)) {
		return("TSU_IBPR_EOIB_CONTROL");
	}
	/* Per vHCA + EPS-C DMAC seed register. */
	if ((addr >= TSU_IBPR_DMAC_SEED_ADDR) &&
	    (addr <  TSU_IBPR_DMAC_SEED_ADDR + 
	             TSU_IBPR_DMAC_SEED_STRIDE * 
	             TSU_IBPR_DMAC_SEED_DEPTH)) {
		return("TSU_IBPR_DMAC_SEED");
	}
	/* Per vHCA + EPS-C VLAN EtherTypes register. */
	if ((addr >= TSU_IBPR_EOIB_VLAN_ETHERTYPES_ADDR) &&
	    (addr <  TSU_IBPR_EOIB_VLAN_ETHERTYPES_ADDR + 
	             TSU_IBPR_EOIB_VLAN_ETHERTYPES_STRIDE * 
	             TSU_IBPR_EOIB_VLAN_ETHERTYPES_DEPTH)) {
		return("TSU_IBPR_EOIB_VLAN_ETHERTYPES");
	}
	/* Per vHCA PF control register. */
	if ((addr >= TSU_IBPR_EOIB_PF_CONTROL_ADDR) &&
	    (addr <  TSU_IBPR_EOIB_PF_CONTROL_ADDR + 
	             TSU_IBPR_EOIB_PF_CONTROL_STRIDE * 
	             TSU_IBPR_EOIB_PF_CONTROL_DEPTH)) {
		return("TSU_IBPR_EOIB_PF_CONTROL");
	}
	/* Common unicast overflow table for all vHCAs. */
	if ((addr >= TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE_ADDR + 
	             TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE_STRIDE * 
	             TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE_DEPTH)) {
		return("TSU_IBPR_EOIB_UNICAST_OVERFLOW_TABLE");
	}
	/* Common multicast table for all VHCAs. */
	if ((addr >= TSU_IBPR_EOIB_MULTICAST_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_EOIB_MULTICAST_TABLE_ADDR + 
	             TSU_IBPR_EOIB_MULTICAST_TABLE_STRIDE * 
	             TSU_IBPR_EOIB_MULTICAST_TABLE_DEPTH)) {
		return("TSU_IBPR_EOIB_MULTICAST_TABLE");
	}
	/*
	 * Header split register indicating what EoIB headers to try splitting at.
	 */
	if ((addr >= TSU_IBPR_HDR_SPLIT_EOIB_ADDR) &&
	    (addr <  TSU_IBPR_HDR_SPLIT_EOIB_ADDR + 
	             TSU_IBPR_HDR_SPLIT_EOIB_STRIDE * 
	             TSU_IBPR_HDR_SPLIT_EOIB_DEPTH)) {
		return("TSU_IBPR_HDR_SPLIT_EOIB");
	}
	/*
	 * Header split register indicating what IPoIB headers to try splitting at
	 * for UD transport.
	 */
	if ((addr >= TSU_IBPR_HDR_SPLIT_IPOIB_UD_ADDR) &&
	    (addr <  TSU_IBPR_HDR_SPLIT_IPOIB_UD_ADDR + 
	             TSU_IBPR_HDR_SPLIT_IPOIB_UD_STRIDE * 
	             TSU_IBPR_HDR_SPLIT_IPOIB_UD_DEPTH)) {
		return("TSU_IBPR_HDR_SPLIT_IPOIB_UD");
	}
	/* Trace buffer setup */
	if ((addr >= TSU_IBPR_TRACE_BUFFER_SETUP_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_BUFFER_SETUP_ADDR + 
	             TSU_IBPR_TRACE_BUFFER_SETUP_STRIDE * 
	             TSU_IBPR_TRACE_BUFFER_SETUP_DEPTH)) {
		return("TSU_IBPR_TRACE_BUFFER_SETUP");
	}
	/* Trace buffer Store qualifier1 */
	if ((addr >= TSU_IBPR_TRACE_STORE_QUALIFIER1_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_STORE_QUALIFIER1_ADDR + 
	             TSU_IBPR_TRACE_STORE_QUALIFIER1_STRIDE * 
	             TSU_IBPR_TRACE_STORE_QUALIFIER1_DEPTH)) {
		return("TSU_IBPR_TRACE_STORE_QUALIFIER1");
	}
	/* Trace buffer Store qualifier2 */
	if ((addr >= TSU_IBPR_TRACE_STORE_QUALIFIER2_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_STORE_QUALIFIER2_ADDR + 
	             TSU_IBPR_TRACE_STORE_QUALIFIER2_STRIDE * 
	             TSU_IBPR_TRACE_STORE_QUALIFIER2_DEPTH)) {
		return("TSU_IBPR_TRACE_STORE_QUALIFIER2");
	}
	/* Trace buffer Store qualifier1 mask */
	if ((addr >= TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK_ADDR + 
	             TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK_STRIDE * 
	             TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK_DEPTH)) {
		return("TSU_IBPR_TRACE_STORE_QUALIFIER1_MASK");
	}
	/* Trace buffer Store qualifier2 mask */
	if ((addr >= TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK_ADDR + 
	             TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK_STRIDE * 
	             TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK_DEPTH)) {
		return("TSU_IBPR_TRACE_STORE_QUALIFIER2_MASK");
	}
	/* Trace buffer trigger1 */
	if ((addr >= TSU_IBPR_TRACE_TRIGGER1_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_TRIGGER1_ADDR + 
	             TSU_IBPR_TRACE_TRIGGER1_STRIDE * 
	             TSU_IBPR_TRACE_TRIGGER1_DEPTH)) {
		return("TSU_IBPR_TRACE_TRIGGER1");
	}
	/* Trace buffer trigger2 */
	if ((addr >= TSU_IBPR_TRACE_TRIGGER2_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_TRIGGER2_ADDR + 
	             TSU_IBPR_TRACE_TRIGGER2_STRIDE * 
	             TSU_IBPR_TRACE_TRIGGER2_DEPTH)) {
		return("TSU_IBPR_TRACE_TRIGGER2");
	}
	/* Trace buffer trigger1 mask */
	if ((addr >= TSU_IBPR_TRACE_TRIGGER1_MASK_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_TRIGGER1_MASK_ADDR + 
	             TSU_IBPR_TRACE_TRIGGER1_MASK_STRIDE * 
	             TSU_IBPR_TRACE_TRIGGER1_MASK_DEPTH)) {
		return("TSU_IBPR_TRACE_TRIGGER1_MASK");
	}
	/* Trace buffer trigger2 mask */
	if ((addr >= TSU_IBPR_TRACE_TRIGGER2_MASK_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_TRIGGER2_MASK_ADDR + 
	             TSU_IBPR_TRACE_TRIGGER2_MASK_STRIDE * 
	             TSU_IBPR_TRACE_TRIGGER2_MASK_DEPTH)) {
		return("TSU_IBPR_TRACE_TRIGGER2_MASK");
	}
	/* Start trace buffer */
	if ((addr >= TSU_IBPR_TRACE_START_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_START_ADDR + 
	             TSU_IBPR_TRACE_START_STRIDE * 
	             TSU_IBPR_TRACE_START_DEPTH)) {
		return("TSU_IBPR_TRACE_START");
	}
	/* Stop trace buffer */
	if ((addr >= TSU_IBPR_TRACE_STOP_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_STOP_ADDR + 
	             TSU_IBPR_TRACE_STOP_STRIDE * 
	             TSU_IBPR_TRACE_STOP_DEPTH)) {
		return("TSU_IBPR_TRACE_STOP");
	}
	/* Trace buffer status */
	if ((addr >= TSU_IBPR_TRACE_BUFFER_STATUS_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_BUFFER_STATUS_ADDR + 
	             TSU_IBPR_TRACE_BUFFER_STATUS_STRIDE * 
	             TSU_IBPR_TRACE_BUFFER_STATUS_DEPTH)) {
		return("TSU_IBPR_TRACE_BUFFER_STATUS");
	}
	/*
	 * Per vHCA + EPS-C VID table. There are 64 entries per UF. 4096b * 34 (64x34
	 * entries).
	 */
	if ((addr >= TSU_IBPR_EOIB_VID_TABLE_ADDR) &&
	    (addr <  TSU_IBPR_EOIB_VID_TABLE_ADDR + 
	             TSU_IBPR_EOIB_VID_TABLE_STRIDE * 
	             TSU_IBPR_EOIB_VID_TABLE_DEPTH)) {
		return("TSU_IBPR_EOIB_VID_TABLE");
	}
	/* Trace buffer */
	if ((addr >= TSU_IBPR_TRACE_BUFFER_ADDR) &&
	    (addr <  TSU_IBPR_TRACE_BUFFER_ADDR + 
	             TSU_IBPR_TRACE_BUFFER_STRIDE * 
	             TSU_IBPR_TRACE_BUFFER_DEPTH)) {
		return("TSU_IBPR_TRACE_BUFFER");
	}
	if ((addr >= TSU_SQS_SQ_BASE_ADDR_SW_0_ADDR) &&
	    (addr <  TSU_SQS_SQ_BASE_ADDR_SW_0_ADDR + 
	             TSU_SQS_SQ_BASE_ADDR_SW_0_STRIDE * 
	             TSU_SQS_SQ_BASE_ADDR_SW_0_DEPTH)) {
		return("TSU_SQS_SQ_BASE_ADDR_SW_0");
	}
	if ((addr >= TSU_SQS_SQ_BASE_ADDR_SW_1_ADDR) &&
	    (addr <  TSU_SQS_SQ_BASE_ADDR_SW_1_ADDR + 
	             TSU_SQS_SQ_BASE_ADDR_SW_1_STRIDE * 
	             TSU_SQS_SQ_BASE_ADDR_SW_1_DEPTH)) {
		return("TSU_SQS_SQ_BASE_ADDR_SW_1");
	}
	if ((addr >= TSU_SQS_SQ_BASE_ADDR_SW_2_ADDR) &&
	    (addr <  TSU_SQS_SQ_BASE_ADDR_SW_2_ADDR + 
	             TSU_SQS_SQ_BASE_ADDR_SW_2_STRIDE * 
	             TSU_SQS_SQ_BASE_ADDR_SW_2_DEPTH)) {
		return("TSU_SQS_SQ_BASE_ADDR_SW_2");
	}
	if ((addr >= TSU_SQS_SQ_BASE_ADDR_HW_0_ADDR) &&
	    (addr <  TSU_SQS_SQ_BASE_ADDR_HW_0_ADDR + 
	             TSU_SQS_SQ_BASE_ADDR_HW_0_STRIDE * 
	             TSU_SQS_SQ_BASE_ADDR_HW_0_DEPTH)) {
		return("TSU_SQS_SQ_BASE_ADDR_HW_0");
	}
	if ((addr >= TSU_SQS_SQ_BASE_ADDR_HW_1_ADDR) &&
	    (addr <  TSU_SQS_SQ_BASE_ADDR_HW_1_ADDR + 
	             TSU_SQS_SQ_BASE_ADDR_HW_1_STRIDE * 
	             TSU_SQS_SQ_BASE_ADDR_HW_1_DEPTH)) {
		return("TSU_SQS_SQ_BASE_ADDR_HW_1");
	}
	if ((addr >= TSU_SQS_SQ_BASE_ADDR_HW_2_ADDR) &&
	    (addr <  TSU_SQS_SQ_BASE_ADDR_HW_2_ADDR + 
	             TSU_SQS_SQ_BASE_ADDR_HW_2_STRIDE * 
	             TSU_SQS_SQ_BASE_ADDR_HW_2_DEPTH)) {
		return("TSU_SQS_SQ_BASE_ADDR_HW_2");
	}
	/*
	 * SQS list table is used to program the list number to associate with UF.
	 * Address is list number and data is UF. A single UF can allocate multiple
	 * lists.
	 */
	if ((addr >= TSU_SQS_SQS_LIST_TABLE_ADDR) &&
	    (addr <  TSU_SQS_SQS_LIST_TABLE_ADDR + 
	             TSU_SQS_SQS_LIST_TABLE_STRIDE * 
	             TSU_SQS_SQS_LIST_TABLE_DEPTH)) {
		return("TSU_SQS_SQS_LIST_TABLE");
	}
	/*
	 * This register must be set and the kick register is written in order to
	 * start the operation.
	 */
	if ((addr >= TSU_SQS_UF_CONTROL_ADDR) &&
	    (addr <  TSU_SQS_UF_CONTROL_ADDR + 
	             TSU_SQS_UF_CONTROL_STRIDE * 
	             TSU_SQS_UF_CONTROL_DEPTH)) {
		return("TSU_SQS_UF_CONTROL");
	}
	/* Starts operation defined in uf_control. */
	if ((addr >= TSU_SQS_UF_CONTROL_KICK_ADDR) &&
	    (addr <  TSU_SQS_UF_CONTROL_KICK_ADDR + 
	             TSU_SQS_UF_CONTROL_KICK_STRIDE * 
	             TSU_SQS_UF_CONTROL_KICK_DEPTH)) {
		return("TSU_SQS_UF_CONTROL_KICK");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_SQS_INT_STATUS_ADDR) &&
	    (addr <  TSU_SQS_INT_STATUS_ADDR + 
	             TSU_SQS_INT_STATUS_STRIDE * 
	             TSU_SQS_INT_STATUS_DEPTH)) {
		return("TSU_SQS_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_SQS_INT_MASK_ADDR) &&
	    (addr <  TSU_SQS_INT_MASK_ADDR + 
	             TSU_SQS_INT_MASK_STRIDE * 
	             TSU_SQS_INT_MASK_DEPTH)) {
		return("TSU_SQS_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_SQS_INT_PRI_ADDR) &&
	    (addr <  TSU_SQS_INT_PRI_ADDR + 
	             TSU_SQS_INT_PRI_STRIDE * 
	             TSU_SQS_INT_PRI_DEPTH)) {
		return("TSU_SQS_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_SQS_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_SQS_INT_STATUS_CLEAR_ADDR + 
	             TSU_SQS_INT_STATUS_CLEAR_STRIDE * 
	             TSU_SQS_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_SQS_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_SQS_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_SQS_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_SQS_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_SQS_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_SQS_INT_STATUS_CLEAR_KICK");
	}
	/* Address: SQS list number. Flush status. */
	if ((addr >= TSU_SQS_SQS_LIST_STATUS0_ADDR) &&
	    (addr <  TSU_SQS_SQS_LIST_STATUS0_ADDR + 
	             TSU_SQS_SQS_LIST_STATUS0_STRIDE * 
	             TSU_SQS_SQS_LIST_STATUS0_DEPTH)) {
		return("TSU_SQS_SQS_LIST_STATUS0");
	}
	/*
	 * Address: SQS list number. Set when the PCIe response has error on the
	 * descriptor read.
	 */
	if ((addr >= TSU_SQS_SQS_LIST_STATUS1_ADDR) &&
	    (addr <  TSU_SQS_SQS_LIST_STATUS1_ADDR + 
	             TSU_SQS_SQS_LIST_STATUS1_STRIDE * 
	             TSU_SQS_SQS_LIST_STATUS1_DEPTH)) {
		return("TSU_SQS_SQS_LIST_STATUS1");
	}
	/*
	 * Hash mask and shift control. XOR width is based on the log 2 of number of
	 * list for that UF.
	 */
	if ((addr >= TSU_SQS_HASH_CTRL_ADDR) &&
	    (addr <  TSU_SQS_HASH_CTRL_ADDR + 
	             TSU_SQS_HASH_CTRL_STRIDE * 
	             TSU_SQS_HASH_CTRL_DEPTH)) {
		return("TSU_SQS_HASH_CTRL");
	}
	/*
	 * Disble Atomic cmp and swap for the QP next pointer null check. If set,
	 * hardware generates read-then-write to update the QP next pointer.
	 */
	if ((addr >= TSU_SQS_ATOMIC_DISABLE_ADDR) &&
	    (addr <  TSU_SQS_ATOMIC_DISABLE_ADDR + 
	             TSU_SQS_ATOMIC_DISABLE_STRIDE * 
	             TSU_SQS_ATOMIC_DISABLE_DEPTH)) {
		return("TSU_SQS_ATOMIC_DISABLE");
	}
	/* Number of burst read for the send queue element per QP. */
	if ((addr >= TSU_SQS_SQ_BURST_READ_SIZE_ADDR) &&
	    (addr <  TSU_SQS_SQ_BURST_READ_SIZE_ADDR + 
	             TSU_SQS_SQ_BURST_READ_SIZE_STRIDE * 
	             TSU_SQS_SQ_BURST_READ_SIZE_DEPTH)) {
		return("TSU_SQS_SQ_BURST_READ_SIZE");
	}
	/* Number of DB count from CBU. */
	if ((addr >= TSU_SQS_CBU_DB_CNT_ADDR) &&
	    (addr <  TSU_SQS_CBU_DB_CNT_ADDR + 
	             TSU_SQS_CBU_DB_CNT_STRIDE * 
	             TSU_SQS_CBU_DB_CNT_DEPTH)) {
		return("TSU_SQS_CBU_DB_CNT");
	}
	/* Number of DB count from ERR. */
	if ((addr >= TSU_SQS_ERR_DB_CNT_ADDR) &&
	    (addr <  TSU_SQS_ERR_DB_CNT_ADDR + 
	             TSU_SQS_ERR_DB_CNT_STRIDE * 
	             TSU_SQS_ERR_DB_CNT_DEPTH)) {
		return("TSU_SQS_ERR_DB_CNT");
	}
	/* Number of LLQ push. */
	if ((addr >= TSU_SQS_LLQ_PUSH_CNT_ADDR) &&
	    (addr <  TSU_SQS_LLQ_PUSH_CNT_ADDR + 
	             TSU_SQS_LLQ_PUSH_CNT_STRIDE * 
	             TSU_SQS_LLQ_PUSH_CNT_DEPTH)) {
		return("TSU_SQS_LLQ_PUSH_CNT");
	}
	/* Number of LLQ pop. */
	if ((addr >= TSU_SQS_LLQ_POP_CNT_ADDR) &&
	    (addr <  TSU_SQS_LLQ_POP_CNT_ADDR + 
	             TSU_SQS_LLQ_POP_CNT_STRIDE * 
	             TSU_SQS_LLQ_POP_CNT_DEPTH)) {
		return("TSU_SQS_LLQ_POP_CNT");
	}
	/* Number of LLQ peek. */
	if ((addr >= TSU_SQS_LLQ_PEEK_CNT_ADDR) &&
	    (addr <  TSU_SQS_LLQ_PEEK_CNT_ADDR + 
	             TSU_SQS_LLQ_PEEK_CNT_STRIDE * 
	             TSU_SQS_LLQ_PEEK_CNT_DEPTH)) {
		return("TSU_SQS_LLQ_PEEK_CNT");
	}
	/* Number of Send Queue read. */
	if ((addr >= TSU_SQS_SQ_RD_CNT_ADDR) &&
	    (addr <  TSU_SQS_SQ_RD_CNT_ADDR + 
	             TSU_SQS_SQ_RD_CNT_STRIDE * 
	             TSU_SQS_SQ_RD_CNT_DEPTH)) {
		return("TSU_SQS_SQ_RD_CNT");
	}
	/* Number of Descriptor read. */
	if ((addr >= TSU_SQS_DSCR_REQ_CNT_ADDR) &&
	    (addr <  TSU_SQS_DSCR_REQ_CNT_ADDR + 
	             TSU_SQS_DSCR_REQ_CNT_STRIDE * 
	             TSU_SQS_DSCR_REQ_CNT_DEPTH)) {
		return("TSU_SQS_DSCR_REQ_CNT");
	}
	/* Number of Descriptor read response. */
	if ((addr >= TSU_SQS_DSCR_RSP_CNT_ADDR) &&
	    (addr <  TSU_SQS_DSCR_RSP_CNT_ADDR + 
	             TSU_SQS_DSCR_RSP_CNT_STRIDE * 
	             TSU_SQS_DSCR_RSP_CNT_DEPTH)) {
		return("TSU_SQS_DSCR_RSP_CNT");
	}
	/* Number of Atomic request. */
	if ((addr >= TSU_SQS_ATM_REQ_CNT_ADDR) &&
	    (addr <  TSU_SQS_ATM_REQ_CNT_ADDR + 
	             TSU_SQS_ATM_REQ_CNT_STRIDE * 
	             TSU_SQS_ATM_REQ_CNT_DEPTH)) {
		return("TSU_SQS_ATM_REQ_CNT");
	}
	/* Number of Atomic response. */
	if ((addr >= TSU_SQS_ATM_RSP_CNT_ADDR) &&
	    (addr <  TSU_SQS_ATM_RSP_CNT_ADDR + 
	             TSU_SQS_ATM_RSP_CNT_STRIDE * 
	             TSU_SQS_ATM_RSP_CNT_DEPTH)) {
		return("TSU_SQS_ATM_RSP_CNT");
	}
	/* Number of QP insert to the SQS list. */
	if ((addr >= TSU_SQS_PUSH_SQS_LIST_CNT_ADDR) &&
	    (addr <  TSU_SQS_PUSH_SQS_LIST_CNT_ADDR + 
	             TSU_SQS_PUSH_SQS_LIST_CNT_STRIDE * 
	             TSU_SQS_PUSH_SQS_LIST_CNT_DEPTH)) {
		return("TSU_SQS_PUSH_SQS_LIST_CNT");
	}
	/* Number of clock to wait before writting to the ring. */
	if ((addr >= TSU_SQS_RING_TIMER_ADDR) &&
	    (addr <  TSU_SQS_RING_TIMER_ADDR + 
	             TSU_SQS_RING_TIMER_STRIDE * 
	             TSU_SQS_RING_TIMER_DEPTH)) {
		return("TSU_SQS_RING_TIMER");
	}
	/* Set to write 64B for the send queue hardware descriptor. */
	if ((addr >= TSU_SQS_PADDED_SQ_DSCR_HW_ADDR) &&
	    (addr <  TSU_SQS_PADDED_SQ_DSCR_HW_ADDR + 
	             TSU_SQS_PADDED_SQ_DSCR_HW_STRIDE * 
	             TSU_SQS_PADDED_SQ_DSCR_HW_DEPTH)) {
		return("TSU_SQS_PADDED_SQ_DSCR_HW");
	}
	/* Set to write 64B for the PIO ring buffer. */
	if ((addr >= TSU_SQS_PADDED_RING_BUFFER_ADDR) &&
	    (addr <  TSU_SQS_PADDED_RING_BUFFER_ADDR + 
	             TSU_SQS_PADDED_RING_BUFFER_STRIDE * 
	             TSU_SQS_PADDED_RING_BUFFER_DEPTH)) {
		return("TSU_SQS_PADDED_RING_BUFFER");
	}
	/* ECC error control */
	if ((addr >= TSU_SQS_ECC_ERR_CTRL_ADDR) &&
	    (addr <  TSU_SQS_ECC_ERR_CTRL_ADDR + 
	             TSU_SQS_ECC_ERR_CTRL_STRIDE * 
	             TSU_SQS_ECC_ERR_CTRL_DEPTH)) {
		return("TSU_SQS_ECC_ERR_CTRL");
	}
	/* ECC status */
	if ((addr >= TSU_SQS_ECC_ERR_STATUS_ADDR) &&
	    (addr <  TSU_SQS_ECC_ERR_STATUS_ADDR + 
	             TSU_SQS_ECC_ERR_STATUS_STRIDE * 
	             TSU_SQS_ECC_ERR_STATUS_DEPTH)) {
		return("TSU_SQS_ECC_ERR_STATUS");
	}
	/* ECC status */
	if ((addr >= TSU_SQS_ECC_ERR_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_SQS_ECC_ERR_STATUS_CLEAR_ADDR + 
	             TSU_SQS_ECC_ERR_STATUS_CLEAR_STRIDE * 
	             TSU_SQS_ECC_ERR_STATUS_CLEAR_DEPTH)) {
		return("TSU_SQS_ECC_ERR_STATUS_CLEAR");
	}
	if ((addr >= TSU_SQS_PIO_RING_BASE_ADDR_0_ADDR) &&
	    (addr <  TSU_SQS_PIO_RING_BASE_ADDR_0_ADDR + 
	             TSU_SQS_PIO_RING_BASE_ADDR_0_STRIDE * 
	             TSU_SQS_PIO_RING_BASE_ADDR_0_DEPTH)) {
		return("TSU_SQS_PIO_RING_BASE_ADDR_0");
	}
	if ((addr >= TSU_SQS_PIO_RING_BASE_ADDR_1_ADDR) &&
	    (addr <  TSU_SQS_PIO_RING_BASE_ADDR_1_ADDR + 
	             TSU_SQS_PIO_RING_BASE_ADDR_1_STRIDE * 
	             TSU_SQS_PIO_RING_BASE_ADDR_1_DEPTH)) {
		return("TSU_SQS_PIO_RING_BASE_ADDR_1");
	}
	if ((addr >= TSU_SQS_PIO_RING_BASE_ADDR_2_ADDR) &&
	    (addr <  TSU_SQS_PIO_RING_BASE_ADDR_2_ADDR + 
	             TSU_SQS_PIO_RING_BASE_ADDR_2_STRIDE * 
	             TSU_SQS_PIO_RING_BASE_ADDR_2_DEPTH)) {
		return("TSU_SQS_PIO_RING_BASE_ADDR_2");
	}
	/* Read/Write for the PIO ring buffer write pointer */
	if ((addr >= TSU_SQS_PIO_RING_BUFFER_WR_PTR_ADDR) &&
	    (addr <  TSU_SQS_PIO_RING_BUFFER_WR_PTR_ADDR + 
	             TSU_SQS_PIO_RING_BUFFER_WR_PTR_STRIDE * 
	             TSU_SQS_PIO_RING_BUFFER_WR_PTR_DEPTH)) {
		return("TSU_SQS_PIO_RING_BUFFER_WR_PTR");
	}
	/*
	 * Address: SQS list number. Set when the PCIe response has error on the
	 * descriptor read.
	 */
	if ((addr >= TSU_SQS_SQS_LIST_ERR_STATUS_ADDR) &&
	    (addr <  TSU_SQS_SQS_LIST_ERR_STATUS_ADDR + 
	             TSU_SQS_SQS_LIST_ERR_STATUS_STRIDE * 
	             TSU_SQS_SQS_LIST_ERR_STATUS_DEPTH)) {
		return("TSU_SQS_SQS_LIST_ERR_STATUS");
	}
	/* Read/Write for the PIO ring buffer read pointer */
	if ((addr >= TSU_SQS_PIO_RING_BUFFER_RD_PTR_ADDR) &&
	    (addr <  TSU_SQS_PIO_RING_BUFFER_RD_PTR_ADDR + 
	             TSU_SQS_PIO_RING_BUFFER_RD_PTR_STRIDE * 
	             TSU_SQS_PIO_RING_BUFFER_RD_PTR_DEPTH)) {
		return("TSU_SQS_PIO_RING_BUFFER_RD_PTR");
	}
	/* Read/Write for the PIO ring buffer pending count */
	if ((addr >= TSU_SQS_PIO_RING_BUFFER_PENDING_CNT_ADDR) &&
	    (addr <  TSU_SQS_PIO_RING_BUFFER_PENDING_CNT_ADDR + 
	             TSU_SQS_PIO_RING_BUFFER_PENDING_CNT_STRIDE * 
	             TSU_SQS_PIO_RING_BUFFER_PENDING_CNT_DEPTH)) {
		return("TSU_SQS_PIO_RING_BUFFER_PENDING_CNT");
	}
	/* Interrupt status register. 1b per source (1 = int triggered). */
	if ((addr >= TSU_ERR_INT_STATUS_ADDR) &&
	    (addr <  TSU_ERR_INT_STATUS_ADDR + 
	             TSU_ERR_INT_STATUS_STRIDE * 
	             TSU_ERR_INT_STATUS_DEPTH)) {
		return("TSU_ERR_INT_STATUS");
	}
	/* Interrupt mask register. 1b per source (1 = masked). */
	if ((addr >= TSU_ERR_INT_MASK_ADDR) &&
	    (addr <  TSU_ERR_INT_MASK_ADDR + 
	             TSU_ERR_INT_MASK_STRIDE * 
	             TSU_ERR_INT_MASK_DEPTH)) {
		return("TSU_ERR_INT_MASK");
	}
	/* Interrupt priority register. 1b per source (1 = high 0 = low). */
	if ((addr >= TSU_ERR_INT_PRI_ADDR) &&
	    (addr <  TSU_ERR_INT_PRI_ADDR + 
	             TSU_ERR_INT_PRI_STRIDE * 
	             TSU_ERR_INT_PRI_DEPTH)) {
		return("TSU_ERR_INT_PRI");
	}
	/*
	 * Interrupt status clear register. 1b per source (1=source will be cleared
	 * from int_status register when kick is called).
	 */
	if ((addr >= TSU_ERR_INT_STATUS_CLEAR_ADDR) &&
	    (addr <  TSU_ERR_INT_STATUS_CLEAR_ADDR + 
	             TSU_ERR_INT_STATUS_CLEAR_STRIDE * 
	             TSU_ERR_INT_STATUS_CLEAR_DEPTH)) {
		return("TSU_ERR_INT_STATUS_CLEAR");
	}
	/* Trigger the int_status clear operation. */
	if ((addr >= TSU_ERR_INT_STATUS_CLEAR_KICK_ADDR) &&
	    (addr <  TSU_ERR_INT_STATUS_CLEAR_KICK_ADDR + 
	             TSU_ERR_INT_STATUS_CLEAR_KICK_STRIDE * 
	             TSU_ERR_INT_STATUS_CLEAR_KICK_DEPTH)) {
		return("TSU_ERR_INT_STATUS_CLEAR_KICK");
	}
	/* Async event FIFO - status portion. */
	if ((addr >= TSU_ERR_ASYNC_EVENT_STATUS_ADDR) &&
	    (addr <  TSU_ERR_ASYNC_EVENT_STATUS_ADDR + 
	             TSU_ERR_ASYNC_EVENT_STATUS_STRIDE * 
	             TSU_ERR_ASYNC_EVENT_STATUS_DEPTH)) {
		return("TSU_ERR_ASYNC_EVENT_STATUS");
	}
	/* Async event FIFO - affiliated data portion. */
	if ((addr >= TSU_ERR_ASYNC_EVENT_AFFILIATED_ADDR) &&
	    (addr <  TSU_ERR_ASYNC_EVENT_AFFILIATED_ADDR + 
	             TSU_ERR_ASYNC_EVENT_AFFILIATED_STRIDE * 
	             TSU_ERR_ASYNC_EVENT_AFFILIATED_DEPTH)) {
		return("TSU_ERR_ASYNC_EVENT_AFFILIATED");
	}
	/* This pop register is written after async event register is read. */
	if ((addr >= TSU_ERR_ASYNC_EVENT_POP_ADDR) &&
	    (addr <  TSU_ERR_ASYNC_EVENT_POP_ADDR + 
	             TSU_ERR_ASYNC_EVENT_POP_STRIDE * 
	             TSU_ERR_ASYNC_EVENT_POP_DEPTH)) {
		return("TSU_ERR_ASYNC_EVENT_POP");
	}
	/* Error type the host_counter is counting. */
	if ((addr >= TSU_ERR_HOST_ERROR_TYPE_ADDR) &&
	    (addr <  TSU_ERR_HOST_ERROR_TYPE_ADDR + 
	             TSU_ERR_HOST_ERROR_TYPE_STRIDE * 
	             TSU_ERR_HOST_ERROR_TYPE_DEPTH)) {
		return("TSU_ERR_HOST_ERROR_TYPE");
	}
	/*
	 * Counts how many times error type defined in host_error_type register is
	 * received by tsu_err. Sticky at max value and then needs to be cleared.
	 */
	if ((addr >= TSU_ERR_HOST_COUNTER_ADDR) &&
	    (addr <  TSU_ERR_HOST_COUNTER_ADDR + 
	             TSU_ERR_HOST_COUNTER_STRIDE * 
	             TSU_ERR_HOST_COUNTER_DEPTH)) {
		return("TSU_ERR_HOST_COUNTER");
	}
	/* Clears host_counter. */
	if ((addr >= TSU_ERR_CLEAR_HOST_COUNTER_ADDR) &&
	    (addr <  TSU_ERR_CLEAR_HOST_COUNTER_ADDR + 
	             TSU_ERR_CLEAR_HOST_COUNTER_STRIDE * 
	             TSU_ERR_CLEAR_HOST_COUNTER_DEPTH)) {
		return("TSU_ERR_CLEAR_HOST_COUNTER");
	}
	/* Error type the cmpl_counter is counting. */
	if ((addr >= TSU_ERR_CMPL_ERROR_TYPE_ADDR) &&
	    (addr <  TSU_ERR_CMPL_ERROR_TYPE_ADDR + 
	             TSU_ERR_CMPL_ERROR_TYPE_STRIDE * 
	             TSU_ERR_CMPL_ERROR_TYPE_DEPTH)) {
		return("TSU_ERR_CMPL_ERROR_TYPE");
	}
	/*
	 * Counts how many times error type defined in cmpl_error_type register is
	 * received by tsu_err. Sticky at max value and then needs to be cleared.
	 */
	if ((addr >= TSU_ERR_CMPL_COUNTER_ADDR) &&
	    (addr <  TSU_ERR_CMPL_COUNTER_ADDR + 
	             TSU_ERR_CMPL_COUNTER_STRIDE * 
	             TSU_ERR_CMPL_COUNTER_DEPTH)) {
		return("TSU_ERR_CMPL_COUNTER");
	}
	/* Clears. */
	if ((addr >= TSU_ERR_CLEAR_CMPL_COUNTER_ADDR) &&
	    (addr <  TSU_ERR_CLEAR_CMPL_COUNTER_ADDR + 
	             TSU_ERR_CLEAR_CMPL_COUNTER_STRIDE * 
	             TSU_ERR_CLEAR_CMPL_COUNTER_DEPTH)) {
		return("TSU_ERR_CLEAR_CMPL_COUNTER");
	}
	/* Clears the diag RAM for the UF specified. */
	if ((addr >= TSU_ERR_CLEAR_DIAG_RAM_ADDR) &&
	    (addr <  TSU_ERR_CLEAR_DIAG_RAM_ADDR + 
	             TSU_ERR_CLEAR_DIAG_RAM_STRIDE * 
	             TSU_ERR_CLEAR_DIAG_RAM_DEPTH)) {
		return("TSU_ERR_CLEAR_DIAG_RAM");
	}
	/* Clears the diag RAM - per UF. */
	if ((addr >= TSU_ERR_CLEAR_DIAG_RAM_KICK_ADDR) &&
	    (addr <  TSU_ERR_CLEAR_DIAG_RAM_KICK_ADDR + 
	             TSU_ERR_CLEAR_DIAG_RAM_KICK_STRIDE * 
	             TSU_ERR_CLEAR_DIAG_RAM_KICK_DEPTH)) {
		return("TSU_ERR_CLEAR_DIAG_RAM_KICK");
	}
	/* Read the address for the UF. */
	if ((addr >= TSU_ERR_DIAG_RAM_ADDR_ADDR) &&
	    (addr <  TSU_ERR_DIAG_RAM_ADDR_ADDR + 
	             TSU_ERR_DIAG_RAM_ADDR_STRIDE * 
	             TSU_ERR_DIAG_RAM_ADDR_DEPTH)) {
		return("TSU_ERR_DIAG_RAM_ADDR");
	}
	/* Set up which RAM entry to read. */
	if ((addr >= TSU_ERR_DIAG_RAM_READ_ADDR_ADDR) &&
	    (addr <  TSU_ERR_DIAG_RAM_READ_ADDR_ADDR + 
	             TSU_ERR_DIAG_RAM_READ_ADDR_STRIDE * 
	             TSU_ERR_DIAG_RAM_READ_ADDR_DEPTH)) {
		return("TSU_ERR_DIAG_RAM_READ_ADDR");
	}
	/*
	 * Kick - reads the data from the RAM entry specified in diag_ram_read_addr
	 * and adds it to registers which can be read.
	 */
	if ((addr >= TSU_ERR_DIAG_RAM_READ_KICK_ADDR) &&
	    (addr <  TSU_ERR_DIAG_RAM_READ_KICK_ADDR + 
	             TSU_ERR_DIAG_RAM_READ_KICK_STRIDE * 
	             TSU_ERR_DIAG_RAM_READ_KICK_DEPTH)) {
		return("TSU_ERR_DIAG_RAM_READ_KICK");
	}
	/* Time to wait before starting send queue mode. */
	if ((addr >= TSU_ERR_FENCE_TIME_TO_WAIT_ADDR) &&
	    (addr <  TSU_ERR_FENCE_TIME_TO_WAIT_ADDR + 
	             TSU_ERR_FENCE_TIME_TO_WAIT_STRIDE * 
	             TSU_ERR_FENCE_TIME_TO_WAIT_DEPTH)) {
		return("TSU_ERR_FENCE_TIME_TO_WAIT");
	}
	/* Data from the diagnostic RAM. */
	if ((addr >= TSU_ERR_DIAG_RAM_DATA_ADDR) &&
	    (addr <  TSU_ERR_DIAG_RAM_DATA_ADDR + 
	             TSU_ERR_DIAG_RAM_DATA_STRIDE * 
	             TSU_ERR_DIAG_RAM_DATA_DEPTH)) {
		return("TSU_ERR_DIAG_RAM_DATA");
	}
	/* Clear all counters having the bit set in the mask. */
	if ((addr >= TSU_ERR_CLEAR_ERROR_COUNTERS_ADDR) &&
	    (addr <  TSU_ERR_CLEAR_ERROR_COUNTERS_ADDR + 
	             TSU_ERR_CLEAR_ERROR_COUNTERS_STRIDE * 
	             TSU_ERR_CLEAR_ERROR_COUNTERS_DEPTH)) {
		return("TSU_ERR_CLEAR_ERROR_COUNTERS");
	}
	/* Clear all counters having the bit set in the mask. */
	if ((addr >= TSU_ERR_CLEAR_ERROR_COUNTERS_KICK_ADDR) &&
	    (addr <  TSU_ERR_CLEAR_ERROR_COUNTERS_KICK_ADDR + 
	             TSU_ERR_CLEAR_ERROR_COUNTERS_KICK_STRIDE * 
	             TSU_ERR_CLEAR_ERROR_COUNTERS_KICK_DEPTH)) {
		return("TSU_ERR_CLEAR_ERROR_COUNTERS_KICK");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_0_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_0_ADDR + 
	             TSU_ERR_ERROR_COUNTER_0_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_0_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_0");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_1_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_1_ADDR + 
	             TSU_ERR_ERROR_COUNTER_1_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_1_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_1");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_2_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_2_ADDR + 
	             TSU_ERR_ERROR_COUNTER_2_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_2_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_2");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_3_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_3_ADDR + 
	             TSU_ERR_ERROR_COUNTER_3_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_3_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_3");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_4_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_4_ADDR + 
	             TSU_ERR_ERROR_COUNTER_4_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_4_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_4");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_5_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_5_ADDR + 
	             TSU_ERR_ERROR_COUNTER_5_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_5_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_5");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_6_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_6_ADDR + 
	             TSU_ERR_ERROR_COUNTER_6_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_6_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_6");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_7_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_7_ADDR + 
	             TSU_ERR_ERROR_COUNTER_7_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_7_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_7");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_8_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_8_ADDR + 
	             TSU_ERR_ERROR_COUNTER_8_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_8_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_8");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_9_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_9_ADDR + 
	             TSU_ERR_ERROR_COUNTER_9_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_9_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_9");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_10_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_10_ADDR + 
	             TSU_ERR_ERROR_COUNTER_10_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_10_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_10");
	}
	/* Error counters. */
	if ((addr >= TSU_ERR_ERROR_COUNTER_11_ADDR) &&
	    (addr <  TSU_ERR_ERROR_COUNTER_11_ADDR + 
	             TSU_ERR_ERROR_COUNTER_11_STRIDE * 
	             TSU_ERR_ERROR_COUNTER_11_DEPTH)) {
		return("TSU_ERR_ERROR_COUNTER_11");
	}
	if ((addr >= IBU_P1_CNT1US_CNT124US_ADDR) &&
	    (addr <  IBU_P1_CNT1US_CNT124US_ADDR + 
	             IBU_P1_CNT1US_CNT124US_STRIDE * 
	             IBU_P1_CNT1US_CNT124US_DEPTH)) {
		return("IBU_P1_CNT1US_CNT124US");
	}
	if ((addr >= IBU_P1_CNT2MS_ADDR) &&
	    (addr <  IBU_P1_CNT2MS_ADDR + 
	             IBU_P1_CNT2MS_STRIDE * 
	             IBU_P1_CNT2MS_DEPTH)) {
		return("IBU_P1_CNT2MS");
	}
	if ((addr >= IBU_P1_CNT10MS_ADDR) &&
	    (addr <  IBU_P1_CNT10MS_ADDR + 
	             IBU_P1_CNT10MS_STRIDE * 
	             IBU_P1_CNT10MS_DEPTH)) {
		return("IBU_P1_CNT10MS");
	}
	if ((addr >= IBU_P1_CNT100MS_ADDR) &&
	    (addr <  IBU_P1_CNT100MS_ADDR + 
	             IBU_P1_CNT100MS_STRIDE * 
	             IBU_P1_CNT100MS_DEPTH)) {
		return("IBU_P1_CNT100MS");
	}
	if ((addr >= IBU_P1_CNT150MS_ADDR) &&
	    (addr <  IBU_P1_CNT150MS_ADDR + 
	             IBU_P1_CNT150MS_STRIDE * 
	             IBU_P1_CNT150MS_DEPTH)) {
		return("IBU_P1_CNT150MS");
	}
	if ((addr >= IBU_P1_CNT400MS_ADDR) &&
	    (addr <  IBU_P1_CNT400MS_ADDR + 
	             IBU_P1_CNT400MS_STRIDE * 
	             IBU_P1_CNT400MS_DEPTH)) {
		return("IBU_P1_CNT400MS");
	}
	if ((addr >= IBU_P1_SKP_TO_CNT_ADDR) &&
	    (addr <  IBU_P1_SKP_TO_CNT_ADDR + 
	             IBU_P1_SKP_TO_CNT_STRIDE * 
	             IBU_P1_SKP_TO_CNT_DEPTH)) {
		return("IBU_P1_SKP_TO_CNT");
	}
	if ((addr >= IBU_P1_TGT_VAL_ADDR) &&
	    (addr <  IBU_P1_TGT_VAL_ADDR + 
	             IBU_P1_TGT_VAL_STRIDE * 
	             IBU_P1_TGT_VAL_DEPTH)) {
		return("IBU_P1_TGT_VAL");
	}
	if ((addr >= IBU_P1_PHY_VCONFIG_ADDR) &&
	    (addr <  IBU_P1_PHY_VCONFIG_ADDR + 
	             IBU_P1_PHY_VCONFIG_STRIDE * 
	             IBU_P1_PHY_VCONFIG_DEPTH)) {
		return("IBU_P1_PHY_VCONFIG");
	}
	if ((addr >= IBU_P1_PHY_DISP_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P1_PHY_DISP_ERROR_CNT_ADDR + 
	             IBU_P1_PHY_DISP_ERROR_CNT_STRIDE * 
	             IBU_P1_PHY_DISP_ERROR_CNT_DEPTH)) {
		return("IBU_P1_PHY_DISP_ERROR_CNT");
	}
	if ((addr >= IBU_P1_PHY_CODE_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P1_PHY_CODE_ERROR_CNT_ADDR + 
	             IBU_P1_PHY_CODE_ERROR_CNT_STRIDE * 
	             IBU_P1_PHY_CODE_ERROR_CNT_DEPTH)) {
		return("IBU_P1_PHY_CODE_ERROR_CNT");
	}
	if ((addr >= IBU_P1_PHY_EVENT_LOG_ADDR) &&
	    (addr <  IBU_P1_PHY_EVENT_LOG_ADDR + 
	             IBU_P1_PHY_EVENT_LOG_STRIDE * 
	             IBU_P1_PHY_EVENT_LOG_DEPTH)) {
		return("IBU_P1_PHY_EVENT_LOG");
	}
	if ((addr >= IBU_P1_PORT_TRAIN_FSM_ADDR) &&
	    (addr <  IBU_P1_PORT_TRAIN_FSM_ADDR + 
	             IBU_P1_PORT_TRAIN_FSM_STRIDE * 
	             IBU_P1_PORT_TRAIN_FSM_DEPTH)) {
		return("IBU_P1_PORT_TRAIN_FSM");
	}
	if ((addr >= IBU_P1_PHY_TRAIN_SMTIMER_VS1_ADDR) &&
	    (addr <  IBU_P1_PHY_TRAIN_SMTIMER_VS1_ADDR + 
	             IBU_P1_PHY_TRAIN_SMTIMER_VS1_STRIDE * 
	             IBU_P1_PHY_TRAIN_SMTIMER_VS1_DEPTH)) {
		return("IBU_P1_PHY_TRAIN_SMTIMER_VS1");
	}
	if ((addr >= IBU_P1_MASK_ADDR) &&
	    (addr <  IBU_P1_MASK_ADDR + 
	             IBU_P1_MASK_STRIDE * 
	             IBU_P1_MASK_DEPTH)) {
		return("IBU_P1_MASK");
	}
	if ((addr >= IBU_P1_STATUS_ADDR) &&
	    (addr <  IBU_P1_STATUS_ADDR + 
	             IBU_P1_STATUS_STRIDE * 
	             IBU_P1_STATUS_DEPTH)) {
		return("IBU_P1_STATUS");
	}
	if ((addr >= IBU_P1_LINK_WIDTH_ENABLED_ADDR) &&
	    (addr <  IBU_P1_LINK_WIDTH_ENABLED_ADDR + 
	             IBU_P1_LINK_WIDTH_ENABLED_STRIDE * 
	             IBU_P1_LINK_WIDTH_ENABLED_DEPTH)) {
		return("IBU_P1_LINK_WIDTH_ENABLED");
	}
	if ((addr >= IBU_P1_LINK_WIDTH_SUPPORTED_ADDR) &&
	    (addr <  IBU_P1_LINK_WIDTH_SUPPORTED_ADDR + 
	             IBU_P1_LINK_WIDTH_SUPPORTED_STRIDE * 
	             IBU_P1_LINK_WIDTH_SUPPORTED_DEPTH)) {
		return("IBU_P1_LINK_WIDTH_SUPPORTED");
	}
	if ((addr >= IBU_P1_LINK_WIDTH_ACTIVE_ADDR) &&
	    (addr <  IBU_P1_LINK_WIDTH_ACTIVE_ADDR + 
	             IBU_P1_LINK_WIDTH_ACTIVE_STRIDE * 
	             IBU_P1_LINK_WIDTH_ACTIVE_DEPTH)) {
		return("IBU_P1_LINK_WIDTH_ACTIVE");
	}
	if ((addr >= IBU_P1_LINK_SPEED_SUPPORTED_ADDR) &&
	    (addr <  IBU_P1_LINK_SPEED_SUPPORTED_ADDR + 
	             IBU_P1_LINK_SPEED_SUPPORTED_STRIDE * 
	             IBU_P1_LINK_SPEED_SUPPORTED_DEPTH)) {
		return("IBU_P1_LINK_SPEED_SUPPORTED");
	}
	if ((addr >= IBU_P1_PORT_PHYSICAL_STATE_ADDR) &&
	    (addr <  IBU_P1_PORT_PHYSICAL_STATE_ADDR + 
	             IBU_P1_PORT_PHYSICAL_STATE_STRIDE * 
	             IBU_P1_PORT_PHYSICAL_STATE_DEPTH)) {
		return("IBU_P1_PORT_PHYSICAL_STATE");
	}
	if ((addr >= IBU_P1_LINK_DOWN_DEFAULT_STATE_ADDR) &&
	    (addr <  IBU_P1_LINK_DOWN_DEFAULT_STATE_ADDR + 
	             IBU_P1_LINK_DOWN_DEFAULT_STATE_STRIDE * 
	             IBU_P1_LINK_DOWN_DEFAULT_STATE_DEPTH)) {
		return("IBU_P1_LINK_DOWN_DEFAULT_STATE");
	}
	if ((addr >= IBU_P1_LINK_SPEED_ACTIVE_ADDR) &&
	    (addr <  IBU_P1_LINK_SPEED_ACTIVE_ADDR + 
	             IBU_P1_LINK_SPEED_ACTIVE_STRIDE * 
	             IBU_P1_LINK_SPEED_ACTIVE_DEPTH)) {
		return("IBU_P1_LINK_SPEED_ACTIVE");
	}
	if ((addr >= IBU_P1_LINK_SPEED_ENABLED_ADDR) &&
	    (addr <  IBU_P1_LINK_SPEED_ENABLED_ADDR + 
	             IBU_P1_LINK_SPEED_ENABLED_STRIDE * 
	             IBU_P1_LINK_SPEED_ENABLED_DEPTH)) {
		return("IBU_P1_LINK_SPEED_ENABLED");
	}
	if ((addr >= IBU_P1_PCPHY_CNT_RST_ADDR) &&
	    (addr <  IBU_P1_PCPHY_CNT_RST_ADDR + 
	             IBU_P1_PCPHY_CNT_RST_STRIDE * 
	             IBU_P1_PCPHY_CNT_RST_DEPTH)) {
		return("IBU_P1_PCPHY_CNT_RST");
	}
	if ((addr >= IBU_P1_PCPHY_CNT_LOAD_ADDR) &&
	    (addr <  IBU_P1_PCPHY_CNT_LOAD_ADDR + 
	             IBU_P1_PCPHY_CNT_LOAD_STRIDE * 
	             IBU_P1_PCPHY_CNT_LOAD_DEPTH)) {
		return("IBU_P1_PCPHY_CNT_LOAD");
	}
	if ((addr >= IBU_P1_PCSYMB_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCSYMB_ERR_CNT_ADDR + 
	             IBU_P1_PCSYMB_ERR_CNT_STRIDE * 
	             IBU_P1_PCSYMB_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCSYMB_ERR_CNT");
	}
	if ((addr >= IBU_P1_PCLINK_ERR_REC_CNT_ADDR) &&
	    (addr <  IBU_P1_PCLINK_ERR_REC_CNT_ADDR + 
	             IBU_P1_PCLINK_ERR_REC_CNT_STRIDE * 
	             IBU_P1_PCLINK_ERR_REC_CNT_DEPTH)) {
		return("IBU_P1_PCLINK_ERR_REC_CNT");
	}
	if ((addr >= IBU_P1_PCLINK_DOWNED_CNT_ADDR) &&
	    (addr <  IBU_P1_PCLINK_DOWNED_CNT_ADDR + 
	             IBU_P1_PCLINK_DOWNED_CNT_STRIDE * 
	             IBU_P1_PCLINK_DOWNED_CNT_DEPTH)) {
		return("IBU_P1_PCLINK_DOWNED_CNT");
	}
	if ((addr >= IBU_P1_PCSYMB_ERR_CNT_LANE0_ADDR) &&
	    (addr <  IBU_P1_PCSYMB_ERR_CNT_LANE0_ADDR + 
	             IBU_P1_PCSYMB_ERR_CNT_LANE0_STRIDE * 
	             IBU_P1_PCSYMB_ERR_CNT_LANE0_DEPTH)) {
		return("IBU_P1_PCSYMB_ERR_CNT_LANE0");
	}
	if ((addr >= IBU_P1_PCSYMB_ERR_CNT_LANE1_ADDR) &&
	    (addr <  IBU_P1_PCSYMB_ERR_CNT_LANE1_ADDR + 
	             IBU_P1_PCSYMB_ERR_CNT_LANE1_STRIDE * 
	             IBU_P1_PCSYMB_ERR_CNT_LANE1_DEPTH)) {
		return("IBU_P1_PCSYMB_ERR_CNT_LANE1");
	}
	if ((addr >= IBU_P1_PCSYMB_ERR_CNT_LANE2_ADDR) &&
	    (addr <  IBU_P1_PCSYMB_ERR_CNT_LANE2_ADDR + 
	             IBU_P1_PCSYMB_ERR_CNT_LANE2_STRIDE * 
	             IBU_P1_PCSYMB_ERR_CNT_LANE2_DEPTH)) {
		return("IBU_P1_PCSYMB_ERR_CNT_LANE2");
	}
	if ((addr >= IBU_P1_PCSYMB_ERR_CNT_LANE3_ADDR) &&
	    (addr <  IBU_P1_PCSYMB_ERR_CNT_LANE3_ADDR + 
	             IBU_P1_PCSYMB_ERR_CNT_LANE3_STRIDE * 
	             IBU_P1_PCSYMB_ERR_CNT_LANE3_DEPTH)) {
		return("IBU_P1_PCSYMB_ERR_CNT_LANE3");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT0_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT0_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT0_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT0_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT0_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT1_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT1_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT1_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT1_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT1_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT2_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT2_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT2_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT2_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT2_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT3_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT3_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT3_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT3_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT3_COUNTER");
	}
	if ((addr >= IBU_P1_PHY_ALIGN_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P1_PHY_ALIGN_ERROR_CNT_ADDR + 
	             IBU_P1_PHY_ALIGN_ERROR_CNT_STRIDE * 
	             IBU_P1_PHY_ALIGN_ERROR_CNT_DEPTH)) {
		return("IBU_P1_PHY_ALIGN_ERROR_CNT");
	}
	if ((addr >= IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT_ADDR + 
	             IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT_STRIDE * 
	             IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT_DEPTH)) {
		return("IBU_P1_PHY_CNTRL_IN_PKT_ERROR_CNT");
	}
	if ((addr >= IBU_P1_PHY_PAD_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P1_PHY_PAD_ERROR_CNT_ADDR + 
	             IBU_P1_PHY_PAD_ERROR_CNT_STRIDE * 
	             IBU_P1_PHY_PAD_ERROR_CNT_DEPTH)) {
		return("IBU_P1_PHY_PAD_ERROR_CNT");
	}
	if ((addr >= IBU_P1_PHY_EDR_FDR_CONFIG0_ADDR) &&
	    (addr <  IBU_P1_PHY_EDR_FDR_CONFIG0_ADDR + 
	             IBU_P1_PHY_EDR_FDR_CONFIG0_STRIDE * 
	             IBU_P1_PHY_EDR_FDR_CONFIG0_DEPTH)) {
		return("IBU_P1_PHY_EDR_FDR_CONFIG0");
	}
	if ((addr >= IBU_P1_PHY_EDR_FDR_CONFIG1_ADDR) &&
	    (addr <  IBU_P1_PHY_EDR_FDR_CONFIG1_ADDR + 
	             IBU_P1_PHY_EDR_FDR_CONFIG1_STRIDE * 
	             IBU_P1_PHY_EDR_FDR_CONFIG1_DEPTH)) {
		return("IBU_P1_PHY_EDR_FDR_CONFIG1");
	}
	if ((addr >= IBU_P1_PHY_LEAKY_BKT_THRSH_ADDR) &&
	    (addr <  IBU_P1_PHY_LEAKY_BKT_THRSH_ADDR + 
	             IBU_P1_PHY_LEAKY_BKT_THRSH_STRIDE * 
	             IBU_P1_PHY_LEAKY_BKT_THRSH_DEPTH)) {
		return("IBU_P1_PHY_LEAKY_BKT_THRSH");
	}
	if ((addr >= IBU_P1_RCV_TS3_STATUS_LOW_ADDR) &&
	    (addr <  IBU_P1_RCV_TS3_STATUS_LOW_ADDR + 
	             IBU_P1_RCV_TS3_STATUS_LOW_STRIDE * 
	             IBU_P1_RCV_TS3_STATUS_LOW_DEPTH)) {
		return("IBU_P1_RCV_TS3_STATUS_LOW");
	}
	if ((addr >= IBU_P1_RCV_TS3_STATUS_HIGH_ADDR) &&
	    (addr <  IBU_P1_RCV_TS3_STATUS_HIGH_ADDR + 
	             IBU_P1_RCV_TS3_STATUS_HIGH_STRIDE * 
	             IBU_P1_RCV_TS3_STATUS_HIGH_DEPTH)) {
		return("IBU_P1_RCV_TS3_STATUS_HIGH");
	}
	if ((addr >= IBU_P1_GUID0_ADDR) &&
	    (addr <  IBU_P1_GUID0_ADDR + 
	             IBU_P1_GUID0_STRIDE * 
	             IBU_P1_GUID0_DEPTH)) {
		return("IBU_P1_GUID0");
	}
	if ((addr >= IBU_P1_GUID1_ADDR) &&
	    (addr <  IBU_P1_GUID1_ADDR + 
	             IBU_P1_GUID1_STRIDE * 
	             IBU_P1_GUID1_DEPTH)) {
		return("IBU_P1_GUID1");
	}
	if ((addr >= IBU_P1_PNUM_ADDR) &&
	    (addr <  IBU_P1_PNUM_ADDR + 
	             IBU_P1_PNUM_STRIDE * 
	             IBU_P1_PNUM_DEPTH)) {
		return("IBU_P1_PNUM");
	}
	if ((addr >= IBU_P1_CNT4MS_ADDR) &&
	    (addr <  IBU_P1_CNT4MS_ADDR + 
	             IBU_P1_CNT4MS_STRIDE * 
	             IBU_P1_CNT4MS_DEPTH)) {
		return("IBU_P1_CNT4MS");
	}
	if ((addr >= IBU_P1_CNT36MS_ADDR) &&
	    (addr <  IBU_P1_CNT36MS_ADDR + 
	             IBU_P1_CNT36MS_STRIDE * 
	             IBU_P1_CNT36MS_DEPTH)) {
		return("IBU_P1_CNT36MS");
	}
	if ((addr >= IBU_P1_PHY_TS3_CONFIG_ADDR) &&
	    (addr <  IBU_P1_PHY_TS3_CONFIG_ADDR + 
	             IBU_P1_PHY_TS3_CONFIG_STRIDE * 
	             IBU_P1_PHY_TS3_CONFIG_DEPTH)) {
		return("IBU_P1_PHY_TS3_CONFIG");
	}
	if ((addr >= IBU_P1_DDS_WINDOW_START_ADDR) &&
	    (addr <  IBU_P1_DDS_WINDOW_START_ADDR + 
	             IBU_P1_DDS_WINDOW_START_STRIDE * 
	             IBU_P1_DDS_WINDOW_START_DEPTH)) {
		return("IBU_P1_DDS_WINDOW_START");
	}
	if ((addr >= IBU_P1_DDS_WINDOW_END_ADDR) &&
	    (addr <  IBU_P1_DDS_WINDOW_END_ADDR + 
	             IBU_P1_DDS_WINDOW_END_STRIDE * 
	             IBU_P1_DDS_WINDOW_END_DEPTH)) {
		return("IBU_P1_DDS_WINDOW_END");
	}
	if ((addr >= IBU_P1_DDS_DEFAULT_WINDOW_END_ADDR) &&
	    (addr <  IBU_P1_DDS_DEFAULT_WINDOW_END_ADDR + 
	             IBU_P1_DDS_DEFAULT_WINDOW_END_STRIDE * 
	             IBU_P1_DDS_DEFAULT_WINDOW_END_DEPTH)) {
		return("IBU_P1_DDS_DEFAULT_WINDOW_END");
	}
	if ((addr >= IBU_P1_RX_TS3DDS_STATUS_ADDR) &&
	    (addr <  IBU_P1_RX_TS3DDS_STATUS_ADDR + 
	             IBU_P1_RX_TS3DDS_STATUS_STRIDE * 
	             IBU_P1_RX_TS3DDS_STATUS_DEPTH)) {
		return("IBU_P1_RX_TS3DDS_STATUS");
	}
	if ((addr >= IBU_P1_TX_TS3DDS_STATUS_ADDR) &&
	    (addr <  IBU_P1_TX_TS3DDS_STATUS_ADDR + 
	             IBU_P1_TX_TS3DDS_STATUS_STRIDE * 
	             IBU_P1_TX_TS3DDS_STATUS_DEPTH)) {
		return("IBU_P1_TX_TS3DDS_STATUS");
	}
	if ((addr >= IBU_P1_CNT16MS_ADDR) &&
	    (addr <  IBU_P1_CNT16MS_ADDR + 
	             IBU_P1_CNT16MS_STRIDE * 
	             IBU_P1_CNT16MS_DEPTH)) {
		return("IBU_P1_CNT16MS");
	}
	if ((addr >= IBU_P1_CONF_TEST4MS_SCT_ADDR) &&
	    (addr <  IBU_P1_CONF_TEST4MS_SCT_ADDR + 
	             IBU_P1_CONF_TEST4MS_SCT_STRIDE * 
	             IBU_P1_CONF_TEST4MS_SCT_DEPTH)) {
		return("IBU_P1_CONF_TEST4MS_SCT");
	}
	if ((addr >= IBU_P1_CONF_TEST16MS_SCT_ADDR) &&
	    (addr <  IBU_P1_CONF_TEST16MS_SCT_ADDR + 
	             IBU_P1_CONF_TEST16MS_SCT_STRIDE * 
	             IBU_P1_CONF_TEST16MS_SCT_DEPTH)) {
		return("IBU_P1_CONF_TEST16MS_SCT");
	}
	if ((addr >= IBU_P1_LOCAL_ADDTEST_LIMIT_ADDR) &&
	    (addr <  IBU_P1_LOCAL_ADDTEST_LIMIT_ADDR + 
	             IBU_P1_LOCAL_ADDTEST_LIMIT_STRIDE * 
	             IBU_P1_LOCAL_ADDTEST_LIMIT_DEPTH)) {
		return("IBU_P1_LOCAL_ADDTEST_LIMIT");
	}
	if ((addr >= IBU_P1_REMOTE_ADDTEST_LIMIT_ADDR) &&
	    (addr <  IBU_P1_REMOTE_ADDTEST_LIMIT_ADDR + 
	             IBU_P1_REMOTE_ADDTEST_LIMIT_STRIDE * 
	             IBU_P1_REMOTE_ADDTEST_LIMIT_DEPTH)) {
		return("IBU_P1_REMOTE_ADDTEST_LIMIT");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT4_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT4_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT4_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT4_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT4_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT5_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT5_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT5_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT5_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT5_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT6_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT6_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT6_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT6_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT6_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT7_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT7_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT7_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT7_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT7_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT8_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT8_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT8_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT8_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT8_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT9_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT9_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT9_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT9_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT9_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT10_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT10_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT10_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT10_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT10_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT11_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT11_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT11_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT11_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT11_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT12_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT12_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT12_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT12_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT12_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT13_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT13_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT13_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT13_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT13_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT14_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT14_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT14_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT14_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT14_COUNTER");
	}
	if ((addr >= IBU_P1_TS3_REV1_TT15_COUNTER_ADDR) &&
	    (addr <  IBU_P1_TS3_REV1_TT15_COUNTER_ADDR + 
	             IBU_P1_TS3_REV1_TT15_COUNTER_STRIDE * 
	             IBU_P1_TS3_REV1_TT15_COUNTER_DEPTH)) {
		return("IBU_P1_TS3_REV1_TT15_COUNTER");
	}
	if ((addr >= IBU_P1_CONF_TEST_LANE_ERROR_LIMIT_ADDR) &&
	    (addr <  IBU_P1_CONF_TEST_LANE_ERROR_LIMIT_ADDR + 
	             IBU_P1_CONF_TEST_LANE_ERROR_LIMIT_STRIDE * 
	             IBU_P1_CONF_TEST_LANE_ERROR_LIMIT_DEPTH)) {
		return("IBU_P1_CONF_TEST_LANE_ERROR_LIMIT");
	}
	if ((addr >= IBU_P1_CONF_TEST_IDLE_LIMIT_ADDR) &&
	    (addr <  IBU_P1_CONF_TEST_IDLE_LIMIT_ADDR + 
	             IBU_P1_CONF_TEST_IDLE_LIMIT_STRIDE * 
	             IBU_P1_CONF_TEST_IDLE_LIMIT_DEPTH)) {
		return("IBU_P1_CONF_TEST_IDLE_LIMIT");
	}
	if ((addr >= IBU_P1_CONF_TEST2MS_SCT_ADDR) &&
	    (addr <  IBU_P1_CONF_TEST2MS_SCT_ADDR + 
	             IBU_P1_CONF_TEST2MS_SCT_STRIDE * 
	             IBU_P1_CONF_TEST2MS_SCT_DEPTH)) {
		return("IBU_P1_CONF_TEST2MS_SCT");
	}
	if ((addr >= IBU_P1_CNT100_MS_HBR_ADDR) &&
	    (addr <  IBU_P1_CNT100_MS_HBR_ADDR + 
	             IBU_P1_CNT100_MS_HBR_STRIDE * 
	             IBU_P1_CNT100_MS_HBR_DEPTH)) {
		return("IBU_P1_CNT100_MS_HBR");
	}
	if ((addr >= IBU_P1_PMAEQULANE0_STATUS_ADDR) &&
	    (addr <  IBU_P1_PMAEQULANE0_STATUS_ADDR + 
	             IBU_P1_PMAEQULANE0_STATUS_STRIDE * 
	             IBU_P1_PMAEQULANE0_STATUS_DEPTH)) {
		return("IBU_P1_PMAEQULANE0_STATUS");
	}
	if ((addr >= IBU_P1_PMAEQULANE1_STATUS_ADDR) &&
	    (addr <  IBU_P1_PMAEQULANE1_STATUS_ADDR + 
	             IBU_P1_PMAEQULANE1_STATUS_STRIDE * 
	             IBU_P1_PMAEQULANE1_STATUS_DEPTH)) {
		return("IBU_P1_PMAEQULANE1_STATUS");
	}
	if ((addr >= IBU_P1_PMAEQULANE2_STATUS_ADDR) &&
	    (addr <  IBU_P1_PMAEQULANE2_STATUS_ADDR + 
	             IBU_P1_PMAEQULANE2_STATUS_STRIDE * 
	             IBU_P1_PMAEQULANE2_STATUS_DEPTH)) {
		return("IBU_P1_PMAEQULANE2_STATUS");
	}
	if ((addr >= IBU_P1_PMAEQULANE3_STATUS_ADDR) &&
	    (addr <  IBU_P1_PMAEQULANE3_STATUS_ADDR + 
	             IBU_P1_PMAEQULANE3_STATUS_STRIDE * 
	             IBU_P1_PMAEQULANE3_STATUS_DEPTH)) {
		return("IBU_P1_PMAEQULANE3_STATUS");
	}
	if ((addr >= IBU_P1_PMADDSLANE0_STATUS_ADDR) &&
	    (addr <  IBU_P1_PMADDSLANE0_STATUS_ADDR + 
	             IBU_P1_PMADDSLANE0_STATUS_STRIDE * 
	             IBU_P1_PMADDSLANE0_STATUS_DEPTH)) {
		return("IBU_P1_PMADDSLANE0_STATUS");
	}
	if ((addr >= IBU_P1_PMADDSLANE1_STATUS_ADDR) &&
	    (addr <  IBU_P1_PMADDSLANE1_STATUS_ADDR + 
	             IBU_P1_PMADDSLANE1_STATUS_STRIDE * 
	             IBU_P1_PMADDSLANE1_STATUS_DEPTH)) {
		return("IBU_P1_PMADDSLANE1_STATUS");
	}
	if ((addr >= IBU_P1_PMADDSLANE2_STATUS_ADDR) &&
	    (addr <  IBU_P1_PMADDSLANE2_STATUS_ADDR + 
	             IBU_P1_PMADDSLANE2_STATUS_STRIDE * 
	             IBU_P1_PMADDSLANE2_STATUS_DEPTH)) {
		return("IBU_P1_PMADDSLANE2_STATUS");
	}
	if ((addr >= IBU_P1_PMADDSLANE3_STATUS_ADDR) &&
	    (addr <  IBU_P1_PMADDSLANE3_STATUS_ADDR + 
	             IBU_P1_PMADDSLANE3_STATUS_STRIDE * 
	             IBU_P1_PMADDSLANE3_STATUS_DEPTH)) {
		return("IBU_P1_PMADDSLANE3_STATUS");
	}
	if ((addr >= IBU_P1_PHY_EDPL_ERR0_ADDR) &&
	    (addr <  IBU_P1_PHY_EDPL_ERR0_ADDR + 
	             IBU_P1_PHY_EDPL_ERR0_STRIDE * 
	             IBU_P1_PHY_EDPL_ERR0_DEPTH)) {
		return("IBU_P1_PHY_EDPL_ERR0");
	}
	if ((addr >= IBU_P1_PHY_EDPL_ERR1_ADDR) &&
	    (addr <  IBU_P1_PHY_EDPL_ERR1_ADDR + 
	             IBU_P1_PHY_EDPL_ERR1_STRIDE * 
	             IBU_P1_PHY_EDPL_ERR1_DEPTH)) {
		return("IBU_P1_PHY_EDPL_ERR1");
	}
	if ((addr >= IBU_P1_PHY_EDPL_ERR2_ADDR) &&
	    (addr <  IBU_P1_PHY_EDPL_ERR2_ADDR + 
	             IBU_P1_PHY_EDPL_ERR2_STRIDE * 
	             IBU_P1_PHY_EDPL_ERR2_DEPTH)) {
		return("IBU_P1_PHY_EDPL_ERR2");
	}
	if ((addr >= IBU_P1_PHY_EDPL_ERR3_ADDR) &&
	    (addr <  IBU_P1_PHY_EDPL_ERR3_ADDR + 
	             IBU_P1_PHY_EDPL_ERR3_STRIDE * 
	             IBU_P1_PHY_EDPL_ERR3_DEPTH)) {
		return("IBU_P1_PHY_EDPL_ERR3");
	}
	if ((addr >= IBU_P1_PHY_BLK_TYPE_ERR_ADDR) &&
	    (addr <  IBU_P1_PHY_BLK_TYPE_ERR_ADDR + 
	             IBU_P1_PHY_BLK_TYPE_ERR_STRIDE * 
	             IBU_P1_PHY_BLK_TYPE_ERR_DEPTH)) {
		return("IBU_P1_PHY_BLK_TYPE_ERR");
	}
	if ((addr >= IBU_P1_PHY_BLK_EOP_ERR_ADDR) &&
	    (addr <  IBU_P1_PHY_BLK_EOP_ERR_ADDR + 
	             IBU_P1_PHY_BLK_EOP_ERR_STRIDE * 
	             IBU_P1_PHY_BLK_EOP_ERR_DEPTH)) {
		return("IBU_P1_PHY_BLK_EOP_ERR");
	}
	if ((addr >= IBU_P1_PHY_CIN_PKT_ERR_ADDR) &&
	    (addr <  IBU_P1_PHY_CIN_PKT_ERR_ADDR + 
	             IBU_P1_PHY_CIN_PKT_ERR_STRIDE * 
	             IBU_P1_PHY_CIN_PKT_ERR_DEPTH)) {
		return("IBU_P1_PHY_CIN_PKT_ERR");
	}
	if ((addr >= IBU_P1_PHY_SYN_HDR_ERR_ADDR) &&
	    (addr <  IBU_P1_PHY_SYN_HDR_ERR_ADDR + 
	             IBU_P1_PHY_SYN_HDR_ERR_STRIDE * 
	             IBU_P1_PHY_SYN_HDR_ERR_DEPTH)) {
		return("IBU_P1_PHY_SYN_HDR_ERR");
	}
	if ((addr >= IBU_P1_PHY_PRBS_ERR0_ADDR) &&
	    (addr <  IBU_P1_PHY_PRBS_ERR0_ADDR + 
	             IBU_P1_PHY_PRBS_ERR0_STRIDE * 
	             IBU_P1_PHY_PRBS_ERR0_DEPTH)) {
		return("IBU_P1_PHY_PRBS_ERR0");
	}
	if ((addr >= IBU_P1_PHY_PRBS_ERR1_ADDR) &&
	    (addr <  IBU_P1_PHY_PRBS_ERR1_ADDR + 
	             IBU_P1_PHY_PRBS_ERR1_STRIDE * 
	             IBU_P1_PHY_PRBS_ERR1_DEPTH)) {
		return("IBU_P1_PHY_PRBS_ERR1");
	}
	if ((addr >= IBU_P1_PHY_PRBS_ERR2_ADDR) &&
	    (addr <  IBU_P1_PHY_PRBS_ERR2_ADDR + 
	             IBU_P1_PHY_PRBS_ERR2_STRIDE * 
	             IBU_P1_PHY_PRBS_ERR2_DEPTH)) {
		return("IBU_P1_PHY_PRBS_ERR2");
	}
	if ((addr >= IBU_P1_PHY_PRBS_ERR3_ADDR) &&
	    (addr <  IBU_P1_PHY_PRBS_ERR3_ADDR + 
	             IBU_P1_PHY_PRBS_ERR3_STRIDE * 
	             IBU_P1_PHY_PRBS_ERR3_DEPTH)) {
		return("IBU_P1_PHY_PRBS_ERR3");
	}
	if ((addr >= IBU_P1_PHY_DESKEW_STATUS_ADDR) &&
	    (addr <  IBU_P1_PHY_DESKEW_STATUS_ADDR + 
	             IBU_P1_PHY_DESKEW_STATUS_STRIDE * 
	             IBU_P1_PHY_DESKEW_STATUS_DEPTH)) {
		return("IBU_P1_PHY_DESKEW_STATUS");
	}
	if ((addr >= IBU_P1_PHY_FECUNC_ERR0_ADDR) &&
	    (addr <  IBU_P1_PHY_FECUNC_ERR0_ADDR + 
	             IBU_P1_PHY_FECUNC_ERR0_STRIDE * 
	             IBU_P1_PHY_FECUNC_ERR0_DEPTH)) {
		return("IBU_P1_PHY_FECUNC_ERR0");
	}
	if ((addr >= IBU_P1_PHY_FECUNC_ERR1_ADDR) &&
	    (addr <  IBU_P1_PHY_FECUNC_ERR1_ADDR + 
	             IBU_P1_PHY_FECUNC_ERR1_STRIDE * 
	             IBU_P1_PHY_FECUNC_ERR1_DEPTH)) {
		return("IBU_P1_PHY_FECUNC_ERR1");
	}
	if ((addr >= IBU_P1_PHY_FECUNC_ERR2_ADDR) &&
	    (addr <  IBU_P1_PHY_FECUNC_ERR2_ADDR + 
	             IBU_P1_PHY_FECUNC_ERR2_STRIDE * 
	             IBU_P1_PHY_FECUNC_ERR2_DEPTH)) {
		return("IBU_P1_PHY_FECUNC_ERR2");
	}
	if ((addr >= IBU_P1_PHY_FECUNC_ERR3_ADDR) &&
	    (addr <  IBU_P1_PHY_FECUNC_ERR3_ADDR + 
	             IBU_P1_PHY_FECUNC_ERR3_STRIDE * 
	             IBU_P1_PHY_FECUNC_ERR3_DEPTH)) {
		return("IBU_P1_PHY_FECUNC_ERR3");
	}
	if ((addr >= IBU_P1_PHY_FECCOR_ERR0_ADDR) &&
	    (addr <  IBU_P1_PHY_FECCOR_ERR0_ADDR + 
	             IBU_P1_PHY_FECCOR_ERR0_STRIDE * 
	             IBU_P1_PHY_FECCOR_ERR0_DEPTH)) {
		return("IBU_P1_PHY_FECCOR_ERR0");
	}
	if ((addr >= IBU_P1_PHY_FECCOR_ERR1_ADDR) &&
	    (addr <  IBU_P1_PHY_FECCOR_ERR1_ADDR + 
	             IBU_P1_PHY_FECCOR_ERR1_STRIDE * 
	             IBU_P1_PHY_FECCOR_ERR1_DEPTH)) {
		return("IBU_P1_PHY_FECCOR_ERR1");
	}
	if ((addr >= IBU_P1_PHY_FECCOR_ERR2_ADDR) &&
	    (addr <  IBU_P1_PHY_FECCOR_ERR2_ADDR + 
	             IBU_P1_PHY_FECCOR_ERR2_STRIDE * 
	             IBU_P1_PHY_FECCOR_ERR2_DEPTH)) {
		return("IBU_P1_PHY_FECCOR_ERR2");
	}
	if ((addr >= IBU_P1_PHY_FECCOR_ERR3_ADDR) &&
	    (addr <  IBU_P1_PHY_FECCOR_ERR3_ADDR + 
	             IBU_P1_PHY_FECCOR_ERR3_STRIDE * 
	             IBU_P1_PHY_FECCOR_ERR3_DEPTH)) {
		return("IBU_P1_PHY_FECCOR_ERR3");
	}
	if ((addr >= IBU_P1_PHY_SMSTATUS_ADDR) &&
	    (addr <  IBU_P1_PHY_SMSTATUS_ADDR + 
	             IBU_P1_PHY_SMSTATUS_STRIDE * 
	             IBU_P1_PHY_SMSTATUS_DEPTH)) {
		return("IBU_P1_PHY_SMSTATUS");
	}
	if ((addr >= IBU_P1_PHY_TS3_NEGOTIATED_STATUS_ADDR) &&
	    (addr <  IBU_P1_PHY_TS3_NEGOTIATED_STATUS_ADDR + 
	             IBU_P1_PHY_TS3_NEGOTIATED_STATUS_STRIDE * 
	             IBU_P1_PHY_TS3_NEGOTIATED_STATUS_DEPTH)) {
		return("IBU_P1_PHY_TS3_NEGOTIATED_STATUS");
	}
	if ((addr >= IBU_P1_PHY_TEST_ADDR) &&
	    (addr <  IBU_P1_PHY_TEST_ADDR + 
	             IBU_P1_PHY_TEST_STRIDE * 
	             IBU_P1_PHY_TEST_DEPTH)) {
		return("IBU_P1_PHY_TEST");
	}
	if ((addr >= IBU_P1_EDR_FDR_RX_STATUS_REG0_ADDR) &&
	    (addr <  IBU_P1_EDR_FDR_RX_STATUS_REG0_ADDR + 
	             IBU_P1_EDR_FDR_RX_STATUS_REG0_STRIDE * 
	             IBU_P1_EDR_FDR_RX_STATUS_REG0_DEPTH)) {
		return("IBU_P1_EDR_FDR_RX_STATUS_REG0");
	}
	if ((addr >= IBU_P1_EDR_FDR_RX_STATUS_REG1_ADDR) &&
	    (addr <  IBU_P1_EDR_FDR_RX_STATUS_REG1_ADDR + 
	             IBU_P1_EDR_FDR_RX_STATUS_REG1_STRIDE * 
	             IBU_P1_EDR_FDR_RX_STATUS_REG1_DEPTH)) {
		return("IBU_P1_EDR_FDR_RX_STATUS_REG1");
	}
	if ((addr >= IBU_P1_EDR_FDR_RX_STATUS_REG2_ADDR) &&
	    (addr <  IBU_P1_EDR_FDR_RX_STATUS_REG2_ADDR + 
	             IBU_P1_EDR_FDR_RX_STATUS_REG2_STRIDE * 
	             IBU_P1_EDR_FDR_RX_STATUS_REG2_DEPTH)) {
		return("IBU_P1_EDR_FDR_RX_STATUS_REG2");
	}
	if ((addr >= IBU_P1_EDR_FDR_TX_STATUS_REG0_ADDR) &&
	    (addr <  IBU_P1_EDR_FDR_TX_STATUS_REG0_ADDR + 
	             IBU_P1_EDR_FDR_TX_STATUS_REG0_STRIDE * 
	             IBU_P1_EDR_FDR_TX_STATUS_REG0_DEPTH)) {
		return("IBU_P1_EDR_FDR_TX_STATUS_REG0");
	}
	if ((addr >= IBU_P1_INT_PRIORITY_ADDR) &&
	    (addr <  IBU_P1_INT_PRIORITY_ADDR + 
	             IBU_P1_INT_PRIORITY_STRIDE * 
	             IBU_P1_INT_PRIORITY_DEPTH)) {
		return("IBU_P1_INT_PRIORITY");
	}
	if ((addr >= IBU_P1_INT_FATAL_ADDR) &&
	    (addr <  IBU_P1_INT_FATAL_ADDR + 
	             IBU_P1_INT_FATAL_STRIDE * 
	             IBU_P1_INT_FATAL_DEPTH)) {
		return("IBU_P1_INT_FATAL");
	}
	if ((addr >= IBU_P1_LINK_ROUND_TRIP_LATENCY_ADDR) &&
	    (addr <  IBU_P1_LINK_ROUND_TRIP_LATENCY_ADDR + 
	             IBU_P1_LINK_ROUND_TRIP_LATENCY_STRIDE * 
	             IBU_P1_LINK_ROUND_TRIP_LATENCY_DEPTH)) {
		return("IBU_P1_LINK_ROUND_TRIP_LATENCY");
	}
	if ((addr >= IBU_P1_PHY_FORCE_LEGACY_MODE_ADDR) &&
	    (addr <  IBU_P1_PHY_FORCE_LEGACY_MODE_ADDR + 
	             IBU_P1_PHY_FORCE_LEGACY_MODE_STRIDE * 
	             IBU_P1_PHY_FORCE_LEGACY_MODE_DEPTH)) {
		return("IBU_P1_PHY_FORCE_LEGACY_MODE");
	}
	if ((addr >= IBU_P1_LID_ADDR) &&
	    (addr <  IBU_P1_LID_ADDR + 
	             IBU_P1_LID_STRIDE * 
	             IBU_P1_LID_DEPTH)) {
		return("IBU_P1_LID");
	}
	if ((addr >= IBU_P1_LMC_ADDR) &&
	    (addr <  IBU_P1_LMC_ADDR + 
	             IBU_P1_LMC_STRIDE * 
	             IBU_P1_LMC_DEPTH)) {
		return("IBU_P1_LMC");
	}
	if ((addr >= IBU_P1_PORT_STATE_ADDR) &&
	    (addr <  IBU_P1_PORT_STATE_ADDR + 
	             IBU_P1_PORT_STATE_STRIDE * 
	             IBU_P1_PORT_STATE_DEPTH)) {
		return("IBU_P1_PORT_STATE");
	}
	if ((addr >= IBU_P1_VLCAP_ADDR) &&
	    (addr <  IBU_P1_VLCAP_ADDR + 
	             IBU_P1_VLCAP_STRIDE * 
	             IBU_P1_VLCAP_DEPTH)) {
		return("IBU_P1_VLCAP");
	}
	if ((addr >= IBU_P1_NEIGHBOR_MTU_ADDR) &&
	    (addr <  IBU_P1_NEIGHBOR_MTU_ADDR + 
	             IBU_P1_NEIGHBOR_MTU_STRIDE * 
	             IBU_P1_NEIGHBOR_MTU_DEPTH)) {
		return("IBU_P1_NEIGHBOR_MTU");
	}
	if ((addr >= IBU_P1_VLHIGH_LIMIT_ADDR) &&
	    (addr <  IBU_P1_VLHIGH_LIMIT_ADDR + 
	             IBU_P1_VLHIGH_LIMIT_STRIDE * 
	             IBU_P1_VLHIGH_LIMIT_DEPTH)) {
		return("IBU_P1_VLHIGH_LIMIT");
	}
	if ((addr >= IBU_P1_VLARBITRATION_HIGH_CAP_ADDR) &&
	    (addr <  IBU_P1_VLARBITRATION_HIGH_CAP_ADDR + 
	             IBU_P1_VLARBITRATION_HIGH_CAP_STRIDE * 
	             IBU_P1_VLARBITRATION_HIGH_CAP_DEPTH)) {
		return("IBU_P1_VLARBITRATION_HIGH_CAP");
	}
	if ((addr >= IBU_P1_VLARBITRATION_LOW_CAP_ADDR) &&
	    (addr <  IBU_P1_VLARBITRATION_LOW_CAP_ADDR + 
	             IBU_P1_VLARBITRATION_LOW_CAP_STRIDE * 
	             IBU_P1_VLARBITRATION_LOW_CAP_DEPTH)) {
		return("IBU_P1_VLARBITRATION_LOW_CAP");
	}
	if ((addr >= IBU_P1_MTUCAP_ADDR) &&
	    (addr <  IBU_P1_MTUCAP_ADDR + 
	             IBU_P1_MTUCAP_STRIDE * 
	             IBU_P1_MTUCAP_DEPTH)) {
		return("IBU_P1_MTUCAP");
	}
	if ((addr >= IBU_P1_OPERATIONAL_VLS_ADDR) &&
	    (addr <  IBU_P1_OPERATIONAL_VLS_ADDR + 
	             IBU_P1_OPERATIONAL_VLS_STRIDE * 
	             IBU_P1_OPERATIONAL_VLS_DEPTH)) {
		return("IBU_P1_OPERATIONAL_VLS");
	}
	if ((addr >= IBU_P1_PCPORT_RCV_ERROR_ADDR) &&
	    (addr <  IBU_P1_PCPORT_RCV_ERROR_ADDR + 
	             IBU_P1_PCPORT_RCV_ERROR_STRIDE * 
	             IBU_P1_PCPORT_RCV_ERROR_DEPTH)) {
		return("IBU_P1_PCPORT_RCV_ERROR");
	}
	if ((addr >= IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_ADDR + 
	             IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_STRIDE * 
	             IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_DEPTH)) {
		return("IBU_P1_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_DISCARDS_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_DISCARDS_ADDR + 
	             IBU_P1_PCPORT_XMIT_DISCARDS_STRIDE * 
	             IBU_P1_PCPORT_XMIT_DISCARDS_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_DISCARDS");
	}
	if ((addr >= IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS_ADDR + 
	             IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS_STRIDE * 
	             IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS_DEPTH)) {
		return("IBU_P1_PCLOCAL_LINK_INTEGRITY_ERRORS");
	}
	if ((addr >= IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_ADDR + 
	             IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_STRIDE * 
	             IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_DEPTH)) {
		return("IBU_P1_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS");
	}
	if ((addr >= IBU_P1_PCVL15_DROPPED_ADDR) &&
	    (addr <  IBU_P1_PCVL15_DROPPED_ADDR + 
	             IBU_P1_PCVL15_DROPPED_STRIDE * 
	             IBU_P1_PCVL15_DROPPED_DEPTH)) {
		return("IBU_P1_PCVL15_DROPPED");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_DATA_LSQW_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_DATA_LSQW_ADDR + 
	             IBU_P1_PCPORT_XMIT_DATA_LSQW_STRIDE * 
	             IBU_P1_PCPORT_XMIT_DATA_LSQW_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_DATA_LSQW");
	}
	if ((addr >= IBU_P1_LINK_ERROR_CHECK_ENABLE_ADDR) &&
	    (addr <  IBU_P1_LINK_ERROR_CHECK_ENABLE_ADDR + 
	             IBU_P1_LINK_ERROR_CHECK_ENABLE_STRIDE * 
	             IBU_P1_LINK_ERROR_CHECK_ENABLE_DEPTH)) {
		return("IBU_P1_LINK_ERROR_CHECK_ENABLE");
	}
	if ((addr >= IBU_P1_PCPORT_RCV_DATA_LSQW_ADDR) &&
	    (addr <  IBU_P1_PCPORT_RCV_DATA_LSQW_ADDR + 
	             IBU_P1_PCPORT_RCV_DATA_LSQW_STRIDE * 
	             IBU_P1_PCPORT_RCV_DATA_LSQW_DEPTH)) {
		return("IBU_P1_PCPORT_RCV_DATA_LSQW");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_PKTS_LSQW_ADDR + 
	             IBU_P1_PCPORT_XMIT_PKTS_LSQW_STRIDE * 
	             IBU_P1_PCPORT_XMIT_PKTS_LSQW_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_PKTS_LSQW");
	}
	if ((addr >= IBU_P1_PCPORT_RCV_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P1_PCPORT_RCV_PKTS_LSQW_ADDR + 
	             IBU_P1_PCPORT_RCV_PKTS_LSQW_STRIDE * 
	             IBU_P1_PCPORT_RCV_PKTS_LSQW_DEPTH)) {
		return("IBU_P1_PCPORT_RCV_PKTS_LSQW");
	}
	if ((addr >= IBU_P1_PCPORT_UCXMIT_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P1_PCPORT_UCXMIT_PKTS_LSQW_ADDR + 
	             IBU_P1_PCPORT_UCXMIT_PKTS_LSQW_STRIDE * 
	             IBU_P1_PCPORT_UCXMIT_PKTS_LSQW_DEPTH)) {
		return("IBU_P1_PCPORT_UCXMIT_PKTS_LSQW");
	}
	if ((addr >= IBU_P1_PCPORT_MCXMIT_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P1_PCPORT_MCXMIT_PKTS_LSQW_ADDR + 
	             IBU_P1_PCPORT_MCXMIT_PKTS_LSQW_STRIDE * 
	             IBU_P1_PCPORT_MCXMIT_PKTS_LSQW_DEPTH)) {
		return("IBU_P1_PCPORT_MCXMIT_PKTS_LSQW");
	}
	if ((addr >= IBU_P1_PCPORT_UCRCV_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P1_PCPORT_UCRCV_PKTS_LSQW_ADDR + 
	             IBU_P1_PCPORT_UCRCV_PKTS_LSQW_STRIDE * 
	             IBU_P1_PCPORT_UCRCV_PKTS_LSQW_DEPTH)) {
		return("IBU_P1_PCPORT_UCRCV_PKTS_LSQW");
	}
	if ((addr >= IBU_P1_PCPORT_MCRCV_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P1_PCPORT_MCRCV_PKTS_LSQW_ADDR + 
	             IBU_P1_PCPORT_MCRCV_PKTS_LSQW_STRIDE * 
	             IBU_P1_PCPORT_MCRCV_PKTS_LSQW_DEPTH)) {
		return("IBU_P1_PCPORT_MCRCV_PKTS_LSQW");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL0_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL0_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL0_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL0_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL0");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL1_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL1_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL1_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL1_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL1");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL2_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL2_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL2_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL2_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL2");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL3_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL3_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL3_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL3_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL3");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL4_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL4_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL4_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL4_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL4");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL5_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL5_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL5_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL5_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL5");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL6_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL6_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL6_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL6_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL6");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL7_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL7_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL7_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL7_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL7");
	}
	if ((addr >= IBU_P1_PCPORT_XMIT_WAIT_VL15_ADDR) &&
	    (addr <  IBU_P1_PCPORT_XMIT_WAIT_VL15_ADDR + 
	             IBU_P1_PCPORT_XMIT_WAIT_VL15_STRIDE * 
	             IBU_P1_PCPORT_XMIT_WAIT_VL15_DEPTH)) {
		return("IBU_P1_PCPORT_XMIT_WAIT_VL15");
	}
	if ((addr >= IBU_P1_PCRX_LINK_CNT_RST_ADDR) &&
	    (addr <  IBU_P1_PCRX_LINK_CNT_RST_ADDR + 
	             IBU_P1_PCRX_LINK_CNT_RST_STRIDE * 
	             IBU_P1_PCRX_LINK_CNT_RST_DEPTH)) {
		return("IBU_P1_PCRX_LINK_CNT_RST");
	}
	if ((addr >= IBU_P1_PCRX_LINK_CNT_LOAD_ADDR) &&
	    (addr <  IBU_P1_PCRX_LINK_CNT_LOAD_ADDR + 
	             IBU_P1_PCRX_LINK_CNT_LOAD_STRIDE * 
	             IBU_P1_PCRX_LINK_CNT_LOAD_DEPTH)) {
		return("IBU_P1_PCRX_LINK_CNT_LOAD");
	}
	if ((addr >= IBU_P1_LOCAL_PHY_ERRORS_ADDR) &&
	    (addr <  IBU_P1_LOCAL_PHY_ERRORS_ADDR + 
	             IBU_P1_LOCAL_PHY_ERRORS_STRIDE * 
	             IBU_P1_LOCAL_PHY_ERRORS_DEPTH)) {
		return("IBU_P1_LOCAL_PHY_ERRORS");
	}
	if ((addr >= IBU_P1_OVERRUN_ERRORS_ADDR) &&
	    (addr <  IBU_P1_OVERRUN_ERRORS_ADDR + 
	             IBU_P1_OVERRUN_ERRORS_STRIDE * 
	             IBU_P1_OVERRUN_ERRORS_DEPTH)) {
		return("IBU_P1_OVERRUN_ERRORS");
	}
	if ((addr >= IBU_P1_PSLINK_DLID_ADDR) &&
	    (addr <  IBU_P1_PSLINK_DLID_ADDR + 
	             IBU_P1_PSLINK_DLID_STRIDE * 
	             IBU_P1_PSLINK_DLID_DEPTH)) {
		return("IBU_P1_PSLINK_DLID");
	}
	if ((addr >= IBU_P1_PSTICK_ADDR) &&
	    (addr <  IBU_P1_PSTICK_ADDR + 
	             IBU_P1_PSTICK_STRIDE * 
	             IBU_P1_PSTICK_DEPTH)) {
		return("IBU_P1_PSTICK");
	}
	if ((addr >= IBU_P1_PSSTATUS_ADDR) &&
	    (addr <  IBU_P1_PSSTATUS_ADDR + 
	             IBU_P1_PSSTATUS_STRIDE * 
	             IBU_P1_PSSTATUS_DEPTH)) {
		return("IBU_P1_PSSTATUS");
	}
	if ((addr >= IBU_P1_PSSTART_DELAY_ADDR) &&
	    (addr <  IBU_P1_PSSTART_DELAY_ADDR + 
	             IBU_P1_PSSTART_DELAY_STRIDE * 
	             IBU_P1_PSSTART_DELAY_DEPTH)) {
		return("IBU_P1_PSSTART_DELAY");
	}
	if ((addr >= IBU_P1_PSINTERVAL_ADDR) &&
	    (addr <  IBU_P1_PSINTERVAL_ADDR + 
	             IBU_P1_PSINTERVAL_STRIDE * 
	             IBU_P1_PSINTERVAL_DEPTH)) {
		return("IBU_P1_PSINTERVAL");
	}
	if ((addr >= IBU_P1_PSCNT_SEL0_ADDR) &&
	    (addr <  IBU_P1_PSCNT_SEL0_ADDR + 
	             IBU_P1_PSCNT_SEL0_STRIDE * 
	             IBU_P1_PSCNT_SEL0_DEPTH)) {
		return("IBU_P1_PSCNT_SEL0");
	}
	if ((addr >= IBU_P1_PSCNT_SEL1_ADDR) &&
	    (addr <  IBU_P1_PSCNT_SEL1_ADDR + 
	             IBU_P1_PSCNT_SEL1_STRIDE * 
	             IBU_P1_PSCNT_SEL1_DEPTH)) {
		return("IBU_P1_PSCNT_SEL1");
	}
	if ((addr >= IBU_P1_PSCNT_SEL2_ADDR) &&
	    (addr <  IBU_P1_PSCNT_SEL2_ADDR + 
	             IBU_P1_PSCNT_SEL2_STRIDE * 
	             IBU_P1_PSCNT_SEL2_DEPTH)) {
		return("IBU_P1_PSCNT_SEL2");
	}
	if ((addr >= IBU_P1_PSCNT_SEL3_ADDR) &&
	    (addr <  IBU_P1_PSCNT_SEL3_ADDR + 
	             IBU_P1_PSCNT_SEL3_STRIDE * 
	             IBU_P1_PSCNT_SEL3_DEPTH)) {
		return("IBU_P1_PSCNT_SEL3");
	}
	if ((addr >= IBU_P1_PSCNT0_ADDR) &&
	    (addr <  IBU_P1_PSCNT0_ADDR + 
	             IBU_P1_PSCNT0_STRIDE * 
	             IBU_P1_PSCNT0_DEPTH)) {
		return("IBU_P1_PSCNT0");
	}
	if ((addr >= IBU_P1_PSCNT1_ADDR) &&
	    (addr <  IBU_P1_PSCNT1_ADDR + 
	             IBU_P1_PSCNT1_STRIDE * 
	             IBU_P1_PSCNT1_DEPTH)) {
		return("IBU_P1_PSCNT1");
	}
	if ((addr >= IBU_P1_PSCNT2_ADDR) &&
	    (addr <  IBU_P1_PSCNT2_ADDR + 
	             IBU_P1_PSCNT2_STRIDE * 
	             IBU_P1_PSCNT2_DEPTH)) {
		return("IBU_P1_PSCNT2");
	}
	if ((addr >= IBU_P1_PSCNT3_ADDR) &&
	    (addr <  IBU_P1_PSCNT3_ADDR + 
	             IBU_P1_PSCNT3_STRIDE * 
	             IBU_P1_PSCNT3_DEPTH)) {
		return("IBU_P1_PSCNT3");
	}
	if ((addr >= IBU_P1_PSINIT_SAMPLING_ADDR) &&
	    (addr <  IBU_P1_PSINIT_SAMPLING_ADDR + 
	             IBU_P1_PSINIT_SAMPLING_STRIDE * 
	             IBU_P1_PSINIT_SAMPLING_DEPTH)) {
		return("IBU_P1_PSINIT_SAMPLING");
	}
	if ((addr >= IBU_P1_PSCNT_LOAD_ADDR) &&
	    (addr <  IBU_P1_PSCNT_LOAD_ADDR + 
	             IBU_P1_PSCNT_LOAD_STRIDE * 
	             IBU_P1_PSCNT_LOAD_DEPTH)) {
		return("IBU_P1_PSCNT_LOAD");
	}
	if ((addr >= IBU_P1_PORT_STATE_CHANGE_ADDR) &&
	    (addr <  IBU_P1_PORT_STATE_CHANGE_ADDR + 
	             IBU_P1_PORT_STATE_CHANGE_STRIDE * 
	             IBU_P1_PORT_STATE_CHANGE_DEPTH)) {
		return("IBU_P1_PORT_STATE_CHANGE");
	}
	if ((addr >= IBU_P1_TRAP_REGISTER_ADDR) &&
	    (addr <  IBU_P1_TRAP_REGISTER_ADDR + 
	             IBU_P1_TRAP_REGISTER_STRIDE * 
	             IBU_P1_TRAP_REGISTER_DEPTH)) {
		return("IBU_P1_TRAP_REGISTER");
	}
	if ((addr >= IBU_P1_LINK_VCONFIG0_ADDR) &&
	    (addr <  IBU_P1_LINK_VCONFIG0_ADDR + 
	             IBU_P1_LINK_VCONFIG0_STRIDE * 
	             IBU_P1_LINK_VCONFIG0_DEPTH)) {
		return("IBU_P1_LINK_VCONFIG0");
	}
	if ((addr >= IBU_P1_LINK_VCONFIG1_ADDR) &&
	    (addr <  IBU_P1_LINK_VCONFIG1_ADDR + 
	             IBU_P1_LINK_VCONFIG1_STRIDE * 
	             IBU_P1_LINK_VCONFIG1_DEPTH)) {
		return("IBU_P1_LINK_VCONFIG1");
	}
	if ((addr >= IBU_P1_LINK_VCONFIG2_ADDR) &&
	    (addr <  IBU_P1_LINK_VCONFIG2_ADDR + 
	             IBU_P1_LINK_VCONFIG2_STRIDE * 
	             IBU_P1_LINK_VCONFIG2_DEPTH)) {
		return("IBU_P1_LINK_VCONFIG2");
	}
	if ((addr >= IBU_P1_LINK_RX_CREDIT_VL1_0_ADDR) &&
	    (addr <  IBU_P1_LINK_RX_CREDIT_VL1_0_ADDR + 
	             IBU_P1_LINK_RX_CREDIT_VL1_0_STRIDE * 
	             IBU_P1_LINK_RX_CREDIT_VL1_0_DEPTH)) {
		return("IBU_P1_LINK_RX_CREDIT_VL1_0");
	}
	if ((addr >= IBU_P1_LINK_RX_CREDIT_VL3_2_ADDR) &&
	    (addr <  IBU_P1_LINK_RX_CREDIT_VL3_2_ADDR + 
	             IBU_P1_LINK_RX_CREDIT_VL3_2_STRIDE * 
	             IBU_P1_LINK_RX_CREDIT_VL3_2_DEPTH)) {
		return("IBU_P1_LINK_RX_CREDIT_VL3_2");
	}
	if ((addr >= IBU_P1_LINK_RX_CREDIT_VL5_4_ADDR) &&
	    (addr <  IBU_P1_LINK_RX_CREDIT_VL5_4_ADDR + 
	             IBU_P1_LINK_RX_CREDIT_VL5_4_STRIDE * 
	             IBU_P1_LINK_RX_CREDIT_VL5_4_DEPTH)) {
		return("IBU_P1_LINK_RX_CREDIT_VL5_4");
	}
	if ((addr >= IBU_P1_LINK_RX_CREDIT_VL7_6_ADDR) &&
	    (addr <  IBU_P1_LINK_RX_CREDIT_VL7_6_ADDR + 
	             IBU_P1_LINK_RX_CREDIT_VL7_6_STRIDE * 
	             IBU_P1_LINK_RX_CREDIT_VL7_6_DEPTH)) {
		return("IBU_P1_LINK_RX_CREDIT_VL7_6");
	}
	if ((addr >= IBU_P1_LINK_TX_CREDIT_VL1_0_ADDR) &&
	    (addr <  IBU_P1_LINK_TX_CREDIT_VL1_0_ADDR + 
	             IBU_P1_LINK_TX_CREDIT_VL1_0_STRIDE * 
	             IBU_P1_LINK_TX_CREDIT_VL1_0_DEPTH)) {
		return("IBU_P1_LINK_TX_CREDIT_VL1_0");
	}
	if ((addr >= IBU_P1_LINK_TX_CREDIT_VL3_2_ADDR) &&
	    (addr <  IBU_P1_LINK_TX_CREDIT_VL3_2_ADDR + 
	             IBU_P1_LINK_TX_CREDIT_VL3_2_STRIDE * 
	             IBU_P1_LINK_TX_CREDIT_VL3_2_DEPTH)) {
		return("IBU_P1_LINK_TX_CREDIT_VL3_2");
	}
	if ((addr >= IBU_P1_LINK_TX_CREDIT_VL5_4_ADDR) &&
	    (addr <  IBU_P1_LINK_TX_CREDIT_VL5_4_ADDR + 
	             IBU_P1_LINK_TX_CREDIT_VL5_4_STRIDE * 
	             IBU_P1_LINK_TX_CREDIT_VL5_4_DEPTH)) {
		return("IBU_P1_LINK_TX_CREDIT_VL5_4");
	}
	if ((addr >= IBU_P1_LINK_TX_CREDIT_VL7_6_ADDR) &&
	    (addr <  IBU_P1_LINK_TX_CREDIT_VL7_6_ADDR + 
	             IBU_P1_LINK_TX_CREDIT_VL7_6_STRIDE * 
	             IBU_P1_LINK_TX_CREDIT_VL7_6_DEPTH)) {
		return("IBU_P1_LINK_TX_CREDIT_VL7_6");
	}
	if ((addr >= IBU_P1_PCTX_LINK_CNT_RST_ADDR) &&
	    (addr <  IBU_P1_PCTX_LINK_CNT_RST_ADDR + 
	             IBU_P1_PCTX_LINK_CNT_RST_STRIDE * 
	             IBU_P1_PCTX_LINK_CNT_RST_DEPTH)) {
		return("IBU_P1_PCTX_LINK_CNT_RST");
	}
	if ((addr >= IBU_P1_PCTX_LINK_CNT_LOAD_ADDR) &&
	    (addr <  IBU_P1_PCTX_LINK_CNT_LOAD_ADDR + 
	             IBU_P1_PCTX_LINK_CNT_LOAD_STRIDE * 
	             IBU_P1_PCTX_LINK_CNT_LOAD_DEPTH)) {
		return("IBU_P1_PCTX_LINK_CNT_LOAD");
	}
	if ((addr >= IBU_P1_PSCNT_WIDTH_ADDR) &&
	    (addr <  IBU_P1_PSCNT_WIDTH_ADDR + 
	             IBU_P1_PSCNT_WIDTH_STRIDE * 
	             IBU_P1_PSCNT_WIDTH_DEPTH)) {
		return("IBU_P1_PSCNT_WIDTH");
	}
	if ((addr >= IBU_P1_PSCNT_MASK_ADDR) &&
	    (addr <  IBU_P1_PSCNT_MASK_ADDR + 
	             IBU_P1_PSCNT_MASK_STRIDE * 
	             IBU_P1_PSCNT_MASK_DEPTH)) {
		return("IBU_P1_PSCNT_MASK");
	}
	if ((addr >= IBU_P1_PCICRC_RCV_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCICRC_RCV_ERRORS_ADDR + 
	             IBU_P1_PCICRC_RCV_ERRORS_STRIDE * 
	             IBU_P1_PCICRC_RCV_ERRORS_DEPTH)) {
		return("IBU_P1_PCICRC_RCV_ERRORS");
	}
	if ((addr >= IBU_P1_PCVCRC_RCV_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCVCRC_RCV_ERRORS_ADDR + 
	             IBU_P1_PCVCRC_RCV_ERRORS_STRIDE * 
	             IBU_P1_PCVCRC_RCV_ERRORS_DEPTH)) {
		return("IBU_P1_PCVCRC_RCV_ERRORS");
	}
	if ((addr >= IBU_P1_PCLEN_RCV_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCLEN_RCV_ERRORS_ADDR + 
	             IBU_P1_PCLEN_RCV_ERRORS_STRIDE * 
	             IBU_P1_PCLEN_RCV_ERRORS_DEPTH)) {
		return("IBU_P1_PCLEN_RCV_ERRORS");
	}
	if ((addr >= IBU_P1_PCDLID_RCV_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCDLID_RCV_ERRORS_ADDR + 
	             IBU_P1_PCDLID_RCV_ERRORS_STRIDE * 
	             IBU_P1_PCDLID_RCV_ERRORS_DEPTH)) {
		return("IBU_P1_PCDLID_RCV_ERRORS");
	}
	if ((addr >= IBU_P1_PCRCV_FCLEN_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCRCV_FCLEN_ERRORS_ADDR + 
	             IBU_P1_PCRCV_FCLEN_ERRORS_STRIDE * 
	             IBU_P1_PCRCV_FCLEN_ERRORS_DEPTH)) {
		return("IBU_P1_PCRCV_FCLEN_ERRORS");
	}
	if ((addr >= IBU_P1_PCRCV_FCVL_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCRCV_FCVL_ERRORS_ADDR + 
	             IBU_P1_PCRCV_FCVL_ERRORS_STRIDE * 
	             IBU_P1_PCRCV_FCVL_ERRORS_DEPTH)) {
		return("IBU_P1_PCRCV_FCVL_ERRORS");
	}
	if ((addr >= IBU_P1_PCRCV_FCCRC_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCRCV_FCCRC_ERRORS_ADDR + 
	             IBU_P1_PCRCV_FCCRC_ERRORS_STRIDE * 
	             IBU_P1_PCRCV_FCCRC_ERRORS_DEPTH)) {
		return("IBU_P1_PCRCV_FCCRC_ERRORS");
	}
	if ((addr >= IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS_ADDR + 
	             IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS_STRIDE * 
	             IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS_DEPTH)) {
		return("IBU_P1_PORT_LOCAL_PHYSICAL_ERRORS");
	}
	if ((addr >= IBU_P1_PCMAL_FORMED_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCMAL_FORMED_ERRORS_ADDR + 
	             IBU_P1_PCMAL_FORMED_ERRORS_STRIDE * 
	             IBU_P1_PCMAL_FORMED_ERRORS_DEPTH)) {
		return("IBU_P1_PCMAL_FORMED_ERRORS");
	}
	if ((addr >= IBU_P1_PCBUF_OVER_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCBUF_OVER_ERRORS_ADDR + 
	             IBU_P1_PCBUF_OVER_ERRORS_STRIDE * 
	             IBU_P1_PCBUF_OVER_ERRORS_DEPTH)) {
		return("IBU_P1_PCBUF_OVER_ERRORS");
	}
	if ((addr >= IBU_P1_PCVLMAP_ERRORS_ADDR) &&
	    (addr <  IBU_P1_PCVLMAP_ERRORS_ADDR + 
	             IBU_P1_PCVLMAP_ERRORS_STRIDE * 
	             IBU_P1_PCVLMAP_ERRORS_DEPTH)) {
		return("IBU_P1_PCVLMAP_ERRORS");
	}
	if ((addr >= IBU_P1_PCVLINIT_CREDIT_VL1_VL0_ADDR) &&
	    (addr <  IBU_P1_PCVLINIT_CREDIT_VL1_VL0_ADDR + 
	             IBU_P1_PCVLINIT_CREDIT_VL1_VL0_STRIDE * 
	             IBU_P1_PCVLINIT_CREDIT_VL1_VL0_DEPTH)) {
		return("IBU_P1_PCVLINIT_CREDIT_VL1_VL0");
	}
	if ((addr >= IBU_P1_PCVLINIT_CREDIT_VL3_VL2_ADDR) &&
	    (addr <  IBU_P1_PCVLINIT_CREDIT_VL3_VL2_ADDR + 
	             IBU_P1_PCVLINIT_CREDIT_VL3_VL2_STRIDE * 
	             IBU_P1_PCVLINIT_CREDIT_VL3_VL2_DEPTH)) {
		return("IBU_P1_PCVLINIT_CREDIT_VL3_VL2");
	}
	if ((addr >= IBU_P1_PCVLINIT_CREDIT_VL5_VL4_ADDR) &&
	    (addr <  IBU_P1_PCVLINIT_CREDIT_VL5_VL4_ADDR + 
	             IBU_P1_PCVLINIT_CREDIT_VL5_VL4_STRIDE * 
	             IBU_P1_PCVLINIT_CREDIT_VL5_VL4_DEPTH)) {
		return("IBU_P1_PCVLINIT_CREDIT_VL5_VL4");
	}
	if ((addr >= IBU_P1_PCVLINIT_CREDIT_VL7_VL6_ADDR) &&
	    (addr <  IBU_P1_PCVLINIT_CREDIT_VL7_VL6_ADDR + 
	             IBU_P1_PCVLINIT_CREDIT_VL7_VL6_STRIDE * 
	             IBU_P1_PCVLINIT_CREDIT_VL7_VL6_DEPTH)) {
		return("IBU_P1_PCVLINIT_CREDIT_VL7_VL6");
	}
	if ((addr >= IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT_ADDR + 
	             IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT_STRIDE * 
	             IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCRX_VL07_ECC_COR_ERR_CNT");
	}
	if ((addr >= IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT_ADDR + 
	             IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT_STRIDE * 
	             IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCRX_VL07_ECC_UNC_ERR_CNT");
	}
	if ((addr >= IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT_ADDR + 
	             IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT_STRIDE * 
	             IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCRX_VL15_ECC_COR_ERR_CNT");
	}
	if ((addr >= IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT_ADDR + 
	             IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT_STRIDE * 
	             IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCRX_VL15_ECC_UNC_ERR_CNT");
	}
	if ((addr >= IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT_ADDR + 
	             IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT_STRIDE * 
	             IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCRX_LOOP_ECC_COR_ERR_CNT");
	}
	if ((addr >= IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT_ADDR + 
	             IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT_STRIDE * 
	             IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCRX_LOOP_ECC_UNC_ERR_CNT");
	}
	if ((addr >= IBU_P1_PCECCENA_ERR_ADDR) &&
	    (addr <  IBU_P1_PCECCENA_ERR_ADDR + 
	             IBU_P1_PCECCENA_ERR_STRIDE * 
	             IBU_P1_PCECCENA_ERR_DEPTH)) {
		return("IBU_P1_PCECCENA_ERR");
	}
	if ((addr >= IBU_P1_PCTX_ECC_COR_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCTX_ECC_COR_ERR_CNT_ADDR + 
	             IBU_P1_PCTX_ECC_COR_ERR_CNT_STRIDE * 
	             IBU_P1_PCTX_ECC_COR_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCTX_ECC_COR_ERR_CNT");
	}
	if ((addr >= IBU_P1_PCTX_ECC_UNC_ERR_CNT_ADDR) &&
	    (addr <  IBU_P1_PCTX_ECC_UNC_ERR_CNT_ADDR + 
	             IBU_P1_PCTX_ECC_UNC_ERR_CNT_STRIDE * 
	             IBU_P1_PCTX_ECC_UNC_ERR_CNT_DEPTH)) {
		return("IBU_P1_PCTX_ECC_UNC_ERR_CNT");
	}
	if ((addr >= IBU_P1_TX_SRAMSTATUS_ADDR) &&
	    (addr <  IBU_P1_TX_SRAMSTATUS_ADDR + 
	             IBU_P1_TX_SRAMSTATUS_STRIDE * 
	             IBU_P1_TX_SRAMSTATUS_DEPTH)) {
		return("IBU_P1_TX_SRAMSTATUS");
	}
	if ((addr >= IBU_P1_TX_CACHE_STATUS_ADDR) &&
	    (addr <  IBU_P1_TX_CACHE_STATUS_ADDR + 
	             IBU_P1_TX_CACHE_STATUS_STRIDE * 
	             IBU_P1_TX_CACHE_STATUS_DEPTH)) {
		return("IBU_P1_TX_CACHE_STATUS");
	}
	if ((addr >= IBU_P1_TX_DEBUG_ADDR) &&
	    (addr <  IBU_P1_TX_DEBUG_ADDR + 
	             IBU_P1_TX_DEBUG_STRIDE * 
	             IBU_P1_TX_DEBUG_DEPTH)) {
		return("IBU_P1_TX_DEBUG");
	}
	if ((addr >= IBU_P1_RX_VL07_SRAMSTATUS_ADDR) &&
	    (addr <  IBU_P1_RX_VL07_SRAMSTATUS_ADDR + 
	             IBU_P1_RX_VL07_SRAMSTATUS_STRIDE * 
	             IBU_P1_RX_VL07_SRAMSTATUS_DEPTH)) {
		return("IBU_P1_RX_VL07_SRAMSTATUS");
	}
	if ((addr >= IBU_P1_RX_VL15_SRAMSTATUS_ADDR) &&
	    (addr <  IBU_P1_RX_VL15_SRAMSTATUS_ADDR + 
	             IBU_P1_RX_VL15_SRAMSTATUS_STRIDE * 
	             IBU_P1_RX_VL15_SRAMSTATUS_DEPTH)) {
		return("IBU_P1_RX_VL15_SRAMSTATUS");
	}
	if ((addr >= IBU_P1_LOOPSRAMSTATUS_ADDR) &&
	    (addr <  IBU_P1_LOOPSRAMSTATUS_ADDR + 
	             IBU_P1_LOOPSRAMSTATUS_STRIDE * 
	             IBU_P1_LOOPSRAMSTATUS_DEPTH)) {
		return("IBU_P1_LOOPSRAMSTATUS");
	}
	if ((addr >= IBU_P1_RX_DEBUG_ADDR) &&
	    (addr <  IBU_P1_RX_DEBUG_ADDR + 
	             IBU_P1_RX_DEBUG_STRIDE * 
	             IBU_P1_RX_DEBUG_DEPTH)) {
		return("IBU_P1_RX_DEBUG");
	}
	if ((addr >= IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS_ADDR) &&
	    (addr <  IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS_ADDR + 
	             IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS_STRIDE * 
	             IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS_DEPTH)) {
		return("IBU_P1_TX_ARB_LOOPBACK_SRAMSTATUS");
	}
	if ((addr >= IBU_P1_VLARB_HI_PRI_TABLE_ADDR) &&
	    (addr <  IBU_P1_VLARB_HI_PRI_TABLE_ADDR + 
	             IBU_P1_VLARB_HI_PRI_TABLE_STRIDE * 
	             IBU_P1_VLARB_HI_PRI_TABLE_DEPTH)) {
		return("IBU_P1_VLARB_HI_PRI_TABLE");
	}
	if ((addr >= IBU_P1_VLARB_LO_PRI_TABLE_ADDR) &&
	    (addr <  IBU_P1_VLARB_LO_PRI_TABLE_ADDR + 
	             IBU_P1_VLARB_LO_PRI_TABLE_STRIDE * 
	             IBU_P1_VLARB_LO_PRI_TABLE_DEPTH)) {
		return("IBU_P1_VLARB_LO_PRI_TABLE");
	}
	if ((addr >= IBU_P1_TX_TBSVL10_ADDR) &&
	    (addr <  IBU_P1_TX_TBSVL10_ADDR + 
	             IBU_P1_TX_TBSVL10_STRIDE * 
	             IBU_P1_TX_TBSVL10_DEPTH)) {
		return("IBU_P1_TX_TBSVL10");
	}
	if ((addr >= IBU_P1_TX_TBSVL32_ADDR) &&
	    (addr <  IBU_P1_TX_TBSVL32_ADDR + 
	             IBU_P1_TX_TBSVL32_STRIDE * 
	             IBU_P1_TX_TBSVL32_DEPTH)) {
		return("IBU_P1_TX_TBSVL32");
	}
	if ((addr >= IBU_P1_TX_TBSVL54_ADDR) &&
	    (addr <  IBU_P1_TX_TBSVL54_ADDR + 
	             IBU_P1_TX_TBSVL54_STRIDE * 
	             IBU_P1_TX_TBSVL54_DEPTH)) {
		return("IBU_P1_TX_TBSVL54");
	}
	if ((addr >= IBU_P1_TX_TBSVL76_ADDR) &&
	    (addr <  IBU_P1_TX_TBSVL76_ADDR + 
	             IBU_P1_TX_TBSVL76_STRIDE * 
	             IBU_P1_TX_TBSVL76_DEPTH)) {
		return("IBU_P1_TX_TBSVL76");
	}
	if ((addr >= IBU_P1_TX_TBSARB_VL10_ADDR) &&
	    (addr <  IBU_P1_TX_TBSARB_VL10_ADDR + 
	             IBU_P1_TX_TBSARB_VL10_STRIDE * 
	             IBU_P1_TX_TBSARB_VL10_DEPTH)) {
		return("IBU_P1_TX_TBSARB_VL10");
	}
	if ((addr >= IBU_P1_TX_TBSARB_VL32_ADDR) &&
	    (addr <  IBU_P1_TX_TBSARB_VL32_ADDR + 
	             IBU_P1_TX_TBSARB_VL32_STRIDE * 
	             IBU_P1_TX_TBSARB_VL32_DEPTH)) {
		return("IBU_P1_TX_TBSARB_VL32");
	}
	if ((addr >= IBU_P1_TX_TBSARB_VL54_ADDR) &&
	    (addr <  IBU_P1_TX_TBSARB_VL54_ADDR + 
	             IBU_P1_TX_TBSARB_VL54_STRIDE * 
	             IBU_P1_TX_TBSARB_VL54_DEPTH)) {
		return("IBU_P1_TX_TBSARB_VL54");
	}
	if ((addr >= IBU_P1_TX_TBSARB_VL76_ADDR) &&
	    (addr <  IBU_P1_TX_TBSARB_VL76_ADDR + 
	             IBU_P1_TX_TBSARB_VL76_STRIDE * 
	             IBU_P1_TX_TBSARB_VL76_DEPTH)) {
		return("IBU_P1_TX_TBSARB_VL76");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_ENABLE_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_ENABLE_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_ENABLE_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_ENABLE_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_ENABLE");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_MODE_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_MODE_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_MODE_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_MODE_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_MODE");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_RDY_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_RDY_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_RDY_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_RDY_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_RDY");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_TIMER_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_TIMER_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_TIMER_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_TIMER_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_TIMER");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_START_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_START_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_START_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_START_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_START");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA1_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA1_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA1_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA1_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA1");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA2_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA2_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA2_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA2_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA2");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA3_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA3_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA3_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA3_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA3");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA4_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA4_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA4_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA4_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA4");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA5_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA5_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA5_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA5_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA5");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA6_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA6_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA6_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA6_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA6");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA7_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA7_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA7_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA7_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA7");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA8_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA8_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA8_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA8_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA8");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA9_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA9_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA9_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA9_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA9");
	}
	if ((addr >= IBU_P1_RX_TRACE_CAPTURE_DATA10_ADDR) &&
	    (addr <  IBU_P1_RX_TRACE_CAPTURE_DATA10_ADDR + 
	             IBU_P1_RX_TRACE_CAPTURE_DATA10_STRIDE * 
	             IBU_P1_RX_TRACE_CAPTURE_DATA10_DEPTH)) {
		return("IBU_P1_RX_TRACE_CAPTURE_DATA10");
	}
	if ((addr >= IBU_P1_LINK_RX_FCCL_VL1_0_ADDR) &&
	    (addr <  IBU_P1_LINK_RX_FCCL_VL1_0_ADDR + 
	             IBU_P1_LINK_RX_FCCL_VL1_0_STRIDE * 
	             IBU_P1_LINK_RX_FCCL_VL1_0_DEPTH)) {
		return("IBU_P1_LINK_RX_FCCL_VL1_0");
	}
	if ((addr >= IBU_P1_LINK_RX_FCCL_VL3_2_ADDR) &&
	    (addr <  IBU_P1_LINK_RX_FCCL_VL3_2_ADDR + 
	             IBU_P1_LINK_RX_FCCL_VL3_2_STRIDE * 
	             IBU_P1_LINK_RX_FCCL_VL3_2_DEPTH)) {
		return("IBU_P1_LINK_RX_FCCL_VL3_2");
	}
	if ((addr >= IBU_P1_LINK_RX_FCCL_VL5_4_ADDR) &&
	    (addr <  IBU_P1_LINK_RX_FCCL_VL5_4_ADDR + 
	             IBU_P1_LINK_RX_FCCL_VL5_4_STRIDE * 
	             IBU_P1_LINK_RX_FCCL_VL5_4_DEPTH)) {
		return("IBU_P1_LINK_RX_FCCL_VL5_4");
	}
	if ((addr >= IBU_P1_LINK_RX_FCCL_VL7_6_ADDR) &&
	    (addr <  IBU_P1_LINK_RX_FCCL_VL7_6_ADDR + 
	             IBU_P1_LINK_RX_FCCL_VL7_6_STRIDE * 
	             IBU_P1_LINK_RX_FCCL_VL7_6_DEPTH)) {
		return("IBU_P1_LINK_RX_FCCL_VL7_6");
	}
	if ((addr >= IBU_P1_ADD_DEFAULT_LANE0_ADDR) &&
	    (addr <  IBU_P1_ADD_DEFAULT_LANE0_ADDR + 
	             IBU_P1_ADD_DEFAULT_LANE0_STRIDE * 
	             IBU_P1_ADD_DEFAULT_LANE0_DEPTH)) {
		return("IBU_P1_ADD_DEFAULT_LANE0");
	}
	if ((addr >= IBU_P1_ADD_DEFAULT_LANE1_ADDR) &&
	    (addr <  IBU_P1_ADD_DEFAULT_LANE1_ADDR + 
	             IBU_P1_ADD_DEFAULT_LANE1_STRIDE * 
	             IBU_P1_ADD_DEFAULT_LANE1_DEPTH)) {
		return("IBU_P1_ADD_DEFAULT_LANE1");
	}
	if ((addr >= IBU_P1_ADD_DEFAULT_LANE2_ADDR) &&
	    (addr <  IBU_P1_ADD_DEFAULT_LANE2_ADDR + 
	             IBU_P1_ADD_DEFAULT_LANE2_STRIDE * 
	             IBU_P1_ADD_DEFAULT_LANE2_DEPTH)) {
		return("IBU_P1_ADD_DEFAULT_LANE2");
	}
	if ((addr >= IBU_P1_ADD_DEFAULT_LANE3_ADDR) &&
	    (addr <  IBU_P1_ADD_DEFAULT_LANE3_ADDR + 
	             IBU_P1_ADD_DEFAULT_LANE3_STRIDE * 
	             IBU_P1_ADD_DEFAULT_LANE3_DEPTH)) {
		return("IBU_P1_ADD_DEFAULT_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD0_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD0_LANE0_ADDR + 
	             IBU_P1_PHY_ADD0_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD0_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD0_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD0_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD0_LANE1_ADDR + 
	             IBU_P1_PHY_ADD0_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD0_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD0_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD0_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD0_LANE2_ADDR + 
	             IBU_P1_PHY_ADD0_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD0_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD0_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD0_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD0_LANE3_ADDR + 
	             IBU_P1_PHY_ADD0_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD0_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD0_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD1_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD1_LANE0_ADDR + 
	             IBU_P1_PHY_ADD1_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD1_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD1_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD1_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD1_LANE1_ADDR + 
	             IBU_P1_PHY_ADD1_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD1_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD1_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD1_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD1_LANE2_ADDR + 
	             IBU_P1_PHY_ADD1_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD1_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD1_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD1_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD1_LANE3_ADDR + 
	             IBU_P1_PHY_ADD1_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD1_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD1_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD2_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD2_LANE0_ADDR + 
	             IBU_P1_PHY_ADD2_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD2_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD2_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD2_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD2_LANE1_ADDR + 
	             IBU_P1_PHY_ADD2_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD2_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD2_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD2_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD2_LANE2_ADDR + 
	             IBU_P1_PHY_ADD2_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD2_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD2_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD2_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD2_LANE3_ADDR + 
	             IBU_P1_PHY_ADD2_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD2_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD2_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD3_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD3_LANE0_ADDR + 
	             IBU_P1_PHY_ADD3_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD3_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD3_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD3_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD3_LANE1_ADDR + 
	             IBU_P1_PHY_ADD3_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD3_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD3_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD3_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD3_LANE2_ADDR + 
	             IBU_P1_PHY_ADD3_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD3_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD3_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD3_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD3_LANE3_ADDR + 
	             IBU_P1_PHY_ADD3_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD3_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD3_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD4_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD4_LANE0_ADDR + 
	             IBU_P1_PHY_ADD4_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD4_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD4_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD4_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD4_LANE1_ADDR + 
	             IBU_P1_PHY_ADD4_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD4_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD4_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD4_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD4_LANE2_ADDR + 
	             IBU_P1_PHY_ADD4_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD4_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD4_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD4_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD4_LANE3_ADDR + 
	             IBU_P1_PHY_ADD4_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD4_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD4_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD5_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD5_LANE0_ADDR + 
	             IBU_P1_PHY_ADD5_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD5_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD5_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD5_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD5_LANE1_ADDR + 
	             IBU_P1_PHY_ADD5_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD5_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD5_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD5_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD5_LANE2_ADDR + 
	             IBU_P1_PHY_ADD5_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD5_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD5_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD5_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD5_LANE3_ADDR + 
	             IBU_P1_PHY_ADD5_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD5_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD5_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD6_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD6_LANE0_ADDR + 
	             IBU_P1_PHY_ADD6_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD6_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD6_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD6_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD6_LANE1_ADDR + 
	             IBU_P1_PHY_ADD6_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD6_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD6_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD6_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD6_LANE2_ADDR + 
	             IBU_P1_PHY_ADD6_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD6_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD6_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD6_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD6_LANE3_ADDR + 
	             IBU_P1_PHY_ADD6_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD6_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD6_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD7_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD7_LANE0_ADDR + 
	             IBU_P1_PHY_ADD7_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD7_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD7_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD7_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD7_LANE1_ADDR + 
	             IBU_P1_PHY_ADD7_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD7_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD7_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD7_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD7_LANE2_ADDR + 
	             IBU_P1_PHY_ADD7_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD7_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD7_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD7_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD7_LANE3_ADDR + 
	             IBU_P1_PHY_ADD7_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD7_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD7_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD8_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD8_LANE0_ADDR + 
	             IBU_P1_PHY_ADD8_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD8_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD8_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD8_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD8_LANE1_ADDR + 
	             IBU_P1_PHY_ADD8_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD8_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD8_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD8_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD8_LANE2_ADDR + 
	             IBU_P1_PHY_ADD8_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD8_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD8_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD8_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD8_LANE3_ADDR + 
	             IBU_P1_PHY_ADD8_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD8_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD8_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD9_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD9_LANE0_ADDR + 
	             IBU_P1_PHY_ADD9_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD9_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD9_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD9_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD9_LANE1_ADDR + 
	             IBU_P1_PHY_ADD9_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD9_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD9_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD9_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD9_LANE2_ADDR + 
	             IBU_P1_PHY_ADD9_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD9_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD9_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD9_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD9_LANE3_ADDR + 
	             IBU_P1_PHY_ADD9_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD9_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD9_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD10_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD10_LANE0_ADDR + 
	             IBU_P1_PHY_ADD10_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD10_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD10_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD10_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD10_LANE1_ADDR + 
	             IBU_P1_PHY_ADD10_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD10_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD10_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD10_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD10_LANE2_ADDR + 
	             IBU_P1_PHY_ADD10_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD10_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD10_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD10_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD10_LANE3_ADDR + 
	             IBU_P1_PHY_ADD10_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD10_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD10_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD11_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD11_LANE0_ADDR + 
	             IBU_P1_PHY_ADD11_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD11_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD11_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD11_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD11_LANE1_ADDR + 
	             IBU_P1_PHY_ADD11_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD11_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD11_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD11_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD11_LANE2_ADDR + 
	             IBU_P1_PHY_ADD11_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD11_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD11_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD11_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD11_LANE3_ADDR + 
	             IBU_P1_PHY_ADD11_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD11_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD11_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD12_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD12_LANE0_ADDR + 
	             IBU_P1_PHY_ADD12_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD12_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD12_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD12_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD12_LANE1_ADDR + 
	             IBU_P1_PHY_ADD12_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD12_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD12_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD12_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD12_LANE2_ADDR + 
	             IBU_P1_PHY_ADD12_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD12_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD12_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD12_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD12_LANE3_ADDR + 
	             IBU_P1_PHY_ADD12_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD12_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD12_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD13_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD13_LANE0_ADDR + 
	             IBU_P1_PHY_ADD13_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD13_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD13_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD13_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD13_LANE1_ADDR + 
	             IBU_P1_PHY_ADD13_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD13_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD13_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD13_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD13_LANE2_ADDR + 
	             IBU_P1_PHY_ADD13_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD13_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD13_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD13_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD13_LANE3_ADDR + 
	             IBU_P1_PHY_ADD13_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD13_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD13_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD14_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD14_LANE0_ADDR + 
	             IBU_P1_PHY_ADD14_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD14_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD14_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD14_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD14_LANE1_ADDR + 
	             IBU_P1_PHY_ADD14_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD14_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD14_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD14_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD14_LANE2_ADDR + 
	             IBU_P1_PHY_ADD14_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD14_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD14_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD14_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD14_LANE3_ADDR + 
	             IBU_P1_PHY_ADD14_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD14_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD14_LANE3");
	}
	if ((addr >= IBU_P1_PHY_ADD15_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD15_LANE0_ADDR + 
	             IBU_P1_PHY_ADD15_LANE0_STRIDE * 
	             IBU_P1_PHY_ADD15_LANE0_DEPTH)) {
		return("IBU_P1_PHY_ADD15_LANE0");
	}
	if ((addr >= IBU_P1_PHY_ADD15_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD15_LANE1_ADDR + 
	             IBU_P1_PHY_ADD15_LANE1_STRIDE * 
	             IBU_P1_PHY_ADD15_LANE1_DEPTH)) {
		return("IBU_P1_PHY_ADD15_LANE1");
	}
	if ((addr >= IBU_P1_PHY_ADD15_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD15_LANE2_ADDR + 
	             IBU_P1_PHY_ADD15_LANE2_STRIDE * 
	             IBU_P1_PHY_ADD15_LANE2_DEPTH)) {
		return("IBU_P1_PHY_ADD15_LANE2");
	}
	if ((addr >= IBU_P1_PHY_ADD15_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_ADD15_LANE3_ADDR + 
	             IBU_P1_PHY_ADD15_LANE3_STRIDE * 
	             IBU_P1_PHY_ADD15_LANE3_DEPTH)) {
		return("IBU_P1_PHY_ADD15_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD0_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD0_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD0_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD0_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD0_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD0_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD0_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD0_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD0_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD0_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD0_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD0_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD0_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD0_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD0_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD0_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD0_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD0_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD0_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD0_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD1_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD1_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD1_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD1_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD1_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD1_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD1_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD1_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD1_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD1_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD1_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD1_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD1_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD1_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD1_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD1_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD1_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD1_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD1_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD1_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD2_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD2_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD2_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD2_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD2_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD2_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD2_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD2_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD2_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD2_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD2_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD2_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD2_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD2_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD2_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD2_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD2_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD2_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD2_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD2_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD3_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD3_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD3_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD3_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD3_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD3_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD3_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD3_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD3_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD3_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD3_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD3_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD3_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD3_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD3_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD3_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD3_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD3_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD3_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD3_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD4_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD4_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD4_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD4_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD4_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD4_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD4_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD4_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD4_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD4_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD4_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD4_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD4_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD4_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD4_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD4_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD4_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD4_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD4_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD4_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD5_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD5_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD5_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD5_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD5_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD5_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD5_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD5_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD5_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD5_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD5_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD5_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD5_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD5_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD5_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD5_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD5_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD5_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD5_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD5_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD6_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD6_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD6_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD6_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD6_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD6_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD6_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD6_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD6_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD6_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD6_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD6_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD6_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD6_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD6_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD6_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD6_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD6_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD6_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD6_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD7_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD7_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD7_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD7_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD7_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD7_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD7_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD7_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD7_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD7_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD7_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD7_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD7_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD7_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD7_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD7_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD7_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD7_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD7_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD7_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD8_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD8_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD8_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD8_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD8_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD8_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD8_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD8_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD8_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD8_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD8_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD8_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD8_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD8_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD8_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD8_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD8_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD8_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD8_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD8_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD9_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD9_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD9_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD9_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD9_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD9_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD9_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD9_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD9_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD9_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD9_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD9_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD9_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD9_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD9_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD9_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD9_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD9_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD9_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD9_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD10_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD10_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD10_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD10_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD10_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD10_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD10_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD10_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD10_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD10_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD10_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD10_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD10_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD10_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD10_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD10_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD10_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD10_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD10_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD10_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD11_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD11_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD11_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD11_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD11_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD11_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD11_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD11_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD11_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD11_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD11_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD11_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD11_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD11_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD11_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD11_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD11_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD11_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD11_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD11_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD12_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD12_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD12_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD12_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD12_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD12_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD12_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD12_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD12_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD12_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD12_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD12_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD12_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD12_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD12_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD12_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD12_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD12_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD12_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD12_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD13_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD13_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD13_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD13_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD13_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD13_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD13_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD13_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD13_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD13_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD13_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD13_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD13_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD13_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD13_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD13_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD13_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD13_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD13_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD13_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD14_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD14_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD14_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD14_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD14_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD14_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD14_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD14_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD14_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD14_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD14_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD14_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD14_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD14_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD14_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD14_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD14_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD14_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD14_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD14_LANE3");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD15_LANE0_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD15_LANE0_ADDR + 
	             IBU_P1_PHY_AMP1_ADD15_LANE0_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD15_LANE0_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD15_LANE0");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD15_LANE1_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD15_LANE1_ADDR + 
	             IBU_P1_PHY_AMP1_ADD15_LANE1_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD15_LANE1_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD15_LANE1");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD15_LANE2_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD15_LANE2_ADDR + 
	             IBU_P1_PHY_AMP1_ADD15_LANE2_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD15_LANE2_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD15_LANE2");
	}
	if ((addr >= IBU_P1_PHY_AMP1_ADD15_LANE3_ADDR) &&
	    (addr <  IBU_P1_PHY_AMP1_ADD15_LANE3_ADDR + 
	             IBU_P1_PHY_AMP1_ADD15_LANE3_STRIDE * 
	             IBU_P1_PHY_AMP1_ADD15_LANE3_DEPTH)) {
		return("IBU_P1_PHY_AMP1_ADD15_LANE3");
	}
	if ((addr >= IBU_P1_REMOTE_DDS0_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS0_ADDR + 
	             IBU_P1_REMOTE_DDS0_STRIDE * 
	             IBU_P1_REMOTE_DDS0_DEPTH)) {
		return("IBU_P1_REMOTE_DDS0");
	}
	if ((addr >= IBU_P1_REMOTE_DDS1_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS1_ADDR + 
	             IBU_P1_REMOTE_DDS1_STRIDE * 
	             IBU_P1_REMOTE_DDS1_DEPTH)) {
		return("IBU_P1_REMOTE_DDS1");
	}
	if ((addr >= IBU_P1_REMOTE_DDS2_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS2_ADDR + 
	             IBU_P1_REMOTE_DDS2_STRIDE * 
	             IBU_P1_REMOTE_DDS2_DEPTH)) {
		return("IBU_P1_REMOTE_DDS2");
	}
	if ((addr >= IBU_P1_REMOTE_DDS3_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS3_ADDR + 
	             IBU_P1_REMOTE_DDS3_STRIDE * 
	             IBU_P1_REMOTE_DDS3_DEPTH)) {
		return("IBU_P1_REMOTE_DDS3");
	}
	if ((addr >= IBU_P1_REMOTE_DDS4_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS4_ADDR + 
	             IBU_P1_REMOTE_DDS4_STRIDE * 
	             IBU_P1_REMOTE_DDS4_DEPTH)) {
		return("IBU_P1_REMOTE_DDS4");
	}
	if ((addr >= IBU_P1_REMOTE_DDS5_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS5_ADDR + 
	             IBU_P1_REMOTE_DDS5_STRIDE * 
	             IBU_P1_REMOTE_DDS5_DEPTH)) {
		return("IBU_P1_REMOTE_DDS5");
	}
	if ((addr >= IBU_P1_REMOTE_DDS6_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS6_ADDR + 
	             IBU_P1_REMOTE_DDS6_STRIDE * 
	             IBU_P1_REMOTE_DDS6_DEPTH)) {
		return("IBU_P1_REMOTE_DDS6");
	}
	if ((addr >= IBU_P1_REMOTE_DDS7_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS7_ADDR + 
	             IBU_P1_REMOTE_DDS7_STRIDE * 
	             IBU_P1_REMOTE_DDS7_DEPTH)) {
		return("IBU_P1_REMOTE_DDS7");
	}
	if ((addr >= IBU_P1_REMOTE_DDS8_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS8_ADDR + 
	             IBU_P1_REMOTE_DDS8_STRIDE * 
	             IBU_P1_REMOTE_DDS8_DEPTH)) {
		return("IBU_P1_REMOTE_DDS8");
	}
	if ((addr >= IBU_P1_REMOTE_DDS9_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS9_ADDR + 
	             IBU_P1_REMOTE_DDS9_STRIDE * 
	             IBU_P1_REMOTE_DDS9_DEPTH)) {
		return("IBU_P1_REMOTE_DDS9");
	}
	if ((addr >= IBU_P1_REMOTE_DDS10_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS10_ADDR + 
	             IBU_P1_REMOTE_DDS10_STRIDE * 
	             IBU_P1_REMOTE_DDS10_DEPTH)) {
		return("IBU_P1_REMOTE_DDS10");
	}
	if ((addr >= IBU_P1_REMOTE_DDS11_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS11_ADDR + 
	             IBU_P1_REMOTE_DDS11_STRIDE * 
	             IBU_P1_REMOTE_DDS11_DEPTH)) {
		return("IBU_P1_REMOTE_DDS11");
	}
	if ((addr >= IBU_P1_REMOTE_DDS12_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS12_ADDR + 
	             IBU_P1_REMOTE_DDS12_STRIDE * 
	             IBU_P1_REMOTE_DDS12_DEPTH)) {
		return("IBU_P1_REMOTE_DDS12");
	}
	if ((addr >= IBU_P1_REMOTE_DDS13_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS13_ADDR + 
	             IBU_P1_REMOTE_DDS13_STRIDE * 
	             IBU_P1_REMOTE_DDS13_DEPTH)) {
		return("IBU_P1_REMOTE_DDS13");
	}
	if ((addr >= IBU_P1_REMOTE_DDS14_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS14_ADDR + 
	             IBU_P1_REMOTE_DDS14_STRIDE * 
	             IBU_P1_REMOTE_DDS14_DEPTH)) {
		return("IBU_P1_REMOTE_DDS14");
	}
	if ((addr >= IBU_P1_REMOTE_DDS15_ADDR) &&
	    (addr <  IBU_P1_REMOTE_DDS15_ADDR + 
	             IBU_P1_REMOTE_DDS15_STRIDE * 
	             IBU_P1_REMOTE_DDS15_DEPTH)) {
		return("IBU_P1_REMOTE_DDS15");
	}
	if ((addr >= IBU_P1_BAD_CSR_ADDR) &&
	    (addr <  IBU_P1_BAD_CSR_ADDR + 
	             IBU_P1_BAD_CSR_STRIDE * 
	             IBU_P1_BAD_CSR_DEPTH)) {
		return("IBU_P1_BAD_CSR");
	}
	if ((addr >= IBU_P1_CETUS_CH0_REG15_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_CH0_REG15_CSR_ADDR + 
	             IBU_P1_CETUS_CH0_REG15_CSR_STRIDE * 
	             IBU_P1_CETUS_CH0_REG15_CSR_DEPTH)) {
		return("IBU_P1_CETUS_CH0_REG15_CSR");
	}
	if ((addr >= IBU_P1_CETUS_CH0_REG102_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_CH0_REG102_CSR_ADDR + 
	             IBU_P1_CETUS_CH0_REG102_CSR_STRIDE * 
	             IBU_P1_CETUS_CH0_REG102_CSR_DEPTH)) {
		return("IBU_P1_CETUS_CH0_REG102_CSR");
	}
	if ((addr >= IBU_P1_CETUS_CH1_REG15_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_CH1_REG15_CSR_ADDR + 
	             IBU_P1_CETUS_CH1_REG15_CSR_STRIDE * 
	             IBU_P1_CETUS_CH1_REG15_CSR_DEPTH)) {
		return("IBU_P1_CETUS_CH1_REG15_CSR");
	}
	if ((addr >= IBU_P1_CETUS_CH1_REG102_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_CH1_REG102_CSR_ADDR + 
	             IBU_P1_CETUS_CH1_REG102_CSR_STRIDE * 
	             IBU_P1_CETUS_CH1_REG102_CSR_DEPTH)) {
		return("IBU_P1_CETUS_CH1_REG102_CSR");
	}
	if ((addr >= IBU_P1_CETUS_PLLA_REG24_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_PLLA_REG24_CSR_ADDR + 
	             IBU_P1_CETUS_PLLA_REG24_CSR_STRIDE * 
	             IBU_P1_CETUS_PLLA_REG24_CSR_DEPTH)) {
		return("IBU_P1_CETUS_PLLA_REG24_CSR");
	}
	if ((addr >= IBU_P1_CETUS_CH2_REG15_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_CH2_REG15_CSR_ADDR + 
	             IBU_P1_CETUS_CH2_REG15_CSR_STRIDE * 
	             IBU_P1_CETUS_CH2_REG15_CSR_DEPTH)) {
		return("IBU_P1_CETUS_CH2_REG15_CSR");
	}
	if ((addr >= IBU_P1_CETUS_CH2_REG102_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_CH2_REG102_CSR_ADDR + 
	             IBU_P1_CETUS_CH2_REG102_CSR_STRIDE * 
	             IBU_P1_CETUS_CH2_REG102_CSR_DEPTH)) {
		return("IBU_P1_CETUS_CH2_REG102_CSR");
	}
	if ((addr >= IBU_P1_CETUS_CH3_REG15_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_CH3_REG15_CSR_ADDR + 
	             IBU_P1_CETUS_CH3_REG15_CSR_STRIDE * 
	             IBU_P1_CETUS_CH3_REG15_CSR_DEPTH)) {
		return("IBU_P1_CETUS_CH3_REG15_CSR");
	}
	if ((addr >= IBU_P1_CETUS_CH3_REG102_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_CH3_REG102_CSR_ADDR + 
	             IBU_P1_CETUS_CH3_REG102_CSR_STRIDE * 
	             IBU_P1_CETUS_CH3_REG102_CSR_DEPTH)) {
		return("IBU_P1_CETUS_CH3_REG102_CSR");
	}
	if ((addr >= IBU_P1_CETUS_PLLB_REG24_CSR_ADDR) &&
	    (addr <  IBU_P1_CETUS_PLLB_REG24_CSR_ADDR + 
	             IBU_P1_CETUS_PLLB_REG24_CSR_STRIDE * 
	             IBU_P1_CETUS_PLLB_REG24_CSR_DEPTH)) {
		return("IBU_P1_CETUS_PLLB_REG24_CSR");
	}
	if ((addr >= IBU_P1_PMA_RESET_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_RESET_CSR_ADDR + 
	             IBU_P1_PMA_RESET_CSR_STRIDE * 
	             IBU_P1_PMA_RESET_CSR_DEPTH)) {
		return("IBU_P1_PMA_RESET_CSR");
	}
	if ((addr >= IBU_P1_PMA_PLLA_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_PLLA_CSR_ADDR + 
	             IBU_P1_PMA_PLLA_CSR_STRIDE * 
	             IBU_P1_PMA_PLLA_CSR_DEPTH)) {
		return("IBU_P1_PMA_PLLA_CSR");
	}
	if ((addr >= IBU_P1_PMA_PLLB_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_PLLB_CSR_ADDR + 
	             IBU_P1_PMA_PLLB_CSR_STRIDE * 
	             IBU_P1_PMA_PLLB_CSR_DEPTH)) {
		return("IBU_P1_PMA_PLLB_CSR");
	}
	if ((addr >= IBU_P1_PMA_CMODE_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_CMODE_CSR_ADDR + 
	             IBU_P1_PMA_CMODE_CSR_STRIDE * 
	             IBU_P1_PMA_CMODE_CSR_DEPTH)) {
		return("IBU_P1_PMA_CMODE_CSR");
	}
	if ((addr >= IBU_P1_PMA_LB_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_LB_CSR_ADDR + 
	             IBU_P1_PMA_LB_CSR_STRIDE * 
	             IBU_P1_PMA_LB_CSR_DEPTH)) {
		return("IBU_P1_PMA_LB_CSR");
	}
	if ((addr >= IBU_P1_PMA_PWR_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_PWR_CSR_ADDR + 
	             IBU_P1_PMA_PWR_CSR_STRIDE * 
	             IBU_P1_PMA_PWR_CSR_DEPTH)) {
		return("IBU_P1_PMA_PWR_CSR");
	}
	if ((addr >= IBU_P1_PMA_STATUS0_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_STATUS0_CSR_ADDR + 
	             IBU_P1_PMA_STATUS0_CSR_STRIDE * 
	             IBU_P1_PMA_STATUS0_CSR_DEPTH)) {
		return("IBU_P1_PMA_STATUS0_CSR");
	}
	if ((addr >= IBU_P1_PMA_STATUS1_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_STATUS1_CSR_ADDR + 
	             IBU_P1_PMA_STATUS1_CSR_STRIDE * 
	             IBU_P1_PMA_STATUS1_CSR_DEPTH)) {
		return("IBU_P1_PMA_STATUS1_CSR");
	}
	if ((addr >= IBU_P1_PMA_STATUS2_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_STATUS2_CSR_ADDR + 
	             IBU_P1_PMA_STATUS2_CSR_STRIDE * 
	             IBU_P1_PMA_STATUS2_CSR_DEPTH)) {
		return("IBU_P1_PMA_STATUS2_CSR");
	}
	if ((addr >= IBU_P1_PMA_TXWCLK0_CNT_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_TXWCLK0_CNT_CSR_ADDR + 
	             IBU_P1_PMA_TXWCLK0_CNT_CSR_STRIDE * 
	             IBU_P1_PMA_TXWCLK0_CNT_CSR_DEPTH)) {
		return("IBU_P1_PMA_TXWCLK0_CNT_CSR");
	}
	if ((addr >= IBU_P1_PMA_TXWCLK0_CNT_VAL_ADDR) &&
	    (addr <  IBU_P1_PMA_TXWCLK0_CNT_VAL_ADDR + 
	             IBU_P1_PMA_TXWCLK0_CNT_VAL_STRIDE * 
	             IBU_P1_PMA_TXWCLK0_CNT_VAL_DEPTH)) {
		return("IBU_P1_PMA_TXWCLK0_CNT_VAL");
	}
	if ((addr >= IBU_P1_PMA_RXWCLK0_CNT_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_RXWCLK0_CNT_CSR_ADDR + 
	             IBU_P1_PMA_RXWCLK0_CNT_CSR_STRIDE * 
	             IBU_P1_PMA_RXWCLK0_CNT_CSR_DEPTH)) {
		return("IBU_P1_PMA_RXWCLK0_CNT_CSR");
	}
	if ((addr >= IBU_P1_PMA_RXWCLK0_CNT_VAL_ADDR) &&
	    (addr <  IBU_P1_PMA_RXWCLK0_CNT_VAL_ADDR + 
	             IBU_P1_PMA_RXWCLK0_CNT_VAL_STRIDE * 
	             IBU_P1_PMA_RXWCLK0_CNT_VAL_DEPTH)) {
		return("IBU_P1_PMA_RXWCLK0_CNT_VAL");
	}
	if ((addr >= IBU_P1_PMA_IRQ_STATUS_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_IRQ_STATUS_CSR_ADDR + 
	             IBU_P1_PMA_IRQ_STATUS_CSR_STRIDE * 
	             IBU_P1_PMA_IRQ_STATUS_CSR_DEPTH)) {
		return("IBU_P1_PMA_IRQ_STATUS_CSR");
	}
	if ((addr >= IBU_P1_PMA_IRQ_MASK_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_IRQ_MASK_CSR_ADDR + 
	             IBU_P1_PMA_IRQ_MASK_CSR_STRIDE * 
	             IBU_P1_PMA_IRQ_MASK_CSR_DEPTH)) {
		return("IBU_P1_PMA_IRQ_MASK_CSR");
	}
	if ((addr >= IBU_P1_PMA_BAD_CSR_ADDR) &&
	    (addr <  IBU_P1_PMA_BAD_CSR_ADDR + 
	             IBU_P1_PMA_BAD_CSR_STRIDE * 
	             IBU_P1_PMA_BAD_CSR_DEPTH)) {
		return("IBU_P1_PMA_BAD_CSR");
	}
	if ((addr >= IBU_P2_CNT1US_CNT124US_ADDR) &&
	    (addr <  IBU_P2_CNT1US_CNT124US_ADDR + 
	             IBU_P2_CNT1US_CNT124US_STRIDE * 
	             IBU_P2_CNT1US_CNT124US_DEPTH)) {
		return("IBU_P2_CNT1US_CNT124US");
	}
	if ((addr >= IBU_P2_CNT2MS_ADDR) &&
	    (addr <  IBU_P2_CNT2MS_ADDR + 
	             IBU_P2_CNT2MS_STRIDE * 
	             IBU_P2_CNT2MS_DEPTH)) {
		return("IBU_P2_CNT2MS");
	}
	if ((addr >= IBU_P2_CNT10MS_ADDR) &&
	    (addr <  IBU_P2_CNT10MS_ADDR + 
	             IBU_P2_CNT10MS_STRIDE * 
	             IBU_P2_CNT10MS_DEPTH)) {
		return("IBU_P2_CNT10MS");
	}
	if ((addr >= IBU_P2_CNT100MS_ADDR) &&
	    (addr <  IBU_P2_CNT100MS_ADDR + 
	             IBU_P2_CNT100MS_STRIDE * 
	             IBU_P2_CNT100MS_DEPTH)) {
		return("IBU_P2_CNT100MS");
	}
	if ((addr >= IBU_P2_CNT150MS_ADDR) &&
	    (addr <  IBU_P2_CNT150MS_ADDR + 
	             IBU_P2_CNT150MS_STRIDE * 
	             IBU_P2_CNT150MS_DEPTH)) {
		return("IBU_P2_CNT150MS");
	}
	if ((addr >= IBU_P2_CNT400MS_ADDR) &&
	    (addr <  IBU_P2_CNT400MS_ADDR + 
	             IBU_P2_CNT400MS_STRIDE * 
	             IBU_P2_CNT400MS_DEPTH)) {
		return("IBU_P2_CNT400MS");
	}
	if ((addr >= IBU_P2_SKP_TO_CNT_ADDR) &&
	    (addr <  IBU_P2_SKP_TO_CNT_ADDR + 
	             IBU_P2_SKP_TO_CNT_STRIDE * 
	             IBU_P2_SKP_TO_CNT_DEPTH)) {
		return("IBU_P2_SKP_TO_CNT");
	}
	if ((addr >= IBU_P2_TGT_VAL_ADDR) &&
	    (addr <  IBU_P2_TGT_VAL_ADDR + 
	             IBU_P2_TGT_VAL_STRIDE * 
	             IBU_P2_TGT_VAL_DEPTH)) {
		return("IBU_P2_TGT_VAL");
	}
	if ((addr >= IBU_P2_PHY_VCONFIG_ADDR) &&
	    (addr <  IBU_P2_PHY_VCONFIG_ADDR + 
	             IBU_P2_PHY_VCONFIG_STRIDE * 
	             IBU_P2_PHY_VCONFIG_DEPTH)) {
		return("IBU_P2_PHY_VCONFIG");
	}
	if ((addr >= IBU_P2_PHY_DISP_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P2_PHY_DISP_ERROR_CNT_ADDR + 
	             IBU_P2_PHY_DISP_ERROR_CNT_STRIDE * 
	             IBU_P2_PHY_DISP_ERROR_CNT_DEPTH)) {
		return("IBU_P2_PHY_DISP_ERROR_CNT");
	}
	if ((addr >= IBU_P2_PHY_CODE_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P2_PHY_CODE_ERROR_CNT_ADDR + 
	             IBU_P2_PHY_CODE_ERROR_CNT_STRIDE * 
	             IBU_P2_PHY_CODE_ERROR_CNT_DEPTH)) {
		return("IBU_P2_PHY_CODE_ERROR_CNT");
	}
	if ((addr >= IBU_P2_PHY_EVENT_LOG_ADDR) &&
	    (addr <  IBU_P2_PHY_EVENT_LOG_ADDR + 
	             IBU_P2_PHY_EVENT_LOG_STRIDE * 
	             IBU_P2_PHY_EVENT_LOG_DEPTH)) {
		return("IBU_P2_PHY_EVENT_LOG");
	}
	if ((addr >= IBU_P2_PORT_TRAIN_FSM_ADDR) &&
	    (addr <  IBU_P2_PORT_TRAIN_FSM_ADDR + 
	             IBU_P2_PORT_TRAIN_FSM_STRIDE * 
	             IBU_P2_PORT_TRAIN_FSM_DEPTH)) {
		return("IBU_P2_PORT_TRAIN_FSM");
	}
	if ((addr >= IBU_P2_PHY_TRAIN_SMTIMER_VS1_ADDR) &&
	    (addr <  IBU_P2_PHY_TRAIN_SMTIMER_VS1_ADDR + 
	             IBU_P2_PHY_TRAIN_SMTIMER_VS1_STRIDE * 
	             IBU_P2_PHY_TRAIN_SMTIMER_VS1_DEPTH)) {
		return("IBU_P2_PHY_TRAIN_SMTIMER_VS1");
	}
	if ((addr >= IBU_P2_MASK_ADDR) &&
	    (addr <  IBU_P2_MASK_ADDR + 
	             IBU_P2_MASK_STRIDE * 
	             IBU_P2_MASK_DEPTH)) {
		return("IBU_P2_MASK");
	}
	if ((addr >= IBU_P2_STATUS_ADDR) &&
	    (addr <  IBU_P2_STATUS_ADDR + 
	             IBU_P2_STATUS_STRIDE * 
	             IBU_P2_STATUS_DEPTH)) {
		return("IBU_P2_STATUS");
	}
	if ((addr >= IBU_P2_LINK_WIDTH_ENABLED_ADDR) &&
	    (addr <  IBU_P2_LINK_WIDTH_ENABLED_ADDR + 
	             IBU_P2_LINK_WIDTH_ENABLED_STRIDE * 
	             IBU_P2_LINK_WIDTH_ENABLED_DEPTH)) {
		return("IBU_P2_LINK_WIDTH_ENABLED");
	}
	if ((addr >= IBU_P2_LINK_WIDTH_SUPPORTED_ADDR) &&
	    (addr <  IBU_P2_LINK_WIDTH_SUPPORTED_ADDR + 
	             IBU_P2_LINK_WIDTH_SUPPORTED_STRIDE * 
	             IBU_P2_LINK_WIDTH_SUPPORTED_DEPTH)) {
		return("IBU_P2_LINK_WIDTH_SUPPORTED");
	}
	if ((addr >= IBU_P2_LINK_WIDTH_ACTIVE_ADDR) &&
	    (addr <  IBU_P2_LINK_WIDTH_ACTIVE_ADDR + 
	             IBU_P2_LINK_WIDTH_ACTIVE_STRIDE * 
	             IBU_P2_LINK_WIDTH_ACTIVE_DEPTH)) {
		return("IBU_P2_LINK_WIDTH_ACTIVE");
	}
	if ((addr >= IBU_P2_LINK_SPEED_SUPPORTED_ADDR) &&
	    (addr <  IBU_P2_LINK_SPEED_SUPPORTED_ADDR + 
	             IBU_P2_LINK_SPEED_SUPPORTED_STRIDE * 
	             IBU_P2_LINK_SPEED_SUPPORTED_DEPTH)) {
		return("IBU_P2_LINK_SPEED_SUPPORTED");
	}
	if ((addr >= IBU_P2_PORT_PHYSICAL_STATE_ADDR) &&
	    (addr <  IBU_P2_PORT_PHYSICAL_STATE_ADDR + 
	             IBU_P2_PORT_PHYSICAL_STATE_STRIDE * 
	             IBU_P2_PORT_PHYSICAL_STATE_DEPTH)) {
		return("IBU_P2_PORT_PHYSICAL_STATE");
	}
	if ((addr >= IBU_P2_LINK_DOWN_DEFAULT_STATE_ADDR) &&
	    (addr <  IBU_P2_LINK_DOWN_DEFAULT_STATE_ADDR + 
	             IBU_P2_LINK_DOWN_DEFAULT_STATE_STRIDE * 
	             IBU_P2_LINK_DOWN_DEFAULT_STATE_DEPTH)) {
		return("IBU_P2_LINK_DOWN_DEFAULT_STATE");
	}
	if ((addr >= IBU_P2_LINK_SPEED_ACTIVE_ADDR) &&
	    (addr <  IBU_P2_LINK_SPEED_ACTIVE_ADDR + 
	             IBU_P2_LINK_SPEED_ACTIVE_STRIDE * 
	             IBU_P2_LINK_SPEED_ACTIVE_DEPTH)) {
		return("IBU_P2_LINK_SPEED_ACTIVE");
	}
	if ((addr >= IBU_P2_LINK_SPEED_ENABLED_ADDR) &&
	    (addr <  IBU_P2_LINK_SPEED_ENABLED_ADDR + 
	             IBU_P2_LINK_SPEED_ENABLED_STRIDE * 
	             IBU_P2_LINK_SPEED_ENABLED_DEPTH)) {
		return("IBU_P2_LINK_SPEED_ENABLED");
	}
	if ((addr >= IBU_P2_PCPHY_CNT_RST_ADDR) &&
	    (addr <  IBU_P2_PCPHY_CNT_RST_ADDR + 
	             IBU_P2_PCPHY_CNT_RST_STRIDE * 
	             IBU_P2_PCPHY_CNT_RST_DEPTH)) {
		return("IBU_P2_PCPHY_CNT_RST");
	}
	if ((addr >= IBU_P2_PCPHY_CNT_LOAD_ADDR) &&
	    (addr <  IBU_P2_PCPHY_CNT_LOAD_ADDR + 
	             IBU_P2_PCPHY_CNT_LOAD_STRIDE * 
	             IBU_P2_PCPHY_CNT_LOAD_DEPTH)) {
		return("IBU_P2_PCPHY_CNT_LOAD");
	}
	if ((addr >= IBU_P2_PCSYMB_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCSYMB_ERR_CNT_ADDR + 
	             IBU_P2_PCSYMB_ERR_CNT_STRIDE * 
	             IBU_P2_PCSYMB_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCSYMB_ERR_CNT");
	}
	if ((addr >= IBU_P2_PCLINK_ERR_REC_CNT_ADDR) &&
	    (addr <  IBU_P2_PCLINK_ERR_REC_CNT_ADDR + 
	             IBU_P2_PCLINK_ERR_REC_CNT_STRIDE * 
	             IBU_P2_PCLINK_ERR_REC_CNT_DEPTH)) {
		return("IBU_P2_PCLINK_ERR_REC_CNT");
	}
	if ((addr >= IBU_P2_PCLINK_DOWNED_CNT_ADDR) &&
	    (addr <  IBU_P2_PCLINK_DOWNED_CNT_ADDR + 
	             IBU_P2_PCLINK_DOWNED_CNT_STRIDE * 
	             IBU_P2_PCLINK_DOWNED_CNT_DEPTH)) {
		return("IBU_P2_PCLINK_DOWNED_CNT");
	}
	if ((addr >= IBU_P2_PCSYMB_ERR_CNT_LANE0_ADDR) &&
	    (addr <  IBU_P2_PCSYMB_ERR_CNT_LANE0_ADDR + 
	             IBU_P2_PCSYMB_ERR_CNT_LANE0_STRIDE * 
	             IBU_P2_PCSYMB_ERR_CNT_LANE0_DEPTH)) {
		return("IBU_P2_PCSYMB_ERR_CNT_LANE0");
	}
	if ((addr >= IBU_P2_PCSYMB_ERR_CNT_LANE1_ADDR) &&
	    (addr <  IBU_P2_PCSYMB_ERR_CNT_LANE1_ADDR + 
	             IBU_P2_PCSYMB_ERR_CNT_LANE1_STRIDE * 
	             IBU_P2_PCSYMB_ERR_CNT_LANE1_DEPTH)) {
		return("IBU_P2_PCSYMB_ERR_CNT_LANE1");
	}
	if ((addr >= IBU_P2_PCSYMB_ERR_CNT_LANE2_ADDR) &&
	    (addr <  IBU_P2_PCSYMB_ERR_CNT_LANE2_ADDR + 
	             IBU_P2_PCSYMB_ERR_CNT_LANE2_STRIDE * 
	             IBU_P2_PCSYMB_ERR_CNT_LANE2_DEPTH)) {
		return("IBU_P2_PCSYMB_ERR_CNT_LANE2");
	}
	if ((addr >= IBU_P2_PCSYMB_ERR_CNT_LANE3_ADDR) &&
	    (addr <  IBU_P2_PCSYMB_ERR_CNT_LANE3_ADDR + 
	             IBU_P2_PCSYMB_ERR_CNT_LANE3_STRIDE * 
	             IBU_P2_PCSYMB_ERR_CNT_LANE3_DEPTH)) {
		return("IBU_P2_PCSYMB_ERR_CNT_LANE3");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT0_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT0_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT0_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT0_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT0_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT1_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT1_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT1_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT1_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT1_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT2_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT2_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT2_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT2_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT2_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT3_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT3_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT3_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT3_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT3_COUNTER");
	}
	if ((addr >= IBU_P2_PHY_ALIGN_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P2_PHY_ALIGN_ERROR_CNT_ADDR + 
	             IBU_P2_PHY_ALIGN_ERROR_CNT_STRIDE * 
	             IBU_P2_PHY_ALIGN_ERROR_CNT_DEPTH)) {
		return("IBU_P2_PHY_ALIGN_ERROR_CNT");
	}
	if ((addr >= IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT_ADDR + 
	             IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT_STRIDE * 
	             IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT_DEPTH)) {
		return("IBU_P2_PHY_CNTRL_IN_PKT_ERROR_CNT");
	}
	if ((addr >= IBU_P2_PHY_PAD_ERROR_CNT_ADDR) &&
	    (addr <  IBU_P2_PHY_PAD_ERROR_CNT_ADDR + 
	             IBU_P2_PHY_PAD_ERROR_CNT_STRIDE * 
	             IBU_P2_PHY_PAD_ERROR_CNT_DEPTH)) {
		return("IBU_P2_PHY_PAD_ERROR_CNT");
	}
	if ((addr >= IBU_P2_PHY_EDR_FDR_CONFIG0_ADDR) &&
	    (addr <  IBU_P2_PHY_EDR_FDR_CONFIG0_ADDR + 
	             IBU_P2_PHY_EDR_FDR_CONFIG0_STRIDE * 
	             IBU_P2_PHY_EDR_FDR_CONFIG0_DEPTH)) {
		return("IBU_P2_PHY_EDR_FDR_CONFIG0");
	}
	if ((addr >= IBU_P2_PHY_EDR_FDR_CONFIG1_ADDR) &&
	    (addr <  IBU_P2_PHY_EDR_FDR_CONFIG1_ADDR + 
	             IBU_P2_PHY_EDR_FDR_CONFIG1_STRIDE * 
	             IBU_P2_PHY_EDR_FDR_CONFIG1_DEPTH)) {
		return("IBU_P2_PHY_EDR_FDR_CONFIG1");
	}
	if ((addr >= IBU_P2_PHY_LEAKY_BKT_THRSH_ADDR) &&
	    (addr <  IBU_P2_PHY_LEAKY_BKT_THRSH_ADDR + 
	             IBU_P2_PHY_LEAKY_BKT_THRSH_STRIDE * 
	             IBU_P2_PHY_LEAKY_BKT_THRSH_DEPTH)) {
		return("IBU_P2_PHY_LEAKY_BKT_THRSH");
	}
	if ((addr >= IBU_P2_RCV_TS3_STATUS_LOW_ADDR) &&
	    (addr <  IBU_P2_RCV_TS3_STATUS_LOW_ADDR + 
	             IBU_P2_RCV_TS3_STATUS_LOW_STRIDE * 
	             IBU_P2_RCV_TS3_STATUS_LOW_DEPTH)) {
		return("IBU_P2_RCV_TS3_STATUS_LOW");
	}
	if ((addr >= IBU_P2_RCV_TS3_STATUS_HIGH_ADDR) &&
	    (addr <  IBU_P2_RCV_TS3_STATUS_HIGH_ADDR + 
	             IBU_P2_RCV_TS3_STATUS_HIGH_STRIDE * 
	             IBU_P2_RCV_TS3_STATUS_HIGH_DEPTH)) {
		return("IBU_P2_RCV_TS3_STATUS_HIGH");
	}
	if ((addr >= IBU_P2_GUID0_ADDR) &&
	    (addr <  IBU_P2_GUID0_ADDR + 
	             IBU_P2_GUID0_STRIDE * 
	             IBU_P2_GUID0_DEPTH)) {
		return("IBU_P2_GUID0");
	}
	if ((addr >= IBU_P2_GUID1_ADDR) &&
	    (addr <  IBU_P2_GUID1_ADDR + 
	             IBU_P2_GUID1_STRIDE * 
	             IBU_P2_GUID1_DEPTH)) {
		return("IBU_P2_GUID1");
	}
	if ((addr >= IBU_P2_PNUM_ADDR) &&
	    (addr <  IBU_P2_PNUM_ADDR + 
	             IBU_P2_PNUM_STRIDE * 
	             IBU_P2_PNUM_DEPTH)) {
		return("IBU_P2_PNUM");
	}
	if ((addr >= IBU_P2_CNT4MS_ADDR) &&
	    (addr <  IBU_P2_CNT4MS_ADDR + 
	             IBU_P2_CNT4MS_STRIDE * 
	             IBU_P2_CNT4MS_DEPTH)) {
		return("IBU_P2_CNT4MS");
	}
	if ((addr >= IBU_P2_CNT36MS_ADDR) &&
	    (addr <  IBU_P2_CNT36MS_ADDR + 
	             IBU_P2_CNT36MS_STRIDE * 
	             IBU_P2_CNT36MS_DEPTH)) {
		return("IBU_P2_CNT36MS");
	}
	if ((addr >= IBU_P2_PHY_TS3_CONFIG_ADDR) &&
	    (addr <  IBU_P2_PHY_TS3_CONFIG_ADDR + 
	             IBU_P2_PHY_TS3_CONFIG_STRIDE * 
	             IBU_P2_PHY_TS3_CONFIG_DEPTH)) {
		return("IBU_P2_PHY_TS3_CONFIG");
	}
	if ((addr >= IBU_P2_DDS_WINDOW_START_ADDR) &&
	    (addr <  IBU_P2_DDS_WINDOW_START_ADDR + 
	             IBU_P2_DDS_WINDOW_START_STRIDE * 
	             IBU_P2_DDS_WINDOW_START_DEPTH)) {
		return("IBU_P2_DDS_WINDOW_START");
	}
	if ((addr >= IBU_P2_DDS_WINDOW_END_ADDR) &&
	    (addr <  IBU_P2_DDS_WINDOW_END_ADDR + 
	             IBU_P2_DDS_WINDOW_END_STRIDE * 
	             IBU_P2_DDS_WINDOW_END_DEPTH)) {
		return("IBU_P2_DDS_WINDOW_END");
	}
	if ((addr >= IBU_P2_DDS_DEFAULT_WINDOW_END_ADDR) &&
	    (addr <  IBU_P2_DDS_DEFAULT_WINDOW_END_ADDR + 
	             IBU_P2_DDS_DEFAULT_WINDOW_END_STRIDE * 
	             IBU_P2_DDS_DEFAULT_WINDOW_END_DEPTH)) {
		return("IBU_P2_DDS_DEFAULT_WINDOW_END");
	}
	if ((addr >= IBU_P2_RX_TS3DDS_STATUS_ADDR) &&
	    (addr <  IBU_P2_RX_TS3DDS_STATUS_ADDR + 
	             IBU_P2_RX_TS3DDS_STATUS_STRIDE * 
	             IBU_P2_RX_TS3DDS_STATUS_DEPTH)) {
		return("IBU_P2_RX_TS3DDS_STATUS");
	}
	if ((addr >= IBU_P2_TX_TS3DDS_STATUS_ADDR) &&
	    (addr <  IBU_P2_TX_TS3DDS_STATUS_ADDR + 
	             IBU_P2_TX_TS3DDS_STATUS_STRIDE * 
	             IBU_P2_TX_TS3DDS_STATUS_DEPTH)) {
		return("IBU_P2_TX_TS3DDS_STATUS");
	}
	if ((addr >= IBU_P2_CNT16MS_ADDR) &&
	    (addr <  IBU_P2_CNT16MS_ADDR + 
	             IBU_P2_CNT16MS_STRIDE * 
	             IBU_P2_CNT16MS_DEPTH)) {
		return("IBU_P2_CNT16MS");
	}
	if ((addr >= IBU_P2_CONF_TEST4MS_SCT_ADDR) &&
	    (addr <  IBU_P2_CONF_TEST4MS_SCT_ADDR + 
	             IBU_P2_CONF_TEST4MS_SCT_STRIDE * 
	             IBU_P2_CONF_TEST4MS_SCT_DEPTH)) {
		return("IBU_P2_CONF_TEST4MS_SCT");
	}
	if ((addr >= IBU_P2_CONF_TEST16MS_SCT_ADDR) &&
	    (addr <  IBU_P2_CONF_TEST16MS_SCT_ADDR + 
	             IBU_P2_CONF_TEST16MS_SCT_STRIDE * 
	             IBU_P2_CONF_TEST16MS_SCT_DEPTH)) {
		return("IBU_P2_CONF_TEST16MS_SCT");
	}
	if ((addr >= IBU_P2_LOCAL_ADDTEST_LIMIT_ADDR) &&
	    (addr <  IBU_P2_LOCAL_ADDTEST_LIMIT_ADDR + 
	             IBU_P2_LOCAL_ADDTEST_LIMIT_STRIDE * 
	             IBU_P2_LOCAL_ADDTEST_LIMIT_DEPTH)) {
		return("IBU_P2_LOCAL_ADDTEST_LIMIT");
	}
	if ((addr >= IBU_P2_REMOTE_ADDTEST_LIMIT_ADDR) &&
	    (addr <  IBU_P2_REMOTE_ADDTEST_LIMIT_ADDR + 
	             IBU_P2_REMOTE_ADDTEST_LIMIT_STRIDE * 
	             IBU_P2_REMOTE_ADDTEST_LIMIT_DEPTH)) {
		return("IBU_P2_REMOTE_ADDTEST_LIMIT");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT4_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT4_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT4_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT4_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT4_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT5_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT5_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT5_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT5_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT5_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT6_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT6_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT6_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT6_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT6_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT7_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT7_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT7_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT7_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT7_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT8_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT8_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT8_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT8_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT8_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT9_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT9_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT9_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT9_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT9_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT10_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT10_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT10_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT10_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT10_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT11_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT11_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT11_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT11_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT11_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT12_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT12_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT12_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT12_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT12_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT13_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT13_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT13_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT13_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT13_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT14_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT14_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT14_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT14_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT14_COUNTER");
	}
	if ((addr >= IBU_P2_TS3_REV1_TT15_COUNTER_ADDR) &&
	    (addr <  IBU_P2_TS3_REV1_TT15_COUNTER_ADDR + 
	             IBU_P2_TS3_REV1_TT15_COUNTER_STRIDE * 
	             IBU_P2_TS3_REV1_TT15_COUNTER_DEPTH)) {
		return("IBU_P2_TS3_REV1_TT15_COUNTER");
	}
	if ((addr >= IBU_P2_CONF_TEST_LANE_ERROR_LIMIT_ADDR) &&
	    (addr <  IBU_P2_CONF_TEST_LANE_ERROR_LIMIT_ADDR + 
	             IBU_P2_CONF_TEST_LANE_ERROR_LIMIT_STRIDE * 
	             IBU_P2_CONF_TEST_LANE_ERROR_LIMIT_DEPTH)) {
		return("IBU_P2_CONF_TEST_LANE_ERROR_LIMIT");
	}
	if ((addr >= IBU_P2_CONF_TEST_IDLE_LIMIT_ADDR) &&
	    (addr <  IBU_P2_CONF_TEST_IDLE_LIMIT_ADDR + 
	             IBU_P2_CONF_TEST_IDLE_LIMIT_STRIDE * 
	             IBU_P2_CONF_TEST_IDLE_LIMIT_DEPTH)) {
		return("IBU_P2_CONF_TEST_IDLE_LIMIT");
	}
	if ((addr >= IBU_P2_CONF_TEST2MS_SCT_ADDR) &&
	    (addr <  IBU_P2_CONF_TEST2MS_SCT_ADDR + 
	             IBU_P2_CONF_TEST2MS_SCT_STRIDE * 
	             IBU_P2_CONF_TEST2MS_SCT_DEPTH)) {
		return("IBU_P2_CONF_TEST2MS_SCT");
	}
	if ((addr >= IBU_P2_CNT100_MS_HBR_ADDR) &&
	    (addr <  IBU_P2_CNT100_MS_HBR_ADDR + 
	             IBU_P2_CNT100_MS_HBR_STRIDE * 
	             IBU_P2_CNT100_MS_HBR_DEPTH)) {
		return("IBU_P2_CNT100_MS_HBR");
	}
	if ((addr >= IBU_P2_PMAEQULANE0_STATUS_ADDR) &&
	    (addr <  IBU_P2_PMAEQULANE0_STATUS_ADDR + 
	             IBU_P2_PMAEQULANE0_STATUS_STRIDE * 
	             IBU_P2_PMAEQULANE0_STATUS_DEPTH)) {
		return("IBU_P2_PMAEQULANE0_STATUS");
	}
	if ((addr >= IBU_P2_PMAEQULANE1_STATUS_ADDR) &&
	    (addr <  IBU_P2_PMAEQULANE1_STATUS_ADDR + 
	             IBU_P2_PMAEQULANE1_STATUS_STRIDE * 
	             IBU_P2_PMAEQULANE1_STATUS_DEPTH)) {
		return("IBU_P2_PMAEQULANE1_STATUS");
	}
	if ((addr >= IBU_P2_PMAEQULANE2_STATUS_ADDR) &&
	    (addr <  IBU_P2_PMAEQULANE2_STATUS_ADDR + 
	             IBU_P2_PMAEQULANE2_STATUS_STRIDE * 
	             IBU_P2_PMAEQULANE2_STATUS_DEPTH)) {
		return("IBU_P2_PMAEQULANE2_STATUS");
	}
	if ((addr >= IBU_P2_PMAEQULANE3_STATUS_ADDR) &&
	    (addr <  IBU_P2_PMAEQULANE3_STATUS_ADDR + 
	             IBU_P2_PMAEQULANE3_STATUS_STRIDE * 
	             IBU_P2_PMAEQULANE3_STATUS_DEPTH)) {
		return("IBU_P2_PMAEQULANE3_STATUS");
	}
	if ((addr >= IBU_P2_PMADDSLANE0_STATUS_ADDR) &&
	    (addr <  IBU_P2_PMADDSLANE0_STATUS_ADDR + 
	             IBU_P2_PMADDSLANE0_STATUS_STRIDE * 
	             IBU_P2_PMADDSLANE0_STATUS_DEPTH)) {
		return("IBU_P2_PMADDSLANE0_STATUS");
	}
	if ((addr >= IBU_P2_PMADDSLANE1_STATUS_ADDR) &&
	    (addr <  IBU_P2_PMADDSLANE1_STATUS_ADDR + 
	             IBU_P2_PMADDSLANE1_STATUS_STRIDE * 
	             IBU_P2_PMADDSLANE1_STATUS_DEPTH)) {
		return("IBU_P2_PMADDSLANE1_STATUS");
	}
	if ((addr >= IBU_P2_PMADDSLANE2_STATUS_ADDR) &&
	    (addr <  IBU_P2_PMADDSLANE2_STATUS_ADDR + 
	             IBU_P2_PMADDSLANE2_STATUS_STRIDE * 
	             IBU_P2_PMADDSLANE2_STATUS_DEPTH)) {
		return("IBU_P2_PMADDSLANE2_STATUS");
	}
	if ((addr >= IBU_P2_PMADDSLANE3_STATUS_ADDR) &&
	    (addr <  IBU_P2_PMADDSLANE3_STATUS_ADDR + 
	             IBU_P2_PMADDSLANE3_STATUS_STRIDE * 
	             IBU_P2_PMADDSLANE3_STATUS_DEPTH)) {
		return("IBU_P2_PMADDSLANE3_STATUS");
	}
	if ((addr >= IBU_P2_PHY_EDPL_ERR0_ADDR) &&
	    (addr <  IBU_P2_PHY_EDPL_ERR0_ADDR + 
	             IBU_P2_PHY_EDPL_ERR0_STRIDE * 
	             IBU_P2_PHY_EDPL_ERR0_DEPTH)) {
		return("IBU_P2_PHY_EDPL_ERR0");
	}
	if ((addr >= IBU_P2_PHY_EDPL_ERR1_ADDR) &&
	    (addr <  IBU_P2_PHY_EDPL_ERR1_ADDR + 
	             IBU_P2_PHY_EDPL_ERR1_STRIDE * 
	             IBU_P2_PHY_EDPL_ERR1_DEPTH)) {
		return("IBU_P2_PHY_EDPL_ERR1");
	}
	if ((addr >= IBU_P2_PHY_EDPL_ERR2_ADDR) &&
	    (addr <  IBU_P2_PHY_EDPL_ERR2_ADDR + 
	             IBU_P2_PHY_EDPL_ERR2_STRIDE * 
	             IBU_P2_PHY_EDPL_ERR2_DEPTH)) {
		return("IBU_P2_PHY_EDPL_ERR2");
	}
	if ((addr >= IBU_P2_PHY_EDPL_ERR3_ADDR) &&
	    (addr <  IBU_P2_PHY_EDPL_ERR3_ADDR + 
	             IBU_P2_PHY_EDPL_ERR3_STRIDE * 
	             IBU_P2_PHY_EDPL_ERR3_DEPTH)) {
		return("IBU_P2_PHY_EDPL_ERR3");
	}
	if ((addr >= IBU_P2_PHY_BLK_TYPE_ERR_ADDR) &&
	    (addr <  IBU_P2_PHY_BLK_TYPE_ERR_ADDR + 
	             IBU_P2_PHY_BLK_TYPE_ERR_STRIDE * 
	             IBU_P2_PHY_BLK_TYPE_ERR_DEPTH)) {
		return("IBU_P2_PHY_BLK_TYPE_ERR");
	}
	if ((addr >= IBU_P2_PHY_BLK_EOP_ERR_ADDR) &&
	    (addr <  IBU_P2_PHY_BLK_EOP_ERR_ADDR + 
	             IBU_P2_PHY_BLK_EOP_ERR_STRIDE * 
	             IBU_P2_PHY_BLK_EOP_ERR_DEPTH)) {
		return("IBU_P2_PHY_BLK_EOP_ERR");
	}
	if ((addr >= IBU_P2_PHY_CIN_PKT_ERR_ADDR) &&
	    (addr <  IBU_P2_PHY_CIN_PKT_ERR_ADDR + 
	             IBU_P2_PHY_CIN_PKT_ERR_STRIDE * 
	             IBU_P2_PHY_CIN_PKT_ERR_DEPTH)) {
		return("IBU_P2_PHY_CIN_PKT_ERR");
	}
	if ((addr >= IBU_P2_PHY_SYN_HDR_ERR_ADDR) &&
	    (addr <  IBU_P2_PHY_SYN_HDR_ERR_ADDR + 
	             IBU_P2_PHY_SYN_HDR_ERR_STRIDE * 
	             IBU_P2_PHY_SYN_HDR_ERR_DEPTH)) {
		return("IBU_P2_PHY_SYN_HDR_ERR");
	}
	if ((addr >= IBU_P2_PHY_PRBS_ERR0_ADDR) &&
	    (addr <  IBU_P2_PHY_PRBS_ERR0_ADDR + 
	             IBU_P2_PHY_PRBS_ERR0_STRIDE * 
	             IBU_P2_PHY_PRBS_ERR0_DEPTH)) {
		return("IBU_P2_PHY_PRBS_ERR0");
	}
	if ((addr >= IBU_P2_PHY_PRBS_ERR1_ADDR) &&
	    (addr <  IBU_P2_PHY_PRBS_ERR1_ADDR + 
	             IBU_P2_PHY_PRBS_ERR1_STRIDE * 
	             IBU_P2_PHY_PRBS_ERR1_DEPTH)) {
		return("IBU_P2_PHY_PRBS_ERR1");
	}
	if ((addr >= IBU_P2_PHY_PRBS_ERR2_ADDR) &&
	    (addr <  IBU_P2_PHY_PRBS_ERR2_ADDR + 
	             IBU_P2_PHY_PRBS_ERR2_STRIDE * 
	             IBU_P2_PHY_PRBS_ERR2_DEPTH)) {
		return("IBU_P2_PHY_PRBS_ERR2");
	}
	if ((addr >= IBU_P2_PHY_PRBS_ERR3_ADDR) &&
	    (addr <  IBU_P2_PHY_PRBS_ERR3_ADDR + 
	             IBU_P2_PHY_PRBS_ERR3_STRIDE * 
	             IBU_P2_PHY_PRBS_ERR3_DEPTH)) {
		return("IBU_P2_PHY_PRBS_ERR3");
	}
	if ((addr >= IBU_P2_PHY_DESKEW_STATUS_ADDR) &&
	    (addr <  IBU_P2_PHY_DESKEW_STATUS_ADDR + 
	             IBU_P2_PHY_DESKEW_STATUS_STRIDE * 
	             IBU_P2_PHY_DESKEW_STATUS_DEPTH)) {
		return("IBU_P2_PHY_DESKEW_STATUS");
	}
	if ((addr >= IBU_P2_PHY_FECUNC_ERR0_ADDR) &&
	    (addr <  IBU_P2_PHY_FECUNC_ERR0_ADDR + 
	             IBU_P2_PHY_FECUNC_ERR0_STRIDE * 
	             IBU_P2_PHY_FECUNC_ERR0_DEPTH)) {
		return("IBU_P2_PHY_FECUNC_ERR0");
	}
	if ((addr >= IBU_P2_PHY_FECUNC_ERR1_ADDR) &&
	    (addr <  IBU_P2_PHY_FECUNC_ERR1_ADDR + 
	             IBU_P2_PHY_FECUNC_ERR1_STRIDE * 
	             IBU_P2_PHY_FECUNC_ERR1_DEPTH)) {
		return("IBU_P2_PHY_FECUNC_ERR1");
	}
	if ((addr >= IBU_P2_PHY_FECUNC_ERR2_ADDR) &&
	    (addr <  IBU_P2_PHY_FECUNC_ERR2_ADDR + 
	             IBU_P2_PHY_FECUNC_ERR2_STRIDE * 
	             IBU_P2_PHY_FECUNC_ERR2_DEPTH)) {
		return("IBU_P2_PHY_FECUNC_ERR2");
	}
	if ((addr >= IBU_P2_PHY_FECUNC_ERR3_ADDR) &&
	    (addr <  IBU_P2_PHY_FECUNC_ERR3_ADDR + 
	             IBU_P2_PHY_FECUNC_ERR3_STRIDE * 
	             IBU_P2_PHY_FECUNC_ERR3_DEPTH)) {
		return("IBU_P2_PHY_FECUNC_ERR3");
	}
	if ((addr >= IBU_P2_PHY_FECCOR_ERR0_ADDR) &&
	    (addr <  IBU_P2_PHY_FECCOR_ERR0_ADDR + 
	             IBU_P2_PHY_FECCOR_ERR0_STRIDE * 
	             IBU_P2_PHY_FECCOR_ERR0_DEPTH)) {
		return("IBU_P2_PHY_FECCOR_ERR0");
	}
	if ((addr >= IBU_P2_PHY_FECCOR_ERR1_ADDR) &&
	    (addr <  IBU_P2_PHY_FECCOR_ERR1_ADDR + 
	             IBU_P2_PHY_FECCOR_ERR1_STRIDE * 
	             IBU_P2_PHY_FECCOR_ERR1_DEPTH)) {
		return("IBU_P2_PHY_FECCOR_ERR1");
	}
	if ((addr >= IBU_P2_PHY_FECCOR_ERR2_ADDR) &&
	    (addr <  IBU_P2_PHY_FECCOR_ERR2_ADDR + 
	             IBU_P2_PHY_FECCOR_ERR2_STRIDE * 
	             IBU_P2_PHY_FECCOR_ERR2_DEPTH)) {
		return("IBU_P2_PHY_FECCOR_ERR2");
	}
	if ((addr >= IBU_P2_PHY_FECCOR_ERR3_ADDR) &&
	    (addr <  IBU_P2_PHY_FECCOR_ERR3_ADDR + 
	             IBU_P2_PHY_FECCOR_ERR3_STRIDE * 
	             IBU_P2_PHY_FECCOR_ERR3_DEPTH)) {
		return("IBU_P2_PHY_FECCOR_ERR3");
	}
	if ((addr >= IBU_P2_PHY_SMSTATUS_ADDR) &&
	    (addr <  IBU_P2_PHY_SMSTATUS_ADDR + 
	             IBU_P2_PHY_SMSTATUS_STRIDE * 
	             IBU_P2_PHY_SMSTATUS_DEPTH)) {
		return("IBU_P2_PHY_SMSTATUS");
	}
	if ((addr >= IBU_P2_PHY_TS3_NEGOTIATED_STATUS_ADDR) &&
	    (addr <  IBU_P2_PHY_TS3_NEGOTIATED_STATUS_ADDR + 
	             IBU_P2_PHY_TS3_NEGOTIATED_STATUS_STRIDE * 
	             IBU_P2_PHY_TS3_NEGOTIATED_STATUS_DEPTH)) {
		return("IBU_P2_PHY_TS3_NEGOTIATED_STATUS");
	}
	if ((addr >= IBU_P2_PHY_TEST_ADDR) &&
	    (addr <  IBU_P2_PHY_TEST_ADDR + 
	             IBU_P2_PHY_TEST_STRIDE * 
	             IBU_P2_PHY_TEST_DEPTH)) {
		return("IBU_P2_PHY_TEST");
	}
	if ((addr >= IBU_P2_EDR_FDR_RX_STATUS_REG0_ADDR) &&
	    (addr <  IBU_P2_EDR_FDR_RX_STATUS_REG0_ADDR + 
	             IBU_P2_EDR_FDR_RX_STATUS_REG0_STRIDE * 
	             IBU_P2_EDR_FDR_RX_STATUS_REG0_DEPTH)) {
		return("IBU_P2_EDR_FDR_RX_STATUS_REG0");
	}
	if ((addr >= IBU_P2_EDR_FDR_RX_STATUS_REG1_ADDR) &&
	    (addr <  IBU_P2_EDR_FDR_RX_STATUS_REG1_ADDR + 
	             IBU_P2_EDR_FDR_RX_STATUS_REG1_STRIDE * 
	             IBU_P2_EDR_FDR_RX_STATUS_REG1_DEPTH)) {
		return("IBU_P2_EDR_FDR_RX_STATUS_REG1");
	}
	if ((addr >= IBU_P2_EDR_FDR_RX_STATUS_REG2_ADDR) &&
	    (addr <  IBU_P2_EDR_FDR_RX_STATUS_REG2_ADDR + 
	             IBU_P2_EDR_FDR_RX_STATUS_REG2_STRIDE * 
	             IBU_P2_EDR_FDR_RX_STATUS_REG2_DEPTH)) {
		return("IBU_P2_EDR_FDR_RX_STATUS_REG2");
	}
	if ((addr >= IBU_P2_EDR_FDR_TX_STATUS_REG0_ADDR) &&
	    (addr <  IBU_P2_EDR_FDR_TX_STATUS_REG0_ADDR + 
	             IBU_P2_EDR_FDR_TX_STATUS_REG0_STRIDE * 
	             IBU_P2_EDR_FDR_TX_STATUS_REG0_DEPTH)) {
		return("IBU_P2_EDR_FDR_TX_STATUS_REG0");
	}
	if ((addr >= IBU_P2_INT_PRIORITY_ADDR) &&
	    (addr <  IBU_P2_INT_PRIORITY_ADDR + 
	             IBU_P2_INT_PRIORITY_STRIDE * 
	             IBU_P2_INT_PRIORITY_DEPTH)) {
		return("IBU_P2_INT_PRIORITY");
	}
	if ((addr >= IBU_P2_INT_FATAL_ADDR) &&
	    (addr <  IBU_P2_INT_FATAL_ADDR + 
	             IBU_P2_INT_FATAL_STRIDE * 
	             IBU_P2_INT_FATAL_DEPTH)) {
		return("IBU_P2_INT_FATAL");
	}
	if ((addr >= IBU_P2_LINK_ROUND_TRIP_LATENCY_ADDR) &&
	    (addr <  IBU_P2_LINK_ROUND_TRIP_LATENCY_ADDR + 
	             IBU_P2_LINK_ROUND_TRIP_LATENCY_STRIDE * 
	             IBU_P2_LINK_ROUND_TRIP_LATENCY_DEPTH)) {
		return("IBU_P2_LINK_ROUND_TRIP_LATENCY");
	}
	if ((addr >= IBU_P2_PHY_FORCE_LEGACY_MODE_ADDR) &&
	    (addr <  IBU_P2_PHY_FORCE_LEGACY_MODE_ADDR + 
	             IBU_P2_PHY_FORCE_LEGACY_MODE_STRIDE * 
	             IBU_P2_PHY_FORCE_LEGACY_MODE_DEPTH)) {
		return("IBU_P2_PHY_FORCE_LEGACY_MODE");
	}
	if ((addr >= IBU_P2_LID_ADDR) &&
	    (addr <  IBU_P2_LID_ADDR + 
	             IBU_P2_LID_STRIDE * 
	             IBU_P2_LID_DEPTH)) {
		return("IBU_P2_LID");
	}
	if ((addr >= IBU_P2_LMC_ADDR) &&
	    (addr <  IBU_P2_LMC_ADDR + 
	             IBU_P2_LMC_STRIDE * 
	             IBU_P2_LMC_DEPTH)) {
		return("IBU_P2_LMC");
	}
	if ((addr >= IBU_P2_PORT_STATE_ADDR) &&
	    (addr <  IBU_P2_PORT_STATE_ADDR + 
	             IBU_P2_PORT_STATE_STRIDE * 
	             IBU_P2_PORT_STATE_DEPTH)) {
		return("IBU_P2_PORT_STATE");
	}
	if ((addr >= IBU_P2_VLCAP_ADDR) &&
	    (addr <  IBU_P2_VLCAP_ADDR + 
	             IBU_P2_VLCAP_STRIDE * 
	             IBU_P2_VLCAP_DEPTH)) {
		return("IBU_P2_VLCAP");
	}
	if ((addr >= IBU_P2_NEIGHBOR_MTU_ADDR) &&
	    (addr <  IBU_P2_NEIGHBOR_MTU_ADDR + 
	             IBU_P2_NEIGHBOR_MTU_STRIDE * 
	             IBU_P2_NEIGHBOR_MTU_DEPTH)) {
		return("IBU_P2_NEIGHBOR_MTU");
	}
	if ((addr >= IBU_P2_VLHIGH_LIMIT_ADDR) &&
	    (addr <  IBU_P2_VLHIGH_LIMIT_ADDR + 
	             IBU_P2_VLHIGH_LIMIT_STRIDE * 
	             IBU_P2_VLHIGH_LIMIT_DEPTH)) {
		return("IBU_P2_VLHIGH_LIMIT");
	}
	if ((addr >= IBU_P2_VLARBITRATION_HIGH_CAP_ADDR) &&
	    (addr <  IBU_P2_VLARBITRATION_HIGH_CAP_ADDR + 
	             IBU_P2_VLARBITRATION_HIGH_CAP_STRIDE * 
	             IBU_P2_VLARBITRATION_HIGH_CAP_DEPTH)) {
		return("IBU_P2_VLARBITRATION_HIGH_CAP");
	}
	if ((addr >= IBU_P2_VLARBITRATION_LOW_CAP_ADDR) &&
	    (addr <  IBU_P2_VLARBITRATION_LOW_CAP_ADDR + 
	             IBU_P2_VLARBITRATION_LOW_CAP_STRIDE * 
	             IBU_P2_VLARBITRATION_LOW_CAP_DEPTH)) {
		return("IBU_P2_VLARBITRATION_LOW_CAP");
	}
	if ((addr >= IBU_P2_MTUCAP_ADDR) &&
	    (addr <  IBU_P2_MTUCAP_ADDR + 
	             IBU_P2_MTUCAP_STRIDE * 
	             IBU_P2_MTUCAP_DEPTH)) {
		return("IBU_P2_MTUCAP");
	}
	if ((addr >= IBU_P2_OPERATIONAL_VLS_ADDR) &&
	    (addr <  IBU_P2_OPERATIONAL_VLS_ADDR + 
	             IBU_P2_OPERATIONAL_VLS_STRIDE * 
	             IBU_P2_OPERATIONAL_VLS_DEPTH)) {
		return("IBU_P2_OPERATIONAL_VLS");
	}
	if ((addr >= IBU_P2_PCPORT_RCV_ERROR_ADDR) &&
	    (addr <  IBU_P2_PCPORT_RCV_ERROR_ADDR + 
	             IBU_P2_PCPORT_RCV_ERROR_STRIDE * 
	             IBU_P2_PCPORT_RCV_ERROR_DEPTH)) {
		return("IBU_P2_PCPORT_RCV_ERROR");
	}
	if ((addr >= IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_ADDR + 
	             IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_STRIDE * 
	             IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS_DEPTH)) {
		return("IBU_P2_PCPORT_RCV_REMOTE_PHYSICAL_ERRORS");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_DISCARDS_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_DISCARDS_ADDR + 
	             IBU_P2_PCPORT_XMIT_DISCARDS_STRIDE * 
	             IBU_P2_PCPORT_XMIT_DISCARDS_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_DISCARDS");
	}
	if ((addr >= IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS_ADDR + 
	             IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS_STRIDE * 
	             IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS_DEPTH)) {
		return("IBU_P2_PCLOCAL_LINK_INTEGRITY_ERRORS");
	}
	if ((addr >= IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_ADDR + 
	             IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_STRIDE * 
	             IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS_DEPTH)) {
		return("IBU_P2_PCEXCESSIVE_BUFFER_OVERRUN_ERRORS");
	}
	if ((addr >= IBU_P2_PCVL15_DROPPED_ADDR) &&
	    (addr <  IBU_P2_PCVL15_DROPPED_ADDR + 
	             IBU_P2_PCVL15_DROPPED_STRIDE * 
	             IBU_P2_PCVL15_DROPPED_DEPTH)) {
		return("IBU_P2_PCVL15_DROPPED");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_DATA_LSQW_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_DATA_LSQW_ADDR + 
	             IBU_P2_PCPORT_XMIT_DATA_LSQW_STRIDE * 
	             IBU_P2_PCPORT_XMIT_DATA_LSQW_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_DATA_LSQW");
	}
	if ((addr >= IBU_P2_LINK_ERROR_CHECK_ENABLE_ADDR) &&
	    (addr <  IBU_P2_LINK_ERROR_CHECK_ENABLE_ADDR + 
	             IBU_P2_LINK_ERROR_CHECK_ENABLE_STRIDE * 
	             IBU_P2_LINK_ERROR_CHECK_ENABLE_DEPTH)) {
		return("IBU_P2_LINK_ERROR_CHECK_ENABLE");
	}
	if ((addr >= IBU_P2_PCPORT_RCV_DATA_LSQW_ADDR) &&
	    (addr <  IBU_P2_PCPORT_RCV_DATA_LSQW_ADDR + 
	             IBU_P2_PCPORT_RCV_DATA_LSQW_STRIDE * 
	             IBU_P2_PCPORT_RCV_DATA_LSQW_DEPTH)) {
		return("IBU_P2_PCPORT_RCV_DATA_LSQW");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_PKTS_LSQW_ADDR + 
	             IBU_P2_PCPORT_XMIT_PKTS_LSQW_STRIDE * 
	             IBU_P2_PCPORT_XMIT_PKTS_LSQW_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_PKTS_LSQW");
	}
	if ((addr >= IBU_P2_PCPORT_RCV_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P2_PCPORT_RCV_PKTS_LSQW_ADDR + 
	             IBU_P2_PCPORT_RCV_PKTS_LSQW_STRIDE * 
	             IBU_P2_PCPORT_RCV_PKTS_LSQW_DEPTH)) {
		return("IBU_P2_PCPORT_RCV_PKTS_LSQW");
	}
	if ((addr >= IBU_P2_PCPORT_UCXMIT_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P2_PCPORT_UCXMIT_PKTS_LSQW_ADDR + 
	             IBU_P2_PCPORT_UCXMIT_PKTS_LSQW_STRIDE * 
	             IBU_P2_PCPORT_UCXMIT_PKTS_LSQW_DEPTH)) {
		return("IBU_P2_PCPORT_UCXMIT_PKTS_LSQW");
	}
	if ((addr >= IBU_P2_PCPORT_MCXMIT_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P2_PCPORT_MCXMIT_PKTS_LSQW_ADDR + 
	             IBU_P2_PCPORT_MCXMIT_PKTS_LSQW_STRIDE * 
	             IBU_P2_PCPORT_MCXMIT_PKTS_LSQW_DEPTH)) {
		return("IBU_P2_PCPORT_MCXMIT_PKTS_LSQW");
	}
	if ((addr >= IBU_P2_PCPORT_UCRCV_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P2_PCPORT_UCRCV_PKTS_LSQW_ADDR + 
	             IBU_P2_PCPORT_UCRCV_PKTS_LSQW_STRIDE * 
	             IBU_P2_PCPORT_UCRCV_PKTS_LSQW_DEPTH)) {
		return("IBU_P2_PCPORT_UCRCV_PKTS_LSQW");
	}
	if ((addr >= IBU_P2_PCPORT_MCRCV_PKTS_LSQW_ADDR) &&
	    (addr <  IBU_P2_PCPORT_MCRCV_PKTS_LSQW_ADDR + 
	             IBU_P2_PCPORT_MCRCV_PKTS_LSQW_STRIDE * 
	             IBU_P2_PCPORT_MCRCV_PKTS_LSQW_DEPTH)) {
		return("IBU_P2_PCPORT_MCRCV_PKTS_LSQW");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL0_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL0_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL0_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL0_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL0");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL1_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL1_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL1_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL1_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL1");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL2_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL2_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL2_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL2_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL2");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL3_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL3_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL3_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL3_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL3");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL4_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL4_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL4_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL4_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL4");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL5_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL5_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL5_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL5_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL5");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL6_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL6_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL6_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL6_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL6");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL7_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL7_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL7_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL7_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL7");
	}
	if ((addr >= IBU_P2_PCPORT_XMIT_WAIT_VL15_ADDR) &&
	    (addr <  IBU_P2_PCPORT_XMIT_WAIT_VL15_ADDR + 
	             IBU_P2_PCPORT_XMIT_WAIT_VL15_STRIDE * 
	             IBU_P2_PCPORT_XMIT_WAIT_VL15_DEPTH)) {
		return("IBU_P2_PCPORT_XMIT_WAIT_VL15");
	}
	if ((addr >= IBU_P2_PCRX_LINK_CNT_RST_ADDR) &&
	    (addr <  IBU_P2_PCRX_LINK_CNT_RST_ADDR + 
	             IBU_P2_PCRX_LINK_CNT_RST_STRIDE * 
	             IBU_P2_PCRX_LINK_CNT_RST_DEPTH)) {
		return("IBU_P2_PCRX_LINK_CNT_RST");
	}
	if ((addr >= IBU_P2_PCRX_LINK_CNT_LOAD_ADDR) &&
	    (addr <  IBU_P2_PCRX_LINK_CNT_LOAD_ADDR + 
	             IBU_P2_PCRX_LINK_CNT_LOAD_STRIDE * 
	             IBU_P2_PCRX_LINK_CNT_LOAD_DEPTH)) {
		return("IBU_P2_PCRX_LINK_CNT_LOAD");
	}
	if ((addr >= IBU_P2_LOCAL_PHY_ERRORS_ADDR) &&
	    (addr <  IBU_P2_LOCAL_PHY_ERRORS_ADDR + 
	             IBU_P2_LOCAL_PHY_ERRORS_STRIDE * 
	             IBU_P2_LOCAL_PHY_ERRORS_DEPTH)) {
		return("IBU_P2_LOCAL_PHY_ERRORS");
	}
	if ((addr >= IBU_P2_OVERRUN_ERRORS_ADDR) &&
	    (addr <  IBU_P2_OVERRUN_ERRORS_ADDR + 
	             IBU_P2_OVERRUN_ERRORS_STRIDE * 
	             IBU_P2_OVERRUN_ERRORS_DEPTH)) {
		return("IBU_P2_OVERRUN_ERRORS");
	}
	if ((addr >= IBU_P2_PSLINK_DLID_ADDR) &&
	    (addr <  IBU_P2_PSLINK_DLID_ADDR + 
	             IBU_P2_PSLINK_DLID_STRIDE * 
	             IBU_P2_PSLINK_DLID_DEPTH)) {
		return("IBU_P2_PSLINK_DLID");
	}
	if ((addr >= IBU_P2_PSTICK_ADDR) &&
	    (addr <  IBU_P2_PSTICK_ADDR + 
	             IBU_P2_PSTICK_STRIDE * 
	             IBU_P2_PSTICK_DEPTH)) {
		return("IBU_P2_PSTICK");
	}
	if ((addr >= IBU_P2_PSSTATUS_ADDR) &&
	    (addr <  IBU_P2_PSSTATUS_ADDR + 
	             IBU_P2_PSSTATUS_STRIDE * 
	             IBU_P2_PSSTATUS_DEPTH)) {
		return("IBU_P2_PSSTATUS");
	}
	if ((addr >= IBU_P2_PSSTART_DELAY_ADDR) &&
	    (addr <  IBU_P2_PSSTART_DELAY_ADDR + 
	             IBU_P2_PSSTART_DELAY_STRIDE * 
	             IBU_P2_PSSTART_DELAY_DEPTH)) {
		return("IBU_P2_PSSTART_DELAY");
	}
	if ((addr >= IBU_P2_PSINTERVAL_ADDR) &&
	    (addr <  IBU_P2_PSINTERVAL_ADDR + 
	             IBU_P2_PSINTERVAL_STRIDE * 
	             IBU_P2_PSINTERVAL_DEPTH)) {
		return("IBU_P2_PSINTERVAL");
	}
	if ((addr >= IBU_P2_PSCNT_SEL0_ADDR) &&
	    (addr <  IBU_P2_PSCNT_SEL0_ADDR + 
	             IBU_P2_PSCNT_SEL0_STRIDE * 
	             IBU_P2_PSCNT_SEL0_DEPTH)) {
		return("IBU_P2_PSCNT_SEL0");
	}
	if ((addr >= IBU_P2_PSCNT_SEL1_ADDR) &&
	    (addr <  IBU_P2_PSCNT_SEL1_ADDR + 
	             IBU_P2_PSCNT_SEL1_STRIDE * 
	             IBU_P2_PSCNT_SEL1_DEPTH)) {
		return("IBU_P2_PSCNT_SEL1");
	}
	if ((addr >= IBU_P2_PSCNT_SEL2_ADDR) &&
	    (addr <  IBU_P2_PSCNT_SEL2_ADDR + 
	             IBU_P2_PSCNT_SEL2_STRIDE * 
	             IBU_P2_PSCNT_SEL2_DEPTH)) {
		return("IBU_P2_PSCNT_SEL2");
	}
	if ((addr >= IBU_P2_PSCNT_SEL3_ADDR) &&
	    (addr <  IBU_P2_PSCNT_SEL3_ADDR + 
	             IBU_P2_PSCNT_SEL3_STRIDE * 
	             IBU_P2_PSCNT_SEL3_DEPTH)) {
		return("IBU_P2_PSCNT_SEL3");
	}
	if ((addr >= IBU_P2_PSCNT0_ADDR) &&
	    (addr <  IBU_P2_PSCNT0_ADDR + 
	             IBU_P2_PSCNT0_STRIDE * 
	             IBU_P2_PSCNT0_DEPTH)) {
		return("IBU_P2_PSCNT0");
	}
	if ((addr >= IBU_P2_PSCNT1_ADDR) &&
	    (addr <  IBU_P2_PSCNT1_ADDR + 
	             IBU_P2_PSCNT1_STRIDE * 
	             IBU_P2_PSCNT1_DEPTH)) {
		return("IBU_P2_PSCNT1");
	}
	if ((addr >= IBU_P2_PSCNT2_ADDR) &&
	    (addr <  IBU_P2_PSCNT2_ADDR + 
	             IBU_P2_PSCNT2_STRIDE * 
	             IBU_P2_PSCNT2_DEPTH)) {
		return("IBU_P2_PSCNT2");
	}
	if ((addr >= IBU_P2_PSCNT3_ADDR) &&
	    (addr <  IBU_P2_PSCNT3_ADDR + 
	             IBU_P2_PSCNT3_STRIDE * 
	             IBU_P2_PSCNT3_DEPTH)) {
		return("IBU_P2_PSCNT3");
	}
	if ((addr >= IBU_P2_PSINIT_SAMPLING_ADDR) &&
	    (addr <  IBU_P2_PSINIT_SAMPLING_ADDR + 
	             IBU_P2_PSINIT_SAMPLING_STRIDE * 
	             IBU_P2_PSINIT_SAMPLING_DEPTH)) {
		return("IBU_P2_PSINIT_SAMPLING");
	}
	if ((addr >= IBU_P2_PSCNT_LOAD_ADDR) &&
	    (addr <  IBU_P2_PSCNT_LOAD_ADDR + 
	             IBU_P2_PSCNT_LOAD_STRIDE * 
	             IBU_P2_PSCNT_LOAD_DEPTH)) {
		return("IBU_P2_PSCNT_LOAD");
	}
	if ((addr >= IBU_P2_PORT_STATE_CHANGE_ADDR) &&
	    (addr <  IBU_P2_PORT_STATE_CHANGE_ADDR + 
	             IBU_P2_PORT_STATE_CHANGE_STRIDE * 
	             IBU_P2_PORT_STATE_CHANGE_DEPTH)) {
		return("IBU_P2_PORT_STATE_CHANGE");
	}
	if ((addr >= IBU_P2_TRAP_REGISTER_ADDR) &&
	    (addr <  IBU_P2_TRAP_REGISTER_ADDR + 
	             IBU_P2_TRAP_REGISTER_STRIDE * 
	             IBU_P2_TRAP_REGISTER_DEPTH)) {
		return("IBU_P2_TRAP_REGISTER");
	}
	if ((addr >= IBU_P2_LINK_VCONFIG0_ADDR) &&
	    (addr <  IBU_P2_LINK_VCONFIG0_ADDR + 
	             IBU_P2_LINK_VCONFIG0_STRIDE * 
	             IBU_P2_LINK_VCONFIG0_DEPTH)) {
		return("IBU_P2_LINK_VCONFIG0");
	}
	if ((addr >= IBU_P2_LINK_VCONFIG1_ADDR) &&
	    (addr <  IBU_P2_LINK_VCONFIG1_ADDR + 
	             IBU_P2_LINK_VCONFIG1_STRIDE * 
	             IBU_P2_LINK_VCONFIG1_DEPTH)) {
		return("IBU_P2_LINK_VCONFIG1");
	}
	if ((addr >= IBU_P2_LINK_VCONFIG2_ADDR) &&
	    (addr <  IBU_P2_LINK_VCONFIG2_ADDR + 
	             IBU_P2_LINK_VCONFIG2_STRIDE * 
	             IBU_P2_LINK_VCONFIG2_DEPTH)) {
		return("IBU_P2_LINK_VCONFIG2");
	}
	if ((addr >= IBU_P2_LINK_RX_CREDIT_VL1_0_ADDR) &&
	    (addr <  IBU_P2_LINK_RX_CREDIT_VL1_0_ADDR + 
	             IBU_P2_LINK_RX_CREDIT_VL1_0_STRIDE * 
	             IBU_P2_LINK_RX_CREDIT_VL1_0_DEPTH)) {
		return("IBU_P2_LINK_RX_CREDIT_VL1_0");
	}
	if ((addr >= IBU_P2_LINK_RX_CREDIT_VL3_2_ADDR) &&
	    (addr <  IBU_P2_LINK_RX_CREDIT_VL3_2_ADDR + 
	             IBU_P2_LINK_RX_CREDIT_VL3_2_STRIDE * 
	             IBU_P2_LINK_RX_CREDIT_VL3_2_DEPTH)) {
		return("IBU_P2_LINK_RX_CREDIT_VL3_2");
	}
	if ((addr >= IBU_P2_LINK_RX_CREDIT_VL5_4_ADDR) &&
	    (addr <  IBU_P2_LINK_RX_CREDIT_VL5_4_ADDR + 
	             IBU_P2_LINK_RX_CREDIT_VL5_4_STRIDE * 
	             IBU_P2_LINK_RX_CREDIT_VL5_4_DEPTH)) {
		return("IBU_P2_LINK_RX_CREDIT_VL5_4");
	}
	if ((addr >= IBU_P2_LINK_RX_CREDIT_VL7_6_ADDR) &&
	    (addr <  IBU_P2_LINK_RX_CREDIT_VL7_6_ADDR + 
	             IBU_P2_LINK_RX_CREDIT_VL7_6_STRIDE * 
	             IBU_P2_LINK_RX_CREDIT_VL7_6_DEPTH)) {
		return("IBU_P2_LINK_RX_CREDIT_VL7_6");
	}
	if ((addr >= IBU_P2_LINK_TX_CREDIT_VL1_0_ADDR) &&
	    (addr <  IBU_P2_LINK_TX_CREDIT_VL1_0_ADDR + 
	             IBU_P2_LINK_TX_CREDIT_VL1_0_STRIDE * 
	             IBU_P2_LINK_TX_CREDIT_VL1_0_DEPTH)) {
		return("IBU_P2_LINK_TX_CREDIT_VL1_0");
	}
	if ((addr >= IBU_P2_LINK_TX_CREDIT_VL3_2_ADDR) &&
	    (addr <  IBU_P2_LINK_TX_CREDIT_VL3_2_ADDR + 
	             IBU_P2_LINK_TX_CREDIT_VL3_2_STRIDE * 
	             IBU_P2_LINK_TX_CREDIT_VL3_2_DEPTH)) {
		return("IBU_P2_LINK_TX_CREDIT_VL3_2");
	}
	if ((addr >= IBU_P2_LINK_TX_CREDIT_VL5_4_ADDR) &&
	    (addr <  IBU_P2_LINK_TX_CREDIT_VL5_4_ADDR + 
	             IBU_P2_LINK_TX_CREDIT_VL5_4_STRIDE * 
	             IBU_P2_LINK_TX_CREDIT_VL5_4_DEPTH)) {
		return("IBU_P2_LINK_TX_CREDIT_VL5_4");
	}
	if ((addr >= IBU_P2_LINK_TX_CREDIT_VL7_6_ADDR) &&
	    (addr <  IBU_P2_LINK_TX_CREDIT_VL7_6_ADDR + 
	             IBU_P2_LINK_TX_CREDIT_VL7_6_STRIDE * 
	             IBU_P2_LINK_TX_CREDIT_VL7_6_DEPTH)) {
		return("IBU_P2_LINK_TX_CREDIT_VL7_6");
	}
	if ((addr >= IBU_P2_PCTX_LINK_CNT_RST_ADDR) &&
	    (addr <  IBU_P2_PCTX_LINK_CNT_RST_ADDR + 
	             IBU_P2_PCTX_LINK_CNT_RST_STRIDE * 
	             IBU_P2_PCTX_LINK_CNT_RST_DEPTH)) {
		return("IBU_P2_PCTX_LINK_CNT_RST");
	}
	if ((addr >= IBU_P2_PCTX_LINK_CNT_LOAD_ADDR) &&
	    (addr <  IBU_P2_PCTX_LINK_CNT_LOAD_ADDR + 
	             IBU_P2_PCTX_LINK_CNT_LOAD_STRIDE * 
	             IBU_P2_PCTX_LINK_CNT_LOAD_DEPTH)) {
		return("IBU_P2_PCTX_LINK_CNT_LOAD");
	}
	if ((addr >= IBU_P2_PSCNT_WIDTH_ADDR) &&
	    (addr <  IBU_P2_PSCNT_WIDTH_ADDR + 
	             IBU_P2_PSCNT_WIDTH_STRIDE * 
	             IBU_P2_PSCNT_WIDTH_DEPTH)) {
		return("IBU_P2_PSCNT_WIDTH");
	}
	if ((addr >= IBU_P2_PSCNT_MASK_ADDR) &&
	    (addr <  IBU_P2_PSCNT_MASK_ADDR + 
	             IBU_P2_PSCNT_MASK_STRIDE * 
	             IBU_P2_PSCNT_MASK_DEPTH)) {
		return("IBU_P2_PSCNT_MASK");
	}
	if ((addr >= IBU_P2_PCICRC_RCV_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCICRC_RCV_ERRORS_ADDR + 
	             IBU_P2_PCICRC_RCV_ERRORS_STRIDE * 
	             IBU_P2_PCICRC_RCV_ERRORS_DEPTH)) {
		return("IBU_P2_PCICRC_RCV_ERRORS");
	}
	if ((addr >= IBU_P2_PCVCRC_RCV_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCVCRC_RCV_ERRORS_ADDR + 
	             IBU_P2_PCVCRC_RCV_ERRORS_STRIDE * 
	             IBU_P2_PCVCRC_RCV_ERRORS_DEPTH)) {
		return("IBU_P2_PCVCRC_RCV_ERRORS");
	}
	if ((addr >= IBU_P2_PCLEN_RCV_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCLEN_RCV_ERRORS_ADDR + 
	             IBU_P2_PCLEN_RCV_ERRORS_STRIDE * 
	             IBU_P2_PCLEN_RCV_ERRORS_DEPTH)) {
		return("IBU_P2_PCLEN_RCV_ERRORS");
	}
	if ((addr >= IBU_P2_PCDLID_RCV_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCDLID_RCV_ERRORS_ADDR + 
	             IBU_P2_PCDLID_RCV_ERRORS_STRIDE * 
	             IBU_P2_PCDLID_RCV_ERRORS_DEPTH)) {
		return("IBU_P2_PCDLID_RCV_ERRORS");
	}
	if ((addr >= IBU_P2_PCRCV_FCLEN_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCRCV_FCLEN_ERRORS_ADDR + 
	             IBU_P2_PCRCV_FCLEN_ERRORS_STRIDE * 
	             IBU_P2_PCRCV_FCLEN_ERRORS_DEPTH)) {
		return("IBU_P2_PCRCV_FCLEN_ERRORS");
	}
	if ((addr >= IBU_P2_PCRCV_FCVL_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCRCV_FCVL_ERRORS_ADDR + 
	             IBU_P2_PCRCV_FCVL_ERRORS_STRIDE * 
	             IBU_P2_PCRCV_FCVL_ERRORS_DEPTH)) {
		return("IBU_P2_PCRCV_FCVL_ERRORS");
	}
	if ((addr >= IBU_P2_PCRCV_FCCRC_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCRCV_FCCRC_ERRORS_ADDR + 
	             IBU_P2_PCRCV_FCCRC_ERRORS_STRIDE * 
	             IBU_P2_PCRCV_FCCRC_ERRORS_DEPTH)) {
		return("IBU_P2_PCRCV_FCCRC_ERRORS");
	}
	if ((addr >= IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS_ADDR + 
	             IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS_STRIDE * 
	             IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS_DEPTH)) {
		return("IBU_P2_PORT_LOCAL_PHYSICAL_ERRORS");
	}
	if ((addr >= IBU_P2_PCMAL_FORMED_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCMAL_FORMED_ERRORS_ADDR + 
	             IBU_P2_PCMAL_FORMED_ERRORS_STRIDE * 
	             IBU_P2_PCMAL_FORMED_ERRORS_DEPTH)) {
		return("IBU_P2_PCMAL_FORMED_ERRORS");
	}
	if ((addr >= IBU_P2_PCBUF_OVER_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCBUF_OVER_ERRORS_ADDR + 
	             IBU_P2_PCBUF_OVER_ERRORS_STRIDE * 
	             IBU_P2_PCBUF_OVER_ERRORS_DEPTH)) {
		return("IBU_P2_PCBUF_OVER_ERRORS");
	}
	if ((addr >= IBU_P2_PCVLMAP_ERRORS_ADDR) &&
	    (addr <  IBU_P2_PCVLMAP_ERRORS_ADDR + 
	             IBU_P2_PCVLMAP_ERRORS_STRIDE * 
	             IBU_P2_PCVLMAP_ERRORS_DEPTH)) {
		return("IBU_P2_PCVLMAP_ERRORS");
	}
	if ((addr >= IBU_P2_PCVLINIT_CREDIT_VL1_VL0_ADDR) &&
	    (addr <  IBU_P2_PCVLINIT_CREDIT_VL1_VL0_ADDR + 
	             IBU_P2_PCVLINIT_CREDIT_VL1_VL0_STRIDE * 
	             IBU_P2_PCVLINIT_CREDIT_VL1_VL0_DEPTH)) {
		return("IBU_P2_PCVLINIT_CREDIT_VL1_VL0");
	}
	if ((addr >= IBU_P2_PCVLINIT_CREDIT_VL3_VL2_ADDR) &&
	    (addr <  IBU_P2_PCVLINIT_CREDIT_VL3_VL2_ADDR + 
	             IBU_P2_PCVLINIT_CREDIT_VL3_VL2_STRIDE * 
	             IBU_P2_PCVLINIT_CREDIT_VL3_VL2_DEPTH)) {
		return("IBU_P2_PCVLINIT_CREDIT_VL3_VL2");
	}
	if ((addr >= IBU_P2_PCVLINIT_CREDIT_VL5_VL4_ADDR) &&
	    (addr <  IBU_P2_PCVLINIT_CREDIT_VL5_VL4_ADDR + 
	             IBU_P2_PCVLINIT_CREDIT_VL5_VL4_STRIDE * 
	             IBU_P2_PCVLINIT_CREDIT_VL5_VL4_DEPTH)) {
		return("IBU_P2_PCVLINIT_CREDIT_VL5_VL4");
	}
	if ((addr >= IBU_P2_PCVLINIT_CREDIT_VL7_VL6_ADDR) &&
	    (addr <  IBU_P2_PCVLINIT_CREDIT_VL7_VL6_ADDR + 
	             IBU_P2_PCVLINIT_CREDIT_VL7_VL6_STRIDE * 
	             IBU_P2_PCVLINIT_CREDIT_VL7_VL6_DEPTH)) {
		return("IBU_P2_PCVLINIT_CREDIT_VL7_VL6");
	}
	if ((addr >= IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT_ADDR + 
	             IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT_STRIDE * 
	             IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCRX_VL07_ECC_COR_ERR_CNT");
	}
	if ((addr >= IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT_ADDR + 
	             IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT_STRIDE * 
	             IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCRX_VL07_ECC_UNC_ERR_CNT");
	}
	if ((addr >= IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT_ADDR + 
	             IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT_STRIDE * 
	             IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCRX_VL15_ECC_COR_ERR_CNT");
	}
	if ((addr >= IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT_ADDR + 
	             IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT_STRIDE * 
	             IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCRX_VL15_ECC_UNC_ERR_CNT");
	}
	if ((addr >= IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT_ADDR + 
	             IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT_STRIDE * 
	             IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCRX_LOOP_ECC_COR_ERR_CNT");
	}
	if ((addr >= IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT_ADDR + 
	             IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT_STRIDE * 
	             IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCRX_LOOP_ECC_UNC_ERR_CNT");
	}
	if ((addr >= IBU_P2_PCECCENA_ERR_ADDR) &&
	    (addr <  IBU_P2_PCECCENA_ERR_ADDR + 
	             IBU_P2_PCECCENA_ERR_STRIDE * 
	             IBU_P2_PCECCENA_ERR_DEPTH)) {
		return("IBU_P2_PCECCENA_ERR");
	}
	if ((addr >= IBU_P2_PCTX_ECC_COR_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCTX_ECC_COR_ERR_CNT_ADDR + 
	             IBU_P2_PCTX_ECC_COR_ERR_CNT_STRIDE * 
	             IBU_P2_PCTX_ECC_COR_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCTX_ECC_COR_ERR_CNT");
	}
	if ((addr >= IBU_P2_PCTX_ECC_UNC_ERR_CNT_ADDR) &&
	    (addr <  IBU_P2_PCTX_ECC_UNC_ERR_CNT_ADDR + 
	             IBU_P2_PCTX_ECC_UNC_ERR_CNT_STRIDE * 
	             IBU_P2_PCTX_ECC_UNC_ERR_CNT_DEPTH)) {
		return("IBU_P2_PCTX_ECC_UNC_ERR_CNT");
	}
	if ((addr >= IBU_P2_TX_SRAMSTATUS_ADDR) &&
	    (addr <  IBU_P2_TX_SRAMSTATUS_ADDR + 
	             IBU_P2_TX_SRAMSTATUS_STRIDE * 
	             IBU_P2_TX_SRAMSTATUS_DEPTH)) {
		return("IBU_P2_TX_SRAMSTATUS");
	}
	if ((addr >= IBU_P2_TX_CACHE_STATUS_ADDR) &&
	    (addr <  IBU_P2_TX_CACHE_STATUS_ADDR + 
	             IBU_P2_TX_CACHE_STATUS_STRIDE * 
	             IBU_P2_TX_CACHE_STATUS_DEPTH)) {
		return("IBU_P2_TX_CACHE_STATUS");
	}
	if ((addr >= IBU_P2_TX_DEBUG_ADDR) &&
	    (addr <  IBU_P2_TX_DEBUG_ADDR + 
	             IBU_P2_TX_DEBUG_STRIDE * 
	             IBU_P2_TX_DEBUG_DEPTH)) {
		return("IBU_P2_TX_DEBUG");
	}
	if ((addr >= IBU_P2_RX_VL07_SRAMSTATUS_ADDR) &&
	    (addr <  IBU_P2_RX_VL07_SRAMSTATUS_ADDR + 
	             IBU_P2_RX_VL07_SRAMSTATUS_STRIDE * 
	             IBU_P2_RX_VL07_SRAMSTATUS_DEPTH)) {
		return("IBU_P2_RX_VL07_SRAMSTATUS");
	}
	if ((addr >= IBU_P2_RX_VL15_SRAMSTATUS_ADDR) &&
	    (addr <  IBU_P2_RX_VL15_SRAMSTATUS_ADDR + 
	             IBU_P2_RX_VL15_SRAMSTATUS_STRIDE * 
	             IBU_P2_RX_VL15_SRAMSTATUS_DEPTH)) {
		return("IBU_P2_RX_VL15_SRAMSTATUS");
	}
	if ((addr >= IBU_P2_LOOPSRAMSTATUS_ADDR) &&
	    (addr <  IBU_P2_LOOPSRAMSTATUS_ADDR + 
	             IBU_P2_LOOPSRAMSTATUS_STRIDE * 
	             IBU_P2_LOOPSRAMSTATUS_DEPTH)) {
		return("IBU_P2_LOOPSRAMSTATUS");
	}
	if ((addr >= IBU_P2_RX_DEBUG_ADDR) &&
	    (addr <  IBU_P2_RX_DEBUG_ADDR + 
	             IBU_P2_RX_DEBUG_STRIDE * 
	             IBU_P2_RX_DEBUG_DEPTH)) {
		return("IBU_P2_RX_DEBUG");
	}
	if ((addr >= IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS_ADDR) &&
	    (addr <  IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS_ADDR + 
	             IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS_STRIDE * 
	             IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS_DEPTH)) {
		return("IBU_P2_TX_ARB_LOOPBACK_SRAMSTATUS");
	}
	if ((addr >= IBU_P2_VLARB_HI_PRI_TABLE_ADDR) &&
	    (addr <  IBU_P2_VLARB_HI_PRI_TABLE_ADDR + 
	             IBU_P2_VLARB_HI_PRI_TABLE_STRIDE * 
	             IBU_P2_VLARB_HI_PRI_TABLE_DEPTH)) {
		return("IBU_P2_VLARB_HI_PRI_TABLE");
	}
	if ((addr >= IBU_P2_VLARB_LO_PRI_TABLE_ADDR) &&
	    (addr <  IBU_P2_VLARB_LO_PRI_TABLE_ADDR + 
	             IBU_P2_VLARB_LO_PRI_TABLE_STRIDE * 
	             IBU_P2_VLARB_LO_PRI_TABLE_DEPTH)) {
		return("IBU_P2_VLARB_LO_PRI_TABLE");
	}
	if ((addr >= IBU_P2_TX_TBSVL10_ADDR) &&
	    (addr <  IBU_P2_TX_TBSVL10_ADDR + 
	             IBU_P2_TX_TBSVL10_STRIDE * 
	             IBU_P2_TX_TBSVL10_DEPTH)) {
		return("IBU_P2_TX_TBSVL10");
	}
	if ((addr >= IBU_P2_TX_TBSVL32_ADDR) &&
	    (addr <  IBU_P2_TX_TBSVL32_ADDR + 
	             IBU_P2_TX_TBSVL32_STRIDE * 
	             IBU_P2_TX_TBSVL32_DEPTH)) {
		return("IBU_P2_TX_TBSVL32");
	}
	if ((addr >= IBU_P2_TX_TBSVL54_ADDR) &&
	    (addr <  IBU_P2_TX_TBSVL54_ADDR + 
	             IBU_P2_TX_TBSVL54_STRIDE * 
	             IBU_P2_TX_TBSVL54_DEPTH)) {
		return("IBU_P2_TX_TBSVL54");
	}
	if ((addr >= IBU_P2_TX_TBSVL76_ADDR) &&
	    (addr <  IBU_P2_TX_TBSVL76_ADDR + 
	             IBU_P2_TX_TBSVL76_STRIDE * 
	             IBU_P2_TX_TBSVL76_DEPTH)) {
		return("IBU_P2_TX_TBSVL76");
	}
	if ((addr >= IBU_P2_TX_TBSARB_VL10_ADDR) &&
	    (addr <  IBU_P2_TX_TBSARB_VL10_ADDR + 
	             IBU_P2_TX_TBSARB_VL10_STRIDE * 
	             IBU_P2_TX_TBSARB_VL10_DEPTH)) {
		return("IBU_P2_TX_TBSARB_VL10");
	}
	if ((addr >= IBU_P2_TX_TBSARB_VL32_ADDR) &&
	    (addr <  IBU_P2_TX_TBSARB_VL32_ADDR + 
	             IBU_P2_TX_TBSARB_VL32_STRIDE * 
	             IBU_P2_TX_TBSARB_VL32_DEPTH)) {
		return("IBU_P2_TX_TBSARB_VL32");
	}
	if ((addr >= IBU_P2_TX_TBSARB_VL54_ADDR) &&
	    (addr <  IBU_P2_TX_TBSARB_VL54_ADDR + 
	             IBU_P2_TX_TBSARB_VL54_STRIDE * 
	             IBU_P2_TX_TBSARB_VL54_DEPTH)) {
		return("IBU_P2_TX_TBSARB_VL54");
	}
	if ((addr >= IBU_P2_TX_TBSARB_VL76_ADDR) &&
	    (addr <  IBU_P2_TX_TBSARB_VL76_ADDR + 
	             IBU_P2_TX_TBSARB_VL76_STRIDE * 
	             IBU_P2_TX_TBSARB_VL76_DEPTH)) {
		return("IBU_P2_TX_TBSARB_VL76");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_ENABLE_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_ENABLE_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_ENABLE_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_ENABLE_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_ENABLE");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_MODE_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_MODE_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_MODE_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_MODE_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_MODE");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_RDY_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_RDY_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_RDY_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_RDY_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_RDY");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_TIMER_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_TIMER_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_TIMER_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_TIMER_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_TIMER");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_START_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_START_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_START_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_START_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_START");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA1_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA1_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA1_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA1_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA1");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA2_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA2_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA2_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA2_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA2");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA3_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA3_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA3_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA3_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA3");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA4_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA4_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA4_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA4_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA4");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA5_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA5_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA5_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA5_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA5");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA6_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA6_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA6_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA6_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA6");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA7_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA7_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA7_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA7_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA7");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA8_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA8_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA8_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA8_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA8");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA9_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA9_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA9_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA9_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA9");
	}
	if ((addr >= IBU_P2_RX_TRACE_CAPTURE_DATA10_ADDR) &&
	    (addr <  IBU_P2_RX_TRACE_CAPTURE_DATA10_ADDR + 
	             IBU_P2_RX_TRACE_CAPTURE_DATA10_STRIDE * 
	             IBU_P2_RX_TRACE_CAPTURE_DATA10_DEPTH)) {
		return("IBU_P2_RX_TRACE_CAPTURE_DATA10");
	}
	if ((addr >= IBU_P2_LINK_RX_FCCL_VL1_0_ADDR) &&
	    (addr <  IBU_P2_LINK_RX_FCCL_VL1_0_ADDR + 
	             IBU_P2_LINK_RX_FCCL_VL1_0_STRIDE * 
	             IBU_P2_LINK_RX_FCCL_VL1_0_DEPTH)) {
		return("IBU_P2_LINK_RX_FCCL_VL1_0");
	}
	if ((addr >= IBU_P2_LINK_RX_FCCL_VL3_2_ADDR) &&
	    (addr <  IBU_P2_LINK_RX_FCCL_VL3_2_ADDR + 
	             IBU_P2_LINK_RX_FCCL_VL3_2_STRIDE * 
	             IBU_P2_LINK_RX_FCCL_VL3_2_DEPTH)) {
		return("IBU_P2_LINK_RX_FCCL_VL3_2");
	}
	if ((addr >= IBU_P2_LINK_RX_FCCL_VL5_4_ADDR) &&
	    (addr <  IBU_P2_LINK_RX_FCCL_VL5_4_ADDR + 
	             IBU_P2_LINK_RX_FCCL_VL5_4_STRIDE * 
	             IBU_P2_LINK_RX_FCCL_VL5_4_DEPTH)) {
		return("IBU_P2_LINK_RX_FCCL_VL5_4");
	}
	if ((addr >= IBU_P2_LINK_RX_FCCL_VL7_6_ADDR) &&
	    (addr <  IBU_P2_LINK_RX_FCCL_VL7_6_ADDR + 
	             IBU_P2_LINK_RX_FCCL_VL7_6_STRIDE * 
	             IBU_P2_LINK_RX_FCCL_VL7_6_DEPTH)) {
		return("IBU_P2_LINK_RX_FCCL_VL7_6");
	}
	if ((addr >= IBU_P2_ADD_DEFAULT_LANE0_ADDR) &&
	    (addr <  IBU_P2_ADD_DEFAULT_LANE0_ADDR + 
	             IBU_P2_ADD_DEFAULT_LANE0_STRIDE * 
	             IBU_P2_ADD_DEFAULT_LANE0_DEPTH)) {
		return("IBU_P2_ADD_DEFAULT_LANE0");
	}
	if ((addr >= IBU_P2_ADD_DEFAULT_LANE1_ADDR) &&
	    (addr <  IBU_P2_ADD_DEFAULT_LANE1_ADDR + 
	             IBU_P2_ADD_DEFAULT_LANE1_STRIDE * 
	             IBU_P2_ADD_DEFAULT_LANE1_DEPTH)) {
		return("IBU_P2_ADD_DEFAULT_LANE1");
	}
	if ((addr >= IBU_P2_ADD_DEFAULT_LANE2_ADDR) &&
	    (addr <  IBU_P2_ADD_DEFAULT_LANE2_ADDR + 
	             IBU_P2_ADD_DEFAULT_LANE2_STRIDE * 
	             IBU_P2_ADD_DEFAULT_LANE2_DEPTH)) {
		return("IBU_P2_ADD_DEFAULT_LANE2");
	}
	if ((addr >= IBU_P2_ADD_DEFAULT_LANE3_ADDR) &&
	    (addr <  IBU_P2_ADD_DEFAULT_LANE3_ADDR + 
	             IBU_P2_ADD_DEFAULT_LANE3_STRIDE * 
	             IBU_P2_ADD_DEFAULT_LANE3_DEPTH)) {
		return("IBU_P2_ADD_DEFAULT_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD0_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD0_LANE0_ADDR + 
	             IBU_P2_PHY_ADD0_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD0_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD0_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD0_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD0_LANE1_ADDR + 
	             IBU_P2_PHY_ADD0_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD0_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD0_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD0_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD0_LANE2_ADDR + 
	             IBU_P2_PHY_ADD0_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD0_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD0_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD0_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD0_LANE3_ADDR + 
	             IBU_P2_PHY_ADD0_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD0_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD0_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD1_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD1_LANE0_ADDR + 
	             IBU_P2_PHY_ADD1_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD1_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD1_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD1_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD1_LANE1_ADDR + 
	             IBU_P2_PHY_ADD1_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD1_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD1_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD1_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD1_LANE2_ADDR + 
	             IBU_P2_PHY_ADD1_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD1_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD1_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD1_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD1_LANE3_ADDR + 
	             IBU_P2_PHY_ADD1_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD1_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD1_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD2_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD2_LANE0_ADDR + 
	             IBU_P2_PHY_ADD2_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD2_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD2_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD2_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD2_LANE1_ADDR + 
	             IBU_P2_PHY_ADD2_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD2_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD2_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD2_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD2_LANE2_ADDR + 
	             IBU_P2_PHY_ADD2_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD2_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD2_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD2_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD2_LANE3_ADDR + 
	             IBU_P2_PHY_ADD2_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD2_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD2_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD3_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD3_LANE0_ADDR + 
	             IBU_P2_PHY_ADD3_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD3_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD3_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD3_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD3_LANE1_ADDR + 
	             IBU_P2_PHY_ADD3_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD3_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD3_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD3_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD3_LANE2_ADDR + 
	             IBU_P2_PHY_ADD3_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD3_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD3_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD3_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD3_LANE3_ADDR + 
	             IBU_P2_PHY_ADD3_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD3_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD3_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD4_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD4_LANE0_ADDR + 
	             IBU_P2_PHY_ADD4_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD4_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD4_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD4_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD4_LANE1_ADDR + 
	             IBU_P2_PHY_ADD4_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD4_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD4_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD4_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD4_LANE2_ADDR + 
	             IBU_P2_PHY_ADD4_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD4_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD4_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD4_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD4_LANE3_ADDR + 
	             IBU_P2_PHY_ADD4_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD4_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD4_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD5_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD5_LANE0_ADDR + 
	             IBU_P2_PHY_ADD5_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD5_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD5_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD5_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD5_LANE1_ADDR + 
	             IBU_P2_PHY_ADD5_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD5_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD5_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD5_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD5_LANE2_ADDR + 
	             IBU_P2_PHY_ADD5_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD5_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD5_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD5_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD5_LANE3_ADDR + 
	             IBU_P2_PHY_ADD5_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD5_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD5_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD6_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD6_LANE0_ADDR + 
	             IBU_P2_PHY_ADD6_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD6_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD6_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD6_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD6_LANE1_ADDR + 
	             IBU_P2_PHY_ADD6_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD6_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD6_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD6_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD6_LANE2_ADDR + 
	             IBU_P2_PHY_ADD6_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD6_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD6_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD6_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD6_LANE3_ADDR + 
	             IBU_P2_PHY_ADD6_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD6_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD6_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD7_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD7_LANE0_ADDR + 
	             IBU_P2_PHY_ADD7_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD7_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD7_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD7_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD7_LANE1_ADDR + 
	             IBU_P2_PHY_ADD7_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD7_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD7_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD7_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD7_LANE2_ADDR + 
	             IBU_P2_PHY_ADD7_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD7_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD7_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD7_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD7_LANE3_ADDR + 
	             IBU_P2_PHY_ADD7_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD7_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD7_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD8_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD8_LANE0_ADDR + 
	             IBU_P2_PHY_ADD8_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD8_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD8_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD8_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD8_LANE1_ADDR + 
	             IBU_P2_PHY_ADD8_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD8_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD8_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD8_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD8_LANE2_ADDR + 
	             IBU_P2_PHY_ADD8_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD8_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD8_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD8_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD8_LANE3_ADDR + 
	             IBU_P2_PHY_ADD8_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD8_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD8_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD9_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD9_LANE0_ADDR + 
	             IBU_P2_PHY_ADD9_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD9_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD9_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD9_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD9_LANE1_ADDR + 
	             IBU_P2_PHY_ADD9_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD9_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD9_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD9_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD9_LANE2_ADDR + 
	             IBU_P2_PHY_ADD9_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD9_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD9_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD9_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD9_LANE3_ADDR + 
	             IBU_P2_PHY_ADD9_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD9_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD9_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD10_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD10_LANE0_ADDR + 
	             IBU_P2_PHY_ADD10_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD10_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD10_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD10_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD10_LANE1_ADDR + 
	             IBU_P2_PHY_ADD10_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD10_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD10_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD10_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD10_LANE2_ADDR + 
	             IBU_P2_PHY_ADD10_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD10_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD10_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD10_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD10_LANE3_ADDR + 
	             IBU_P2_PHY_ADD10_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD10_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD10_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD11_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD11_LANE0_ADDR + 
	             IBU_P2_PHY_ADD11_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD11_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD11_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD11_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD11_LANE1_ADDR + 
	             IBU_P2_PHY_ADD11_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD11_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD11_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD11_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD11_LANE2_ADDR + 
	             IBU_P2_PHY_ADD11_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD11_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD11_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD11_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD11_LANE3_ADDR + 
	             IBU_P2_PHY_ADD11_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD11_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD11_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD12_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD12_LANE0_ADDR + 
	             IBU_P2_PHY_ADD12_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD12_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD12_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD12_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD12_LANE1_ADDR + 
	             IBU_P2_PHY_ADD12_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD12_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD12_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD12_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD12_LANE2_ADDR + 
	             IBU_P2_PHY_ADD12_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD12_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD12_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD12_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD12_LANE3_ADDR + 
	             IBU_P2_PHY_ADD12_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD12_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD12_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD13_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD13_LANE0_ADDR + 
	             IBU_P2_PHY_ADD13_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD13_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD13_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD13_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD13_LANE1_ADDR + 
	             IBU_P2_PHY_ADD13_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD13_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD13_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD13_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD13_LANE2_ADDR + 
	             IBU_P2_PHY_ADD13_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD13_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD13_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD13_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD13_LANE3_ADDR + 
	             IBU_P2_PHY_ADD13_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD13_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD13_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD14_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD14_LANE0_ADDR + 
	             IBU_P2_PHY_ADD14_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD14_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD14_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD14_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD14_LANE1_ADDR + 
	             IBU_P2_PHY_ADD14_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD14_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD14_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD14_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD14_LANE2_ADDR + 
	             IBU_P2_PHY_ADD14_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD14_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD14_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD14_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD14_LANE3_ADDR + 
	             IBU_P2_PHY_ADD14_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD14_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD14_LANE3");
	}
	if ((addr >= IBU_P2_PHY_ADD15_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD15_LANE0_ADDR + 
	             IBU_P2_PHY_ADD15_LANE0_STRIDE * 
	             IBU_P2_PHY_ADD15_LANE0_DEPTH)) {
		return("IBU_P2_PHY_ADD15_LANE0");
	}
	if ((addr >= IBU_P2_PHY_ADD15_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD15_LANE1_ADDR + 
	             IBU_P2_PHY_ADD15_LANE1_STRIDE * 
	             IBU_P2_PHY_ADD15_LANE1_DEPTH)) {
		return("IBU_P2_PHY_ADD15_LANE1");
	}
	if ((addr >= IBU_P2_PHY_ADD15_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD15_LANE2_ADDR + 
	             IBU_P2_PHY_ADD15_LANE2_STRIDE * 
	             IBU_P2_PHY_ADD15_LANE2_DEPTH)) {
		return("IBU_P2_PHY_ADD15_LANE2");
	}
	if ((addr >= IBU_P2_PHY_ADD15_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_ADD15_LANE3_ADDR + 
	             IBU_P2_PHY_ADD15_LANE3_STRIDE * 
	             IBU_P2_PHY_ADD15_LANE3_DEPTH)) {
		return("IBU_P2_PHY_ADD15_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD0_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD0_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD0_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD0_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD0_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD0_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD0_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD0_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD0_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD0_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD0_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD0_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD0_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD0_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD0_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD0_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD0_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD0_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD0_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD0_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD1_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD1_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD1_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD1_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD1_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD1_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD1_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD1_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD1_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD1_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD1_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD1_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD1_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD1_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD1_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD1_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD1_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD1_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD1_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD1_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD2_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD2_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD2_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD2_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD2_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD2_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD2_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD2_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD2_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD2_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD2_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD2_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD2_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD2_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD2_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD2_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD2_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD2_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD2_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD2_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD3_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD3_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD3_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD3_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD3_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD3_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD3_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD3_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD3_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD3_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD3_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD3_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD3_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD3_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD3_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD3_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD3_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD3_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD3_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD3_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD4_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD4_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD4_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD4_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD4_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD4_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD4_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD4_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD4_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD4_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD4_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD4_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD4_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD4_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD4_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD4_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD4_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD4_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD4_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD4_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD5_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD5_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD5_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD5_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD5_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD5_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD5_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD5_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD5_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD5_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD5_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD5_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD5_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD5_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD5_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD5_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD5_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD5_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD5_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD5_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD6_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD6_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD6_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD6_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD6_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD6_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD6_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD6_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD6_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD6_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD6_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD6_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD6_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD6_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD6_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD6_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD6_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD6_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD6_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD6_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD7_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD7_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD7_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD7_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD7_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD7_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD7_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD7_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD7_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD7_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD7_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD7_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD7_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD7_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD7_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD7_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD7_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD7_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD7_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD7_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD8_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD8_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD8_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD8_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD8_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD8_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD8_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD8_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD8_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD8_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD8_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD8_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD8_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD8_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD8_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD8_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD8_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD8_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD8_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD8_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD9_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD9_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD9_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD9_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD9_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD9_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD9_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD9_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD9_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD9_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD9_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD9_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD9_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD9_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD9_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD9_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD9_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD9_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD9_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD9_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD10_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD10_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD10_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD10_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD10_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD10_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD10_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD10_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD10_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD10_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD10_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD10_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD10_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD10_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD10_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD10_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD10_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD10_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD10_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD10_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD11_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD11_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD11_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD11_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD11_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD11_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD11_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD11_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD11_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD11_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD11_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD11_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD11_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD11_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD11_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD11_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD11_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD11_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD11_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD11_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD12_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD12_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD12_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD12_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD12_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD12_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD12_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD12_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD12_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD12_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD12_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD12_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD12_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD12_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD12_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD12_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD12_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD12_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD12_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD12_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD13_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD13_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD13_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD13_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD13_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD13_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD13_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD13_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD13_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD13_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD13_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD13_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD13_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD13_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD13_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD13_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD13_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD13_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD13_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD13_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD14_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD14_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD14_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD14_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD14_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD14_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD14_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD14_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD14_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD14_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD14_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD14_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD14_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD14_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD14_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD14_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD14_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD14_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD14_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD14_LANE3");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD15_LANE0_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD15_LANE0_ADDR + 
	             IBU_P2_PHY_AMP1_ADD15_LANE0_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD15_LANE0_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD15_LANE0");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD15_LANE1_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD15_LANE1_ADDR + 
	             IBU_P2_PHY_AMP1_ADD15_LANE1_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD15_LANE1_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD15_LANE1");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD15_LANE2_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD15_LANE2_ADDR + 
	             IBU_P2_PHY_AMP1_ADD15_LANE2_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD15_LANE2_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD15_LANE2");
	}
	if ((addr >= IBU_P2_PHY_AMP1_ADD15_LANE3_ADDR) &&
	    (addr <  IBU_P2_PHY_AMP1_ADD15_LANE3_ADDR + 
	             IBU_P2_PHY_AMP1_ADD15_LANE3_STRIDE * 
	             IBU_P2_PHY_AMP1_ADD15_LANE3_DEPTH)) {
		return("IBU_P2_PHY_AMP1_ADD15_LANE3");
	}
	if ((addr >= IBU_P2_REMOTE_DDS0_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS0_ADDR + 
	             IBU_P2_REMOTE_DDS0_STRIDE * 
	             IBU_P2_REMOTE_DDS0_DEPTH)) {
		return("IBU_P2_REMOTE_DDS0");
	}
	if ((addr >= IBU_P2_REMOTE_DDS1_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS1_ADDR + 
	             IBU_P2_REMOTE_DDS1_STRIDE * 
	             IBU_P2_REMOTE_DDS1_DEPTH)) {
		return("IBU_P2_REMOTE_DDS1");
	}
	if ((addr >= IBU_P2_REMOTE_DDS2_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS2_ADDR + 
	             IBU_P2_REMOTE_DDS2_STRIDE * 
	             IBU_P2_REMOTE_DDS2_DEPTH)) {
		return("IBU_P2_REMOTE_DDS2");
	}
	if ((addr >= IBU_P2_REMOTE_DDS3_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS3_ADDR + 
	             IBU_P2_REMOTE_DDS3_STRIDE * 
	             IBU_P2_REMOTE_DDS3_DEPTH)) {
		return("IBU_P2_REMOTE_DDS3");
	}
	if ((addr >= IBU_P2_REMOTE_DDS4_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS4_ADDR + 
	             IBU_P2_REMOTE_DDS4_STRIDE * 
	             IBU_P2_REMOTE_DDS4_DEPTH)) {
		return("IBU_P2_REMOTE_DDS4");
	}
	if ((addr >= IBU_P2_REMOTE_DDS5_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS5_ADDR + 
	             IBU_P2_REMOTE_DDS5_STRIDE * 
	             IBU_P2_REMOTE_DDS5_DEPTH)) {
		return("IBU_P2_REMOTE_DDS5");
	}
	if ((addr >= IBU_P2_REMOTE_DDS6_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS6_ADDR + 
	             IBU_P2_REMOTE_DDS6_STRIDE * 
	             IBU_P2_REMOTE_DDS6_DEPTH)) {
		return("IBU_P2_REMOTE_DDS6");
	}
	if ((addr >= IBU_P2_REMOTE_DDS7_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS7_ADDR + 
	             IBU_P2_REMOTE_DDS7_STRIDE * 
	             IBU_P2_REMOTE_DDS7_DEPTH)) {
		return("IBU_P2_REMOTE_DDS7");
	}
	if ((addr >= IBU_P2_REMOTE_DDS8_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS8_ADDR + 
	             IBU_P2_REMOTE_DDS8_STRIDE * 
	             IBU_P2_REMOTE_DDS8_DEPTH)) {
		return("IBU_P2_REMOTE_DDS8");
	}
	if ((addr >= IBU_P2_REMOTE_DDS9_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS9_ADDR + 
	             IBU_P2_REMOTE_DDS9_STRIDE * 
	             IBU_P2_REMOTE_DDS9_DEPTH)) {
		return("IBU_P2_REMOTE_DDS9");
	}
	if ((addr >= IBU_P2_REMOTE_DDS10_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS10_ADDR + 
	             IBU_P2_REMOTE_DDS10_STRIDE * 
	             IBU_P2_REMOTE_DDS10_DEPTH)) {
		return("IBU_P2_REMOTE_DDS10");
	}
	if ((addr >= IBU_P2_REMOTE_DDS11_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS11_ADDR + 
	             IBU_P2_REMOTE_DDS11_STRIDE * 
	             IBU_P2_REMOTE_DDS11_DEPTH)) {
		return("IBU_P2_REMOTE_DDS11");
	}
	if ((addr >= IBU_P2_REMOTE_DDS12_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS12_ADDR + 
	             IBU_P2_REMOTE_DDS12_STRIDE * 
	             IBU_P2_REMOTE_DDS12_DEPTH)) {
		return("IBU_P2_REMOTE_DDS12");
	}
	if ((addr >= IBU_P2_REMOTE_DDS13_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS13_ADDR + 
	             IBU_P2_REMOTE_DDS13_STRIDE * 
	             IBU_P2_REMOTE_DDS13_DEPTH)) {
		return("IBU_P2_REMOTE_DDS13");
	}
	if ((addr >= IBU_P2_REMOTE_DDS14_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS14_ADDR + 
	             IBU_P2_REMOTE_DDS14_STRIDE * 
	             IBU_P2_REMOTE_DDS14_DEPTH)) {
		return("IBU_P2_REMOTE_DDS14");
	}
	if ((addr >= IBU_P2_REMOTE_DDS15_ADDR) &&
	    (addr <  IBU_P2_REMOTE_DDS15_ADDR + 
	             IBU_P2_REMOTE_DDS15_STRIDE * 
	             IBU_P2_REMOTE_DDS15_DEPTH)) {
		return("IBU_P2_REMOTE_DDS15");
	}
	if ((addr >= IBU_P2_BAD_CSR_ADDR) &&
	    (addr <  IBU_P2_BAD_CSR_ADDR + 
	             IBU_P2_BAD_CSR_STRIDE * 
	             IBU_P2_BAD_CSR_DEPTH)) {
		return("IBU_P2_BAD_CSR");
	}
	if ((addr >= IBU_P2_CETUS_CH0_REG15_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_CH0_REG15_CSR_ADDR + 
	             IBU_P2_CETUS_CH0_REG15_CSR_STRIDE * 
	             IBU_P2_CETUS_CH0_REG15_CSR_DEPTH)) {
		return("IBU_P2_CETUS_CH0_REG15_CSR");
	}
	if ((addr >= IBU_P2_CETUS_CH0_REG102_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_CH0_REG102_CSR_ADDR + 
	             IBU_P2_CETUS_CH0_REG102_CSR_STRIDE * 
	             IBU_P2_CETUS_CH0_REG102_CSR_DEPTH)) {
		return("IBU_P2_CETUS_CH0_REG102_CSR");
	}
	if ((addr >= IBU_P2_CETUS_CH1_REG15_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_CH1_REG15_CSR_ADDR + 
	             IBU_P2_CETUS_CH1_REG15_CSR_STRIDE * 
	             IBU_P2_CETUS_CH1_REG15_CSR_DEPTH)) {
		return("IBU_P2_CETUS_CH1_REG15_CSR");
	}
	if ((addr >= IBU_P2_CETUS_CH1_REG102_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_CH1_REG102_CSR_ADDR + 
	             IBU_P2_CETUS_CH1_REG102_CSR_STRIDE * 
	             IBU_P2_CETUS_CH1_REG102_CSR_DEPTH)) {
		return("IBU_P2_CETUS_CH1_REG102_CSR");
	}
	if ((addr >= IBU_P2_CETUS_PLLA_REG24_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_PLLA_REG24_CSR_ADDR + 
	             IBU_P2_CETUS_PLLA_REG24_CSR_STRIDE * 
	             IBU_P2_CETUS_PLLA_REG24_CSR_DEPTH)) {
		return("IBU_P2_CETUS_PLLA_REG24_CSR");
	}
	if ((addr >= IBU_P2_CETUS_CH2_REG15_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_CH2_REG15_CSR_ADDR + 
	             IBU_P2_CETUS_CH2_REG15_CSR_STRIDE * 
	             IBU_P2_CETUS_CH2_REG15_CSR_DEPTH)) {
		return("IBU_P2_CETUS_CH2_REG15_CSR");
	}
	if ((addr >= IBU_P2_CETUS_CH2_REG102_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_CH2_REG102_CSR_ADDR + 
	             IBU_P2_CETUS_CH2_REG102_CSR_STRIDE * 
	             IBU_P2_CETUS_CH2_REG102_CSR_DEPTH)) {
		return("IBU_P2_CETUS_CH2_REG102_CSR");
	}
	if ((addr >= IBU_P2_CETUS_CH3_REG15_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_CH3_REG15_CSR_ADDR + 
	             IBU_P2_CETUS_CH3_REG15_CSR_STRIDE * 
	             IBU_P2_CETUS_CH3_REG15_CSR_DEPTH)) {
		return("IBU_P2_CETUS_CH3_REG15_CSR");
	}
	if ((addr >= IBU_P2_CETUS_CH3_REG102_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_CH3_REG102_CSR_ADDR + 
	             IBU_P2_CETUS_CH3_REG102_CSR_STRIDE * 
	             IBU_P2_CETUS_CH3_REG102_CSR_DEPTH)) {
		return("IBU_P2_CETUS_CH3_REG102_CSR");
	}
	if ((addr >= IBU_P2_CETUS_PLLB_REG24_CSR_ADDR) &&
	    (addr <  IBU_P2_CETUS_PLLB_REG24_CSR_ADDR + 
	             IBU_P2_CETUS_PLLB_REG24_CSR_STRIDE * 
	             IBU_P2_CETUS_PLLB_REG24_CSR_DEPTH)) {
		return("IBU_P2_CETUS_PLLB_REG24_CSR");
	}
	if ((addr >= IBU_P2_PMA_RESET_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_RESET_CSR_ADDR + 
	             IBU_P2_PMA_RESET_CSR_STRIDE * 
	             IBU_P2_PMA_RESET_CSR_DEPTH)) {
		return("IBU_P2_PMA_RESET_CSR");
	}
	if ((addr >= IBU_P2_PMA_PLLA_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_PLLA_CSR_ADDR + 
	             IBU_P2_PMA_PLLA_CSR_STRIDE * 
	             IBU_P2_PMA_PLLA_CSR_DEPTH)) {
		return("IBU_P2_PMA_PLLA_CSR");
	}
	if ((addr >= IBU_P2_PMA_PLLB_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_PLLB_CSR_ADDR + 
	             IBU_P2_PMA_PLLB_CSR_STRIDE * 
	             IBU_P2_PMA_PLLB_CSR_DEPTH)) {
		return("IBU_P2_PMA_PLLB_CSR");
	}
	if ((addr >= IBU_P2_PMA_CMODE_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_CMODE_CSR_ADDR + 
	             IBU_P2_PMA_CMODE_CSR_STRIDE * 
	             IBU_P2_PMA_CMODE_CSR_DEPTH)) {
		return("IBU_P2_PMA_CMODE_CSR");
	}
	if ((addr >= IBU_P2_PMA_LB_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_LB_CSR_ADDR + 
	             IBU_P2_PMA_LB_CSR_STRIDE * 
	             IBU_P2_PMA_LB_CSR_DEPTH)) {
		return("IBU_P2_PMA_LB_CSR");
	}
	if ((addr >= IBU_P2_PMA_PWR_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_PWR_CSR_ADDR + 
	             IBU_P2_PMA_PWR_CSR_STRIDE * 
	             IBU_P2_PMA_PWR_CSR_DEPTH)) {
		return("IBU_P2_PMA_PWR_CSR");
	}
	if ((addr >= IBU_P2_PMA_STATUS0_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_STATUS0_CSR_ADDR + 
	             IBU_P2_PMA_STATUS0_CSR_STRIDE * 
	             IBU_P2_PMA_STATUS0_CSR_DEPTH)) {
		return("IBU_P2_PMA_STATUS0_CSR");
	}
	if ((addr >= IBU_P2_PMA_STATUS1_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_STATUS1_CSR_ADDR + 
	             IBU_P2_PMA_STATUS1_CSR_STRIDE * 
	             IBU_P2_PMA_STATUS1_CSR_DEPTH)) {
		return("IBU_P2_PMA_STATUS1_CSR");
	}
	if ((addr >= IBU_P2_PMA_STATUS2_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_STATUS2_CSR_ADDR + 
	             IBU_P2_PMA_STATUS2_CSR_STRIDE * 
	             IBU_P2_PMA_STATUS2_CSR_DEPTH)) {
		return("IBU_P2_PMA_STATUS2_CSR");
	}
	if ((addr >= IBU_P2_PMA_TXWCLK0_CNT_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_TXWCLK0_CNT_CSR_ADDR + 
	             IBU_P2_PMA_TXWCLK0_CNT_CSR_STRIDE * 
	             IBU_P2_PMA_TXWCLK0_CNT_CSR_DEPTH)) {
		return("IBU_P2_PMA_TXWCLK0_CNT_CSR");
	}
	if ((addr >= IBU_P2_PMA_TXWCLK0_CNT_VAL_ADDR) &&
	    (addr <  IBU_P2_PMA_TXWCLK0_CNT_VAL_ADDR + 
	             IBU_P2_PMA_TXWCLK0_CNT_VAL_STRIDE * 
	             IBU_P2_PMA_TXWCLK0_CNT_VAL_DEPTH)) {
		return("IBU_P2_PMA_TXWCLK0_CNT_VAL");
	}
	if ((addr >= IBU_P2_PMA_RXWCLK0_CNT_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_RXWCLK0_CNT_CSR_ADDR + 
	             IBU_P2_PMA_RXWCLK0_CNT_CSR_STRIDE * 
	             IBU_P2_PMA_RXWCLK0_CNT_CSR_DEPTH)) {
		return("IBU_P2_PMA_RXWCLK0_CNT_CSR");
	}
	if ((addr >= IBU_P2_PMA_RXWCLK0_CNT_VAL_ADDR) &&
	    (addr <  IBU_P2_PMA_RXWCLK0_CNT_VAL_ADDR + 
	             IBU_P2_PMA_RXWCLK0_CNT_VAL_STRIDE * 
	             IBU_P2_PMA_RXWCLK0_CNT_VAL_DEPTH)) {
		return("IBU_P2_PMA_RXWCLK0_CNT_VAL");
	}
	if ((addr >= IBU_P2_PMA_IRQ_STATUS_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_IRQ_STATUS_CSR_ADDR + 
	             IBU_P2_PMA_IRQ_STATUS_CSR_STRIDE * 
	             IBU_P2_PMA_IRQ_STATUS_CSR_DEPTH)) {
		return("IBU_P2_PMA_IRQ_STATUS_CSR");
	}
	if ((addr >= IBU_P2_PMA_IRQ_MASK_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_IRQ_MASK_CSR_ADDR + 
	             IBU_P2_PMA_IRQ_MASK_CSR_STRIDE * 
	             IBU_P2_PMA_IRQ_MASK_CSR_DEPTH)) {
		return("IBU_P2_PMA_IRQ_MASK_CSR");
	}
	if ((addr >= IBU_P2_PMA_BAD_CSR_ADDR) &&
	    (addr <  IBU_P2_PMA_BAD_CSR_ADDR + 
	             IBU_P2_PMA_BAD_CSR_STRIDE * 
	             IBU_P2_PMA_BAD_CSR_DEPTH)) {
		return("IBU_P2_PMA_BAD_CSR");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG0_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG0_ADDR + 
	             PEU_P_REQ_CREDIT_REG0_STRIDE * 
	             PEU_P_REQ_CREDIT_REG0_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG0");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG0_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG0_ADDR + 
	             PEU_NP_REQ_CREDIT_REG0_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG0_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG0");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG0_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG0_ADDR + 
	             PEU_P_RETURN_CREDIT_REG0_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG0_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG0");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG0_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG0_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG0_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG0_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG0");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG0_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG0_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG0_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG0_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG0");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG0_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG0_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG0_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG0_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG0");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD0_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD0_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD0_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD0_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD0");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD0_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD0_ADDR + 
	             PEU_XADM_PH_CDTS_THLD0_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD0_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD0");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD0_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD0_ADDR + 
	             PEU_XADM_PD_CDTS_THLD0_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD0_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD0");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD0_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD0_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD0_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD0_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD0");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD0_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD0_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD0_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD0_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD0");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG1_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG1_ADDR + 
	             PEU_P_REQ_CREDIT_REG1_STRIDE * 
	             PEU_P_REQ_CREDIT_REG1_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG1");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG1_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG1_ADDR + 
	             PEU_NP_REQ_CREDIT_REG1_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG1_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG1");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG1_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG1_ADDR + 
	             PEU_P_RETURN_CREDIT_REG1_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG1_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG1");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG1_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG1_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG1_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG1_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG1");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG1_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG1_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG1_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG1_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG1");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG1_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG1_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG1_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG1_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG1");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD1_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD1_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD1_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD1_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD1");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD1_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD1_ADDR + 
	             PEU_XADM_PH_CDTS_THLD1_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD1_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD1");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD1_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD1_ADDR + 
	             PEU_XADM_PD_CDTS_THLD1_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD1_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD1");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD1_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD1_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD1_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD1_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD1");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD1_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD1_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD1_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD1_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD1");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG2_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG2_ADDR + 
	             PEU_P_REQ_CREDIT_REG2_STRIDE * 
	             PEU_P_REQ_CREDIT_REG2_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG2");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG2_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG2_ADDR + 
	             PEU_NP_REQ_CREDIT_REG2_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG2_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG2");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG2_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG2_ADDR + 
	             PEU_P_RETURN_CREDIT_REG2_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG2_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG2");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG2_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG2_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG2_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG2_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG2");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG2_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG2_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG2_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG2_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG2");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG2_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG2_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG2_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG2_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG2");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD2_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD2_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD2_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD2_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD2");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD2_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD2_ADDR + 
	             PEU_XADM_PH_CDTS_THLD2_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD2_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD2");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD2_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD2_ADDR + 
	             PEU_XADM_PD_CDTS_THLD2_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD2_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD2");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD2_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD2_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD2_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD2_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD2");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD2_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD2_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD2_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD2_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD2");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG3_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG3_ADDR + 
	             PEU_P_REQ_CREDIT_REG3_STRIDE * 
	             PEU_P_REQ_CREDIT_REG3_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG3");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG3_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG3_ADDR + 
	             PEU_NP_REQ_CREDIT_REG3_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG3_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG3");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG3_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG3_ADDR + 
	             PEU_P_RETURN_CREDIT_REG3_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG3_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG3");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG3_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG3_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG3_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG3_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG3");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG3_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG3_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG3_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG3_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG3");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG3_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG3_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG3_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG3_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG3");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD3_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD3_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD3_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD3_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD3");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD3_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD3_ADDR + 
	             PEU_XADM_PH_CDTS_THLD3_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD3_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD3");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD3_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD3_ADDR + 
	             PEU_XADM_PD_CDTS_THLD3_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD3_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD3");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD3_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD3_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD3_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD3_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD3");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD3_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD3_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD3_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD3_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD3");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG4_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG4_ADDR + 
	             PEU_P_REQ_CREDIT_REG4_STRIDE * 
	             PEU_P_REQ_CREDIT_REG4_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG4");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG4_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG4_ADDR + 
	             PEU_NP_REQ_CREDIT_REG4_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG4_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG4");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG4_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG4_ADDR + 
	             PEU_P_RETURN_CREDIT_REG4_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG4_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG4");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG4_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG4_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG4_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG4_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG4");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG4_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG4_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG4_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG4_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG4");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG4_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG4_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG4_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG4_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG4");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD4_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD4_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD4_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD4_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD4");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD4_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD4_ADDR + 
	             PEU_XADM_PH_CDTS_THLD4_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD4_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD4");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD4_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD4_ADDR + 
	             PEU_XADM_PD_CDTS_THLD4_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD4_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD4");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD4_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD4_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD4_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD4_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD4");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD4_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD4_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD4_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD4_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD4");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG5_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG5_ADDR + 
	             PEU_P_REQ_CREDIT_REG5_STRIDE * 
	             PEU_P_REQ_CREDIT_REG5_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG5");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG5_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG5_ADDR + 
	             PEU_NP_REQ_CREDIT_REG5_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG5_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG5");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG5_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG5_ADDR + 
	             PEU_P_RETURN_CREDIT_REG5_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG5_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG5");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG5_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG5_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG5_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG5_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG5");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG5_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG5_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG5_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG5_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG5");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG5_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG5_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG5_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG5_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG5");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD5_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD5_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD5_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD5_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD5");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD5_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD5_ADDR + 
	             PEU_XADM_PH_CDTS_THLD5_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD5_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD5");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD5_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD5_ADDR + 
	             PEU_XADM_PD_CDTS_THLD5_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD5_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD5");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD5_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD5_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD5_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD5_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD5");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD5_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD5_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD5_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD5_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD5");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG6_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG6_ADDR + 
	             PEU_P_REQ_CREDIT_REG6_STRIDE * 
	             PEU_P_REQ_CREDIT_REG6_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG6");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG6_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG6_ADDR + 
	             PEU_NP_REQ_CREDIT_REG6_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG6_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG6");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG6_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG6_ADDR + 
	             PEU_P_RETURN_CREDIT_REG6_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG6_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG6");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG6_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG6_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG6_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG6_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG6");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG6_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG6_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG6_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG6_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG6");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG6_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG6_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG6_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG6_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG6");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD6_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD6_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD6_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD6_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD6");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD6_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD6_ADDR + 
	             PEU_XADM_PH_CDTS_THLD6_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD6_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD6");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD6_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD6_ADDR + 
	             PEU_XADM_PD_CDTS_THLD6_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD6_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD6");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD6_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD6_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD6_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD6_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD6");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD6_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD6_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD6_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD6_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD6");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG7_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG7_ADDR + 
	             PEU_P_REQ_CREDIT_REG7_STRIDE * 
	             PEU_P_REQ_CREDIT_REG7_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG7");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG7_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG7_ADDR + 
	             PEU_NP_REQ_CREDIT_REG7_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG7_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG7");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG7_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG7_ADDR + 
	             PEU_P_RETURN_CREDIT_REG7_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG7_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG7");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG7_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG7_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG7_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG7_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG7");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG7_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG7_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG7_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG7_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG7");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG7_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG7_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG7_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG7_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG7");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD7_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD7_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD7_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD7_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD7");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD7_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD7_ADDR + 
	             PEU_XADM_PH_CDTS_THLD7_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD7_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD7");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD7_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD7_ADDR + 
	             PEU_XADM_PD_CDTS_THLD7_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD7_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD7");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD7_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD7_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD7_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD7_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD7");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD7_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD7_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD7_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD7_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD7");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG8_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG8_ADDR + 
	             PEU_P_REQ_CREDIT_REG8_STRIDE * 
	             PEU_P_REQ_CREDIT_REG8_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG8");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG8_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG8_ADDR + 
	             PEU_NP_REQ_CREDIT_REG8_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG8_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG8");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG8_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG8_ADDR + 
	             PEU_P_RETURN_CREDIT_REG8_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG8_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG8");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG8_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG8_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG8_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG8_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG8");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG8_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG8_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG8_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG8_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG8");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG8_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG8_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG8_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG8_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG8");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD8_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD8_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD8_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD8_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD8");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD8_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD8_ADDR + 
	             PEU_XADM_PH_CDTS_THLD8_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD8_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD8");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD8_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD8_ADDR + 
	             PEU_XADM_PD_CDTS_THLD8_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD8_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD8");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD8_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD8_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD8_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD8_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD8");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD8_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD8_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD8_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD8_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD8");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG9_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG9_ADDR + 
	             PEU_P_REQ_CREDIT_REG9_STRIDE * 
	             PEU_P_REQ_CREDIT_REG9_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG9");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG9_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG9_ADDR + 
	             PEU_NP_REQ_CREDIT_REG9_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG9_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG9");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG9_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG9_ADDR + 
	             PEU_P_RETURN_CREDIT_REG9_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG9_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG9");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG9_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG9_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG9_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG9_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG9");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG9_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG9_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG9_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG9_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG9");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG9_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG9_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG9_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG9_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG9");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD9_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD9_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD9_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD9_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD9");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD9_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD9_ADDR + 
	             PEU_XADM_PH_CDTS_THLD9_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD9_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD9");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD9_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD9_ADDR + 
	             PEU_XADM_PD_CDTS_THLD9_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD9_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD9");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD9_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD9_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD9_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD9_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD9");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD9_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD9_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD9_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD9_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD9");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG10_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG10_ADDR + 
	             PEU_P_REQ_CREDIT_REG10_STRIDE * 
	             PEU_P_REQ_CREDIT_REG10_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG10");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG10_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG10_ADDR + 
	             PEU_NP_REQ_CREDIT_REG10_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG10_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG10");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG10_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG10_ADDR + 
	             PEU_P_RETURN_CREDIT_REG10_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG10_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG10");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG10_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG10_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG10_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG10_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG10");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG10_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG10_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG10_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG10_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG10");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG10_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG10_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG10_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG10_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG10");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD10_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD10_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD10_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD10_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD10");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD10_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD10_ADDR + 
	             PEU_XADM_PH_CDTS_THLD10_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD10_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD10");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD10_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD10_ADDR + 
	             PEU_XADM_PD_CDTS_THLD10_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD10_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD10");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD10_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD10_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD10_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD10_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD10");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD10_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD10_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD10_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD10_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD10");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG11_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG11_ADDR + 
	             PEU_P_REQ_CREDIT_REG11_STRIDE * 
	             PEU_P_REQ_CREDIT_REG11_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG11");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG11_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG11_ADDR + 
	             PEU_NP_REQ_CREDIT_REG11_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG11_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG11");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG11_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG11_ADDR + 
	             PEU_P_RETURN_CREDIT_REG11_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG11_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG11");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG11_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG11_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG11_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG11_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG11");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG11_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG11_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG11_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG11_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG11");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG11_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG11_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG11_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG11_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG11");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD11_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD11_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD11_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD11_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD11");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD11_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD11_ADDR + 
	             PEU_XADM_PH_CDTS_THLD11_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD11_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD11");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD11_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD11_ADDR + 
	             PEU_XADM_PD_CDTS_THLD11_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD11_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD11");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD11_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD11_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD11_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD11_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD11");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD11_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD11_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD11_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD11_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD11");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG12_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG12_ADDR + 
	             PEU_P_REQ_CREDIT_REG12_STRIDE * 
	             PEU_P_REQ_CREDIT_REG12_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG12");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG12_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG12_ADDR + 
	             PEU_NP_REQ_CREDIT_REG12_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG12_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG12");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG12_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG12_ADDR + 
	             PEU_P_RETURN_CREDIT_REG12_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG12_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG12");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG12_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG12_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG12_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG12_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG12");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG12_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG12_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG12_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG12_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG12");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG12_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG12_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG12_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG12_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG12");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD12_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD12_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD12_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD12_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD12");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD12_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD12_ADDR + 
	             PEU_XADM_PH_CDTS_THLD12_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD12_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD12");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD12_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD12_ADDR + 
	             PEU_XADM_PD_CDTS_THLD12_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD12_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD12");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD12_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD12_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD12_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD12_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD12");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD12_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD12_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD12_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD12_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD12");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG13_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG13_ADDR + 
	             PEU_P_REQ_CREDIT_REG13_STRIDE * 
	             PEU_P_REQ_CREDIT_REG13_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG13");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG13_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG13_ADDR + 
	             PEU_NP_REQ_CREDIT_REG13_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG13_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG13");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG13_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG13_ADDR + 
	             PEU_P_RETURN_CREDIT_REG13_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG13_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG13");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG13_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG13_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG13_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG13_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG13");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG13_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG13_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG13_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG13_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG13");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG13_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG13_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG13_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG13_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG13");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD13_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD13_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD13_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD13_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD13");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD13_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD13_ADDR + 
	             PEU_XADM_PH_CDTS_THLD13_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD13_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD13");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD13_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD13_ADDR + 
	             PEU_XADM_PD_CDTS_THLD13_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD13_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD13");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD13_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD13_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD13_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD13_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD13");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD13_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD13_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD13_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD13_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD13");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG14_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG14_ADDR + 
	             PEU_P_REQ_CREDIT_REG14_STRIDE * 
	             PEU_P_REQ_CREDIT_REG14_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG14");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG14_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG14_ADDR + 
	             PEU_NP_REQ_CREDIT_REG14_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG14_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG14");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG14_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG14_ADDR + 
	             PEU_P_RETURN_CREDIT_REG14_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG14_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG14");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG14_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG14_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG14_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG14_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG14");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG14_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG14_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG14_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG14_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG14");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG14_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG14_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG14_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG14_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG14");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD14_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD14_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD14_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD14_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD14");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD14_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD14_ADDR + 
	             PEU_XADM_PH_CDTS_THLD14_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD14_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD14");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD14_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD14_ADDR + 
	             PEU_XADM_PD_CDTS_THLD14_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD14_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD14");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD14_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD14_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD14_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD14_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD14");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD14_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD14_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD14_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD14_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD14");
	}
	if ((addr >= PEU_P_REQ_CREDIT_REG15_ADDR) &&
	    (addr <  PEU_P_REQ_CREDIT_REG15_ADDR + 
	             PEU_P_REQ_CREDIT_REG15_STRIDE * 
	             PEU_P_REQ_CREDIT_REG15_DEPTH)) {
		return("PEU_P_REQ_CREDIT_REG15");
	}
	if ((addr >= PEU_NP_REQ_CREDIT_REG15_ADDR) &&
	    (addr <  PEU_NP_REQ_CREDIT_REG15_ADDR + 
	             PEU_NP_REQ_CREDIT_REG15_STRIDE * 
	             PEU_NP_REQ_CREDIT_REG15_DEPTH)) {
		return("PEU_NP_REQ_CREDIT_REG15");
	}
	if ((addr >= PEU_P_RETURN_CREDIT_REG15_ADDR) &&
	    (addr <  PEU_P_RETURN_CREDIT_REG15_ADDR + 
	             PEU_P_RETURN_CREDIT_REG15_STRIDE * 
	             PEU_P_RETURN_CREDIT_REG15_DEPTH)) {
		return("PEU_P_RETURN_CREDIT_REG15");
	}
	if ((addr >= PEU_NP_RETURN_CREDIT_REG15_ADDR) &&
	    (addr <  PEU_NP_RETURN_CREDIT_REG15_ADDR + 
	             PEU_NP_RETURN_CREDIT_REG15_STRIDE * 
	             PEU_NP_RETURN_CREDIT_REG15_DEPTH)) {
		return("PEU_NP_RETURN_CREDIT_REG15");
	}
	if ((addr >= PEU_P_RETURN_INTERVAL_REG15_ADDR) &&
	    (addr <  PEU_P_RETURN_INTERVAL_REG15_ADDR + 
	             PEU_P_RETURN_INTERVAL_REG15_STRIDE * 
	             PEU_P_RETURN_INTERVAL_REG15_DEPTH)) {
		return("PEU_P_RETURN_INTERVAL_REG15");
	}
	if ((addr >= PEU_NP_RETURN_INTERVAL_REG15_ADDR) &&
	    (addr <  PEU_NP_RETURN_INTERVAL_REG15_ADDR + 
	             PEU_NP_RETURN_INTERVAL_REG15_STRIDE * 
	             PEU_NP_RETURN_INTERVAL_REG15_DEPTH)) {
		return("PEU_NP_RETURN_INTERVAL_REG15");
	}
	if ((addr >= PEU_Q_NP_TAG_CNT_THLD15_ADDR) &&
	    (addr <  PEU_Q_NP_TAG_CNT_THLD15_ADDR + 
	             PEU_Q_NP_TAG_CNT_THLD15_STRIDE * 
	             PEU_Q_NP_TAG_CNT_THLD15_DEPTH)) {
		return("PEU_Q_NP_TAG_CNT_THLD15");
	}
	if ((addr >= PEU_XADM_PH_CDTS_THLD15_ADDR) &&
	    (addr <  PEU_XADM_PH_CDTS_THLD15_ADDR + 
	             PEU_XADM_PH_CDTS_THLD15_STRIDE * 
	             PEU_XADM_PH_CDTS_THLD15_DEPTH)) {
		return("PEU_XADM_PH_CDTS_THLD15");
	}
	if ((addr >= PEU_XADM_PD_CDTS_THLD15_ADDR) &&
	    (addr <  PEU_XADM_PD_CDTS_THLD15_ADDR + 
	             PEU_XADM_PD_CDTS_THLD15_STRIDE * 
	             PEU_XADM_PD_CDTS_THLD15_DEPTH)) {
		return("PEU_XADM_PD_CDTS_THLD15");
	}
	if ((addr >= PEU_XADM_NPH_CDTS_THLD15_ADDR) &&
	    (addr <  PEU_XADM_NPH_CDTS_THLD15_ADDR + 
	             PEU_XADM_NPH_CDTS_THLD15_STRIDE * 
	             PEU_XADM_NPH_CDTS_THLD15_DEPTH)) {
		return("PEU_XADM_NPH_CDTS_THLD15");
	}
	if ((addr >= PEU_XADM_NPD_CDTS_THLD15_ADDR) &&
	    (addr <  PEU_XADM_NPD_CDTS_THLD15_ADDR + 
	             PEU_XADM_NPD_CDTS_THLD15_STRIDE * 
	             PEU_XADM_NPD_CDTS_THLD15_DEPTH)) {
		return("PEU_XADM_NPD_CDTS_THLD15");
	}
	if ((addr >= PEU_HPRI_Q_REG_ADDR) &&
	    (addr <  PEU_HPRI_Q_REG_ADDR + 
	             PEU_HPRI_Q_REG_STRIDE * 
	             PEU_HPRI_Q_REG_DEPTH)) {
		return("PEU_HPRI_Q_REG");
	}
	if ((addr >= PEU_HPRI_RR_WEIGHT_REG_ADDR) &&
	    (addr <  PEU_HPRI_RR_WEIGHT_REG_ADDR + 
	             PEU_HPRI_RR_WEIGHT_REG_STRIDE * 
	             PEU_HPRI_RR_WEIGHT_REG_DEPTH)) {
		return("PEU_HPRI_RR_WEIGHT_REG");
	}
	if ((addr >= PEU_MAX_RD_REQ_SIZE_REG_ADDR) &&
	    (addr <  PEU_MAX_RD_REQ_SIZE_REG_ADDR + 
	             PEU_MAX_RD_REQ_SIZE_REG_STRIDE * 
	             PEU_MAX_RD_REQ_SIZE_REG_DEPTH)) {
		return("PEU_MAX_RD_REQ_SIZE_REG");
	}
	if ((addr >= PEU_DIRTY_PCI_TAG_CTL_REG_ADDR) &&
	    (addr <  PEU_DIRTY_PCI_TAG_CTL_REG_ADDR + 
	             PEU_DIRTY_PCI_TAG_CTL_REG_STRIDE * 
	             PEU_DIRTY_PCI_TAG_CTL_REG_DEPTH)) {
		return("PEU_DIRTY_PCI_TAG_CTL_REG");
	}
	if ((addr >= PEU_MASTER_VEC_ST_REG_ADDR) &&
	    (addr <  PEU_MASTER_VEC_ST_REG_ADDR + 
	             PEU_MASTER_VEC_ST_REG_STRIDE * 
	             PEU_MASTER_VEC_ST_REG_DEPTH)) {
		return("PEU_MASTER_VEC_ST_REG");
	}
	if ((addr >= PEU_MASTER_VEC_MSK_REG_ADDR) &&
	    (addr <  PEU_MASTER_VEC_MSK_REG_ADDR + 
	             PEU_MASTER_VEC_MSK_REG_STRIDE * 
	             PEU_MASTER_VEC_MSK_REG_DEPTH)) {
		return("PEU_MASTER_VEC_MSK_REG");
	}
	if ((addr >= PEU_FLR_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_FLR_REQ_DBG_REG_ADDR + 
	             PEU_FLR_REQ_DBG_REG_STRIDE * 
	             PEU_FLR_REQ_DBG_REG_DEPTH)) {
		return("PEU_FLR_REQ_DBG_REG");
	}
	if ((addr >= PEU_FLR_DONE_DBG_REG_ADDR) &&
	    (addr <  PEU_FLR_DONE_DBG_REG_ADDR + 
	             PEU_FLR_DONE_DBG_REG_STRIDE * 
	             PEU_FLR_DONE_DBG_REG_DEPTH)) {
		return("PEU_FLR_DONE_DBG_REG");
	}
	if ((addr >= PEU_FLR_REQ_VEC_ST_REG_ADDR) &&
	    (addr <  PEU_FLR_REQ_VEC_ST_REG_ADDR + 
	             PEU_FLR_REQ_VEC_ST_REG_STRIDE * 
	             PEU_FLR_REQ_VEC_ST_REG_DEPTH)) {
		return("PEU_FLR_REQ_VEC_ST_REG");
	}
	if ((addr >= PEU_FLR_DONE_VEC_ST_REG_ADDR) &&
	    (addr <  PEU_FLR_DONE_VEC_ST_REG_ADDR + 
	             PEU_FLR_DONE_VEC_ST_REG_STRIDE * 
	             PEU_FLR_DONE_VEC_ST_REG_DEPTH)) {
		return("PEU_FLR_DONE_VEC_ST_REG");
	}
	if ((addr >= PEU_TAG_POOL_DBG_REG_ADDR) &&
	    (addr <  PEU_TAG_POOL_DBG_REG_ADDR + 
	             PEU_TAG_POOL_DBG_REG_STRIDE * 
	             PEU_TAG_POOL_DBG_REG_DEPTH)) {
		return("PEU_TAG_POOL_DBG_REG");
	}
	if ((addr >= PEU_LTSSM_DBG_REG_ADDR) &&
	    (addr <  PEU_LTSSM_DBG_REG_ADDR + 
	             PEU_LTSSM_DBG_REG_STRIDE * 
	             PEU_LTSSM_DBG_REG_DEPTH)) {
		return("PEU_LTSSM_DBG_REG");
	}
	if ((addr >= PEU_TSU_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_TSU_REQ_DBG_REG_ADDR + 
	             PEU_TSU_REQ_DBG_REG_STRIDE * 
	             PEU_TSU_REQ_DBG_REG_DEPTH)) {
		return("PEU_TSU_REQ_DBG_REG");
	}
	if ((addr >= PEU_EPS_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_EPS_REQ_DBG_REG_ADDR + 
	             PEU_EPS_REQ_DBG_REG_STRIDE * 
	             PEU_EPS_REQ_DBG_REG_DEPTH)) {
		return("PEU_EPS_REQ_DBG_REG");
	}
	if ((addr >= PEU_P_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_P_REQ_DBG_REG_ADDR + 
	             PEU_P_REQ_DBG_REG_STRIDE * 
	             PEU_P_REQ_DBG_REG_DEPTH)) {
		return("PEU_P_REQ_DBG_REG");
	}
	if ((addr >= PEU_NP_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_NP_REQ_DBG_REG_ADDR + 
	             PEU_NP_REQ_DBG_REG_STRIDE * 
	             PEU_NP_REQ_DBG_REG_DEPTH)) {
		return("PEU_NP_REQ_DBG_REG");
	}
	if ((addr >= PEU_DBI_CSR_WDAT_REG_ADDR) &&
	    (addr <  PEU_DBI_CSR_WDAT_REG_ADDR + 
	             PEU_DBI_CSR_WDAT_REG_STRIDE * 
	             PEU_DBI_CSR_WDAT_REG_DEPTH)) {
		return("PEU_DBI_CSR_WDAT_REG");
	}
	if ((addr >= PEU_DBI_CSR_CMD_REG_ADDR) &&
	    (addr <  PEU_DBI_CSR_CMD_REG_ADDR + 
	             PEU_DBI_CSR_CMD_REG_STRIDE * 
	             PEU_DBI_CSR_CMD_REG_DEPTH)) {
		return("PEU_DBI_CSR_CMD_REG");
	}
	if ((addr >= PEU_DBI_CSR_STATUS_REG_ADDR) &&
	    (addr <  PEU_DBI_CSR_STATUS_REG_ADDR + 
	             PEU_DBI_CSR_STATUS_REG_STRIDE * 
	             PEU_DBI_CSR_STATUS_REG_DEPTH)) {
		return("PEU_DBI_CSR_STATUS_REG");
	}
	if ((addr >= PEU_DBI_CSR_RDAT_REG_ADDR) &&
	    (addr <  PEU_DBI_CSR_RDAT_REG_ADDR + 
	             PEU_DBI_CSR_RDAT_REG_STRIDE * 
	             PEU_DBI_CSR_RDAT_REG_DEPTH)) {
		return("PEU_DBI_CSR_RDAT_REG");
	}
	if ((addr >= PEU_CPL_BUF_WATER_MARK_REG_ADDR) &&
	    (addr <  PEU_CPL_BUF_WATER_MARK_REG_ADDR + 
	             PEU_CPL_BUF_WATER_MARK_REG_STRIDE * 
	             PEU_CPL_BUF_WATER_MARK_REG_DEPTH)) {
		return("PEU_CPL_BUF_WATER_MARK_REG");
	}
	if ((addr >= PEU_ARB_CPL_BUF_THLD_REG_ADDR) &&
	    (addr <  PEU_ARB_CPL_BUF_THLD_REG_ADDR + 
	             PEU_ARB_CPL_BUF_THLD_REG_STRIDE * 
	             PEU_ARB_CPL_BUF_THLD_REG_DEPTH)) {
		return("PEU_ARB_CPL_BUF_THLD_REG");
	}
	if ((addr >= PEU_CPL_BUF_CREDIT_REG_ADDR) &&
	    (addr <  PEU_CPL_BUF_CREDIT_REG_ADDR + 
	             PEU_CPL_BUF_CREDIT_REG_STRIDE * 
	             PEU_CPL_BUF_CREDIT_REG_DEPTH)) {
		return("PEU_CPL_BUF_CREDIT_REG");
	}
	if ((addr >= PEU_CPL_MAX_CREDIT_REG_ADDR) &&
	    (addr <  PEU_CPL_MAX_CREDIT_REG_ADDR + 
	             PEU_CPL_MAX_CREDIT_REG_STRIDE * 
	             PEU_CPL_MAX_CREDIT_REG_DEPTH)) {
		return("PEU_CPL_MAX_CREDIT_REG");
	}
	if ((addr >= PEU_PCIE_PHY_CTL_REG_ADDR) &&
	    (addr <  PEU_PCIE_PHY_CTL_REG_ADDR + 
	             PEU_PCIE_PHY_CTL_REG_STRIDE * 
	             PEU_PCIE_PHY_CTL_REG_DEPTH)) {
		return("PEU_PCIE_PHY_CTL_REG");
	}
	if ((addr >= PEU_FORCE_ERR_REG_ADDR) &&
	    (addr <  PEU_FORCE_ERR_REG_ADDR + 
	             PEU_FORCE_ERR_REG_STRIDE * 
	             PEU_FORCE_ERR_REG_DEPTH)) {
		return("PEU_FORCE_ERR_REG");
	}
	if ((addr >= PEU_MSG_GEN_QW0_REG_ADDR) &&
	    (addr <  PEU_MSG_GEN_QW0_REG_ADDR + 
	             PEU_MSG_GEN_QW0_REG_STRIDE * 
	             PEU_MSG_GEN_QW0_REG_DEPTH)) {
		return("PEU_MSG_GEN_QW0_REG");
	}
	if ((addr >= PEU_MSG_GEN_QW1_REG_ADDR) &&
	    (addr <  PEU_MSG_GEN_QW1_REG_ADDR + 
	             PEU_MSG_GEN_QW1_REG_STRIDE * 
	             PEU_MSG_GEN_QW1_REG_DEPTH)) {
		return("PEU_MSG_GEN_QW1_REG");
	}
	if ((addr >= PEU_MSG_STATUS_REG_ADDR) &&
	    (addr <  PEU_MSG_STATUS_REG_ADDR + 
	             PEU_MSG_STATUS_REG_STRIDE * 
	             PEU_MSG_STATUS_REG_DEPTH)) {
		return("PEU_MSG_STATUS_REG");
	}
	if ((addr >= PEU_ATS_MSG_QW0_REG_ADDR) &&
	    (addr <  PEU_ATS_MSG_QW0_REG_ADDR + 
	             PEU_ATS_MSG_QW0_REG_STRIDE * 
	             PEU_ATS_MSG_QW0_REG_DEPTH)) {
		return("PEU_ATS_MSG_QW0_REG");
	}
	if ((addr >= PEU_ATS_MSG_QW1_REG_ADDR) &&
	    (addr <  PEU_ATS_MSG_QW1_REG_ADDR + 
	             PEU_ATS_MSG_QW1_REG_STRIDE * 
	             PEU_ATS_MSG_QW1_REG_DEPTH)) {
		return("PEU_ATS_MSG_QW1_REG");
	}
	if ((addr >= PEU_SRAM_CORR_ERR_STATUS_REG_ADDR) &&
	    (addr <  PEU_SRAM_CORR_ERR_STATUS_REG_ADDR + 
	             PEU_SRAM_CORR_ERR_STATUS_REG_STRIDE * 
	             PEU_SRAM_CORR_ERR_STATUS_REG_DEPTH)) {
		return("PEU_SRAM_CORR_ERR_STATUS_REG");
	}
	if ((addr >= PEU_HI_PRI_MSK_REG_ADDR) &&
	    (addr <  PEU_HI_PRI_MSK_REG_ADDR + 
	             PEU_HI_PRI_MSK_REG_STRIDE * 
	             PEU_HI_PRI_MSK_REG_DEPTH)) {
		return("PEU_HI_PRI_MSK_REG");
	}
	if ((addr >= PEU_HI_PRI_INTR_VEC_REG_ADDR) &&
	    (addr <  PEU_HI_PRI_INTR_VEC_REG_ADDR + 
	             PEU_HI_PRI_INTR_VEC_REG_STRIDE * 
	             PEU_HI_PRI_INTR_VEC_REG_DEPTH)) {
		return("PEU_HI_PRI_INTR_VEC_REG");
	}
	if ((addr >= PEU_FATAL_INTR_MSK_REG_ADDR) &&
	    (addr <  PEU_FATAL_INTR_MSK_REG_ADDR + 
	             PEU_FATAL_INTR_MSK_REG_STRIDE * 
	             PEU_FATAL_INTR_MSK_REG_DEPTH)) {
		return("PEU_FATAL_INTR_MSK_REG");
	}
	if ((addr >= PEU_FATAL_INTR_VEC_REG_ADDR) &&
	    (addr <  PEU_FATAL_INTR_VEC_REG_ADDR + 
	             PEU_FATAL_INTR_VEC_REG_STRIDE * 
	             PEU_FATAL_INTR_VEC_REG_DEPTH)) {
		return("PEU_FATAL_INTR_VEC_REG");
	}
	if ((addr >= PEU_INTR_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_INTR_REQ_DBG_REG_ADDR + 
	             PEU_INTR_REQ_DBG_REG_STRIDE * 
	             PEU_INTR_REQ_DBG_REG_DEPTH)) {
		return("PEU_INTR_REQ_DBG_REG");
	}
	if ((addr >= PEU_TSU_PIO_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_TSU_PIO_REQ_DBG_REG_ADDR + 
	             PEU_TSU_PIO_REQ_DBG_REG_STRIDE * 
	             PEU_TSU_PIO_REQ_DBG_REG_DEPTH)) {
		return("PEU_TSU_PIO_REQ_DBG_REG");
	}
	if ((addr >= PEU_EPRM_PIO_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_EPRM_PIO_REQ_DBG_REG_ADDR + 
	             PEU_EPRM_PIO_REQ_DBG_REG_STRIDE * 
	             PEU_EPRM_PIO_REQ_DBG_REG_DEPTH)) {
		return("PEU_EPRM_PIO_REQ_DBG_REG");
	}
	if ((addr >= PEU_INTR_PIO_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_INTR_PIO_REQ_DBG_REG_ADDR + 
	             PEU_INTR_PIO_REQ_DBG_REG_STRIDE * 
	             PEU_INTR_PIO_REQ_DBG_REG_DEPTH)) {
		return("PEU_INTR_PIO_REQ_DBG_REG");
	}
	if ((addr >= PEU_CPL_FLUSH_DBG_REG_ADDR) &&
	    (addr <  PEU_CPL_FLUSH_DBG_REG_ADDR + 
	             PEU_CPL_FLUSH_DBG_REG_STRIDE * 
	             PEU_CPL_FLUSH_DBG_REG_DEPTH)) {
		return("PEU_CPL_FLUSH_DBG_REG");
	}
	if ((addr >= PEU_EP_DIAG_DBG_REG_ADDR) &&
	    (addr <  PEU_EP_DIAG_DBG_REG_ADDR + 
	             PEU_EP_DIAG_DBG_REG_STRIDE * 
	             PEU_EP_DIAG_DBG_REG_DEPTH)) {
		return("PEU_EP_DIAG_DBG_REG");
	}
	if ((addr >= PEU_CXPL_EI_DBG_REG_ADDR) &&
	    (addr <  PEU_CXPL_EI_DBG_REG_ADDR + 
	             PEU_CXPL_EI_DBG_REG_STRIDE * 
	             PEU_CXPL_EI_DBG_REG_DEPTH)) {
		return("PEU_CXPL_EI_DBG_REG");
	}
	if ((addr >= PEU_CXPL_DBG_REG_ADDR) &&
	    (addr <  PEU_CXPL_DBG_REG_ADDR + 
	             PEU_CXPL_DBG_REG_STRIDE * 
	             PEU_CXPL_DBG_REG_DEPTH)) {
		return("PEU_CXPL_DBG_REG");
	}
	if ((addr >= PEU_FF_DC_1_DBG_REG_ADDR) &&
	    (addr <  PEU_FF_DC_1_DBG_REG_ADDR + 
	             PEU_FF_DC_1_DBG_REG_STRIDE * 
	             PEU_FF_DC_1_DBG_REG_DEPTH)) {
		return("PEU_FF_DC_1_DBG_REG");
	}
	if ((addr >= PEU_FF_DC_2_DBG_REG_ADDR) &&
	    (addr <  PEU_FF_DC_2_DBG_REG_ADDR + 
	             PEU_FF_DC_2_DBG_REG_STRIDE * 
	             PEU_FF_DC_2_DBG_REG_DEPTH)) {
		return("PEU_FF_DC_2_DBG_REG");
	}
	if ((addr >= PEU_FORCE_FLR_REG_ADDR) &&
	    (addr <  PEU_FORCE_FLR_REG_ADDR + 
	             PEU_FORCE_FLR_REG_STRIDE * 
	             PEU_FORCE_FLR_REG_DEPTH)) {
		return("PEU_FORCE_FLR_REG");
	}
	if ((addr >= PEU_CSR_PEU_CTL_ST_REG_ADDR) &&
	    (addr <  PEU_CSR_PEU_CTL_ST_REG_ADDR + 
	             PEU_CSR_PEU_CTL_ST_REG_STRIDE * 
	             PEU_CSR_PEU_CTL_ST_REG_DEPTH)) {
		return("PEU_CSR_PEU_CTL_ST_REG");
	}
	if ((addr >= PEU_CSR_PEU_INT_ST_REG_ADDR) &&
	    (addr <  PEU_CSR_PEU_INT_ST_REG_ADDR + 
	             PEU_CSR_PEU_INT_ST_REG_STRIDE * 
	             PEU_CSR_PEU_INT_ST_REG_DEPTH)) {
		return("PEU_CSR_PEU_INT_ST_REG");
	}
	if ((addr >= PEU_CSR_PEU_INT_MSK_REG_ADDR) &&
	    (addr <  PEU_CSR_PEU_INT_MSK_REG_ADDR + 
	             PEU_CSR_PEU_INT_MSK_REG_STRIDE * 
	             PEU_CSR_PEU_INT_MSK_REG_DEPTH)) {
		return("PEU_CSR_PEU_INT_MSK_REG");
	}
	if ((addr >= PEU_CSR_LP_INTR_VEC_REG_ADDR) &&
	    (addr <  PEU_CSR_LP_INTR_VEC_REG_ADDR + 
	             PEU_CSR_LP_INTR_VEC_REG_STRIDE * 
	             PEU_CSR_LP_INTR_VEC_REG_DEPTH)) {
		return("PEU_CSR_LP_INTR_VEC_REG");
	}
	if ((addr >= PEU_CSR_LPRI_INT_MSK_REG_ADDR) &&
	    (addr <  PEU_CSR_LPRI_INT_MSK_REG_ADDR + 
	             PEU_CSR_LPRI_INT_MSK_REG_STRIDE * 
	             PEU_CSR_LPRI_INT_MSK_REG_DEPTH)) {
		return("PEU_CSR_LPRI_INT_MSK_REG");
	}
	if ((addr >= PEU_CSR_SER_INT_ST_REG_ADDR) &&
	    (addr <  PEU_CSR_SER_INT_ST_REG_ADDR + 
	             PEU_CSR_SER_INT_ST_REG_STRIDE * 
	             PEU_CSR_SER_INT_ST_REG_DEPTH)) {
		return("PEU_CSR_SER_INT_ST_REG");
	}
	if ((addr >= PEU_TSU_FLR_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_TSU_FLR_REQ_DBG_REG_ADDR + 
	             PEU_TSU_FLR_REQ_DBG_REG_STRIDE * 
	             PEU_TSU_FLR_REQ_DBG_REG_DEPTH)) {
		return("PEU_TSU_FLR_REQ_DBG_REG");
	}
	if ((addr >= PEU_TSU_FLR_DONE_DBG_REG_ADDR) &&
	    (addr <  PEU_TSU_FLR_DONE_DBG_REG_ADDR + 
	             PEU_TSU_FLR_DONE_DBG_REG_STRIDE * 
	             PEU_TSU_FLR_DONE_DBG_REG_DEPTH)) {
		return("PEU_TSU_FLR_DONE_DBG_REG");
	}
	if ((addr >= PEU_EPS_FLR_REQ_DBG_REG_ADDR) &&
	    (addr <  PEU_EPS_FLR_REQ_DBG_REG_ADDR + 
	             PEU_EPS_FLR_REQ_DBG_REG_STRIDE * 
	             PEU_EPS_FLR_REQ_DBG_REG_DEPTH)) {
		return("PEU_EPS_FLR_REQ_DBG_REG");
	}
	if ((addr >= PEU_EPS_FLR_DONE_DBG_REG_ADDR) &&
	    (addr <  PEU_EPS_FLR_DONE_DBG_REG_ADDR + 
	             PEU_EPS_FLR_DONE_DBG_REG_STRIDE * 
	             PEU_EPS_FLR_DONE_DBG_REG_DEPTH)) {
		return("PEU_EPS_FLR_DONE_DBG_REG");
	}
	if ((addr >= PEU_PIPE_CSR_WDAT_REG_ADDR) &&
	    (addr <  PEU_PIPE_CSR_WDAT_REG_ADDR + 
	             PEU_PIPE_CSR_WDAT_REG_STRIDE * 
	             PEU_PIPE_CSR_WDAT_REG_DEPTH)) {
		return("PEU_PIPE_CSR_WDAT_REG");
	}
	if ((addr >= PEU_PIPE_CSR_CMD_REG_ADDR) &&
	    (addr <  PEU_PIPE_CSR_CMD_REG_ADDR + 
	             PEU_PIPE_CSR_CMD_REG_STRIDE * 
	             PEU_PIPE_CSR_CMD_REG_DEPTH)) {
		return("PEU_PIPE_CSR_CMD_REG");
	}
	if ((addr >= PEU_PIPE_CSR_STATUS_REG_ADDR) &&
	    (addr <  PEU_PIPE_CSR_STATUS_REG_ADDR + 
	             PEU_PIPE_CSR_STATUS_REG_STRIDE * 
	             PEU_PIPE_CSR_STATUS_REG_DEPTH)) {
		return("PEU_PIPE_CSR_STATUS_REG");
	}
	if ((addr >= PEU_PIPE_CSR_RDAT_REG_ADDR) &&
	    (addr <  PEU_PIPE_CSR_RDAT_REG_ADDR + 
	             PEU_PIPE_CSR_RDAT_REG_STRIDE * 
	             PEU_PIPE_CSR_RDAT_REG_DEPTH)) {
		return("PEU_PIPE_CSR_RDAT_REG");
	}
	if ((addr >= PEU_SER_CSR_WDAT_REG_ADDR) &&
	    (addr <  PEU_SER_CSR_WDAT_REG_ADDR + 
	             PEU_SER_CSR_WDAT_REG_STRIDE * 
	             PEU_SER_CSR_WDAT_REG_DEPTH)) {
		return("PEU_SER_CSR_WDAT_REG");
	}
	if ((addr >= PEU_SER_CSR_CMD_REG_ADDR) &&
	    (addr <  PEU_SER_CSR_CMD_REG_ADDR + 
	             PEU_SER_CSR_CMD_REG_STRIDE * 
	             PEU_SER_CSR_CMD_REG_DEPTH)) {
		return("PEU_SER_CSR_CMD_REG");
	}
	if ((addr >= PEU_SER_CSR_STATUS_REG_ADDR) &&
	    (addr <  PEU_SER_CSR_STATUS_REG_ADDR + 
	             PEU_SER_CSR_STATUS_REG_STRIDE * 
	             PEU_SER_CSR_STATUS_REG_DEPTH)) {
		return("PEU_SER_CSR_STATUS_REG");
	}
	if ((addr >= PEU_SER_CSR_RDAT_REG_ADDR) &&
	    (addr <  PEU_SER_CSR_RDAT_REG_ADDR + 
	             PEU_SER_CSR_RDAT_REG_STRIDE * 
	             PEU_SER_CSR_RDAT_REG_DEPTH)) {
		return("PEU_SER_CSR_RDAT_REG");
	}
	if ((addr >= PEU_SER_1_CSR_WDAT_REG_ADDR) &&
	    (addr <  PEU_SER_1_CSR_WDAT_REG_ADDR + 
	             PEU_SER_1_CSR_WDAT_REG_STRIDE * 
	             PEU_SER_1_CSR_WDAT_REG_DEPTH)) {
		return("PEU_SER_1_CSR_WDAT_REG");
	}
	if ((addr >= PEU_SER_1_CSR_CMD_REG_ADDR) &&
	    (addr <  PEU_SER_1_CSR_CMD_REG_ADDR + 
	             PEU_SER_1_CSR_CMD_REG_STRIDE * 
	             PEU_SER_1_CSR_CMD_REG_DEPTH)) {
		return("PEU_SER_1_CSR_CMD_REG");
	}
	if ((addr >= PEU_SER_1_CSR_STATUS_REG_ADDR) &&
	    (addr <  PEU_SER_1_CSR_STATUS_REG_ADDR + 
	             PEU_SER_1_CSR_STATUS_REG_STRIDE * 
	             PEU_SER_1_CSR_STATUS_REG_DEPTH)) {
		return("PEU_SER_1_CSR_STATUS_REG");
	}
	if ((addr >= PEU_SER_1_CSR_RDAT_REG_ADDR) &&
	    (addr <  PEU_SER_1_CSR_RDAT_REG_ADDR + 
	             PEU_SER_1_CSR_RDAT_REG_STRIDE * 
	             PEU_SER_1_CSR_RDAT_REG_DEPTH)) {
		return("PEU_SER_1_CSR_RDAT_REG");
	}
	if ((addr >= PEU_SER_DFE_ST_SEL_REG_ADDR) &&
	    (addr <  PEU_SER_DFE_ST_SEL_REG_ADDR + 
	             PEU_SER_DFE_ST_SEL_REG_STRIDE * 
	             PEU_SER_DFE_ST_SEL_REG_DEPTH)) {
		return("PEU_SER_DFE_ST_SEL_REG");
	}
	if ((addr >= PEU_SER_DFE_ST_0_REG_ADDR) &&
	    (addr <  PEU_SER_DFE_ST_0_REG_ADDR + 
	             PEU_SER_DFE_ST_0_REG_STRIDE * 
	             PEU_SER_DFE_ST_0_REG_DEPTH)) {
		return("PEU_SER_DFE_ST_0_REG");
	}
	if ((addr >= PEU_SER_DFE_ST_1_REG_ADDR) &&
	    (addr <  PEU_SER_DFE_ST_1_REG_ADDR + 
	             PEU_SER_DFE_ST_1_REG_STRIDE * 
	             PEU_SER_DFE_ST_1_REG_DEPTH)) {
		return("PEU_SER_DFE_ST_1_REG");
	}
	if ((addr >= PEU_SER_DFE_ST_2_REG_ADDR) &&
	    (addr <  PEU_SER_DFE_ST_2_REG_ADDR + 
	             PEU_SER_DFE_ST_2_REG_STRIDE * 
	             PEU_SER_DFE_ST_2_REG_DEPTH)) {
		return("PEU_SER_DFE_ST_2_REG");
	}
	if ((addr >= PEU_SER_DFE_ST_3_REG_ADDR) &&
	    (addr <  PEU_SER_DFE_ST_3_REG_ADDR + 
	             PEU_SER_DFE_ST_3_REG_STRIDE * 
	             PEU_SER_DFE_ST_3_REG_DEPTH)) {
		return("PEU_SER_DFE_ST_3_REG");
	}
	if ((addr >= PEU_SER_POWERDOWN_CTL_REG_ADDR) &&
	    (addr <  PEU_SER_POWERDOWN_CTL_REG_ADDR + 
	             PEU_SER_POWERDOWN_CTL_REG_STRIDE * 
	             PEU_SER_POWERDOWN_CTL_REG_DEPTH)) {
		return("PEU_SER_POWERDOWN_CTL_REG");
	}
	if ((addr >= PEU_SER_CFG0_REG_ADDR) &&
	    (addr <  PEU_SER_CFG0_REG_ADDR + 
	             PEU_SER_CFG0_REG_STRIDE * 
	             PEU_SER_CFG0_REG_DEPTH)) {
		return("PEU_SER_CFG0_REG");
	}
	if ((addr >= PEU_SER_CFG1_REG_ADDR) &&
	    (addr <  PEU_SER_CFG1_REG_ADDR + 
	             PEU_SER_CFG1_REG_STRIDE * 
	             PEU_SER_CFG1_REG_DEPTH)) {
		return("PEU_SER_CFG1_REG");
	}
	if ((addr >= PEU_SER_CFG2_REG_ADDR) &&
	    (addr <  PEU_SER_CFG2_REG_ADDR + 
	             PEU_SER_CFG2_REG_STRIDE * 
	             PEU_SER_CFG2_REG_DEPTH)) {
		return("PEU_SER_CFG2_REG");
	}
	if ((addr >= PEU_SER_CFG3_REG_ADDR) &&
	    (addr <  PEU_SER_CFG3_REG_ADDR + 
	             PEU_SER_CFG3_REG_STRIDE * 
	             PEU_SER_CFG3_REG_DEPTH)) {
		return("PEU_SER_CFG3_REG");
	}
	if ((addr >= PEU_CSR_SER_CTL_REG_ADDR) &&
	    (addr <  PEU_CSR_SER_CTL_REG_ADDR + 
	             PEU_CSR_SER_CTL_REG_STRIDE * 
	             PEU_CSR_SER_CTL_REG_DEPTH)) {
		return("PEU_CSR_SER_CTL_REG");
	}
	if ((addr >= PEU_CSR_SER_ST_REG_ADDR) &&
	    (addr <  PEU_CSR_SER_ST_REG_ADDR + 
	             PEU_CSR_SER_ST_REG_STRIDE * 
	             PEU_CSR_SER_ST_REG_DEPTH)) {
		return("PEU_CSR_SER_ST_REG");
	}
	return("TSU_UNKNOWN_CSR");
}

#ifdef __cplusplus
}
#endif


#endif	/* _PSIF_FW_ADDR_H */
